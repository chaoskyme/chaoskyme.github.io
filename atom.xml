<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chaosky&#39;s Notes</title>
  <subtitle>Getting Real.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chaosky.me/"/>
  <updated>2016-11-04T01:06:04.000Z</updated>
  <id>http://chaosky.me/</id>
  
  <author>
    <name>Alex Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ARC 最佳实践（译文）</title>
    <link href="http://chaosky.me/2016/11/04/ARC-Best-Practices/"/>
    <id>http://chaosky.me/2016/11/04/ARC-Best-Practices/</id>
    <published>2016-11-04T01:06:04.000Z</published>
    <updated>2016-11-04T01:06:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<p>英文原文出处：<a href="http://amattn.com/p/arc_best_practices.html" target="_blank" rel="external">http://amattn.com/p/arc_best_practices.html</a></p>
<h2 id="一些可选背景故事："><a href="#一些可选背景故事：" class="headerlink" title="一些可选背景故事："></a>一些可选背景故事：</h2><ul>
<li>相关文档：<a href="https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html" target="_blank" rel="external">迁移至ARC版本说明</a></li>
<li>Mike Ash 在他的 <a href="http://www.mikeash.com/pyblog/friday-qa-2011-09-30-automatic-reference-counting.html" target="_blank" rel="external">Friday Q&amp;As</a> 也有一篇关于ARC的文章。</li>
<li>深入的技术文档在 LLVM 项目的 <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html" target="_blank" rel="external">CLANG 网站</a>上。</li>
</ul>
<p>假设你正在使用 iOS 5 或者更高版本，而不是 4。实际上，弱指针是 ARC 中的一个重要工具，所以我不建议在 iOS 4 中使用 ARC。</p>
<h2 id="更新注意事项"><a href="#更新注意事项" class="headerlink" title="更新注意事项"></a>更新注意事项</h2><p>这份文件自从2011年发布以来，一直在不断更新。最后一次微小的修订是在 2013年发布 iOS 7。</p>
<a id="more"></a>
<h2 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h2><ul>
<li><p>纯量类型属性应该使用 <strong>assign</strong>。</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">int</span> scalarInt;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> scalarFloat;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGPoint</span> scalarStruct;</div></pre></td></tr></table></figure>
</li>
<li><p>需要保留或者引用向下对象层次结构的对象属性应该使用 <strong>strong</strong>。</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> childObject;</div></pre></td></tr></table></figure>
</li>
<li><p>引用向上对象层次结构的对象属性应该使用 <strong>weak</strong>。此外，当引用委托对象时，<strong>weak</strong> 是最安全的。</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> parentObject;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">NSObject</span> &lt;SomeDelegate&gt; *delegate;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>Blocks</strong> 仍然应该使用 <strong>copy</strong>。</p>
  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">property</span><span class="title"> </span>(nonatomic, copy) SomeBlockType someBlock;</div></pre></td></tr></table></figure>
</li>
<li><p>在 <strong>dealloc</strong> 中：</p>
<ul>
<li>移除观察者</li>
<li>注销通知</li>
<li>设置所有不是 <strong>weak</strong> 的委托为 <strong>nil</strong></li>
<li>使所有定时器失效（译注：如果定时器是strong的属性，dealloc可能永远都不会被调用，所以定时器失效应该在ViewWillDisappear中完成）</li>
</ul>
</li>
<li><p><strong>IBOutlets</strong> 应该是 <strong>weak</strong>，除了顶层 <strong>IBOutlets</strong>是 <strong>strong</strong>。（译注：使用storyboard（xib不行）创建的vc，会有一个叫_topLevelObjectsToKeepAliveFromStoryboard的私有数组强引用所有top level的对象，所以这时即便outlet声明成weak也没关系）</p>
</li>
</ul>
<h2 id="桥接"><a href="#桥接" class="headerlink" title="桥接"></a>桥接</h2><p>官方文档：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> my_id;</div><div class="line"><span class="built_in">CFStringRef</span> my_cfref;</div><div class="line"><span class="built_in">NSString</span>   *a = (__bridge <span class="built_in">NSString</span>*)my_cfref;     <span class="comment">// Noop cast.</span></div><div class="line"><span class="built_in">CFStringRef</span> b = (__bridge <span class="built_in">CFStringRef</span>)my_id;      <span class="comment">// Noop cast.</span></div><div class="line"><span class="built_in">NSString</span>   *c = (__bridge_transfer <span class="built_in">NSString</span>*)my_cfref; <span class="comment">// -1 on the CFRef</span></div><div class="line"><span class="built_in">CFStringRef</span> d = (__bridge_retained <span class="built_in">CFStringRef</span>)my_id;  <span class="comment">// returned CFRef +1</span></div></pre></td></tr></table></figure>
<p>详细解释：</p>
<ul>
<li><strong>__bridge</strong> 对于内存管理是无操作的</li>
<li><strong>__bridge_transfer</strong> 用于转换 CFRef 为 Objective-C 对象。ARC 将减少 CFRef 的retain count，因此请确保 CFRef 具有+1 retain count。</li>
<li><strong>__bridge_retained</strong> 用于转换 Objective-C 对象为 CFRef。这将有效地给你返回一个 retain count +1的CFRef。 您有责任在未来某个时候调用 CFRef 的 CFRelease。</li>
</ul>
<h2 id="NSError"><a href="#NSError" class="headerlink" title="NSError"></a>NSError</h2><p>无处不在的 <strong>NSError</strong> 是有点棘手。典型的 Cocoa 约定是它们通过输出参数（也称为间接指针）实现。</p>
<p>在ARC中，输出参数默认是 <strong>__autoreleasing</strong>，应该这样实现:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)performWithError:(__autoreleasing <span class="built_in">NSError</span> **)error</div><div class="line">&#123;</div><div class="line">    <span class="comment">// ... some error occurs ...</span></div><div class="line">    <span class="keyword">if</span> (error)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// write to the out-parameter, ARC will autorelease it</span></div><div class="line">        *error = [[<span class="built_in">NSError</span> alloc] initWithDomain:<span class="string">@""</span> </div><div class="line">                                            code:<span class="number">-1</span> </div><div class="line">                                        userInfo:<span class="literal">nil</span>];</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当使用输出参数时，你应该在 <strong>*error</strong> 对象使用 <strong>__autoreleasing</strong>。</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSError __autoreleasing *<span class="built_in">error</span> = <span class="built_in">error</span>;</div><div class="line"><span class="keyword">BOOL</span> OK = [myObject performOperationWithError:&amp;<span class="built_in">error</span>];</div><div class="line"><span class="keyword">if</span> (!OK)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// handle the error.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你忘记 <strong>__autoreleasing</strong>，编译器将会简单地为你插入一个临时的中间自动释放对象。 这是在向后兼容性的压迫性制度下作出的妥协。我看到一些编译器配置不会自动使它们<strong>__autoreleasing</strong>。 对所有新代码包含 <strong>__autoreleasing</strong> 更安全的。</p>
<h2 id="autoreleasepool"><a href="#autoreleasepool" class="headerlink" title="@autoreleasepool"></a>@autoreleasepool</h2><p>使用 <strong>@autoreleasepool</strong> 内部循环：</p>
<ul>
<li>迭代很多，很多次</li>
<li>创建大量的临时对象</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If someArray is huge</span></div><div class="line"><span class="selector-tag">for</span> (id obj in someArray)</div><div class="line">&#123;</div><div class="line">    <span class="variable">@autoreleasepool</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// or you are creating lots </span></div><div class="line">        <span class="comment">// of temporary objects here...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 <strong>@autoreleasepool</strong> 指令创建和销毁自动释放池比蓝灯特价(译注：blue light special是沃尔玛的一个购物区域)还便宜。不要担心在循环中这样做。如果你超偏执，至少先检查profiler。</p>
<h2 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h2><p>一般来说，<strong>blocks</strong> 都能使用。但是有一些例外。</p>
<p>当将 <strong>block</strong> 指针添加到集合时，你首先得复制它们。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">someBlockType someBlock = ^&#123;NSLog(@<span class="string">"hi"</span>)<span class="comment">;&#125;;</span></div><div class="line">[someArray <span class="keyword">addObject:[someBlock </span>copy]]<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><strong>blocks</strong> 的循环引用有些危险。你可能看到过这个警告：</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">warning: capturing <span class="string">'self'</span> strongly <span class="keyword">in</span> <span class="keyword">this</span> </div><div class="line">block <span class="keyword">is</span> likely <span class="keyword">to</span> lead <span class="keyword">to</span> a retain cycle </div><div class="line">[-Warc-retain-cycles,<span class="number">4</span>]</div><div class="line"></div><div class="line">SomeBlockType someBlock = ^&#123;</div><div class="line">    [self someMethod];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>原因是 <strong>someBlock</strong> 被 self 强引用，并且当 <strong>block</strong> 拷贝到堆中时将捕获并且 retain  <strong>self</strong>。</p>
<p>使用任何实例变量也将捕获父对象，同样有不太明显的潜在循环引用：</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The following block will retain "self"</span></div><div class="line">SomeBlockType someBlock = ^&#123;</div><div class="line">    BOOL isDone = _isDone;  <span class="comment">// _isDone is an ivar of self</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>更安全，但令人愉快的解决办法是使用 <strong>weakSelf</strong>：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">__<span class="keyword">weak</span> SomeObjectClass *weakSelf = <span class="keyword">self</span>;</div><div class="line"></div><div class="line">SomeBlockType someBlock = ^&#123;</div><div class="line">    SomeObjectClass *strongSelf = weakSelf;</div><div class="line">    <span class="keyword">if</span> (strongSelf == <span class="literal">nil</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// The original self doesn't exist anymore.</span></div><div class="line">        <span class="comment">// Ignore, notify or otherwise handle this case.</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        [strongSelf someMethod];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>有时，你需要注意避免使用任意对象的循环引用：如果 <strong>someObject</strong> 强引用 <strong>someObject</strong> 的 <strong>block</strong>，你需要使用 <strong>weakSomeObject</strong> 打破循环引用。</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">SomeObjectClass *<span class="attr">someObject</span> = ...</div><div class="line">__weak SomeObjectClass *<span class="attr">weakSomeObject</span> = someObject;</div><div class="line"></div><div class="line">someObject.<span class="attr">completionHandler</span> = ^&#123;</div><div class="line">    SomeObjectClass *<span class="attr">strongSomeObject</span> = weakSomeObject;</div><div class="line">    <span class="keyword">if</span> (<span class="attr">strongSomeObject</span> == nil)</div><div class="line">    &#123;</div><div class="line">        // The original someObject doesn't exist anymore.</div><div class="line">        // Ignore, notify <span class="literal">or</span> otherwise handle this case.</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        // okay, NOW we can do something <span class="keyword">with</span> someObject</div><div class="line">        [strongSomeObject someMethod];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="从NS对象或者UI对象访问CGRef"><a href="#从NS对象或者UI对象访问CGRef" class="headerlink" title="从NS对象或者UI对象访问CGRef"></a>从NS对象或者UI对象访问CGRef</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIColor</span> *redColor = [<span class="built_in">UIColor</span> redColor]; </div><div class="line"><span class="built_in">CGColorRef</span> redRef = redColor.CGColor;</div><div class="line"><span class="comment">// do some stuff with redRef.</span></div></pre></td></tr></table></figure>
<p>上面的例子有一些非常微妙的问题。当你创建 <strong>redRef</strong>，如果 <strong>redColor</strong> 不再使用，那么<strong>redColor</strong> 就在注释代码之后被销毁。</p>
<p>问题是 <strong>redColor</strong> 持有 <strong>redRef</strong>，并且当访问 <strong>redRef</strong>，它可能或者可能不再是 <strong>colorRef</strong>。更糟的是，这种类型的错误很少出现在模拟器上。当在较低工作内存的设备（比如：早期的iPad）上使用时，更有可能发生。</p>
<p>有几个解决办法。基本上都是当你在使用 <strong>redRef</strong> 时，保证 <strong>redColor</strong> 不会被释放。</p>
<p>一种非常简单的实现就是使用 <strong>__autoreleasing</strong>。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIColor</span> * __autoreleasing redColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line"><span class="built_in">CGColorRef</span> redRef = redColor.CGColor;</div></pre></td></tr></table></figure>
<p>现在，<strong>redColor</strong> 不会被销毁，直到方法返回后某个不确定的时间，都能很好地使用。 我们可以安全地在方法的作用域使用 <strong>redRef</strong>。</p>
<p>另一个方法是 retain <strong>redRef</strong>：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIColor</span> *redColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line"><span class="built_in">CGColorRef</span> redRef = <span class="built_in">CFRetain</span>(redColor.CGColor);</div><div class="line"><span class="comment">// use redRef and when done release it:</span></div><div class="line"><span class="built_in">CFRelease</span>(redRef);</div></pre></td></tr></table></figure>
<p>重要提示：你需要 在使用<strong>redColor.CGColor</strong> 的同一行使用 <strong>CFRetain()</strong>。<strong>redColor</strong> 在上次使用之后有效地被破坏。以下方式不会有用：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIColor</span> *redColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line"><span class="built_in">CGColorRef</span> redRef = redColor.CGColor; <span class="comment">// redColor is released right after this...</span></div><div class="line"><span class="built_in">CFRetain</span>(redRef);  <span class="comment">// This may crash...</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>上面标有“This may crash”一行是一个有趣的注释。再次，我的经验里在模拟器上它不会经常崩溃，但在实际的iOS设备上100%崩溃。开发者请注意。</p>
<p>The Big Nerd Ranch 对这个问题有非常深入的探讨: <a href="http://weblog.bignerdranch.com/?p=296" target="_blank" rel="external">http://weblog.bignerdranch.com/?p=296</a></p>
<h2 id="Singletons"><a href="#Singletons" class="headerlink" title="Singletons"></a>Singletons</h2><p>仅仅偶然地与ARC有关。本地生成的单例实现是一种激增。（许多不必要的重写 retain 和 release）</p>
<p>这些都应该被替换为以下代码：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+ (MyClass *)singleton</div><div class="line">&#123;</div><div class="line">    static MyClass *<span class="keyword">sharedMyClass </span>= nil<span class="comment">;</span></div><div class="line">    static <span class="keyword">dispatch_once_t </span>once = <span class="number">0</span><span class="comment">;</span></div><div class="line">    <span class="keyword">dispatch_once(&amp;once, </span>^&#123;<span class="keyword">sharedMyClass </span>= [[self alloc] init]<span class="comment">;&#125;);</span></div><div class="line">    return <span class="keyword">sharedMyClass;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每一次你需要销毁单例的能力。如果你使用这个除了 UnitTests，你可能不再使用单例。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// declare the static variable outside of the singleton method</span></div><div class="line"><span class="keyword">static</span> MyClass *__sharedMyClass = <span class="literal">nil</span>;</div><div class="line"></div><div class="line">+ (MyClass *)singleton</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> once = <span class="number">0</span>;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;once, ^&#123;__sharedMyClass = [[<span class="keyword">self</span> alloc] init];&#125;);</div><div class="line">    <span class="keyword">return</span> __sharedMyClass;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// For use by test frameworks only!</span></div><div class="line">- (<span class="keyword">void</span>)destroyAndRecreateSingleton</div><div class="line">&#123;</div><div class="line">    __sharedMyClass = [[<span class="keyword">self</span> alloc] init];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="译者后记"><a href="#译者后记" class="headerlink" title="译者后记"></a>译者后记</h2><p>第一次翻译，请大家多多指教。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;英文原文出处：&lt;a href=&quot;http://amattn.com/p/arc_best_practices.html&quot;&gt;http://amattn.com/p/arc_best_practices.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一些可选背景故事：&quot;&gt;&lt;a href=&quot;#一些可选背景故事：&quot; class=&quot;headerlink&quot; title=&quot;一些可选背景故事：&quot;&gt;&lt;/a&gt;一些可选背景故事：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;相关文档：&lt;a href=&quot;https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html&quot;&gt;迁移至ARC版本说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mike Ash 在他的 &lt;a href=&quot;http://www.mikeash.com/pyblog/friday-qa-2011-09-30-automatic-reference-counting.html&quot;&gt;Friday Q&amp;amp;As&lt;/a&gt; 也有一篇关于ARC的文章。&lt;/li&gt;
&lt;li&gt;深入的技术文档在 LLVM 项目的 &lt;a href=&quot;http://clang.llvm.org/docs/AutomaticReferenceCounting.html&quot;&gt;CLANG 网站&lt;/a&gt;上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设你正在使用 iOS 5 或者更高版本，而不是 4。实际上，弱指针是 ARC 中的一个重要工具，所以我不建议在 iOS 4 中使用 ARC。&lt;/p&gt;
&lt;h2 id=&quot;更新注意事项&quot;&gt;&lt;a href=&quot;#更新注意事项&quot; class=&quot;headerlink&quot; title=&quot;更新注意事项&quot;&gt;&lt;/a&gt;更新注意事项&lt;/h2&gt;&lt;p&gt;这份文件自从2011年发布以来，一直在不断更新。最后一次微小的修订是在 2013年发布 iOS 7。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="ARC" scheme="http://chaosky.me/tags/ARC/"/>
    
      <category term="译文" scheme="http://chaosky.me/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Xcode Snippets（代码片段）</title>
    <link href="http://chaosky.me/2016/10/31/Xcode-Snippets/"/>
    <id>http://chaosky.me/2016/10/31/Xcode-Snippets/</id>
    <published>2016-10-31T03:35:24.000Z</published>
    <updated>2016-10-31T03:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<p>关于 <strong>Xcode Snippets</strong> 的介绍，可以通过<a href="http://nshipster.cn/xcode-snippets/" target="_blank" rel="external">这篇文章</a>了解，以及如何生成自定义的代码片段。</p>
<h2 id="安装-NShipster-提供的代码片段"><a href="#安装-NShipster-提供的代码片段" class="headerlink" title="安装 NShipster 提供的代码片段"></a>安装 NShipster 提供的代码片段</h2><p>仓库地址：<a href="https://github.com/Xcode-Snippets" target="_blank" rel="external">https://github.com/Xcode-Snippets</a></p>
<ol>
<li>安装命令行工具：<code>gem install xcodesnippet</code></li>
<li>下载代码仓库：<code>git clone https://github.com/Xcode-Snippets/Objective-C.git</code></li>
<li>进入该目录添加单条代码片段：<code>xcodesnippet install path/to/source.m</code></li>
<li>该目录下有很多代码片段，可以通过命令批量添加：<code>ls -1 | xargs -L1 xcodesnippet install</code></li>
</ol>
<h2 id="安装唐巧提供的代码片段"><a href="#安装唐巧提供的代码片段" class="headerlink" title="安装唐巧提供的代码片段"></a>安装唐巧提供的代码片段</h2><p>仓库地址：<a href="https://github.com/tangqiaoboy/xcode_tool" target="_blank" rel="external">https://github.com/tangqiaoboy/xcode_tool</a></p>
<ol>
<li>下载项目仓库：<code>git clone https://github.com/tangqiaoboy/xcode_tool</code></li>
<li><code>cd xcode_tool</code></li>
<li><code>./setup_snippets.sh</code></li>
</ol>
<p>需要注意的是唐巧提供的代码片段，以后需要更新时可以直接仓库即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于 &lt;strong&gt;Xcode Snippets&lt;/strong&gt; 的介绍，可以通过&lt;a href=&quot;http://nshipster.cn/xcode-snippets/&quot; target=&quot;_blank&quot; rel
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Tools" scheme="http://chaosky.me/tags/Tools/"/>
    
      <category term="Xcode" scheme="http://chaosky.me/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Swizzle</title>
    <link href="http://chaosky.me/2016/10/26/Objective-C-Swizzle/"/>
    <id>http://chaosky.me/2016/10/26/Objective-C-Swizzle/</id>
    <published>2016-10-26T13:05:50.000Z</published>
    <updated>2016-10-26T13:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<p>Swizzle 是 Objective-C 运行时的黑魔法之一。我们可以通过 Swizzle 的手段，在运行时对某些方法的实现进行替换，这是 Objective-C 甚至说 Cocoa 开发中最为华丽，同时也是最为危险的技巧之一。Swizzle 使用了 Objective-C 的动态派发，对于 NSObject 的子类是可以直接使用的。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><script src="https://gist.github.com/chaoskyme/4758787cda11d473c2abdf3ef5c63d67.js"></script>

<h2 id="示例demo"><a href="#示例demo" class="headerlink" title="示例demo"></a>示例demo</h2><p>demo 中实现了通过 Swizzle 的方式统计应用内所有按钮的点击次数。</p>
<p>代码下载地址：<a href="https://github.com/chaoskyme/Demo/tree/master/SwizzleDemo" target="_blank" rel="external">https://github.com/chaoskyme/Demo/tree/master/SwizzleDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Swizzle 是 Objective-C 运行时的黑魔法之一。我们可以通过 Swizzle 的手段，在运行时对某些方法的实现进行替换，这是 Objective-C 甚至说 Cocoa 开发中最为华丽，同时也是最为危
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://chaosky.me/tags/Objective-C/"/>
    
      <category term="Swizzle" scheme="http://chaosky.me/tags/Swizzle/"/>
    
  </entry>
  
  <entry>
    <title>地下城堡2：黑暗觉醒</title>
    <link href="http://chaosky.me/2016/10/24/dungeon2/"/>
    <id>http://chaosky.me/2016/10/24/dungeon2/</id>
    <published>2016-10-24T08:20:17.000Z</published>
    <updated>2016-10-24T08:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<h2 id="地下城堡2：黑暗觉醒转职一览表"><a href="#地下城堡2：黑暗觉醒转职一览表" class="headerlink" title="地下城堡2：黑暗觉醒转职一览表"></a>地下城堡2：黑暗觉醒转职一览表</h2><p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-10-24-地下城堡2：黑暗觉醒转职一览表.png" alt="地下城堡2：黑暗觉醒转职一览表"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;地下城堡2：黑暗觉醒转职一览表&quot;&gt;&lt;a href=&quot;#地下城堡2：黑暗觉醒转职一览表&quot; class=&quot;headerlink&quot; title=&quot;地下城堡2：黑暗觉醒转职一览表&quot;&gt;&lt;/a&gt;地下城堡2：黑暗觉醒转职
    
    </summary>
    
      <category term="Game" scheme="http://chaosky.me/categories/Game/"/>
    
    
      <category term="地下城堡2" scheme="http://chaosky.me/tags/%E5%9C%B0%E4%B8%8B%E5%9F%8E%E5%A0%A12/"/>
    
  </entry>
  
  <entry>
    <title>越狱检测</title>
    <link href="http://chaosky.me/2016/10/12/Check-Jailbroken/"/>
    <id>http://chaosky.me/2016/10/12/Check-Jailbroken/</id>
    <published>2016-10-12T03:53:53.000Z</published>
    <updated>2016-10-12T03:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<script src="https://gist.github.com/chaoskyme/12d9b72b65f55d0faf7d9690fa1a71b1.js"></script>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/chaoskyme/12d9b72b65f55d0faf7d9690fa1a71b1.js&quot;&gt;&lt;/script&gt;



    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="iOS逆向" scheme="http://chaosky.me/tags/iOS%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>持续集成</title>
    <link href="http://chaosky.me/2016/09/26/Continuous-Integration/"/>
    <id>http://chaosky.me/2016/09/26/Continuous-Integration/</id>
    <published>2016-09-26T15:00:51.000Z</published>
    <updated>2016-09-26T15:00:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<p>持续集成主要有两大好处：一是省去手动构建部署的繁琐，二是每一个提交都有自动跑测试保证质量。</p>
<p>本文主要介绍两大持续集成工具：TravisCI 和 Jenkins。</p>
<h2 id="TravisCI"><a href="#TravisCI" class="headerlink" title="TravisCI"></a>TravisCI</h2><p>Travis CI 可以和 Github 无缝集成，每次push都可以触发相应的操作，跑测试、自动部署都能完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;持续集成主要有两大好处：一是省去手动构建部署的繁琐，二是每一个提交都有自动跑测试保证质量。&lt;/p&gt;
&lt;p&gt;本文主要介绍两大持续集成工具：TravisCI 和 Jenkins。&lt;/p&gt;
&lt;h2 id=&quot;TravisCI
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单例类</title>
    <link href="http://chaosky.me/2016/09/24/Singteton-Class/"/>
    <id>http://chaosky.me/2016/09/24/Singteton-Class/</id>
    <published>2016-09-24T12:09:24.000Z</published>
    <updated>2016-09-24T12:09:24.000Z</updated>
    
    <content type="html"><![CDATA[<script src="https://gist.github.com/chaoskyme/23a6095423494752f3bee55c114a2a97.js"></script>

]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;https://gist.github.com/chaoskyme/23a6095423494752f3bee55c114a2a97.js&quot;&gt;&lt;/script&gt;


    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="单例" scheme="http://chaosky.me/tags/%E5%8D%95%E4%BE%8B/"/>
    
      <category term="Singteton Class" scheme="http://chaosky.me/tags/Singteton-Class/"/>
    
      <category term="Code" scheme="http://chaosky.me/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>我关注的公众号</title>
    <link href="http://chaosky.me/2016/09/21/Official-Accounts/"/>
    <id>http://chaosky.me/2016/09/21/Official-Accounts/</id>
    <published>2016-09-21T07:47:09.000Z</published>
    <updated>2016-09-21T07:47:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<ul>
<li>2016.09.21 更新微信公众号</li>
</ul>
<h2 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><h4 id="iOS开发"><a href="#iOS开发" class="headerlink" title="iOS开发"></a>iOS开发</h4><p>微信号：iOSDevTip</p>
<p>功能介绍：最新iOS、iPhone资讯，万名iOS开发者、swift开发、果粉聚集，参与技术讨论，整理开发技巧，分享创业经验！享受生活、热爱编程！</p>
<h4 id="CocoaChina"><a href="#CocoaChina" class="headerlink" title="CocoaChina"></a>CocoaChina</h4><p>微信号: cocoachinabbs</p>
<p>功能介绍: CocoaChina苹果开发中文社区官方微信，提供教程资源、app推广营销、招聘、外包及培训信息、各类沙龙交流活动以及更多开发者服务。</p>
<h4 id="Crossin的编程教室"><a href="#Crossin的编程教室" class="headerlink" title="Crossin的编程教室"></a>Crossin的编程教室</h4><p>微信号: crossincode</p>
<p>功能介绍: 每天5分钟，学点简单的编程，用新的思维方式看世界。</p>
<h4 id="待字闺中"><a href="#待字闺中" class="headerlink" title="待字闺中"></a>待字闺中</h4><p>微信号: daiziguizhongren</p>
<p>功能介绍: 深度分析大数据、深度学习、人工智能等技术，切中实际应用场景，为大家授业解惑。间或，也会介绍国内外相关领域有趣的面试题。</p>
<h4 id="程序人生"><a href="#程序人生" class="headerlink" title="程序人生"></a>程序人生</h4><p>微信号: programmer_life</p>
<p>功能介绍: 十年漫漫程序人生，打过各种杂，也做过让我骄傲的软件；管理过十多人的团队，还带领一班兄弟姐妹创过业。关注程序人生，了解程序猿，学做程序猿，让我们的人生不再屌丝化。</p>
<h4 id="唐巧——iOS开发"><a href="#唐巧——iOS开发" class="headerlink" title="唐巧——iOS开发"></a>唐巧——iOS开发</h4><p>微信号: iosDevTips</p>
<p>功能介绍: 我叫唐巧，InfoQ 编辑，《iOS开发进阶》作者，现在在猿题库创业。本账号主要分享我精选的 iOS 开发文章和一些创业感悟。</p>
<h4 id="利器"><a href="#利器" class="headerlink" title="利器"></a>利器</h4><p>微信号：liqiio</p>
<p>功能介绍：创造者和他们的工具.</p>
<h4 id="论码农的自我修养"><a href="#论码农的自我修养" class="headerlink" title="论码农的自我修养"></a>论码农的自我修养</h4><p>微信号：bit_tiger</p>
<p>功能介绍：“有趣,有用,有效”.刷项目,做实战,捅破技术的那层纸.</p>
<h4 id="Pinapps"><a href="#Pinapps" class="headerlink" title="Pinapps"></a>Pinapps</h4><p>微信号：Pinapps</p>
<p>功能介绍：我推荐的不仅是apps,更是一种态度!</p>
<h4 id="ThoughtWorks"><a href="#ThoughtWorks" class="headerlink" title="ThoughtWorks"></a>ThoughtWorks</h4><p>微信号：ThoughtWorks</p>
<p>功能介绍：最新技术雷达/各类技术干货/精选职位招聘/精彩活动预告/经典案例故事,就在ThoughtWorks.</p>
<h3 id="人文"><a href="#人文" class="headerlink" title="人文"></a>人文</h3><h4 id="不止读书"><a href="#不止读书" class="headerlink" title="不止读书"></a>不止读书</h4><p>微信号: buzhidushu</p>
<p>功能介绍: 不止读书，读书不止。推荐好书。</p>
<h4 id="伯乐在线"><a href="#伯乐在线" class="headerlink" title="伯乐在线"></a>伯乐在线</h4><p>微信号: jobbole</p>
<p>功能介绍：关注职业资讯；学习各类职业感悟、心得和经验分享，扩大职业视野；体会求职、工作和创业的历程 - 就在JobBole.com 伯乐在线</p>
<h4 id="槽边往事"><a href="#槽边往事" class="headerlink" title="槽边往事"></a>槽边往事</h4><p>微信号: bitsea</p>
<p>功能介绍: 和菜头的微信Blog，用于分享各种新鲜资讯</p>
<h4 id="鬼脚七"><a href="#鬼脚七" class="headerlink" title="鬼脚七"></a>鬼脚七</h4><p>微信号: taobaoguijiaoqi</p>
<p>功能介绍: 鬼脚七，真名文德，自媒体人。做自己，爱生活！</p>
<h4 id="懒人在思考"><a href="#懒人在思考" class="headerlink" title="懒人在思考"></a>懒人在思考</h4><p>微信号：lazy-thought</p>
<p>功能介绍：以黑客那种邪气看待世界.而你,务必保持自己的独立思维. By 余弦</p>
<h4 id="老鹰说"><a href="#老鹰说" class="headerlink" title="老鹰说"></a>老鹰说</h4><p>微信号：joeytalks</p>
<p>功能介绍：创业就是典当灵魂,成功者才能将灵魂赎回.老鹰在这里与你分享赎回灵魂路上的点点滴滴.</p>
<h4 id="连岳"><a href="#连岳" class="headerlink" title="连岳"></a>连岳</h4><p>微信号：ilianyue</p>
<p>功能介绍：连岳文字，当今中国最活跃的专栏作家之一,著名专栏《我爱问连岳》</p>
<h4 id="罗辑思维"><a href="#罗辑思维" class="headerlink" title="罗辑思维"></a>罗辑思维</h4><p>微信号：luojisw</p>
<p>功能介绍：罗胖每天早上60秒语音,用文字回复语音中的关键词可阅读文章.</p>
<h4 id="MacTalk"><a href="#MacTalk" class="headerlink" title="MacTalk"></a>MacTalk</h4><p>微信号：sagacity-mac</p>
<p>功能介绍：MacTalk 开通于2012年末,内容起于 Mac 而不止 Mac,内容覆盖了技术、创业、产品和人文思考.文风有趣,又有一点力量.相关图书《MacTalk·人生元编程》《MacTalk·跨越边界》</p>
<h4 id="厉哥——虚拟机"><a href="#厉哥——虚拟机" class="headerlink" title="厉哥——虚拟机"></a>厉哥——虚拟机</h4><p>微信号：mintshow</p>
<p>功能介绍：毫无悬念最值得关注的账号.世界上牛人有无数,而厉哥只有一个.</p>
<h4 id="三表龙门阵"><a href="#三表龙门阵" class="headerlink" title="三表龙门阵"></a>三表龙门阵</h4><p>微信号：sanbiao1984</p>
<p>功能介绍：负责吐槽一切!互联网大喷壶,大嘴善喷喷天下可喷之事!</p>
<h4 id="神秘的程序员们"><a href="#神秘的程序员们" class="headerlink" title="神秘的程序员们"></a>神秘的程序员们</h4><p>微信号：coderstory</p>
<p>功能介绍：作为一个程序员星人,在地球上工作生活时,你是否会感到孤独呢? 这里有来自程序员母星的亲切问候和地球漫游指南.国内首部以程序员文化、技术主题、项目管理及互联网创业的为主题漫画,诞生于09年.主创:西乔、…</p>
<h4 id="Tiny4Voice"><a href="#Tiny4Voice" class="headerlink" title="Tiny4Voice"></a>Tiny4Voice</h4><p>微信号：tiny4voice</p>
<p>功能介绍：一天一条来自 Tinyfool 的语音鸡汤,暖胃暖心,让我们一起在漫漫长夜里面默默前行,在死之前,没有终点,不会停歇.</p>
<h4 id="图灵访谈"><a href="#图灵访谈" class="headerlink" title="图灵访谈"></a>图灵访谈</h4><p>微信号：ituring_interview</p>
<p>功能介绍：对话国外知名技术作者,讲述国内码农精彩人生.你听得见他们,他们也听得见你.</p>
<h4 id="图灵教育"><a href="#图灵教育" class="headerlink" title="图灵教育"></a>图灵教育</h4><p>微信号：turingbooks</p>
<p>功能介绍：是好书,把我们联系在一起</p>
<h4 id="歪理邪说"><a href="#歪理邪说" class="headerlink" title="歪理邪说"></a>歪理邪说</h4><p>微信号：wxieshuo</p>
<p>功能介绍：一切关于未来的故事在实现之前都是歪理邪说.</p>
<h4 id="我和世界之间"><a href="#我和世界之间" class="headerlink" title="我和世界之间"></a>我和世界之间</h4><p>微信号：between_world_and_me</p>
<p>功能介绍：更有品位 · 更有智慧 Better Taste · Wiser Life</p>
<h4 id="小道消息"><a href="#小道消息" class="headerlink" title="小道消息"></a>小道消息</h4><p>微信号：WebNotes</p>
<p>功能介绍：在这里,我想为你呈现一副中国互联网的清明上河图.冯大辉,丁香园技术产品负责人.</p>
<h4 id="余晟以为"><a href="#余晟以为" class="headerlink" title="余晟以为"></a>余晟以为</h4><p>微信号：yurii-says</p>
<p>功能介绍：我是这么以为的,当然你也可以那么以为</p>
<h3 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h3><h4 id="桂辉最久"><a href="#桂辉最久" class="headerlink" title="桂辉最久"></a>桂辉最久</h4><p>微信号: queendrunk</p>
<p>功能介绍: 原创+精选的科技类账号，干货分享TMT领域的行业热点、产品设计、大数据、市场趋势、商业模式、创业的深度分析和经典案例。第一大自媒体联盟WeMedia成员。</p>
<h4 id="InfoQ"><a href="#InfoQ" class="headerlink" title="InfoQ"></a>InfoQ</h4><p>微信号: infoqchina</p>
<p>功能介绍: 有内容的技术社区媒体</p>
<h4 id="极客公园"><a href="#极客公园" class="headerlink" title="极客公园"></a>极客公园</h4><p>微信号: geekpark</p>
<p>功能介绍: 科技创新者的大本营。汇聚优秀的产品报道、评测视频和高质量的线下活动。</p>
<h4 id="极客邦科技Geekbang"><a href="#极客邦科技Geekbang" class="headerlink" title="极客邦科技Geekbang"></a>极客邦科技Geekbang</h4><p>微信号: geekbang01</p>
<p>功能介绍: 极客邦科技是一家IT技术学习服务综合提供商，使命是帮助技术人和企业成长，旗下运营InfoQ技术媒体、EGO社交网络、StuQ在线教育、GIT企业培训等四大业务品牌，通过帮助技术人成长来推动企业发展。</p>
<h4 id="可能吧"><a href="#可能吧" class="headerlink" title="可能吧"></a>可能吧</h4><p>微信号: knbknb</p>
<p>功能介绍: 「可能吧」是一个诞生于2007年的博客，在2009年获得搜狐 IT 新闻奖、2010年获得德国之声最佳中文博客奖之后，因为众所周知的原因无法在中国访问。现在，它以另一种姿态存在。「可能吧」更新频率不高，文章一般不怎么客观，请谨慎关注。</p>
<h4 id="PingWest中文网"><a href="#PingWest中文网" class="headerlink" title="PingWest中文网"></a>PingWest中文网</h4><p>微信号：wepingwest</p>
<p>功能介绍：有品好玩的科技,一切与你有关。科技博客PingWest中文网(pingwest.com)</p>
<h4 id="商业价值"><a href="#商业价值" class="headerlink" title="商业价值"></a>商业价值</h4><p>微信号：bvmagazine</p>
<p>功能介绍：中国最好的技术商业杂志,关注更创新,更智慧,更可持续的商业,专为变革者打造.</p>
<h4 id="深圳湾"><a href="#深圳湾" class="headerlink" title="深圳湾"></a>深圳湾</h4><p>微信号：shenzhenware</p>
<p>功能介绍：深圳湾(ShenzhenWare)关注软件、硬件、以及软硬结合的生态系统.</p>
<h4 id="100offer说"><a href="#100offer说" class="headerlink" title="100offer说"></a>100offer说</h4><p>微信号：shuo100offer</p>
<p>功能介绍：有关互联网人才流动和发展,我们触摸得到真实客观的跳槽数据,我们感受得到有血有肉的故事.我们在观察,我们也在思考,我们在这里「说」</p>
<h4 id="36氪"><a href="#36氪" class="headerlink" title="36氪"></a>36氪</h4><p>微信号：wow36kr</p>
<p>功能介绍：36氪(36kr.com)是中国最具影响力的互联网创投媒体,提供最新锐最具深度的商业报道.我们强调趋势与价值,我们的slogan是:让一部分人先看到未来.</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2016.09.21 更新微信公众号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;微信公众号&quot;&gt;&lt;a href=&quot;#微信公众号&quot; class=&quot;headerlink&quot; title=&quot;微信公众号&quot;&gt;&lt;/a&gt;微信公众号&lt;/h2&gt;&lt;h3 id=&quot;技术&quot;&gt;&lt;a href=&quot;#技术&quot; class=&quot;headerlink&quot; title=&quot;技术&quot;&gt;&lt;/a&gt;技术&lt;/h3&gt;&lt;h4 id=&quot;iOS开发&quot;&gt;&lt;a href=&quot;#iOS开发&quot; class=&quot;headerlink&quot; title=&quot;iOS开发&quot;&gt;&lt;/a&gt;iOS开发&lt;/h4&gt;&lt;p&gt;微信号：iOSDevTip&lt;/p&gt;
&lt;p&gt;功能介绍：最新iOS、iPhone资讯，万名iOS开发者、swift开发、果粉聚集，参与技术讨论，整理开发技巧，分享创业经验！享受生活、热爱编程！&lt;/p&gt;
&lt;h4 id=&quot;CocoaChina&quot;&gt;&lt;a href=&quot;#CocoaChina&quot; class=&quot;headerlink&quot; title=&quot;CocoaChina&quot;&gt;&lt;/a&gt;CocoaChina&lt;/h4&gt;&lt;p&gt;微信号: cocoachinabbs&lt;/p&gt;
&lt;p&gt;功能介绍: CocoaChina苹果开发中文社区官方微信，提供教程资源、app推广营销、招聘、外包及培训信息、各类沙龙交流活动以及更多开发者服务。&lt;/p&gt;
&lt;h4 id=&quot;Crossin的编程教室&quot;&gt;&lt;a href=&quot;#Crossin的编程教室&quot; class=&quot;headerlink&quot; title=&quot;Crossin的编程教室&quot;&gt;&lt;/a&gt;Crossin的编程教室&lt;/h4&gt;&lt;p&gt;微信号: crossincode&lt;/p&gt;
&lt;p&gt;功能介绍: 每天5分钟，学点简单的编程，用新的思维方式看世界。&lt;/p&gt;
&lt;h4 id=&quot;待字闺中&quot;&gt;&lt;a href=&quot;#待字闺中&quot; class=&quot;headerlink&quot; title=&quot;待字闺中&quot;&gt;&lt;/a&gt;待字闺中&lt;/h4&gt;&lt;p&gt;微信号: daiziguizhongren&lt;/p&gt;
&lt;p&gt;功能介绍: 深度分析大数据、深度学习、人工智能等技术，切中实际应用场景，为大家授业解惑。间或，也会介绍国内外相关领域有趣的面试题。&lt;/p&gt;
&lt;h4 id=&quot;程序人生&quot;&gt;&lt;a href=&quot;#程序人生&quot; class=&quot;headerlink&quot; title=&quot;程序人生&quot;&gt;&lt;/a&gt;程序人生&lt;/h4&gt;&lt;p&gt;微信号: programmer_life&lt;/p&gt;
&lt;p&gt;功能介绍: 十年漫漫程序人生，打过各种杂，也做过让我骄傲的软件；管理过十多人的团队，还带领一班兄弟姐妹创过业。关注程序人生，了解程序猿，学做程序猿，让我们的人生不再屌丝化。&lt;/p&gt;
&lt;h4 id=&quot;唐巧——iOS开发&quot;&gt;&lt;a href=&quot;#唐巧——iOS开发&quot; class=&quot;headerlink&quot; title=&quot;唐巧——iOS开发&quot;&gt;&lt;/a&gt;唐巧——iOS开发&lt;/h4&gt;&lt;p&gt;微信号: iosDevTips&lt;/p&gt;
&lt;p&gt;功能介绍: 我叫唐巧，InfoQ 编辑，《iOS开发进阶》作者，现在在猿题库创业。本账号主要分享我精选的 iOS 开发文章和一些创业感悟。&lt;/p&gt;
&lt;h4 id=&quot;利器&quot;&gt;&lt;a href=&quot;#利器&quot; class=&quot;headerlink&quot; title=&quot;利器&quot;&gt;&lt;/a&gt;利器&lt;/h4&gt;&lt;p&gt;微信号：liqiio&lt;/p&gt;
&lt;p&gt;功能介绍：创造者和他们的工具.&lt;/p&gt;
&lt;h4 id=&quot;论码农的自我修养&quot;&gt;&lt;a href=&quot;#论码农的自我修养&quot; class=&quot;headerlink&quot; title=&quot;论码农的自我修养&quot;&gt;&lt;/a&gt;论码农的自我修养&lt;/h4&gt;&lt;p&gt;微信号：bit_tiger&lt;/p&gt;
&lt;p&gt;功能介绍：“有趣,有用,有效”.刷项目,做实战,捅破技术的那层纸.&lt;/p&gt;
&lt;h4 id=&quot;Pinapps&quot;&gt;&lt;a href=&quot;#Pinapps&quot; class=&quot;headerlink&quot; title=&quot;Pinapps&quot;&gt;&lt;/a&gt;Pinapps&lt;/h4&gt;&lt;p&gt;微信号：Pinapps&lt;/p&gt;
&lt;p&gt;功能介绍：我推荐的不仅是apps,更是一种态度!&lt;/p&gt;
&lt;h4 id=&quot;ThoughtWorks&quot;&gt;&lt;a href=&quot;#ThoughtWorks&quot; class=&quot;headerlink&quot; title=&quot;ThoughtWorks&quot;&gt;&lt;/a&gt;ThoughtWorks&lt;/h4&gt;&lt;p&gt;微信号：ThoughtWorks&lt;/p&gt;
&lt;p&gt;功能介绍：最新技术雷达/各类技术干货/精选职位招聘/精彩活动预告/经典案例故事,就在ThoughtWorks.&lt;/p&gt;
&lt;h3 id=&quot;人文&quot;&gt;&lt;a href=&quot;#人文&quot; class=&quot;headerlink&quot; title=&quot;人文&quot;&gt;&lt;/a&gt;人文&lt;/h3&gt;&lt;h4 id=&quot;不止读书&quot;&gt;&lt;a href=&quot;#不止读书&quot; class=&quot;headerlink&quot; title=&quot;不止读书&quot;&gt;&lt;/a&gt;不止读书&lt;/h4&gt;&lt;p&gt;微信号: buzhidushu&lt;/p&gt;
&lt;p&gt;功能介绍: 不止读书，读书不止。推荐好书。&lt;/p&gt;
&lt;h4 id=&quot;伯乐在线&quot;&gt;&lt;a href=&quot;#伯乐在线&quot; class=&quot;headerlink&quot; title=&quot;伯乐在线&quot;&gt;&lt;/a&gt;伯乐在线&lt;/h4&gt;&lt;p&gt;微信号: jobbole&lt;/p&gt;
&lt;p&gt;功能介绍：关注职业资讯；学习各类职业感悟、心得和经验分享，扩大职业视野；体会求职、工作和创业的历程 - 就在JobBole.com 伯乐在线&lt;/p&gt;
&lt;h4 id=&quot;槽边往事&quot;&gt;&lt;a href=&quot;#槽边往事&quot; class=&quot;headerlink&quot; title=&quot;槽边往事&quot;&gt;&lt;/a&gt;槽边往事&lt;/h4&gt;&lt;p&gt;微信号: bitsea&lt;/p&gt;
&lt;p&gt;功能介绍: 和菜头的微信Blog，用于分享各种新鲜资讯&lt;/p&gt;
&lt;h4 id=&quot;鬼脚七&quot;&gt;&lt;a href=&quot;#鬼脚七&quot; class=&quot;headerlink&quot; title=&quot;鬼脚七&quot;&gt;&lt;/a&gt;鬼脚七&lt;/h4&gt;&lt;p&gt;微信号: taobaoguijiaoqi&lt;/p&gt;
&lt;p&gt;功能介绍: 鬼脚七，真名文德，自媒体人。做自己，爱生活！&lt;/p&gt;
&lt;h4 id=&quot;懒人在思考&quot;&gt;&lt;a href=&quot;#懒人在思考&quot; class=&quot;headerlink&quot; title=&quot;懒人在思考&quot;&gt;&lt;/a&gt;懒人在思考&lt;/h4&gt;&lt;p&gt;微信号：lazy-thought&lt;/p&gt;
&lt;p&gt;功能介绍：以黑客那种邪气看待世界.而你,务必保持自己的独立思维. By 余弦&lt;/p&gt;
&lt;h4 id=&quot;老鹰说&quot;&gt;&lt;a href=&quot;#老鹰说&quot; class=&quot;headerlink&quot; title=&quot;老鹰说&quot;&gt;&lt;/a&gt;老鹰说&lt;/h4&gt;&lt;p&gt;微信号：joeytalks&lt;/p&gt;
&lt;p&gt;功能介绍：创业就是典当灵魂,成功者才能将灵魂赎回.老鹰在这里与你分享赎回灵魂路上的点点滴滴.&lt;/p&gt;
&lt;h4 id=&quot;连岳&quot;&gt;&lt;a href=&quot;#连岳&quot; class=&quot;headerlink&quot; title=&quot;连岳&quot;&gt;&lt;/a&gt;连岳&lt;/h4&gt;&lt;p&gt;微信号：ilianyue&lt;/p&gt;
&lt;p&gt;功能介绍：连岳文字，当今中国最活跃的专栏作家之一,著名专栏《我爱问连岳》&lt;/p&gt;
&lt;h4 id=&quot;罗辑思维&quot;&gt;&lt;a href=&quot;#罗辑思维&quot; class=&quot;headerlink&quot; title=&quot;罗辑思维&quot;&gt;&lt;/a&gt;罗辑思维&lt;/h4&gt;&lt;p&gt;微信号：luojisw&lt;/p&gt;
&lt;p&gt;功能介绍：罗胖每天早上60秒语音,用文字回复语音中的关键词可阅读文章.&lt;/p&gt;
&lt;h4 id=&quot;MacTalk&quot;&gt;&lt;a href=&quot;#MacTalk&quot; class=&quot;headerlink&quot; title=&quot;MacTalk&quot;&gt;&lt;/a&gt;MacTalk&lt;/h4&gt;&lt;p&gt;微信号：sagacity-mac&lt;/p&gt;
&lt;p&gt;功能介绍：MacTalk 开通于2012年末,内容起于 Mac 而不止 Mac,内容覆盖了技术、创业、产品和人文思考.文风有趣,又有一点力量.相关图书《MacTalk·人生元编程》《MacTalk·跨越边界》&lt;/p&gt;
&lt;h4 id=&quot;厉哥——虚拟机&quot;&gt;&lt;a href=&quot;#厉哥——虚拟机&quot; class=&quot;headerlink&quot; title=&quot;厉哥——虚拟机&quot;&gt;&lt;/a&gt;厉哥——虚拟机&lt;/h4&gt;&lt;p&gt;微信号：mintshow&lt;/p&gt;
&lt;p&gt;功能介绍：毫无悬念最值得关注的账号.世界上牛人有无数,而厉哥只有一个.&lt;/p&gt;
&lt;h4 id=&quot;三表龙门阵&quot;&gt;&lt;a href=&quot;#三表龙门阵&quot; class=&quot;headerlink&quot; title=&quot;三表龙门阵&quot;&gt;&lt;/a&gt;三表龙门阵&lt;/h4&gt;&lt;p&gt;微信号：sanbiao1984&lt;/p&gt;
&lt;p&gt;功能介绍：负责吐槽一切!互联网大喷壶,大嘴善喷喷天下可喷之事!&lt;/p&gt;
&lt;h4 id=&quot;神秘的程序员们&quot;&gt;&lt;a href=&quot;#神秘的程序员们&quot; class=&quot;headerlink&quot; title=&quot;神秘的程序员们&quot;&gt;&lt;/a&gt;神秘的程序员们&lt;/h4&gt;&lt;p&gt;微信号：coderstory&lt;/p&gt;
&lt;p&gt;功能介绍：作为一个程序员星人,在地球上工作生活时,你是否会感到孤独呢? 这里有来自程序员母星的亲切问候和地球漫游指南.国内首部以程序员文化、技术主题、项目管理及互联网创业的为主题漫画,诞生于09年.主创:西乔、…&lt;/p&gt;
&lt;h4 id=&quot;Tiny4Voice&quot;&gt;&lt;a href=&quot;#Tiny4Voice&quot; class=&quot;headerlink&quot; title=&quot;Tiny4Voice&quot;&gt;&lt;/a&gt;Tiny4Voice&lt;/h4&gt;&lt;p&gt;微信号：tiny4voice&lt;/p&gt;
&lt;p&gt;功能介绍：一天一条来自 Tinyfool 的语音鸡汤,暖胃暖心,让我们一起在漫漫长夜里面默默前行,在死之前,没有终点,不会停歇.&lt;/p&gt;
&lt;h4 id=&quot;图灵访谈&quot;&gt;&lt;a href=&quot;#图灵访谈&quot; class=&quot;headerlink&quot; title=&quot;图灵访谈&quot;&gt;&lt;/a&gt;图灵访谈&lt;/h4&gt;&lt;p&gt;微信号：ituring_interview&lt;/p&gt;
&lt;p&gt;功能介绍：对话国外知名技术作者,讲述国内码农精彩人生.你听得见他们,他们也听得见你.&lt;/p&gt;
&lt;h4 id=&quot;图灵教育&quot;&gt;&lt;a href=&quot;#图灵教育&quot; class=&quot;headerlink&quot; title=&quot;图灵教育&quot;&gt;&lt;/a&gt;图灵教育&lt;/h4&gt;&lt;p&gt;微信号：turingbooks&lt;/p&gt;
&lt;p&gt;功能介绍：是好书,把我们联系在一起&lt;/p&gt;
&lt;h4 id=&quot;歪理邪说&quot;&gt;&lt;a href=&quot;#歪理邪说&quot; class=&quot;headerlink&quot; title=&quot;歪理邪说&quot;&gt;&lt;/a&gt;歪理邪说&lt;/h4&gt;&lt;p&gt;微信号：wxieshuo&lt;/p&gt;
&lt;p&gt;功能介绍：一切关于未来的故事在实现之前都是歪理邪说.&lt;/p&gt;
&lt;h4 id=&quot;我和世界之间&quot;&gt;&lt;a href=&quot;#我和世界之间&quot; class=&quot;headerlink&quot; title=&quot;我和世界之间&quot;&gt;&lt;/a&gt;我和世界之间&lt;/h4&gt;&lt;p&gt;微信号：between_world_and_me&lt;/p&gt;
&lt;p&gt;功能介绍：更有品位 · 更有智慧 Better Taste · Wiser Life&lt;/p&gt;
&lt;h4 id=&quot;小道消息&quot;&gt;&lt;a href=&quot;#小道消息&quot; class=&quot;headerlink&quot; title=&quot;小道消息&quot;&gt;&lt;/a&gt;小道消息&lt;/h4&gt;&lt;p&gt;微信号：WebNotes&lt;/p&gt;
&lt;p&gt;功能介绍：在这里,我想为你呈现一副中国互联网的清明上河图.冯大辉,丁香园技术产品负责人.&lt;/p&gt;
&lt;h4 id=&quot;余晟以为&quot;&gt;&lt;a href=&quot;#余晟以为&quot; class=&quot;headerlink&quot; title=&quot;余晟以为&quot;&gt;&lt;/a&gt;余晟以为&lt;/h4&gt;&lt;p&gt;微信号：yurii-says&lt;/p&gt;
&lt;p&gt;功能介绍：我是这么以为的,当然你也可以那么以为&lt;/p&gt;
&lt;h3 id=&quot;资讯&quot;&gt;&lt;a href=&quot;#资讯&quot; class=&quot;headerlink&quot; title=&quot;资讯&quot;&gt;&lt;/a&gt;资讯&lt;/h3&gt;&lt;h4 id=&quot;桂辉最久&quot;&gt;&lt;a href=&quot;#桂辉最久&quot; class=&quot;headerlink&quot; title=&quot;桂辉最久&quot;&gt;&lt;/a&gt;桂辉最久&lt;/h4&gt;&lt;p&gt;微信号: queendrunk&lt;/p&gt;
&lt;p&gt;功能介绍: 原创+精选的科技类账号，干货分享TMT领域的行业热点、产品设计、大数据、市场趋势、商业模式、创业的深度分析和经典案例。第一大自媒体联盟WeMedia成员。&lt;/p&gt;
&lt;h4 id=&quot;InfoQ&quot;&gt;&lt;a href=&quot;#InfoQ&quot; class=&quot;headerlink&quot; title=&quot;InfoQ&quot;&gt;&lt;/a&gt;InfoQ&lt;/h4&gt;&lt;p&gt;微信号: infoqchina&lt;/p&gt;
&lt;p&gt;功能介绍: 有内容的技术社区媒体&lt;/p&gt;
&lt;h4 id=&quot;极客公园&quot;&gt;&lt;a href=&quot;#极客公园&quot; class=&quot;headerlink&quot; title=&quot;极客公园&quot;&gt;&lt;/a&gt;极客公园&lt;/h4&gt;&lt;p&gt;微信号: geekpark&lt;/p&gt;
&lt;p&gt;功能介绍: 科技创新者的大本营。汇聚优秀的产品报道、评测视频和高质量的线下活动。&lt;/p&gt;
&lt;h4 id=&quot;极客邦科技Geekbang&quot;&gt;&lt;a href=&quot;#极客邦科技Geekbang&quot; class=&quot;headerlink&quot; title=&quot;极客邦科技Geekbang&quot;&gt;&lt;/a&gt;极客邦科技Geekbang&lt;/h4&gt;&lt;p&gt;微信号: geekbang01&lt;/p&gt;
&lt;p&gt;功能介绍: 极客邦科技是一家IT技术学习服务综合提供商，使命是帮助技术人和企业成长，旗下运营InfoQ技术媒体、EGO社交网络、StuQ在线教育、GIT企业培训等四大业务品牌，通过帮助技术人成长来推动企业发展。&lt;/p&gt;
&lt;h4 id=&quot;可能吧&quot;&gt;&lt;a href=&quot;#可能吧&quot; class=&quot;headerlink&quot; title=&quot;可能吧&quot;&gt;&lt;/a&gt;可能吧&lt;/h4&gt;&lt;p&gt;微信号: knbknb&lt;/p&gt;
&lt;p&gt;功能介绍: 「可能吧」是一个诞生于2007年的博客，在2009年获得搜狐 IT 新闻奖、2010年获得德国之声最佳中文博客奖之后，因为众所周知的原因无法在中国访问。现在，它以另一种姿态存在。「可能吧」更新频率不高，文章一般不怎么客观，请谨慎关注。&lt;/p&gt;
&lt;h4 id=&quot;PingWest中文网&quot;&gt;&lt;a href=&quot;#PingWest中文网&quot; class=&quot;headerlink&quot; title=&quot;PingWest中文网&quot;&gt;&lt;/a&gt;PingWest中文网&lt;/h4&gt;&lt;p&gt;微信号：wepingwest&lt;/p&gt;
&lt;p&gt;功能介绍：有品好玩的科技,一切与你有关。科技博客PingWest中文网(pingwest.com)&lt;/p&gt;
&lt;h4 id=&quot;商业价值&quot;&gt;&lt;a href=&quot;#商业价值&quot; class=&quot;headerlink&quot; title=&quot;商业价值&quot;&gt;&lt;/a&gt;商业价值&lt;/h4&gt;&lt;p&gt;微信号：bvmagazine&lt;/p&gt;
&lt;p&gt;功能介绍：中国最好的技术商业杂志,关注更创新,更智慧,更可持续的商业,专为变革者打造.&lt;/p&gt;
&lt;h4 id=&quot;深圳湾&quot;&gt;&lt;a href=&quot;#深圳湾&quot; class=&quot;headerlink&quot; title=&quot;深圳湾&quot;&gt;&lt;/a&gt;深圳湾&lt;/h4&gt;&lt;p&gt;微信号：shenzhenware&lt;/p&gt;
&lt;p&gt;功能介绍：深圳湾(ShenzhenWare)关注软件、硬件、以及软硬结合的生态系统.&lt;/p&gt;
&lt;h4 id=&quot;100offer说&quot;&gt;&lt;a href=&quot;#100offer说&quot; class=&quot;headerlink&quot; title=&quot;100offer说&quot;&gt;&lt;/a&gt;100offer说&lt;/h4&gt;&lt;p&gt;微信号：shuo100offer&lt;/p&gt;
&lt;p&gt;功能介绍：有关互联网人才流动和发展,我们触摸得到真实客观的跳槽数据,我们感受得到有血有肉的故事.我们在观察,我们也在思考,我们在这里「说」&lt;/p&gt;
&lt;h4 id=&quot;36氪&quot;&gt;&lt;a href=&quot;#36氪&quot; class=&quot;headerlink&quot; title=&quot;36氪&quot;&gt;&lt;/a&gt;36氪&lt;/h4&gt;&lt;p&gt;微信号：wow36kr&lt;/p&gt;
&lt;p&gt;功能介绍：36氪(36kr.com)是中国最具影响力的互联网创投媒体,提供最新锐最具深度的商业报道.我们强调趋势与价值,我们的slogan是:让一部分人先看到未来.&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://chaosky.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="公众号" scheme="http://chaosky.me/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="微信" scheme="http://chaosky.me/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>第三方登录和分享常见问题集锦</title>
    <link href="http://chaosky.me/2016/09/09/SNS-Platform/"/>
    <id>http://chaosky.me/2016/09/09/SNS-Platform/</id>
    <published>2016-09-09T09:17:36.000Z</published>
    <updated>2016-09-09T09:17:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<h2 id="新浪微博"><a href="#新浪微博" class="headerlink" title="新浪微博"></a>新浪微博</h2><h3 id="iOS-sso-package-or-sign-error"><a href="#iOS-sso-package-or-sign-error" class="headerlink" title="iOS sso package or sign error"></a>iOS sso package or sign error</h3><p>出现这个问题是因为在新浪微博开放平台上申请的应用的<code>Bundle ID</code>和你项目的<code>Bundle ID</code>不一致或者未设置。  </p>
<p>解决方法：更改新浪微博开发平台上应用的<code>Bundle ID</code></p>
<h3 id="error-redirect-uri-mismatch"><a href="#error-redirect-uri-mismatch" class="headerlink" title="error:redirect_uri_mismatch"></a>error:redirect_uri_mismatch</h3><p>在程序中设置的<code>Redirect URL</code>和新浪微博开放平台申请的应用的<code>授权回调页</code>URL不一致。</p>
<p>解决方法：在新浪微博开放平台 ——&gt; 应用信息 ——&gt; 高级信息 ——&gt; OAuth2.0 授权设置 ——&gt; 授权回调页，设置和程序的<code>Redirect URL</code>一致。</p>
<h3 id="新浪微博登录授权失败，responseCode等于5051"><a href="#新浪微博登录授权失败，responseCode等于5051" class="headerlink" title="新浪微博登录授权失败，responseCode等于5051"></a>新浪微博登录授权失败，responseCode等于5051</h3><p>在项目中集成友盟第三方登录，新浪微博登录，登录授权失败，返回状态码为5051（获取账户失败）。</p>
<p>原因：App在测试阶段(未上线)，授权的微博账号和开通开放平台的微博账号不是同一账号。</p>
<p>解决办法：在新浪微博开放平台中，选择我的应用——对应应用——应用信息——测试信息，选择编辑，添加测试账号。</p>
<h2 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h2><h3 id="scope参数错误或没有scope权限"><a href="#scope参数错误或没有scope权限" class="headerlink" title="scope参数错误或没有scope权限"></a>scope参数错误或没有scope权限</h3><ol>
<li>没有相关的权限</li>
<li>账号没有认证，没有相关的权限</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;新浪微博&quot;&gt;&lt;a href=&quot;#新浪微博&quot; class=&quot;headerlink&quot; title=&quot;新浪微博&quot;&gt;&lt;/a&gt;新浪微博&lt;/h2&gt;&lt;h3 id=&quot;iOS-sso-package-or-sign-erro
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="SNS" scheme="http://chaosky.me/tags/SNS/"/>
    
      <category term="第三方分享" scheme="http://chaosky.me/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%88%86%E4%BA%AB/"/>
    
      <category term="第三方登录" scheme="http://chaosky.me/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Unix 编程艺术</title>
    <link href="http://chaosky.me/2016/09/05/Unix-Art/"/>
    <id>http://chaosky.me/2016/09/05/Unix-Art/</id>
    <published>2016-09-05T07:55:51.000Z</published>
    <updated>2016-09-05T07:55:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>《Unix 编程艺术》：这本书在模块化、文本化、配置、接口、复杂度、优化、可移植性等方面，都提供了Unix/Linux世界所积累的宝贵经验。好的程序可以经受时间、平台与用户的考验，好的编程思想可以经受实践的检验。</p>
<blockquote>
<p>读书笔记摘录自 《Unix 编程艺术》</p>
</blockquote>
<h2 id="Unix-设计原则"><a href="#Unix-设计原则" class="headerlink" title="Unix 设计原则"></a>Unix 设计原则</h2><p>所有的 Unix 哲学浓缩为一条铁律，『KISS』原则：Keep It Simple, Stupid!</p>
<a id="more"></a>
<h3 id="Unix-管道的发明人、Unix-传统的奠基人之一-Doug-Mcllroy"><a href="#Unix-管道的发明人、Unix-传统的奠基人之一-Doug-Mcllroy" class="headerlink" title="Unix 管道的发明人、Unix 传统的奠基人之一 Doug Mcllroy"></a>Unix 管道的发明人、Unix 传统的奠基人之一 Doug Mcllroy</h3><ol>
<li>让每个程序就做好一件事。如果有新任务，就重新开始，不要往原程序中加入新功能而搞得复杂。</li>
<li>假定每个程序的输出都会成为另一个程序的输入，哪怕那个程序还是未知的。输出中不要有无关的信息干扰。避免使用严格的分栏格式和二进制格式输入。不要坚持使用交互式输入。</li>
<li>尽可能早地将设计和编译的软件投入试用，哪怕是操作系统也不例外，理想情况下，应该是在几星期内。对拙劣的代码别犹豫，扔掉重写。</li>
<li>优先使用工具而不是拙劣的帮助来减轻编程任务的负担。工欲善其事必先利其器。</li>
</ol>
<p>一个程序只做一件事，并做好。程序要能协作。程序要能处理文本流，因为这是最通用的接口。</p>
<h3 id="最伟大的C语言大师之一-Rob-Pike"><a href="#最伟大的C语言大师之一-Rob-Pike" class="headerlink" title="最伟大的C语言大师之一 Rob Pike"></a>最伟大的C语言大师之一 Rob Pike</h3><ol>
<li>你无法断定程序会在什么地方耗费运行时间。瓶颈经常出现在想不到的地方，所以别急于胡乱找个地方改代码，除非你已经证实那儿就是瓶颈所在。</li>
<li>估量。在你没对代码进行估量，特别是没找到最耗时的那部分之前，别去优化速度。</li>
<li>花哨的算法在 n 很小时通常很慢，而 n 通常很小。花哨算法的常数复杂度很大。除非你确定 n 总是很大，否则不要用花哨算法（即使 n 很大，也优先考虑原则2）。</li>
<li><p>花哨的算法比简单算法更容易出 bug，更难实现。尽量使用简单的算法配合简单的数据结构。</p>
<blockquote>
<p>拿不准就穷举。</p>
</blockquote>
</li>
<li><p>数据压倒一切。如果已经选择了正确的数据结构并且把一切都组织得井井有条，正确的算法也就不言自明。编程的核心是数据结构，而不是算法。</p>
<blockquote>
<p>给我看流程图而不让我看数据表，我仍会迷茫不解；如果给我看数据表，通常就不需要流程图了；数据表是够说明问题了。</p>
</blockquote>
</li>
</ol>
<h3 id="Unix-哲学"><a href="#Unix-哲学" class="headerlink" title="Unix 哲学"></a>Unix 哲学</h3><h4 id="模块原则：使用简洁的接口拼合简单的部件"><a href="#模块原则：使用简洁的接口拼合简单的部件" class="headerlink" title="模块原则：使用简洁的接口拼合简单的部件"></a>模块原则：使用简洁的接口拼合简单的部件</h4><p>计算机编程的本质就是控制复杂度。</p>
<p>要编制复杂软件而又不至于一败涂地的唯一方法就是降低其整体复杂度——用清晰的接口把若干简单的模块组合成一个复杂软件。如此一来，多数问题只会局限于某个局部，那么就还有希望对局部进行改进而不至牵动全身。</p>
<h4 id="清晰原则：清晰胜于机巧"><a href="#清晰原则：清晰胜于机巧" class="headerlink" title="清晰原则：清晰胜于机巧"></a>清晰原则：清晰胜于机巧</h4><p>在写程序时，要想到你不是写给执行代码的计算机看的，而是给人——将来阅读维护源码的人，包括你自己——看的。</p>
<p>在选择算法和实现时就应该考虑到将来的可扩展性。而为了取得程序一丁点的性能提升就大幅度增加技术的复杂度和晦涩性，这个买卖做不得——这不仅仅是因为复杂的代码容易滋生 bug，也因为它会使日后的阅读和维护工作更加艰难。</p>
<p>相反，优雅而清晰的代码不仅不容易崩溃——而且更易于让后来的修改者立刻理解。</p>
<p>永远不要去吃力地解读语段晦涩的代码三次。</p>
<h4 id="组合原则：设计时考虑拼接组合"><a href="#组合原则：设计时考虑拼接组合" class="headerlink" title="组合原则：设计时考虑拼接组合"></a>组合原则：设计时考虑拼接组合</h4><p>如果程序彼此之间不能有效通信，那么软件就难免会陷入复杂度的泥淖。</p>
<p>在输入输出方面，Unix 传统极力提倡采用简单、文本化、面向流、设备无关的格式。文本刘界面的简洁性加强了工具的封装性。</p>
<p>要想让程序具有组合性，就要使程序彼此独立。在文本流这一端的程序应该尽可能不要考虑文本流另一端的程序。将一端的程序替换为另一个截然不同的程序，而完全不惊扰另一端应该很容易做到。</p>
<p>当程序无法自然地使用序列化、协议形式的接口时，正确的 Unix 设计至少是，把尽可能多的编程元素组织为一套定义良好的 API。这样，至少你可以通过链接调用应用程序，或者可以根据不同任务的需求粘合使用不同的接口。</p>
<h4 id="分离原则：策略同机制分离，接口同引擎分离"><a href="#分离原则：策略同机制分离，接口同引擎分离" class="headerlink" title="分离原则：策略同机制分离，接口同引擎分离"></a>分离原则：策略同机制分离，接口同引擎分离</h4><p>实行机制，而不是策略。因为策略和机制是按照不同的时间尺度变化的，策略的变化要远远快于机制。GUI 工具包的观感时尚来去匆匆，而光栅操作和组合却是永恒的。</p>
<h4 id="简洁原则：设计要简洁，复杂度能低则低"><a href="#简洁原则：设计要简洁，复杂度能低则低" class="headerlink" title="简洁原则：设计要简洁，复杂度能低则低"></a>简洁原则：设计要简洁，复杂度能低则低</h4><p>简洁而漂亮。总是设法将程序系统分解为几个能够协作的小部分，并本能地抵制任何用过多噱头来粉饰程序的企图。</p>
<h4 id="吝啬原则：除非确无他法，不要编写庞大的程序"><a href="#吝啬原则：除非确无他法，不要编写庞大的程序" class="headerlink" title="吝啬原则：除非确无他法，不要编写庞大的程序"></a>吝啬原则：除非确无他法，不要编写庞大的程序</h4><p>『大』有两重含义：体积大，复杂程度高。程序大了，维护起来就困难。</p>
<h4 id="透明性原则：设计要可见，以便审查和调试"><a href="#透明性原则：设计要可见，以便审查和调试" class="headerlink" title="透明性原则：设计要可见，以便审查和调试"></a>透明性原则：设计要可见，以便审查和调试</h4><p>因为调试通常会占用四分之三甚至更多的开发时间，所有一开始就多做点工作以减少日后调试的工作量会很划算。一个特别有效的减少调试工作量的方法就是设计时充分考虑透明性和显见性。</p>
<p>软件系统的透明性是指你一眼就能看出软件是在做什么以及怎么做的。显见性指程序带有监视和显示内部状态的功能，这样程序不仅能够运行良好，而且还可以看得出它以何种方式运行。</p>
<p>程序如果要展示其正确性，应该使用足够简单的输入输出格式，这样才能保证很容易地检验有效输入和正确输出之间的关系是否正确。</p>
<p>出于充分考虑透明性和显见性的目的，还应该提倡接口简洁，以方便其他程序对其进行操作——尤其是测试监视工具和调试脚本。</p>
<h4 id="健壮原则：健壮源于透明与简洁"><a href="#健壮原则：健壮源于透明与简洁" class="headerlink" title="健壮原则：健壮源于透明与简洁"></a>健壮原则：健壮源于透明与简洁</h4><p>软件的健壮性指软件不仅能在正常情况下运行良好，而且在超出设计者设想的意外条件下也能够运行良好。</p>
<p>让程序健壮的方法，就是让程序的内部逻辑更易于理解。要做到这一点主要两种方法：透明化和简洁化。</p>
<p>在有异常输入的情况下，保证软件健壮性的一个相当重要的策略就是避免在代码中出现特例。bug 通常隐藏在处理特例的代码以及处理不同特殊情况的交互操作部分的代码中。</p>
<p>模块性（代码简朴，接口简洁）是组织程序以达到更简洁目的的一个方法。</p>
<h4 id="表示原则：把知识叠入数据以求逻辑质朴而健壮"><a href="#表示原则：把知识叠入数据以求逻辑质朴而健壮" class="headerlink" title="表示原则：把知识叠入数据以求逻辑质朴而健壮"></a>表示原则：把知识叠入数据以求逻辑质朴而健壮</h4><p>即使最简单的程序逻辑让人类来验证也很困难，但是就算是很复杂的数据，对人类来说，还是相对容易地就能够推导和建模的。</p>
<p>数据要比编程逻辑更容易驾驭。所以接下来，如果要在复杂数据和复杂代码中选择一个，宁愿选择前者。更进一步：在设计中，你应该主动将代码的复杂度转移到数据之中去。</p>
<p>特别是 C 语言对指针使用控制的功能，促进了在内核以上各个编码层面上对动态修改引用结构。在结构中用非常简单的指针操作就能够完成的任务，在其他语言中，往往不得不用更复杂的过程才能完成。</p>
<h4 id="通俗原则：接口设计避免标新立异"><a href="#通俗原则：接口设计避免标新立异" class="headerlink" title="通俗原则：接口设计避免标新立异"></a>通俗原则：接口设计避免标新立异</h4><p>也就是众所周知的『最少惊奇原则』。</p>
<p>最易用的程序就是用户需要学习新东西最少的程序——或者，换句话说，最易用的程序就是最切合用户已有知识的程序。</p>
<p>接口设计应该避免毫无来由的标新立异和自作聪明；关注目标受众，对于不同的人群，最少惊奇的意义也不同；关注传统惯例，Unix 世界形成了一套系统的惯例，这些惯例的存在有个极好的理由：缓和学习曲线。</p>
<h4 id="缄默原则：如果一个程序没什么好说的，就保持沉默"><a href="#缄默原则：如果一个程序没什么好说的，就保持沉默" class="headerlink" title="缄默原则：如果一个程序没什么好说的，就保持沉默"></a>缄默原则：如果一个程序没什么好说的，就保持沉默</h4><p>Unix 中最古老最持久的设计原则之一就是：若程序没有什么特别之处可讲，就保持沉默。行为良好的程序应该默默工作，决不唠唠叨叨，碍手碍脚。沉默是金。</p>
<p>设计良好的程序将用户的注意力视为有限的宝贵资源，只有在必要时才要求使用。</p>
<h4 id="补救原则：出现异常时，马上退出并给出足量错误信息"><a href="#补救原则：出现异常时，马上退出并给出足量错误信息" class="headerlink" title="补救原则：出现异常时，马上退出并给出足量错误信息"></a>补救原则：出现异常时，马上退出并给出足量错误信息</h4><p>软件在发生错误的时候也应该与在正常操作的情况下一样，有透明的逻辑。最理想的情况当然是软件能够适应和应付非正常操作；而如果补救措施明明没有成功，却悄无声息地埋下崩溃的隐患，直到很久以后才显现出来，这就是最坏的一种情况。</p>
<p>因此，软件要尽可能从容地应付各种错误输入和自身的运行错误。但是，如果做不到这一点，就让程序尽可能以一种容易诊断错误的方式终止。</p>
<h4 id="经济原则：宁花机器一分，不花程序员一秒"><a href="#经济原则：宁花机器一分，不花程序员一秒" class="headerlink" title="经济原则：宁花机器一分，不花程序员一秒"></a>经济原则：宁花机器一分，不花程序员一秒</h4><h4 id="生成原则：避免手工-hack，尽量编写程序去生成程序"><a href="#生成原则：避免手工-hack，尽量编写程序去生成程序" class="headerlink" title="生成原则：避免手工 hack，尽量编写程序去生成程序"></a>生成原则：避免手工 hack，尽量编写程序去生成程序</h4><p>程序中的任何手工 hacking 都是滋生错误和延误的温床。程序规格越简单抽象，设计者就越容易做对。有程序生成代码几乎（在各个层次）总是比手写代码廉价并且更值得信赖。</p>
<h4 id="优化原则：雕琢前先得有原型，跑之前先学会走"><a href="#优化原则：雕琢前先得有原型，跑之前先学会走" class="headerlink" title="优化原则：雕琢前先得有原型，跑之前先学会走"></a>优化原则：雕琢前先得有原型，跑之前先学会走</h4><p>原型设计最基本的原则：『90%的功能现在能实现，比100%的功能永远实现不了强』。做好原型设计可以帮助你避免为蝇头小利而投入过多的时间。</p>
<p>过早的优化是万恶之源。</p>
<p>还不知道瓶颈所在就匆忙进行优化，这可能是唯一一个比乱加功能更损害设计的错误。从畸形的代码到杂乱无章的数据布局，牺牲透明性和简洁性而片面追求速度、内存或者磁盘使用的后果随处可见。滋生无数 bug，耗费以百万计的人时——这点芝麻大的好处，远不能抵消后续排错所付出的代价。</p>
<p>先制作原型，在精雕细琢。优化之前先确保能用。</p>
<p>先求运行，再求正确，最后求快。</p>
<p>先给你的设计做个未优化的、运行缓慢、很耗内存但是正确的实现，然后进行系统地调整，寻找那些可以通过牺牲最小的局部简洁性而获得较大性能提升的地方。</p>
<p>制作原型对于系统设计和优化同样重要——比起阅读一个冗长的规格说明，判断一个原型究竟是不是符合设想要容易得多。借助原型化找出哪些功能不必实现，有助于对性能进行优化；那些不用写的代码显然无需优化。</p>
<h4 id="多样原则：绝不相信所谓『不二法门』的断言"><a href="#多样原则：绝不相信所谓『不二法门』的断言" class="headerlink" title="多样原则：绝不相信所谓『不二法门』的断言"></a>多样原则：绝不相信所谓『不二法门』的断言</h4><p>即使最出色的软件也常常会受限于设计者的想象力。没有人能聪明到把所有东西都最优化，也不可能预想到软件所有可能的用途。设计一个僵化、封闭、不愿与外界沟通的软件，简直就是一种病态的傲慢。</p>
<p>Unix 奉行的是广泛采用多种语言、开放的可扩展系统和用户定制机制。</p>
<h4 id="扩展原则：设计着眼未来，未来总比预想快"><a href="#扩展原则：设计着眼未来，未来总比预想快" class="headerlink" title="扩展原则：设计着眼未来，未来总比预想快"></a>扩展原则：设计着眼未来，未来总比预想快</h4><p>为数据格式和代码留下扩展的空间，否则，就会发现自己常常被原先的不明智选择捆住了手脚，因为你无法既要改变他们又要维持对原来的兼容性。</p>
<p>设计协议或者文件格式时，应使其具有充分的自描述性以便可以扩展。</p>
<p>设计代码时，要有很好的组织，让将来的开发者增加新功能时无需拆毁或者重建整个架构。</p>
<h3 id="运用-Unix-哲学"><a href="#运用-Unix-哲学" class="headerlink" title="运用 Unix 哲学"></a>运用 Unix 哲学</h3><p>要良好的运用 Unix 哲学，你就应该不断追求卓越。你必须相信，软件设计时一门技艺，值得你付出所有的智慧、创造力和激情。否则，你的视线就不会超越哪些简单、老套的设计和实现：你就会在应该思考的时候急急忙忙跑去编程。你就会在该无情删繁就简的时候反而把问题复杂化——然后你还会反过来奇怪你的代码怎么会那么臃肿、那么难以调试，</p>
<p>要良好地运用 Unix 哲学，你应该珍惜你的时间绝不浪费。一旦某人已经解决了某个问题，就直接拿来利用，不要让骄傲或偏见拽住你又去重做一遍。永远不要蛮干：要多用巧劲，省下力气到需要的时候在用，好钢用在刀刃上。善用工具，尽可能将一切都自动化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Unix 编程艺术》：这本书在模块化、文本化、配置、接口、复杂度、优化、可移植性等方面，都提供了Unix/Linux世界所积累的宝贵经验。好的程序可以经受时间、平台与用户的考验，好的编程思想可以经受实践的检验。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;读书笔记摘录自 《Unix 编程艺术》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Unix-设计原则&quot;&gt;&lt;a href=&quot;#Unix-设计原则&quot; class=&quot;headerlink&quot; title=&quot;Unix 设计原则&quot;&gt;&lt;/a&gt;Unix 设计原则&lt;/h2&gt;&lt;p&gt;所有的 Unix 哲学浓缩为一条铁律，『KISS』原则：Keep It Simple, Stupid!&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://chaosky.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Unix 编程艺术" scheme="http://chaosky.me/tags/Unix-%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>设计灵感 —— 寻找素材</title>
    <link href="http://chaosky.me/2016/08/05/Design-Inspiration/"/>
    <id>http://chaosky.me/2016/08/05/Design-Inspiration/</id>
    <published>2016-08-05T01:19:13.000Z</published>
    <updated>2016-09-26T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于设计而言，除了基本的理论，积累大量素材更为重要。</p>
<p>当积累了大量设计语言，以及元素的组合方式后，融合你生活中对美好设计的体验，属于你自己的优秀设计也便会自然诞生。</p>
<a id="more"></a>
<h2 id="Dribbble"><a href="#Dribbble" class="headerlink" title="Dribbble"></a><a href="https://dribbble.com" target="_blank" rel="external">Dribbble</a></h2><p>Dribbble是在设计师中非常流行的一个分享设计的社区。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_2.png" alt="Snip20160805_2"></p>
<h2 id="Behance"><a href="#Behance" class="headerlink" title="Behance"></a><a href="https://www.behance.net" target="_blank" rel="external">Behance</a></h2><p>Behance这个社区更为专业，里面的作品完成度都非常高，覆盖的范围也更加广泛。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_3.png" alt="Snip20160805_3"></p>
<h2 id="Siiimple"><a href="#Siiimple" class="headerlink" title="Siiimple"></a><a href="http://siiimple.com" target="_blank" rel="external">Siiimple</a></h2><p>这是一个专门收集极简主义网站设计的网站，筛选的作品都很独特并且具有启发性。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_4.png" alt="Snip20160805_4"></p>
<h2 id="Reeoo"><a href="#Reeoo" class="headerlink" title="Reeoo"></a><a href="http://reeoo.com" target="_blank" rel="external">Reeoo</a></h2><p>Reeoo也是一个专门收集优秀网页设计网站，提供了详细的分类目录，从App，艺术，卡通到摄影，体育一应俱全，还可以根据颜色的主题筛选。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_6.png" alt="Snip20160805_6"></p>
<h2 id="Land-Book"><a href="#Land-Book" class="headerlink" title="Land Book"></a><a href="http://land-book.com" target="_blank" rel="external">Land Book</a></h2><p>LandBook 专门收集了优秀的landing page页面，品类齐全，值得时不时地看一看。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_8.png" alt="Snip20160805_8"></p>
<h2 id="Call-to-idea"><a href="#Call-to-idea" class="headerlink" title="Call to idea"></a><a href="http://www.calltoidea.com" target="_blank" rel="external">Call to idea</a></h2><p>Call to idea 是一个以类别为线索收集各种设计的网站，专业、精美，是激发灵感的好地方。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_9.png" alt="Snip20160805_9"></p>
<h2 id="Designer-News"><a href="#Designer-News" class="headerlink" title="Designer News"></a><a href="https://www.designernews.co" target="_blank" rel="external">Designer News</a></h2><p>Designer News 是全世界最热闹的设计师的资讯社区，新的设计想法，新的产品，都会在这里进行讨论。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_10.png" alt="Snip20160805_10"></p>
<h2 id="NEXT"><a href="#NEXT" class="headerlink" title="NEXT"></a><a href="http://next.36kr.com" target="_blank" rel="external">NEXT</a></h2><p>NEXT 是一个快速发现、分享和讨论新产品的社区。在这里，你可以第一时间发现国内外最新、最酷、最好玩的互联网产品，也可分享自己最喜爱的产品，参与圈内人士的讨论。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_11.png" alt="Snip20160805_11"></p>
<h2 id="MindStore"><a href="#MindStore" class="headerlink" title="MindStore"></a><a href="http://mindstore.io" target="_blank" rel="external">MindStore</a></h2><p>MindStore 是一个发现、分享、探讨新酷产品的社区，帮助您找到最好的产品和想法。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_12.png" alt="Snip20160805_12"></p>
<h2 id="Product-Hunt"><a href="#Product-Hunt" class="headerlink" title="Product Hunt"></a><a href="https://www.producthunt.com" target="_blank" rel="external">Product Hunt</a></h2><p>Product Hunt surfaces the best new products, every day. It’s a place for product-loving enthusiasts to share and geek out about the latest mobile apps, websites, hardware projects, and tech creations.</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_14.png" alt="Snip20160805_14"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于设计而言，除了基本的理论，积累大量素材更为重要。&lt;/p&gt;
&lt;p&gt;当积累了大量设计语言，以及元素的组合方式后，融合你生活中对美好设计的体验，属于你自己的优秀设计也便会自然诞生。&lt;/p&gt;
    
    </summary>
    
      <category term="设计" scheme="http://chaosky.me/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="素材" scheme="http://chaosky.me/tags/%E7%B4%A0%E6%9D%90/"/>
    
  </entry>
  
  <entry>
    <title>macOS 开发配置手册——设置篇</title>
    <link href="http://chaosky.me/2016/07/29/macOS-Setup-Guide-Setting/"/>
    <id>http://chaosky.me/2016/07/29/macOS-Setup-Guide-Setting/</id>
    <published>2016-07-29T05:14:54.000Z</published>
    <updated>2016-09-26T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>工欲善其事，必先利其器。—— 设置篇</p>
</blockquote>
<a id="more"></a>
<h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><h3 id="将功能键-F1-F12-设置为标准的功能键"><a href="#将功能键-F1-F12-设置为标准的功能键" class="headerlink" title="将功能键(F1-F12)设置为标准的功能键"></a>将功能键(F1-F12)设置为标准的功能键</h3><p>MacBook键盘最上面一排的功能键(F1-F12)默认是系统亮度和声音之类的快捷设置，当MacBook作为你的娱乐电脑时，这样的默认设置是非常方便的，但是对于将MacBook作为工作电脑而且需要频繁使用功能键(F1-F12)的人，最好将功能键(F1-F12)的行为设置为标准的功能键。</p>
<p>打开【系统设置】，点击【键盘】，设置如下：<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160729_1.png" alt="Snip20160729_1"></p>
<h3 id="设置触摸板"><a href="#设置触摸板" class="headerlink" title="设置触摸板"></a>设置触摸板</h3><p>打开【系统设置】，点击【触摸板】，根据需要设置，众享丝滑。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160729_2.png" alt="Snip20160729_2"><br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160729_3.png" alt="Snip20160729_3"><br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160729_4.png" alt="Snip20160729_4"></p>
<h3 id="将Dock停靠在屏幕左边"><a href="#将Dock停靠在屏幕左边" class="headerlink" title="将Dock停靠在屏幕左边"></a>将Dock停靠在屏幕左边</h3><p>MacBook的屏幕是一个长方形，如果你将Dock放在下面，那么屏幕的可用宽度就会减少，另外人眼阅读时的顺序是从左往右，因此Dock放在左边更适合将MacBook作为工作电脑的人。</p>
<p>打开【系统设置】，点击【Dock】,</p>
<ul>
<li>将图标的Size调到合适大小</li>
<li>关闭放大特效（即鼠标放到Dock上图标放大的效果，此效果干扰注意力）</li>
<li>在【置于屏幕上的位置】一栏，选择【左边】</li>
<li>勾选【将窗口最小化为应用程序图标】</li>
</ul>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160729_5.png" alt="Snip20160729_5"></p>
<h3 id="快速锁定屏幕"><a href="#快速锁定屏幕" class="headerlink" title="快速锁定屏幕"></a>快速锁定屏幕</h3><p>打开【系统设置】，点击【桌面与屏幕保护程序】图标，选择【屏幕保护程序】标签页，点击右下角的【触发角..】，在弹出的界面中右下角选择【将显示器置入睡眠状态】，点击【好】确定。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160803_1.png" alt="Snip20160803_1"><br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160803_3.png" alt="Snip20160803_3"></p>
<h3 id="系统常用快捷键"><a href="#系统常用快捷键" class="headerlink" title="系统常用快捷键"></a>系统常用快捷键</h3><p>学习系统快捷键，适当使用快捷键将会提升你的工作效率。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-1280800.png" alt="1280800"></p>
<p>壁纸下载地址：<a href="http://bbs.feng.com/read-htm-tid-4254274.html" target="_blank" rel="external">http://bbs.feng.com/read-htm-tid-4254274.html</a><br>Mac 键盘快捷键 官方总览：<a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="external">https://support.apple.com/zh-cn/HT201236</a></p>
<h3 id="关闭自动纠正拼写"><a href="#关闭自动纠正拼写" class="headerlink" title="关闭自动纠正拼写"></a>关闭自动纠正拼写</h3><p>有些时候在文本输入框中输入文本时，会出现如下情况。一按空格键或者回车键会填写弹出框的文本，很烦人。</p>
<p><img src="http://7vzrbk.com1.z0.glb.clouddn.com/ghost/content/images/2015/10/QQ20151025-0-2x.png" alt=""></p>
<p>可以通过【关闭自动纠正拼写】解决</p>
<p><img src="http://7vzrbk.com1.z0.glb.clouddn.com/ghost/content/images/2015/10/QQ20151024-0-2x.png" alt=""></p>
<h3 id="tree命令中文文件名显示异常"><a href="#tree命令中文文件名显示异常" class="headerlink" title="tree命令中文文件名显示异常"></a>tree命令中文文件名显示异常</h3><p><img src="http://7xooko.com1.z0.glb.clouddn.com/QQ20160123-0@2x.png" alt=""></p>
<p>解决办法：追加<code>tree -N</code>参数</p>
<h3 id="Mac-中滚动截屏"><a href="#Mac-中滚动截屏" class="headerlink" title="Mac 中滚动截屏"></a>Mac 中滚动截屏</h3><p>安装腾讯的snip</p>
<p><a href="http://www.snip.qq.com" target="_blank" rel="external">官方下载地址</a></p>
<p><a href="http://jingyan.baidu.com/article/fec4bce2458d03f2618d8b8e.html" target="_blank" rel="external">详细设置教程</a></p>
<h3 id="How-to-Solve-Missing-Fonts-in-Sketch-App"><a href="#How-to-Solve-Missing-Fonts-in-Sketch-App" class="headerlink" title="How to Solve Missing Fonts in Sketch App"></a>How to Solve Missing Fonts in Sketch App</h3><p>All you have to do is enter the following command in Terminal.</p>
<p><code>$ curl https://raw.githubusercontent.com/qrpike/Web-Font-Load/master/install.sh | sh</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器。—— 设置篇&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="macOS" scheme="http://chaosky.me/categories/macOS/"/>
    
    
      <category term="Tools" scheme="http://chaosky.me/tags/Tools/"/>
    
      <category term="Setup Guide" scheme="http://chaosky.me/tags/Setup-Guide/"/>
    
  </entry>
  
  <entry>
    <title>macOS 开发配置手册——工具篇</title>
    <link href="http://chaosky.me/2016/07/29/macOS-Setup-Guide-Tools/"/>
    <id>http://chaosky.me/2016/07/29/macOS-Setup-Guide-Tools/</id>
    <published>2016-07-29T05:08:28.000Z</published>
    <updated>2016-09-26T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<ul>
<li>2016-08-05 添加node、Python等终端命令</li>
<li>2016-09-12 更新<a href="#查找命令">查找命令</a></li>
</ul>
<blockquote>
<p>工欲善其事，必先利其器。—— 工具篇</p>
</blockquote>
<a id="more"></a>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><h3 id="Xcode-Command-Line-Tools"><a href="#Xcode-Command-Line-Tools" class="headerlink" title="Xcode Command Line Tools"></a>Xcode Command Line Tools</h3><p>从 App store 或苹果开发者网站安装 <a href="https://developer.apple.com/xcode/" target="_blank" rel="external">Xcode</a> 。  </p>
<p>紧接着，在终端中运行安装 <strong>Xcode Command Line Tools</strong>，执行命令：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ xcode-<span class="keyword">select</span> <span class="comment">--install</span></div></pre></td></tr></table></figure>
<h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p>zsh的介绍可以查看池老师的文章<a href="http://macshuo.com/?p=676" target="_blank" rel="external">终极 Shell</a></p>
<h4 id="切换zsh"><a href="#切换zsh" class="headerlink" title="切换zsh"></a>切换zsh</h4><p>切换当前用户的shell，执行命令：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chsh -s <span class="regexp">/bin/</span>zsh</div></pre></td></tr></table></figure>
<p>执行时会要求输入密码</p>
<h4 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h4><p>Oh My Zsh 介绍</p>
<blockquote>
<p>Oh My Zsh is an open source, community-driven framework for managing your zsh configuration. That sounds boring. Let’s try this again.<br>Oh My Zsh is a way of life! Once installed, your terminal prompt will become the talk of the town or your money back! Each time you interact with your command prompt, you’ll be able to take advantage of the hundreds of bundled plugins and pretty themes. Strangers will come up to you in cafés and ask you, “that is amazing. are you some sort of genius?” Finally, you’ll begin to get the sort of attention that you always felt that you deserved. …or maybe you’ll just use the time that you saved to start flossing more often.</p>
</blockquote>
<p>通过curl安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<h4 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h4><p>zsh 的配置主要集中在用户当前目录的.zshrc里，用 vim 或你喜欢的其他编辑器打开.zshrc，具体配置参见官方文档：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a></p>
<h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p>包管理工具可以让你安装和更新程序变得更方便，目前在 macOS 系统中最受欢迎的包管理工具是 Homebrew 。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在安装 Homebrew 之前，需要将 <strong>Xcode Command Line Tools</strong> 安装完成，这样你就可以使用基于 <strong>Xcode Command Line Tools</strong> 编译的 Homebrew。</p>
<p>在<strong>终端</strong>中执行以下命令，跟随指引，将完成 Hombrew 安装。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></div></pre></td></tr></table></figure>
<p>检查brew是否运行正常：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>doctor</div></pre></td></tr></table></figure>
<h4 id="Homebrew-基本使用"><a href="#Homebrew-基本使用" class="headerlink" title="Homebrew 基本使用"></a>Homebrew 基本使用</h4><p>安装程序包：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>&lt;package_name&gt;</div></pre></td></tr></table></figure>
<p>更新本地Homebrew和程序包缓存：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>update</div></pre></td></tr></table></figure>
<p>更新程序包：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>upgrade &lt;package_name&gt;</div></pre></td></tr></table></figure></p>
<p>清除旧版程序包：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>cleanup</div></pre></td></tr></table></figure>
<p>查看已安装过的程序包列表：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew <span class="built_in">list</span> <span class="comment">--versions</span></div></pre></td></tr></table></figure>
<h4 id="常用程序包"><a href="#常用程序包" class="headerlink" title="常用程序包"></a>常用程序包</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> brew install carthage</div><div class="line"><span class="symbol">$</span> brew install cmake</div><div class="line"><span class="symbol">$</span> brew install ffmpeg</div><div class="line"><span class="symbol">$</span> brew install gdb			<span class="comment">// GNU debugger</span></div><div class="line"><span class="symbol">$</span> brew install git-flow	<span class="comment">//</span></div><div class="line"><span class="symbol">$</span> brew install jenkins</div><div class="line"><span class="symbol">$</span> brew install llvm			<span class="comment">// Next-gen compiler infrastructure</span></div><div class="line"><span class="symbol">$</span> brew install node</div><div class="line"><span class="symbol">$</span> brew install nvm</div><div class="line"><span class="symbol">$</span> brew install rmtrash		<span class="comment">// Move files to OS X's Trash</span></div><div class="line"><span class="symbol">$</span> brew install rename		<span class="comment">// Perl-powered file rename script with many helpful built-ins</span></div><div class="line"><span class="symbol">$</span> brew install subversion</div><div class="line"><span class="symbol">$</span> brew install swiftenv	<span class="comment">// Swift version manager</span></div><div class="line"><span class="symbol">$</span> brew install tldr			<span class="comment">// </span></div><div class="line"><span class="symbol">$</span> brew install tree			<span class="comment">//</span></div><div class="line"><span class="symbol">$</span> brew install wget</div><div class="line"><span class="symbol">$</span> brew install xctool</div></pre></td></tr></table></figure>
<h4 id="安装Homebrew-Cask"><a href="#安装Homebrew-Cask" class="headerlink" title="安装Homebrew Cask"></a>安装Homebrew Cask</h4><p>通过 Homebrew Cask 优雅、简单、快速的安装和管理 OS X 图形界面程序，比如 Google Chrome 和 Dropbox。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>tap caskroom/cask  // 添加 Github 上的 caskroom/cask 库</div><div class="line">$ <span class="keyword">brew </span>install <span class="keyword">brew-cask </span> // 安装 <span class="keyword">brew-cask</span></div><div class="line">$ <span class="keyword">brew </span>cask install google-chrome // 安装 Google 浏览器</div><div class="line">$ <span class="keyword">brew </span>update &amp;&amp; <span class="keyword">brew </span>upgrade <span class="keyword">brew-cask </span>&amp;&amp; <span class="keyword">brew </span>cleanup // 更新</div></pre></td></tr></table></figure>
<h5 id="文件预览插件"><a href="#文件预览插件" class="headerlink" title="文件预览插件"></a>文件预览插件</h5><p>有些 插件 可以让 Mac 上的文件预览更有效，比如语法高亮、markdown 渲染、json 预览等等。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>qlcolorcode</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>qlstephen</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>qlmarkdown</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>quicklook-<span class="keyword">json</span></div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>qlprettypatch</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>quicklook-csv</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span><span class="keyword">betterzipql</span></div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>webp-quicklook</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>suspicious-package</div></pre></td></tr></table></figure>
<h5 id="launchrocket"><a href="#launchrocket" class="headerlink" title="launchrocket"></a>launchrocket</h5><p>brew cask 安装 launchrocket，来管理通过 brew 安装的 service</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>launchrocket</div></pre></td></tr></table></figure>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-01-Snip20160729_9.png" alt="Snip20160729_9"></p>
<h3 id="RVM"><a href="#RVM" class="headerlink" title="RVM"></a>RVM</h3><p>Ruby版本管理器</p>
<blockquote>
<p>RVM is the Ruby enVironment Manager (rvm).<br>It manages Ruby application environments and enables switching between them.</p>
</blockquote>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> curl -sSL https:<span class="comment">//get.rvm.io | bash -s stable</span></div><div class="line"><span class="symbol">$</span> source ~/.rvm/scripts/rvm</div><div class="line"><span class="symbol">$</span> rvm install <span class="number">2.3</span><span class="number">.0</span></div><div class="line"><span class="symbol">$</span> rvm use <span class="number">2.3</span><span class="number">.0</span></div><div class="line"><span class="symbol">$</span> /bin/bash --login</div></pre></td></tr></table></figure>
<h4 id="gem"><a href="#gem" class="headerlink" title="gem"></a>gem</h4><p>Ruby包管理器</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ gem <span class="keyword">install</span> cocoapods</div><div class="line">$ gem <span class="keyword">install</span> fastlane</div><div class="line">$ gem <span class="keyword">install</span> octopress</div><div class="line">$ gem <span class="keyword">install</span> tty</div></pre></td></tr></table></figure>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p>
<p>通过命令安装：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>python</div></pre></td></tr></table></figure>
<p>通过以上命令搭建 python 环境，该命令会自动安装好 pip 和 setuptools。</p>
<h4 id="pip-amp-setuptools"><a href="#pip-amp-setuptools" class="headerlink" title="pip &amp; setuptools"></a>pip &amp; setuptools</h4><p>pip 和 setuptools 是 Python 的包管理器。</p>
<p>更新 pip 和 setuptools 包管理器：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> <span class="comment">--upgrade pip setuptools</span></div></pre></td></tr></table></figure>
<p>安装程序包：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> &lt;<span class="keyword">package</span>&gt;</div></pre></td></tr></table></figure>
<p>安装位置：<code>/usr/local/lib/python2.7/site-packages</code></p>
<h4 id="常用-Python-程序包"><a href="#常用-Python-程序包" class="headerlink" title="常用 Python 程序包"></a>常用 Python 程序包</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> pip install beautifulsoup4 <span class="comment">// HTML解析</span></div><div class="line"><span class="symbol">$</span> pip install NetEase-MusicBox <span class="comment">// 网易云音乐命令行版</span></div><div class="line"><span class="symbol">$</span> pip install starred	<span class="comment">// 利用GitHub上stars项目生成类 awesome 列表的汇总页面。</span></div></pre></td></tr></table></figure>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><blockquote>
<p>Platform built on the V8 JavaScript runtime to build network applications.</p>
</blockquote>
<p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p>
<p>通过命令安装：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install <span class="keyword">node</span><span class="title"></span></div></pre></td></tr></table></figure>
<p>通过以上命令搭建好 node.js 开发环境，同时也会安装 node 的包管理工具 npm。</p>
<h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><p>node 的包管理器。</p>
<p>安装 node 程序包有两种方式：</p>
<ol>
<li>安装在本地工程项目中，只能本地项目使用，安装命令如下：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> &lt;<span class="keyword">package</span>&gt; <span class="comment">--save</span></div></pre></td></tr></table></figure>
<ol>
<li>安装为全局程序包，安装命令如下：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> -g &lt;<span class="keyword">package</span>&gt;</div></pre></td></tr></table></figure>
<h4 id="常用全局-npm-程序包"><a href="#常用全局-npm-程序包" class="headerlink" title="常用全局 npm 程序包"></a>常用全局 npm 程序包</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> npm install -g hexo-cli	<span class="comment">// 静态博客</span></div><div class="line"><span class="symbol">$</span> npm install -g ionic		<span class="comment">// Hybird 开发</span></div><div class="line"><span class="symbol">$</span> npm install -g react-native-cli <span class="comment">// React Native 开发</span></div></pre></td></tr></table></figure>
<h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。</p>
<p>find的使用格式如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ find <span class="tag">&lt;<span class="name">指定目录</span>&gt;</span> <span class="tag">&lt;<span class="name">指定条件</span>&gt;</span> <span class="tag">&lt;<span class="name">指定动作</span>&gt;</span></div><div class="line">- <span class="tag">&lt;<span class="name">指定目录</span>&gt;</span>： 所要搜索的目录及其所有子目录。默认为当前目录。</div><div class="line">- <span class="tag">&lt;<span class="name">指定条件</span>&gt;</span>： 所要搜索的文件的特征。</div><div class="line">- <span class="tag">&lt;<span class="name">指定动作</span>&gt;</span>： 对搜索结果进行特定的处理。</div></pre></td></tr></table></figure>
<h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><p>locate命令其实是”find -name”的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库（/var/lib/locatedb），这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">locate</span>命令的使用实例：</div><div class="line"></div><div class="line">$ <span class="keyword">locate</span> /etc/sh</div><div class="line">搜索etc目录下所有以sh开头的文件。</div><div class="line"></div><div class="line">$ <span class="keyword">locate</span> ~/m</div><div class="line">搜索用户主目录下，所有以m开头的文件。</div><div class="line"></div><div class="line">$ <span class="keyword">locate</span> -i ~/m</div><div class="line">搜索用户主目录下，所有以m开头的文件，并且忽略大小写。</div></pre></td></tr></table></figure>
<h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><p>whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">whereis命令的使用实例：</div><div class="line"><span class="variable">$ </span>whereis grep</div></pre></td></tr></table></figure>
<h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><p>which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">which</span>命令的使用实例：</div><div class="line">$ <span class="built_in">which</span> grep</div></pre></td></tr></table></figure>
<h2 id="GUI工具"><a href="#GUI工具" class="headerlink" title="GUI工具"></a>GUI工具</h2><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><h4 id="替换系统默认终端-iTerm-2"><a href="#替换系统默认终端-iTerm-2" class="headerlink" title="替换系统默认终端 - iTerm 2"></a>替换系统默认终端 - iTerm 2</h4><h4 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h4><p>推荐安装搜狗输入法。</p>
<h4 id="窗口管理软件-SizeUp"><a href="#窗口管理软件-SizeUp" class="headerlink" title="窗口管理软件 - SizeUp"></a>窗口管理软件 - SizeUp</h4><h4 id="查找文件和应用程序-Alfred"><a href="#查找文件和应用程序-Alfred" class="headerlink" title="查找文件和应用程序 - Alfred"></a>查找文件和应用程序 - Alfred</h4><p>Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac.</p>
<h4 id="来杯免费咖啡-Caffeine"><a href="#来杯免费咖啡-Caffeine" class="headerlink" title="来杯免费咖啡 - Caffeine"></a>来杯免费咖啡 - Caffeine</h4><p>你应该立刻安装这款免费的良心软件—Caffeine，设置开机启动，点一下状态栏的咖啡杯图标，当咖啡是满的时候，MacBook将不会进入休眠模式，再点一下咖啡杯空了就正常休眠，我默认设置开机启动，咖啡杯保持满满的状态。</p>
<h4 id="快速切换和打开应用程序-Manico"><a href="#快速切换和打开应用程序-Manico" class="headerlink" title="快速切换和打开应用程序 - Manico"></a>快速切换和打开应用程序 - Manico</h4><p>MacBook系统默认设置了一个快捷键来显示当前运行中的应用程序，同时按下tab + command，将看到如下图的样式：</p>
<h4 id="随心所欲的复制粘贴-PopClip"><a href="#随心所欲的复制粘贴-PopClip" class="headerlink" title="随心所欲的复制粘贴 - PopClip"></a>随心所欲的复制粘贴 - PopClip</h4><h4 id="增强资源管理器-XtraFinder"><a href="#增强资源管理器-XtraFinder" class="headerlink" title="增强资源管理器 - XtraFinder"></a>增强资源管理器 - XtraFinder</h4><h4 id="管理状态栏图标-Bartender"><a href="#管理状态栏图标-Bartender" class="headerlink" title="管理状态栏图标 - Bartender"></a>管理状态栏图标 - Bartender</h4><h4 id="音乐播放器-网易云音乐"><a href="#音乐播放器-网易云音乐" class="headerlink" title="音乐播放器 - 网易云音乐"></a>音乐播放器 - 网易云音乐</h4><h4 id="词典-有道词典"><a href="#词典-有道词典" class="headerlink" title="词典 - 有道词典"></a>词典 - 有道词典</h4><h4 id="文本编辑-Atom，Visual-Studio-Code"><a href="#文本编辑-Atom，Visual-Studio-Code" class="headerlink" title="文本编辑 - Atom，Visual Studio Code"></a>文本编辑 - Atom，Visual Studio Code</h4><h4 id="文本比较-Beyond-Compare"><a href="#文本比较-Beyond-Compare" class="headerlink" title="文本比较 - Beyond Compare"></a>文本比较 - Beyond Compare</h4><h4 id="垃圾清理-CleanMyMac-3"><a href="#垃圾清理-CleanMyMac-3" class="headerlink" title="垃圾清理 - CleanMyMac 3"></a>垃圾清理 - CleanMyMac 3</h4><h4 id="U盘启动制作-DiskMaker-X-5"><a href="#U盘启动制作-DiskMaker-X-5" class="headerlink" title="U盘启动制作 - DiskMaker X 5"></a>U盘启动制作 - DiskMaker X 5</h4><h4 id="笔记-Evernote"><a href="#笔记-Evernote" class="headerlink" title="笔记 - Evernote"></a>笔记 - Evernote</h4><h4 id="屏幕颜色调整（保护眼睛）-Flux"><a href="#屏幕颜色调整（保护眼睛）-Flux" class="headerlink" title="屏幕颜色调整（保护眼睛）- Flux"></a>屏幕颜色调整（保护眼睛）- Flux</h4><h4 id="图床-iPic"><a href="#图床-iPic" class="headerlink" title="图床 - iPic"></a>图床 - iPic</h4><h4 id="系统监测-iStat-Menus"><a href="#系统监测-iStat-Menus" class="headerlink" title="系统监测 - iStat Menus"></a>系统监测 - iStat Menus</h4><h4 id="gif-录制-licecap"><a href="#gif-录制-licecap" class="headerlink" title="gif 录制 - licecap"></a>gif 录制 - licecap</h4><h4 id="Markdown-MacDown，MWeb，Typora"><a href="#Markdown-MacDown，MWeb，Typora" class="headerlink" title="Markdown - MacDown，MWeb，Typora"></a>Markdown - MacDown，MWeb，Typora</h4><h4 id="思维导图-MindNode，XMind"><a href="#思维导图-MindNode，XMind" class="headerlink" title="思维导图 - MindNode，XMind"></a>思维导图 - MindNode，XMind</h4><h4 id="视频播放-MPlayerX"><a href="#视频播放-MPlayerX" class="headerlink" title="视频播放 - MPlayerX"></a>视频播放 - MPlayerX</h4><h4 id="流程图制作-OmniGraffle"><a href="#流程图制作-OmniGraffle" class="headerlink" title="流程图制作 - OmniGraffle"></a>流程图制作 - OmniGraffle</h4><h4 id="绘图-Paintbrush"><a href="#绘图-Paintbrush" class="headerlink" title="绘图 - Paintbrush"></a>绘图 - Paintbrush</h4><h4 id="虚拟机-Parallels-Desktop，VirtualBox"><a href="#虚拟机-Parallels-Desktop，VirtualBox" class="headerlink" title="虚拟机 - Parallels Desktop，VirtualBox"></a>虚拟机 - Parallels Desktop，VirtualBox</h4><h4 id="壁纸-Pimp-Your-Screen"><a href="#壁纸-Pimp-Your-Screen" class="headerlink" title="壁纸 - Pimp Your Screen"></a>壁纸 - Pimp Your Screen</h4><h4 id="Mac版PhotoShop-Pixelmator"><a href="#Mac版PhotoShop-Pixelmator" class="headerlink" title="Mac版PhotoShop - Pixelmator"></a>Mac版PhotoShop - Pixelmator</h4><h4 id="稍候阅读-Pocket"><a href="#稍候阅读-Pocket" class="headerlink" title="稍候阅读 - Pocket"></a>稍候阅读 - Pocket</h4><h4 id="番茄钟-Pomodoro-Time"><a href="#番茄钟-Pomodoro-Time" class="headerlink" title="番茄钟 - Pomodoro Time"></a>番茄钟 - Pomodoro Time</h4><h4 id="录屏-ScreenFlow"><a href="#录屏-ScreenFlow" class="headerlink" title="录屏 - ScreenFlow"></a>录屏 - ScreenFlow</h4><h4 id="翻墙-Lantern，ShadowsocksX，Surge"><a href="#翻墙-Lantern，ShadowsocksX，Surge" class="headerlink" title="翻墙 - Lantern，ShadowsocksX，Surge"></a>翻墙 - Lantern，ShadowsocksX，Surge</h4><h4 id="屏幕截图-Snip"><a href="#屏幕截图-Snip" class="headerlink" title="屏幕截图 - Snip"></a>屏幕截图 - Snip</h4><h4 id="解压缩-The-Unarchiver"><a href="#解压缩-The-Unarchiver" class="headerlink" title="解压缩 - The Unarchiver"></a>解压缩 - The Unarchiver</h4><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="文档查看-Dash"><a href="#文档查看-Dash" class="headerlink" title="文档查看 - Dash"></a>文档查看 - Dash</h4><h4 id="Andorid-开发-Android-Studio"><a href="#Andorid-开发-Android-Studio" class="headerlink" title="Andorid 开发 - Android Studio"></a>Andorid 开发 - Android Studio</h4><h4 id="原型设计-Axure-RP"><a href="#原型设计-Axure-RP" class="headerlink" title="原型设计 - Axure RP"></a>原型设计 - Axure RP</h4><h4 id="网络抓包-Charles"><a href="#网络抓包-Charles" class="headerlink" title="网络抓包 - Charles"></a>网络抓包 - Charles</h4><h4 id="iOS-动画制作-Core-Animator"><a href="#iOS-动画制作-Core-Animator" class="headerlink" title="iOS 动画制作 - Core Animator"></a>iOS 动画制作 - Core Animator</h4><h4 id="SVN版本控制管理-Cornerstone"><a href="#SVN版本控制管理-Cornerstone" class="headerlink" title="SVN版本控制管理 - Cornerstone"></a>SVN版本控制管理 - Cornerstone</h4><h4 id="Git版本控制管理-SourceTree"><a href="#Git版本控制管理-SourceTree" class="headerlink" title="Git版本控制管理 - SourceTree"></a>Git版本控制管理 - SourceTree</h4><h4 id="HTML-5-制作-Hype-3"><a href="#HTML-5-制作-Hype-3" class="headerlink" title="HTML 5 制作 - Hype 3"></a>HTML 5 制作 - Hype 3</h4><h4 id="应用程序图标制作-IconKit"><a href="#应用程序图标制作-IconKit" class="headerlink" title="应用程序图标制作 - IconKit"></a>应用程序图标制作 - IconKit</h4><h4 id="Objective-C-转换为Swift代码-iSwift"><a href="#Objective-C-转换为Swift代码-iSwift" class="headerlink" title="Objective-C 转换为Swift代码 - iSwift"></a>Objective-C 转换为Swift代码 - iSwift</h4><h4 id="json数据解析-Jason，JSON-Wizard"><a href="#json数据解析-Jason，JSON-Wizard" class="headerlink" title="json数据解析 - Jason，JSON Wizard"></a>json数据解析 - Jason，JSON Wizard</h4><h4 id="数据库-Navicat-Premium"><a href="#数据库-Navicat-Premium" class="headerlink" title="数据库 - Navicat Premium"></a>数据库 - Navicat Premium</h4><h4 id="SQLite数据库-sqlitebrowser"><a href="#SQLite数据库-sqlitebrowser" class="headerlink" title="SQLite数据库 - sqlitebrowser"></a>SQLite数据库 - sqlitebrowser</h4><h4 id="查看Github-Star-OhMyStar"><a href="#查看Github-Star-OhMyStar" class="headerlink" title="查看Github Star - OhMyStar"></a>查看Github Star - OhMyStar</h4><h4 id="Turn-drawings-into-code-PaintCode"><a href="#Turn-drawings-into-code-PaintCode" class="headerlink" title="Turn drawings into code - PaintCode"></a>Turn drawings into code - PaintCode</h4><h4 id="HTTP-API-测试-Paw"><a href="#HTTP-API-测试-Paw" class="headerlink" title="HTTP API 测试 - Paw"></a>HTTP API 测试 - Paw</h4><h4 id="iOS-UI-调试-Reveal"><a href="#iOS-UI-调试-Reveal" class="headerlink" title="iOS UI 调试 - Reveal"></a>iOS UI 调试 - Reveal</h4><h4 id="屏幕取色-Sip"><a href="#屏幕取色-Sip" class="headerlink" title="屏幕取色 - Sip"></a>屏幕取色 - Sip</h4><h4 id="移动应用原型设计-Sketch"><a href="#移动应用原型设计-Sketch" class="headerlink" title="移动应用原型设计 - Sketch"></a>移动应用原型设计 - Sketch</h4><h4 id="UML绘图-StarUML"><a href="#UML绘图-StarUML" class="headerlink" title="UML绘图 - StarUML"></a>UML绘图 - StarUML</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2016-08-05 添加node、Python等终端命令&lt;/li&gt;
&lt;li&gt;2016-09-12 更新&lt;a href=&quot;#查找命令&quot;&gt;查找命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器。—— 工具篇&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="macOS" scheme="http://chaosky.me/categories/macOS/"/>
    
    
      <category term="Tools" scheme="http://chaosky.me/tags/Tools/"/>
    
      <category term="Setup Guide" scheme="http://chaosky.me/tags/Setup-Guide/"/>
    
  </entry>
  
  <entry>
    <title>使用Reveal分析别人App的UI布局</title>
    <link href="http://chaosky.me/2016/07/27/iOS-Security-Defense-Reveal/"/>
    <id>http://chaosky.me/2016/07/27/iOS-Security-Defense-Reveal/</id>
    <published>2016-07-27T05:43:53.000Z</published>
    <updated>2016-09-26T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="越狱iOS设备"><a href="#越狱iOS设备" class="headerlink" title="越狱iOS设备"></a>越狱iOS设备</h3><ol>
<li>如何越狱可以参考<a href="http://www.pangu.io" target="_blank" rel="external">盘古越狱</a>的相关文章，具体详情参见链接：<a href="http://jailbreak.25pp.com/ppjailbreak/?from=25pp_00119" target="_blank" rel="external">http://jailbreak.25pp.com/ppjailbreak/?from=25pp_00119</a>，最新iOS越狱可以支持iOS 9.3.3</li>
<li>在Cydia源中安装OpenSSH、MobileSubstrate等工具，之后的文章会讲到其他工具</li>
</ol>
<h3 id="macOS-本地安装Reveal"><a href="#macOS-本地安装Reveal" class="headerlink" title="macOS 本地安装Reveal"></a>macOS 本地安装Reveal</h3><p>具体安装及使用可以参见我之前的文章：<a href="http://chaosky.me/2016/07/27/Reveal">http://chaosky.me/2016/07/27/Reveal</a></p>
<a id="more"></a>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="在Cydia中搜索并安装Reveal-Loader"><a href="#在Cydia中搜索并安装Reveal-Loader" class="headerlink" title="在Cydia中搜索并安装Reveal Loader"></a>在Cydia中搜索并安装Reveal Loader</h3><p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_11.png" alt="Snip20160727_11"></p>
<h3 id="远程连接iPhone设备"><a href="#远程连接iPhone设备" class="headerlink" title="远程连接iPhone设备"></a>远程连接iPhone设备</h3><ol>
<li>在Cydia中安装OpenSSH工具</li>
<li><p>打开Wi-Fi设置，获取IP地址（例如：192.168.2.6）<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_1.png" alt="Snip20160727_1"></p>
</li>
<li><p>打开终端，执行命令<code>ssh root@[设备IP地址]</code>（例如：<code>ssh root@192.168.2.6</code>）</p>
</li>
<li><p>等待几分钟后，允许新连接<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_3.png" alt="Snip20160727_3"></p>
</li>
<li><p>输入密码<code>alpine</code>登录iPhone设备<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_4.png" alt="Snip20160727_4"></p>
</li>
</ol>
<h3 id="检查iOS设备上-Library-目录下是否有一个名为RHRevealLoader的目录"><a href="#检查iOS设备上-Library-目录下是否有一个名为RHRevealLoader的目录" class="headerlink" title="检查iOS设备上/Library/目录下是否有一个名为RHRevealLoader的目录"></a>检查iOS设备上<code>/Library/</code>目录下是否有一个名为<code>RHRevealLoader</code>的目录</h3><p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_5.png" alt="Snip20160727_5"></p>
<ol>
<li>若没有则创建该目录：<code>mkdir /Library/RHRevealLoader</code></li>
<li><p>启动Reveal并选择Help → Show Reveal Library in Finder，这将会打开Finder窗口，并显示一个名为iOS-Libraries的文件夹。<br> <img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/show-reveal-library-in-finder.jpg" alt=""><br> 将该目录下的<code>libReveal.dylib</code>通过scp或者iFunBox上传到刚才的手机目录，scp执行的命令如下：</p>
 <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp /Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib root<span class="variable">@192</span>.<span class="number">168.2</span>.<span class="number">6</span><span class="symbol">:/Library/RHRevealLoader</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="重启设备"><a href="#重启设备" class="headerlink" title="重启设备"></a>重启设备</h3><ol>
<li>可以在设备上执行命令：<code>killall SpringBoard</code></li>
<li>也可以重启设备，不过需要注意的是，最新的越狱为不完美越狱，重启设备需要点击<strong>PP盘古越狱</strong>重新越狱</li>
</ol>
<h3 id="启动Reveal调试别人的App"><a href="#启动Reveal调试别人的App" class="headerlink" title="启动Reveal调试别人的App"></a>启动Reveal调试别人的App</h3><ol>
<li>打开设置程序，配置Reveal Loader<br> <img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_6.png" alt="Snip20160727_6"></li>
<li>在Reveal设置中选择你要查看的App，Enabled Applications<br> <img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_8.png" alt="Snip20160727_8"></li>
<li>在Reveal中调试查看<br> 调试时，需要注意越狱设备和Mac需要在同一网路环境中<br> <img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_10.png" alt="Snip20160727_10"></li>
</ol>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://wiki.jikexueyuan.com/project/ios-security-defense/reveal.html" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/ios-security-defense/reveal.html</a></li>
<li><a href="https://www.amazon.cn/iOS应用逆向工程-沙梓社/dp/B00VFDVY7E/ref=sr_1_1?ie=UTF8&amp;qid=1469610259&amp;sr=8-1&amp;keywords=iOS+逆向" target="_blank" rel="external">iOS应用逆向工程</a></li>
<li><a href="https://xiuchundao.me/post/integrating-reveal-inspect-app-on-jailbreak-device-with-reveal" target="_blank" rel="external">https://xiuchundao.me/post/integrating-reveal-inspect-app-on-jailbreak-device-with-reveal</a>    </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;越狱iOS设备&quot;&gt;&lt;a href=&quot;#越狱iOS设备&quot; class=&quot;headerlink&quot; title=&quot;越狱iOS设备&quot;&gt;&lt;/a&gt;越狱iOS设备&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;如何越狱可以参考&lt;a href=&quot;http://www.pangu.io&quot;&gt;盘古越狱&lt;/a&gt;的相关文章，具体详情参见链接：&lt;a href=&quot;http://jailbreak.25pp.com/ppjailbreak/?from=25pp_00119&quot;&gt;http://jailbreak.25pp.com/ppjailbreak/?from=25pp_00119&lt;/a&gt;，最新iOS越狱可以支持iOS 9.3.3&lt;/li&gt;
&lt;li&gt;在Cydia源中安装OpenSSH、MobileSubstrate等工具，之后的文章会讲到其他工具&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;macOS-本地安装Reveal&quot;&gt;&lt;a href=&quot;#macOS-本地安装Reveal&quot; class=&quot;headerlink&quot; title=&quot;macOS 本地安装Reveal&quot;&gt;&lt;/a&gt;macOS 本地安装Reveal&lt;/h3&gt;&lt;p&gt;具体安装及使用可以参见我之前的文章：&lt;a href=&quot;http://chaosky.me/2016/07/27/Reveal&quot;&gt;http://chaosky.me/2016/07/27/Reveal&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Tools" scheme="http://chaosky.me/tags/Tools/"/>
    
      <category term="Reveal" scheme="http://chaosky.me/tags/Reveal/"/>
    
      <category term="Security" scheme="http://chaosky.me/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>使用Reveal调试和分析iOS应用UI</title>
    <link href="http://chaosky.me/2016/07/27/Reveal/"/>
    <id>http://chaosky.me/2016/07/27/Reveal/</id>
    <published>2016-07-27T05:38:54.000Z</published>
    <updated>2016-09-26T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Reveal是分析、调试iOS应用UI的利器。</p>
<p>Reveal能够在运行时调试和修改iOS应用程序。它能连接到应用程序，并允许开发者编辑各种用户界面参数，这反过来会立即反应在程序的UI上。就像用FireBug调试HTML页面一样，在不需要重写代码、重新构建和重新部署应用程序的情况下就能够调试和修改iOS用户界面。</p>
<a id="more"></a>
<h2 id="安装Reveal"><a href="#安装Reveal" class="headerlink" title="安装Reveal"></a>安装Reveal</h2><p>Reveal 下载地址：<a href="http://revealapp.com/download/" target="_blank" rel="external">http://revealapp.com/download/</a></p>
<h2 id="集成指南"><a href="#集成指南" class="headerlink" title="集成指南"></a>集成指南</h2><p>集成Reveal无需添加任何代码，无需引入任何头文件。库将会在应用启动时自动加载，并在您的应用内部启动必要的Reveal服务。</p>
<h3 id="三种集成方式"><a href="#三种集成方式" class="headerlink" title="三种集成方式"></a>三种集成方式</h3><h3 id="静态连接"><a href="#静态连接" class="headerlink" title="静态连接"></a>静态连接</h3><p>将Reveal的静态库文件连接入应用，是最简单快捷地启用Reveal检视的方式。</p>
<blockquote>
<p>警告: 不要将Reveal库文件随着正式应用一起发布。 下面的步骤将会展示如何通过构建配置，而把Reveal静态库文件，仅连接到调试构建的流程中。</p>
</blockquote>
<ol>
<li><p>在Xcode中打开您的iOS工程。</p>
</li>
<li><p>启动Reveal并选择<strong>Help → Show Reveal Library in Finder</strong>，这将会打开Finder窗口，并显示一个名为<strong>iOS-Libraries</strong>的文件夹。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/show-reveal-library-in-finder.jpg" alt=""></p>
</li>
<li><p>将 <strong>Reveal.framework</strong> 文件拖入Xcode中的Project Navigator面板。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/drag-in-reveal-framework.jpg" alt=""></p>
</li>
<li><p>在下图所显示的<strong>Add to targets</strong>对话框中，选择所有您希望与Reveal集成的target。可选步骤：选中<strong>Copy items if needed</strong>，将会把 <strong>Reveal.framework</strong> 拷贝到工程中——如果您这么做了， 请记住，当更新Reveal至新版本时，也依照上述步骤再次更新此库文件。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/add-resource-to-project.jpg" alt=""></p>
</li>
<li><p>点击Finish。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/remove-framework-from-project.jpg" alt=""></p>
</li>
<li><p>选择Build Settings标签，在Other Linker Flags的Debug配置项中加入如下配置。</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="deletion">-ObjC -lz -framework Reveal</span></div></pre></td></tr></table></figure>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/add-linker-flags.jpg" alt=""></p>
</li>
<li><p>如果您使用的是Xcode 7, 请确认 Reveal.framework 所在的目录在您的工程配置项 “<strong>Framework Search Paths</strong>” 中。具体的内容看起来会像这样。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">FRAMEWORK_SEARCH_PATHS</span> = $(inherited) <span class="string">"$(SYSTEM_APPS_DIR)/Reveal.app/Contents/SharedSupport/iOS-Libraries"</span></div></pre></td></tr></table></figure>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/add_framework_search_paths.jpg" alt=""></p>
</li>
<li><p>在Xcode中，构建并运行您的应用。如果应用运行于真实设备之上，请确保此设备与正在运行Reveal的Mac机器，处于同一Wi-Fi网络中。</p>
<p>如果一切正常运行，请切换到Reveal应用，此时您的应用应会出现在应用选择器的下拉列表当中。选中您的应用，确认可以看到此时正在模拟器（或设备）中运行的应用界面截图。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/reveal-app-chooser.jpg" alt=""></p>
</li>
</ol>
<h3 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h3><p>动态加载允许iOS应用在运行时，可以按需地加载第三方库。采用这种方式，库文件无需连接入应用的可执行文件，而是被加入到了应用Bundle中去，从而在运行时能按需加载。这种方式使得开发者可以在个人应用中，完全自由地控制Reveal库的加载，以及其服务的启动与停止。</p>
<p>将Reveal加入您的Xcode工程，使得您团队中的其他成员无需任何额外的配置，就可以使用Reveal。</p>
<blockquote>
<p>警告: 永远不要将包含Reveal动态库文件的应用正式发布。Apple不允许将含有动态加载库文件的iOS应用发布到Apple商店中。</p>
</blockquote>
<ol>
<li><p>在Xcode中打开您的iOS工程。</p>
</li>
<li><p>启动Reveal并选择<strong>Help → Show Reveal Library in Finder</strong>，这将会打开Finder窗口，并显示一个名为iOS-Libraries的文件夹。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/show-reveal-library-in-finder.jpg" alt=""></p>
</li>
<li><p>将 <strong>libReveal.dylib</strong> 文件拖入Xcode中的Project Navigator面板。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/drag-in-reveal-dylib.jpg" alt=""></p>
</li>
<li><p>在下图所显示的<strong>Add to targets</strong>对话框中，<strong>反选所有的target</strong>。这确保了Xcode不会在编译时连接动态库文件。可选步骤：选中<strong>Copy items if needed</strong>，将会把 <strong>libReveal.dylib</strong> 拷贝到工程中——如果您这么做了， 请记住，当更新Reveal至新版本时，也依照上述步骤再次更新此库文件。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/add-resource-to-project-no-targets.jpg" alt=""></p>
</li>
<li><p>点击Finish。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/copy-library-bundle-resources.jpg" alt=""></p>
</li>
<li><p>在<strong>Copy Bundle Resources</strong>配置区域中，加入<strong>libReveal.dylib</strong>。</p>
</li>
<li><p>在<strong>Link Binary With Libraries</strong>配置项中：</p>
<ul>
<li>​如果已有libReveal.dylib，请将其移除——不应在编译时连接dylib文件。</li>
<li>如果下列系统框架与库文件还不存在，请将他们加入：<ul>
<li>libz.tdb</li>
<li>CFNetwork.framework</li>
<li>QuartzCore.framework</li>
<li>CoreGraphics.framework - Xcode一般默认会在工程中包含此框架文件。</li>
</ul>
</li>
</ul>
</li>
<li><p>为了能在debugger之外，将库文件动态地载入设备上的应用，您需要在构建过程中加入对libReveal.dylib文件的code sign。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/add-run-script-phase.jpg" alt=""></p>
<p>进入target的<strong>Build Phases</strong>标签页，选择<strong>Editor → Add Build Phase → Add Run Script</strong>菜单。在Run Script阶段中加入以下内容:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> <span class="_">-e</span></div><div class="line"></div><div class="line"> <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$&#123;CODE_SIGN_IDENTITY&#125;</span>"</span> ]; <span class="keyword">then</span></div><div class="line">     codesign -fs <span class="string">"<span class="variable">$&#123;CODE_SIGN_IDENTITY&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;BUILT_PRODUCTS_DIR&#125;</span>/<span class="variable">$&#123;FULL_PRODUCT_NAME&#125;</span>/libReveal.dylib"</span></div><div class="line"> <span class="keyword">fi</span></div></pre></td></tr></table></figure>
</li>
<li><p>将下面的代码加入到项目中合适的类文件中(例如您的<strong>UIApplicationDelegate</strong>)，适当修改使之满足您的需要：</p>
<p><strong>Swift:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - Reveal</span></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">loadReveal</span><span class="params">()</span></span> &#123;</div><div class="line">     <span class="keyword">if</span> <span class="type">NSClassFromString</span>(<span class="string">"IBARevealLoader"</span>) == <span class="literal">nil</span> &#123;</div><div class="line">         <span class="keyword">let</span> revealLibName = <span class="string">"libReveal"</span> <span class="comment">// or "libReveal-tvOS" for tvOS targets</span></div><div class="line">         <span class="keyword">let</span> revealLibExtension = <span class="string">"dylib"</span></div><div class="line">         <span class="keyword">var</span> error: <span class="type">String</span>?</div><div class="line"></div><div class="line">         <span class="keyword">if</span> <span class="keyword">let</span> dylibPath = <span class="type">NSBundle</span>.mainBundle().pathForResource(revealLibName, ofType: revealLibExtension) &#123;</div><div class="line">             <span class="built_in">print</span>(<span class="string">"Loading dynamic library <span class="subst">\(dylibPath)</span>"</span>)</div><div class="line"></div><div class="line">             <span class="keyword">let</span> revealLib = dlopen(dylibPath, <span class="type">RTLD_NOW</span>)</div><div class="line">             <span class="keyword">if</span> revealLib == <span class="literal">nil</span> &#123;</div><div class="line">                 error = <span class="type">String</span>(<span class="type">UTF8String</span>: dlerror())</div><div class="line">             &#125;</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             error = <span class="string">"File not found."</span></div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</div><div class="line">             <span class="keyword">let</span> alert = <span class="type">UIAlertController</span>(title: <span class="string">"Reveal library could not be loaded"</span>,</div><div class="line">                                         message: <span class="string">"<span class="subst">\(revealLibName)</span>.<span class="subst">\(revealLibExtension)</span> failed to load with error: <span class="subst">\(error!)</span>"</span>,</div><div class="line">                                  preferredStyle: .<span class="type">Alert</span>)</div><div class="line">             alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"OK"</span>, style: .<span class="type">Default</span>, handler: <span class="literal">nil</span>))</div><div class="line">             <span class="type">UIApplication</span>.sharedApplication().windows.first?.rootViewController?.presentViewController(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><strong>Objective-C:</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - Reveal</span></div><div class="line"></div><div class="line"> - (<span class="keyword">void</span>)loadReveal</div><div class="line"> &#123;</div><div class="line">     <span class="keyword">if</span> (<span class="built_in">NSClassFromString</span>(<span class="string">@"IBARevealLoader"</span>) == <span class="literal">nil</span>)</div><div class="line">     &#123;</div><div class="line">         <span class="built_in">NSString</span> *revealLibName = <span class="string">@"libReveal"</span>; <span class="comment">// or @"libReveal-tvOS" for tvOS targets</span></div><div class="line">         <span class="built_in">NSString</span> *revealLibExtension = <span class="string">@"dylib"</span>;</div><div class="line">         <span class="built_in">NSString</span> *error;</div><div class="line">         <span class="built_in">NSString</span> *dyLibPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:revealLibName ofType:revealLibExtension];</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (dyLibPath != <span class="literal">nil</span>)</div><div class="line">         &#123;</div><div class="line">             <span class="built_in">NSLog</span>(<span class="string">@"Loading dynamic library: %@"</span>, dyLibPath);</div><div class="line">             <span class="keyword">void</span> *revealLib = dlopen([dyLibPath cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>], RTLD_NOW);</div><div class="line"></div><div class="line">             <span class="keyword">if</span> (revealLib == <span class="literal">NULL</span>)</div><div class="line">             &#123;</div><div class="line">                 error = [<span class="built_in">NSString</span> stringWithUTF8String:dlerror()];</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">else</span></div><div class="line">         &#123;</div><div class="line">             error = <span class="string">@"File not found."</span>;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (error != <span class="literal">nil</span>)</div><div class="line">         &#123;</div><div class="line">             <span class="built_in">NSString</span> *message = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@.%@ failed to load with error: %@"</span>, revealLibName, revealLibExtension, error];</div><div class="line">             <span class="built_in">UIAlertController</span> *alert = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"Reveal library could not be loaded"</span></div><div class="line">                                                                            message:message</div><div class="line">                                                                     preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</div><div class="line">             [alert addAction:[<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"OK"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:<span class="literal">nil</span>]];</div><div class="line">             [[[[[<span class="built_in">UIApplication</span> sharedApplication] windows] firstObject] rootViewController] presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>警告: 不要在发布（release）构建中调用此方法，确保仅是在应用的调试（debug）构建中加载libReveal.dylib。</p>
</blockquote>
</li>
<li><p>一个简单的集成方式是，在<strong>-[UIApplicationDelegate applicationDidBecomeActive:]</strong>方法中调用上面声明的<strong>- (void)loadReveal</strong>方法，以确保Reveal库尽早地被加载进来。<br><strong>Swift:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. <span class="function"><span class="keyword">func</span> <span class="title">applicationDidBecomeActive</span>:<span class="params">(application: UIApplication)</span></span> &#123;</div><div class="line"> <span class="keyword">self</span>.loadReveal()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Objective-C:</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">void</span>)applicationDidBecomeActive:(<span class="built_in">UIApplication</span> *)application</div><div class="line">&#123;</div><div class="line">[<span class="keyword">self</span> loadReveal];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>提示</strong>: 在<code>-[UIApplicationDelegate applicationDidBecomeActive:]</code>方法返回之前加载库的一个好处是，将会让Reveal服务在应用启动的同时也自动启动。</p>
</blockquote>
<p>如果您不希望如上述步骤自动启动Reveal服务，也可以以手动的方式来启动，例如通过一个Debug按钮。在应用启动后，自己调用loadReveal方法，然后再分发一个名为IBARevealRequestStart的NSNotification:<br><strong>Swift:</strong></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">startReveal</span><span class="params">()</span></span> &#123;</div><div class="line">    NSNotificationCenter.defaultCenter().postNotificationName(<span class="string">"IBARevealRequestStart"</span>, object: <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Objective-C:</strong></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startReveal</div><div class="line">&#123;</div><div class="line">    [[NSNotificationCenter defaultCenter] <span class="string">postNotificationName:</span>@<span class="string">"IBARevealRequestStart"</span> <span class="string">object:</span>nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在Xcode中，构建并运行您的应用。如果一切正常运行，请切换到Reveal应用，此时您的应用应会出现在应用选择器的下拉列表当中。选中您的应用，确认可以看到此时正在模拟器（或设备）中运行的应用界面截图。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/reveal-app-chooser.jpg" alt=""></p>
</li>
</ol>
<h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><p>CocoaPods 是一款针对iOS与OSX项目的依赖管理系统。它大大简化了以往Xcode工程里，对第三方库的依赖管理与配置工作。</p>
<p>CocoaPods提供了Podspec用于将Reveal集成入您的项目。</p>
<blockquote>
<p>警告: 不要将连接了Reveal库文件的应用用于正式发布。下面的指南描述了一种使用构建配置来使Reveal静态库文件仅在调试构建中连接的方式。</p>
<p>此说明要求您在之前已经在项目中配置好了CocoaPods，若不然，请先行配置Cocoapods。</p>
</blockquote>
<ol>
<li><p>将下面内容加入你的Podfile中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'Reveal-iOS-SDK'</span>, :<span class="function"><span class="params">configurations</span> =&gt;</span> [<span class="string">'Debug'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>在项目的根目录下执行 <strong>pod install</strong> 命令（如果之前已经在项目中使用了Cocoapods，请执行 <strong>pod update</strong> 命令）。</p>
</li>
</ol>
<h2 id="从您的Xcode项目中移除Reveal"><a href="#从您的Xcode项目中移除Reveal" class="headerlink" title="从您的Xcode项目中移除Reveal"></a>从您的Xcode项目中移除Reveal</h2><p>根据您实际所选择的Reveal集成方式，请根据下述相关步骤来移除Reveal。</p>
<p>一旦库文件成功的移除后，下面的内容将不再会在您的应用启动时出现在Xcode控制台:</p>
<p>INFO: Reveal Server started (Protocol Version X).</p>
<h3 id="静态连接-1"><a href="#静态连接-1" class="headerlink" title="静态连接"></a>静态连接</h3><ol>
<li>打开您的Xcode工程。</li>
<li>从 <strong>Project Navigator</strong> 中<strong>删除 Reveal.framework</strong> 的引用。</li>
<li>在Xcode的 <strong>Project Navigator</strong>中选中您的工程，对于每一个集成了Reveal得target，请选择 <strong>Build Settings</strong> 标签页，将下面内容从 Debug 配置中的 Other <strong>Linked Flags</strong> 设置中移除：<ul>
<li>-framework Reveal</li>
<li>-ObjC and -lz (删除前请确认此配置内容仅是用于Reveal)。</li>
</ul>
</li>
<li>搞定 - 运行应用，确认Reveal没有和应用连接上。</li>
</ol>
<h3 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h3><ol>
<li>打开您的Xcode工程。</li>
<li>从 Project Navigator 中<strong>删除 libReveal.dylib</strong> 的引用。</li>
<li>在Xcode的 Project Navigator中选中您的工程，对于每一个集成了Reveal得target，选择 Build Phases 标签页，如果下列库文件仅供Reveal使用的话，请将它们从 Link Binary With Libraries 配置中移除：<ul>
<li>libz.dylib</li>
<li>CFNetwork.framework</li>
<li>QuartzCore.framework</li>
<li>CoreGraphics.framework</li>
</ul>
</li>
<li>将自定义的codesign内容从 Build Phases 下的 Run Script 中删除。</li>
<li>将 <code>loadReveal / startReveal</code> 方法从您的代码中删除。</li>
<li>搞定 - 运行应用，确认Reveal没有和应用连接上。</li>
</ol>
<h3 id="CocoaPods-1"><a href="#CocoaPods-1" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><ol>
<li><p>在您的Podfile文件中删除下面这行内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'Reveal-iOS-SDK'</span>, :<span class="function"><span class="params">configurations</span> =&gt;</span> [<span class="string">'Debug'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>在项目的根目录下执行 pod update 命令。</p>
</li>
<li><p>如果您的 Podfile 中只有 Reveal-iOS-SDK 一个pod依赖，请根据此说明，将CocoaPods从项目中完全移除。</p>
</li>
<li><p>搞定 - 运行应用，确认Reveal没有和应用连接上。</p>
</li>
</ol>
<h2 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h2><p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/reveal_show.png" alt=""></p>
<p>上图是Reveal的运行界面，其界面主要分成3部分：</p>
<ul>
<li><p>左边部分是整个界面的层级关系，在这里可以以树形级层的方式来查看整个界面元素。</p>
</li>
<li><p>中间部分是一个可视化的查看区域，用户可以在这里切换2D或3D的查看方式，这里看到的也是程序运行的实时界面。</p>
</li>
<li><p>右边部边是控件的详细参数查看区域，当我们选中某一个具体的控件时，右边就可以显示出该控件的具体的参数列表。我们除了可以查看这些参数值是否正确外，还可以尝试修改这些值。所有的修改都可以实时反应到中间的实时预览区域。</p>
</li>
</ul>
<h2 id="重要提示"><a href="#重要提示" class="headerlink" title="重要提示"></a>重要提示</h2><ol>
<li><strong>不要将连接了Reveal库文件的应用正式发布</strong>。 Reveal的检视机制，会将您应用的许多内部信息暴露出来，而这将很可能导致您的应用被Apple审查团队拒绝发布。Reveal的目的仅用于内部开发与应用调试。</li>
<li><strong>当iOS应用进入后台后，Reveal服务将会自动停止</strong>。 当应用重新打开时，它又会自动启动。</li>
<li><strong>Reveal支持基于iOS 7及更新版本而编译的应用</strong>。 构建配置中的iOS Deployment Target也必须是’iOS 7.0’或更新版本。 如果iOS版本太旧，您有可能会在构建应用过程中遇到连接错误。</li>
<li><strong>Reveal使用Bonjour协议来连接运行时的iOS应用</strong>。 如果您的iOS应用是运行在真实的设备之上，那么此设备也需要处在同一个网络之内，以便电脑上的Reveal应用能够与之连接。如果您在连接应用时仍遇到问题，请先检查防火墙和代理设置，以确保它们没有阻碍通讯。</li>
</ol>
<h2 id="用Reveal调试其它应用界面"><a href="#用Reveal调试其它应用界面" class="headerlink" title="用Reveal调试其它应用界面"></a>用Reveal调试其它应用界面</h2><p>如果你的设备越狱了，那么还可以用Reveal来”调试“其它应用界面，什么时候会有这种奇怪的需求呢？——当我们想学习别人是如何实现界面效果的时候。iOS设备的目录<strong>/Library/MobileSubstrate/DynamicLibraries</strong> 下存放着所有在系统启动时就需要加载的动态链接库，所以我们只需要将Reveal的动态链接库上传到该目录即可。</p>
<p>对于越狱的设备，我们可以在安装OpenSSH之后，用scp来上传该文件。具体步骤如下：</p>
<p>将libReveal.dylib 上传到 /Library/MobileSubstrate/DynamicLibraries<br>如果libReveal.dylib没有执行权限，用chmod +x libReveal.dylib命令，给其增加执行权限<br>执行 killall SpringBoard 重启桌面</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reveal是分析、调试iOS应用UI的利器。&lt;/p&gt;
&lt;p&gt;Reveal能够在运行时调试和修改iOS应用程序。它能连接到应用程序，并允许开发者编辑各种用户界面参数，这反过来会立即反应在程序的UI上。就像用FireBug调试HTML页面一样，在不需要重写代码、重新构建和重新部署应用程序的情况下就能够调试和修改iOS用户界面。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Tools" scheme="http://chaosky.me/tags/Tools/"/>
    
      <category term="Reveal" scheme="http://chaosky.me/tags/Reveal/"/>
    
  </entry>
  
  <entry>
    <title>macOS 搭建 RTMP 直播服务器</title>
    <link href="http://chaosky.me/2016/07/23/macOS-setup-rtmp-server/"/>
    <id>http://chaosky.me/2016/07/23/macOS-setup-rtmp-server/</id>
    <published>2016-07-23T04:13:06.000Z</published>
    <updated>2016-09-26T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>直播开发流程:<br>数据采集→ 数据编码 → 数据传输(流媒体服务器) → 解码数据 → 播放显示<br>本文主要介绍如何搭建RTMP直播服务器以及测试流媒体服务器是否搭建成功。</p>
<a id="more"></a>
<h2 id="RTMP直播服务器搭建"><a href="#RTMP直播服务器搭建" class="headerlink" title="RTMP直播服务器搭建"></a>RTMP直播服务器搭建</h2><ol>
<li><p>安装Homebrew</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>Homebrew添加nginx套件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew tap homebrew/nginx</div></pre></td></tr></table></figure>
</li>
<li><p>安装 nginx 和 rtmp 模块</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install nginx-full --<span class="keyword">with</span>-rtmp-<span class="class"><span class="keyword">module</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>查看 nginx 安装信息</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ brew info nginx-full</div><div class="line">...</div><div class="line">...</div><div class="line">Docroot is: /usr/local/var/www</div><div class="line"></div><div class="line">  The default port has been <span class="keyword">set</span> <span class="keyword">in</span> /usr/<span class="keyword">local</span>/etc/nginx/nginx.conf <span class="keyword">to</span> <span class="number">8080</span> so that</div><div class="line">  nginx can run <span class="keyword">without</span> sudo.</div><div class="line"></div><div class="line">  nginx will <span class="keyword">load</span> all files <span class="keyword">in</span> /usr/<span class="keyword">local</span>/etc/nginx/servers/.</div><div class="line"></div><div class="line">- Tips -</div><div class="line">Run port <span class="number">80</span>:</div><div class="line"> $ sudo chown root:wheel /usr/<span class="keyword">local</span>/Cellar/nginx-<span class="keyword">full</span>/<span class="number">1.10</span><span class="number">.1</span>/<span class="keyword">bin</span>/nginx</div><div class="line"> $ sudo chmod u+s /usr/<span class="keyword">local</span>/Cellar/nginx-<span class="keyword">full</span>/<span class="number">1.10</span><span class="number">.1</span>/<span class="keyword">bin</span>/nginx</div><div class="line">Reload config:</div><div class="line"> $ nginx -s reload</div><div class="line">Reopen <span class="keyword">Logfile</span>:</div><div class="line"> $ nginx -s reopen</div><div class="line"><span class="keyword">Stop</span> process:</div><div class="line"> $ nginx -s <span class="keyword">stop</span></div><div class="line">Waiting <span class="keyword">on</span> <span class="keyword">exit</span> process</div><div class="line"> $ nginx -s quit</div><div class="line"></div><div class="line"><span class="keyword">To</span> have launchd <span class="keyword">start</span> homebrew/nginx/nginx-<span class="keyword">full</span> <span class="keyword">now</span> <span class="keyword">and</span> restart <span class="keyword">at</span> login:</div><div class="line">  brew services <span class="keyword">start</span> homebrew/nginx/nginx-<span class="keyword">full</span></div><div class="line"><span class="keyword">Or</span>, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></div><div class="line">  nginx</div></pre></td></tr></table></figure>
<p>从以上信息可以得出</p>
<p>nginx 安装位置：<code>/usr/local/Cellar/nginx-full/1.10.1</code></p>
<p>nginx 配置文件位置：<code>/usr/local/etc/nginx/nginx.conf</code></p>
<p> nginx服务器根目录位置：<code>/usr/local/var/www</code></p>
</li>
<li><p>测试是否能成功启动nginx服务</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>nginx</div></pre></td></tr></table></figure>
<p>在浏览器地址栏输入：<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>，出现 <strong>Welcome to nginx!</strong> 表示nginx安装成功了！</p>
</li>
<li><p>修改<code>nginx.conf</code>配置文件，配置<code>rtmp</code></p>
<p>在<code>http</code>节点后面添加rtmp配置</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    ……</div><div class="line">&#125;</div><div class="line"></div><div class="line">rtmp &#123;</div><div class="line">    server &#123;</div><div class="line">        listen <span class="number">1935</span>;</div><div class="line"></div><div class="line">        <span class="built_in">application</span> mytv &#123;</div><div class="line">            live <span class="keyword">on</span>;</div><div class="line">            <span class="built_in">record</span> off;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>重新加载nginx的配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nginx <span class="_">-s</span> reload</div></pre></td></tr></table></figure>
<p>现在我们可以来对推流进行测试了，看看我们的rtmp能不能推流成功。</p>
</li>
</ol>
<h2 id="测试服务器"><a href="#测试服务器" class="headerlink" title="测试服务器"></a>测试服务器</h2><h3 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h3><p>推流可以使用OBS软件和FFmpeg工具。</p>
<h4 id="OBS"><a href="#OBS" class="headerlink" title="OBS"></a>OBS</h4><p>软件下载地址：<a href="https://obsproject.com" target="_blank" rel="external">https://obsproject.com</a></p>
<p>软件设置如图：<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-23-Snip20160723_1.png" alt="Snip20160723_1"><br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-23-Snip20160723_2.png" alt="Snip20160723_2"></p>
<h4 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h4><p>安装ffmpeg</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>ffmpeg</div></pre></td></tr></table></figure>
<p>使用ffmpeg命令推流桌面</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ffmpeg -f avfoundation -<span class="selector-tag">i</span> <span class="string">"1:0"</span> -vcodec libx264 -preset ultrafast -acodec aac -f flv rtmp:<span class="comment">//localhost:1935/mytv/room1</span></div></pre></td></tr></table></figure>
<p>以上命令中<code>&quot;1:0&quot;</code>可以通过查看ffmpeg是否支持对应的设备</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ffmpeg -f avfoundation -list_devices true -<span class="selector-tag">i</span> <span class="string">""</span></div><div class="line">...</div><div class="line">...</div><div class="line">[AVFoundation <span class="selector-tag">input</span> device @ <span class="number">0</span>x7fd3a9500b40] AVFoundation <span class="selector-tag">video</span> devices:</div><div class="line">[AVFoundation <span class="selector-tag">input</span> device @ <span class="number">0</span>x7fd3a9500b40] [<span class="number">0</span>] FaceTime HD Camera</div><div class="line">[AVFoundation <span class="selector-tag">input</span> device @ <span class="number">0</span>x7fd3a9500b40] [<span class="number">1</span>] Capture screen <span class="number">0</span></div><div class="line">[AVFoundation <span class="selector-tag">input</span> device @ <span class="number">0</span>x7fd3a9500b40] AVFoundation <span class="selector-tag">audio</span> devices:</div><div class="line">[AVFoundation <span class="selector-tag">input</span> device @ <span class="number">0</span>x7fd3a9500b40] [<span class="number">0</span>] Built-<span class="keyword">in</span> Microphone</div></pre></td></tr></table></figure>
<h3 id="拉流"><a href="#拉流" class="headerlink" title="拉流"></a>拉流</h3><p>测试拉流可以使用VLC软件</p>
<p>软件下载地址：<a href="http://www.videolan.org/vlc/index.html" target="_blank" rel="external">http://www.videolan.org/vlc/index.html</a></p>
<p>选择File -&gt; Open Network…</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-23-Snip20160723_4.png" alt="Snip20160723_4"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直播开发流程:&lt;br&gt;数据采集→ 数据编码 → 数据传输(流媒体服务器) → 解码数据 → 播放显示&lt;br&gt;本文主要介绍如何搭建RTMP直播服务器以及测试流媒体服务器是否搭建成功。&lt;/p&gt;
    
    </summary>
    
      <category term="macOS" scheme="http://chaosky.me/categories/macOS/"/>
    
    
      <category term="直播" scheme="http://chaosky.me/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="RTMP" scheme="http://chaosky.me/tags/RTMP/"/>
    
  </entry>
  
  <entry>
    <title>Swift Tips</title>
    <link href="http://chaosky.me/2016/07/08/Swift-Tips/"/>
    <id>http://chaosky.me/2016/07/08/Swift-Tips/</id>
    <published>2016-07-08T03:37:38.000Z</published>
    <updated>2016-09-26T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<ul>
<li>更新日期：2016-07-08</li>
</ul>
<h2 id="1-Swift-命令行程序接收用户输入"><a href="#1-Swift-命令行程序接收用户输入" class="headerlink" title="1. Swift 命令行程序接收用户输入"></a>1. Swift 命令行程序接收用户输入</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 标准输入设备</span></div><div class="line"><span class="keyword">let</span> stdin = NSFileHandle.fileHandleWithStandardInput()</div><div class="line"><span class="keyword">let</span> inputData = keyboard.availableData</div><div class="line"><span class="built_in">var</span> inputStr = NSString(<span class="built_in">data</span>: inputData, encoding: NSUTF8StringEncoding)</div><div class="line"><span class="comment">// 处理换行符</span></div><div class="line">inputStr = inputStr?.stringByReplacingOccurrencesOfString(<span class="string">"\n"</span>, withString: <span class="string">""</span>)</div></pre></td></tr></table></figure>
<h2 id="2-获取变量内存地址"><a href="#2-获取变量内存地址" class="headerlink" title="2. 获取变量内存地址"></a>2. 获取变量内存地址</h2><p><strong>unsafeAddressOf(_:)</strong></p>
<p>返回类对象的指针，类型为<code>UnsafePointer</code></p>
<blockquote>
<p>函数原型<br>func unsafeAddressOf(_ object: AnyObject) -&gt; UnsafePointer<void></void></p>
</blockquote>
<p>示例代码<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> str = <span class="string">"Hello, playground"</span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(unsafeAddressOf(str)</span></span>)</div><div class="line"><span class="comment">// 0x00007f859a404ca0</span></div></pre></td></tr></table></figure></p>
<p><strong>func withUnsafePointer<t, result="">(<em>: inout T, </em>: @noescape (UnsafePointer<t>) throws -&gt; Result)</t></t,></strong><br>Invokes body with an UnsafePointer to arg and returns the result. Useful for calling Objective-C APIs that take “in/out” parameters (and default-constructible “out” parameters) by pointer.</p>
<blockquote>
<p>函数原型<br>func withUnsafePointer<t, result="">(<em> arg: inout T, </em> body: @noescape (UnsafePointer<t>) throws -&gt; Result) rethrows -&gt; Result</t></t,></p>
</blockquote>
<p>示例代码<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">struct Point &#123;</div><div class="line">    <span class="selector-tag">var</span> x: CGFloat, y: CGFloat</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">var</span> point = Point(x: <span class="number">10</span>, y: <span class="number">10</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(withUnsafePointer(&amp;point)</span></span> &#123;UnsafePointer&lt;Point&gt;($<span class="number">0</span>)&#125;)</div><div class="line"><span class="comment">// 0x0000000115e3f8d8</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新日期：2016-07-08&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-Swift-命令行程序接收用户输入&quot;&gt;&lt;a href=&quot;#1-Swift-命令行程序接收用户输入&quot; class=&quot;headerli
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Tips" scheme="http://chaosky.me/tags/Tips/"/>
    
      <category term="Swift" scheme="http://chaosky.me/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 （Design Pattern）</title>
    <link href="http://chaosky.me/2016/06/30/Design-Pattern/"/>
    <id>http://chaosky.me/2016/06/30/Design-Pattern/</id>
    <published>2016-06-30T07:45:48.000Z</published>
    <updated>2016-09-26T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向过程和面向对象"><a href="#面向过程和面向对象" class="headerlink" title="面向过程和面向对象"></a>面向过程和面向对象</h2><ol>
<li><p>面向过程是祈使句，面向对象是主谓（宾）结构。</p>
</li>
<li><p>面向过程注重数据的存储和操作，面向对象注重用程序模拟生活逻辑。</p>
</li>
<li><p>面向过程数据和操作数据的过程是分离的，没有逻辑上的必然联系；面向对象中数据和操作数据的方法是逻辑上的整体，称之为对象。</p>
</li>
</ol>
<h2 id="面向对象的基本概念"><a href="#面向对象的基本概念" class="headerlink" title="面向对象的基本概念"></a>面向对象的基本概念</h2><ul>
<li><p>对象：现实世界中的对象是我们认识世界的基本单元，世界就是由这些基本单元组成的。一切皆为对象；每个对象都是独一无二的；对象都有属性和行为；对象都属于某个类。</p>
</li>
<li><p>类：类是对一组具有共同属性和行为的对象的抽象，它是对象的蓝图和模板。</p>
</li>
<li><p>消息：对象与对象之间存在着一定的联系，这种联系通过消息的传递来实现。程序中的一切操作都通过向对象发送消息来实现，对象接收到消息后，调用有关对象的行为来完成相应的操作。</p>
</li>
</ul>
<h2 id="面向对象的3个基本要素"><a href="#面向对象的3个基本要素" class="headerlink" title="面向对象的3个基本要素"></a>面向对象的3个基本要素</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装是把一个事物包装起来，使外界不了解它的内部的具体情况。在面向对象的程序设计中，封装就是把相关的数据和代码结合成一个有机的整体，形成数据和操作代码的封装体，对外只提供一个可以控制的接口，内部大部分的实现细节对外隐蔽，达到对数据访问权的合理控制。封装使程序中个部分之间的相互联系达到最小，提高了程序的安全性，简化了程序代码的编写工作。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是从已有的类创建新类的过程，提供继承信息的称为父类，得到继承信息的称为子类，子类和父类之间是IS-A关系，继承使得类与类之间形成一个层次结构。</p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态是不同结构的对象可以以各自不同的方式响应同一个消息，或者说同一个消息可以根据发送消息的对象的不同而采用多种不同的操作行为，这是面向对象最精髓的部分。</p>
<a id="more"></a>
<h2 id="软件设计终极原则：高内聚-低耦合"><a href="#软件设计终极原则：高内聚-低耦合" class="headerlink" title="软件设计终极原则：高内聚 低耦合"></a>软件设计终极原则：高内聚 低耦合</h2><h3 id="内聚"><a href="#内聚" class="headerlink" title="内聚"></a>内聚</h3><p>一个模块内各个元素彼此结合的紧密程度。</p>
<p>在一个模块内，让每个元素之间都尽可能的紧密相连。</p>
<p>也就是充分利用每一个元素的功能，各施所能，以最终实现某个功能。</p>
<p>如果某个元素与该模块的关系比较疏松的话，可能该模块的结构还不够完善，或者是该元素是多余的。</p>
<h3 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h3><p>一个软件结构内不同模块之间互连程度的度量。</p>
<p>一个完整的系统，模块与模块之间，尽可能的使其独立存在。</p>
<p>也就是说，让每个模块，尽可能的独立完成某个特定的子功能。</p>
<p>模块与模块之间的接口，尽量的少而简单。</p>
<p>如果某两个模块间的关系比较复杂的话，最好首先考虑进一步的模块划分。</p>
<p>这样有利于修改和组合。</p>
<h3 id="内聚、耦合的区别与联系"><a href="#内聚、耦合的区别与联系" class="headerlink" title="内聚、耦合的区别与联系"></a>内聚、耦合的区别与联系</h3><p>内聚和耦合，包含了横向和纵向的关系。功能内聚和数据耦合，是我们需要达成的目标。横向的内聚和耦合，通常体现在系统的各个模块、类之间的关系，而纵向的耦合，体现在系统的各个层次之间的关系。</p>
<p>耦合性着重于不同模块之间的相依性，而内聚性着重于一模块中不同功能之间的关系性。</p>
<p>并不是内聚越高越好，耦合越低越好，真正好的设计是在高内聚和低耦合间进行平衡，也就是说高内聚和低耦合是冲突的。</p>
<p>最强的内聚莫过于一个类只写一个函数，这样内聚性绝对是最高的。但这会带来一个明显的问题：类的数量急剧增多，这样就导致了其它类的耦合特别多，于是整个设计就变成了“高内聚高耦合”了。由于高耦合，整个系统变动同样非常频繁。</p>
<p>对于耦合来说，最弱的耦合是一个类将所有的函数都包含了，这样类完全不依赖其它类，耦合性是最低的。但这样会带来一个明显的问题：内聚性很低，于是整个设计就变成了“低耦合低内聚”了。由于低内聚，整个类的变动同样非常频繁。</p>
<p>对于“低耦合低内聚”来说，还有另外一个明显的问题：几乎无法被其它类重用。原因很简单，类本身太庞大了，要么实现很复杂，要么数据很大，其它类无法明确该如何重用这个类。</p>
<h2 id="面向对象七原则（SOLID）"><a href="#面向对象七原则（SOLID）" class="headerlink" title="面向对象七原则（SOLID）"></a>面向对象七原则（SOLID）</h2><h3 id="S：单一职责原则（Single-Resposibility-Principle）"><a href="#S：单一职责原则（Single-Resposibility-Principle）" class="headerlink" title="S：单一职责原则（Single-Resposibility Principle）"></a>S：单一职责原则（Single-Resposibility Principle）</h3><p>其核心思想为：一个类，最好只做一件事，只有一个引起它的变化。单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多，这将导致职责依赖，相互之间就产生影响，从而大大损伤其内聚性和耦合度。通常意义下的单一职责，就是指只有一种单一功能，不要为类实现过多的功能点，以保证实体只有一个引起它变化的原因。</p>
<p>专注，是一个人优良的品质；同样的，单一也是一个类的优良设计。交杂不清的职责将使得代码看起来特别别扭牵一发而动全身，有失美感和必然导致丑陋的系统错误风险。</p>
<h3 id="O：开放封闭原则（Open-Closed-principle）"><a href="#O：开放封闭原则（Open-Closed-principle）" class="headerlink" title="O：开放封闭原则（Open-Closed principle）"></a>O：开放封闭原则（Open-Closed principle）</h3><p>其核心思想是：软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。开放封闭原则主要体现在两个方面1、对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。2、对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对其进行任何尝试的修改。</p>
<p>实现开开放封闭原则的核心思想就是对抽象编程，而不对具体编程，因为抽象相对稳定。让类依赖于固定的抽象，所以修改就是封闭的；而通过面向对象的继承和多态机制，又可以实现对抽象类的继承，通过覆写其方法来改变固有行为，实现新的拓展方法，所以就是开放的。<br>“需求总是变化”没有不变的软件，所以就需要用封闭开放原则来封闭变化满足需求，同时还能保持软件内部的封装体系稳定，不被需求的变化影响。</p>
<h3 id="L：里氏替换原则（Liskov-Substituion-Principle）"><a href="#L：里氏替换原则（Liskov-Substituion-Principle）" class="headerlink" title="L：里氏替换原则（Liskov-Substituion Principle）"></a>L：里氏替换原则（Liskov-Substituion Principle）</h3><p> 其核心思想是：子类必须能够替换其基类。这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。在父类和子类的具体行为中，必须严格把握继承层次中的关系和特征，将基类替换为子类，程序的行为不会发生任何变化。同时，这一约束反过来则是不成立的，子类可以替换基类，但是基类不一定能替换子类。</p>
<p>Liskov替换原则，主要着眼于对抽象和多态建立在继承的基础上，因此只有遵循了Liskov替换原则，才能保证继承复用是可靠地。实现的方法是面向接口编程：将公共部分抽象为基类接口或抽象类，通过Extract Abstract Class，在子类中通过覆写父类的方法实现新的方式支持同样的职责。<br>Liskov替换原则是关于继承机制的设计原则，违反了Liskov替换原则就必然导致违反开放封闭原则。<br>Liskov替换原则能够保证系统具有良好的拓展性，同时实现基于多态的抽象机制，能够减少代码冗余，避免运行期的类型判别。</p>
<h3 id="I：接口隔离原则（Interface-Segregation-Principle）"><a href="#I：接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="I：接口隔离原则（Interface-Segregation Principle）"></a>I：接口隔离原则（Interface-Segregation Principle）</h3><p>其核心思想是：使用多个小的专门的接口，而不要使用一个大的总接口。</p>
<p>具体而言，接口隔离原则体现在：接口应该是内聚的，应该避免“胖”接口。一个类对另外一个类的依赖应该建立在最小的接口上，不要强迫依赖不用的方法，这是一种接口污染。<br>接口有效地将细节和抽象隔离，体现了对抽象编程的一切好处，接口隔离强调接口的单一性。而胖接口存在明显的弊端，会导致实现的类型必须完全实现接口的所有方法、属性等；而某些时候，实现类型并非需要所有的接口定义，在设计上这是“浪费”，而且在实施上这会带来潜在的问题，对胖接口的修改将导致一连串的客户端程序需要修改，有时候这是一种灾难。在这种情况下，将胖接口分解为多个特点的定制化方法，使得客户端仅仅依赖于它们的实际调用的方法，从而解除了客户端不会依赖于它们不用的方法。<br>分离的手段主要有以下两种：1、委托分离，通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接依赖，但是会增加系统的开销。2、多重继承分离，通过接口多继承来实现客户的需求，这种方式是较好的。</p>
<h3 id="D：依赖倒置原则（Dependecy-Inversion-Principle）"><a href="#D：依赖倒置原则（Dependecy-Inversion-Principle）" class="headerlink" title="D：依赖倒置原则（Dependecy-Inversion Principle）"></a>D：依赖倒置原则（Dependecy-Inversion Principle）</h3><p>其核心思想是：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。</p>
<p>我们知道，依赖一定会存在于类与类、模块与模块之间。当两个模块之间存在紧密的耦合关系时，最好的方法就是分离接口和实现：在依赖之间定义一个抽象的接口使得高层模块调用接口，而底层模块实现接口的定义，以此来有效控制耦合关系，达到依赖于抽象的设计目标。<br>抽象的稳定性决定了系统的稳定性，因为抽象是不变的，依赖于抽象是面向对象设计的精髓，也是依赖倒置原则的核心。<br>依赖于抽象是一个通用的原则，而某些时候依赖于细节则是在所难免的，必须权衡在抽象和具体之间的取舍，方法不是一层不变的。依赖于抽象，就是对接口编程，不要对实现编程。</p>
<h3 id="迪米特法则，又称最少知道原则（Demeter-Principle）"><a href="#迪米特法则，又称最少知道原则（Demeter-Principle）" class="headerlink" title="迪米特法则，又称最少知道原则（Demeter Principle）"></a>迪米特法则，又称最少知道原则（Demeter Principle）</h3><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<h3 id="合成聚合复用原则（Composite-Reuse-Principle）"><a href="#合成聚合复用原则（Composite-Reuse-Principle）" class="headerlink" title="合成聚合复用原则（Composite Reuse Principle）"></a>合成聚合复用原则（Composite Reuse Principle）</h3><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h3><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。<br>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>
<h3 id="什么是-GOF（四人帮，全拼-Gang-of-Four）？"><a href="#什么是-GOF（四人帮，全拼-Gang-of-Four）？" class="headerlink" title="什么是 GOF（四人帮，全拼 Gang of Four）？"></a>什么是 GOF（四人帮，全拼 Gang of Four）？</h3><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念。<br>四位作者合称 GOF（四人帮，全拼 Gang of Four）。他们所提出的设计模式主要是基于以下的面向对象设计原则。</p>
<ul>
<li>对接口编程而不是对实现编程。</li>
<li>优先使用对象组合而不是继承。</li>
</ul>
<h3 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h3><p>根据设计模式的参考书 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。</p>
<h3 id="创建型模式（5种）"><a href="#创建型模式（5种）" class="headerlink" title="创建型模式（5种）"></a>创建型模式（5种）</h3><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用新的运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p>
<ul>
<li>工厂模式（Factory Pattern）</li>
<li>抽象工厂模式（Abstract Factory Pattern）</li>
<li>单例模式（Singleton Pattern）</li>
<li>建造者模式（Builder Pattern）</li>
<li>原型模式（Prototype Pattern）</li>
</ul>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。<br>主要解决：主要解决接口选择的问题。<br>何时使用：我们明确地计划不同条件下创建不同实例时。<br>如何解决：让其子类实现工厂接口，返回的也是一个抽象的产品。<br>关键代码：创建过程在其子类执行。<br>应用实例： 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate 换数据库只需换方言和驱动就可以。<br>优点： 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。<br>缺点：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。<br>使用场景： 1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 3、设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。<br>注意事项：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 Shape 接口和实现 Shape 接口的实体类。下一步是定义工厂类 ShapeFactory。<br>FactoryPatternDemo，我们的演示类使用 ShapeFactory 来获取 Shape 对象。它将向 ShapeFactory 传递信息（CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/factory_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p>
<h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>意图：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。<br>主要解决：主要解决接口选择的问题。<br>何时使用：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。<br>如何解决：在一个产品族里面，定义多个产品。<br>关键代码：在一个工厂里聚合多个同类产品。<br>应用实例：工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OO 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。<br>优点：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<br>缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。<br>使用场景： 1、QQ 换皮肤，一整套一起换。 2、生成不同操作系统的程序。<br>注意事项：产品族难扩展，产品等级易扩展。</p>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>我们将创建 Shape 和 Color 接口和实现这些接口的实体类。下一步是创建抽象工厂类 AbstractFactory。接着定义工厂类 ShapeFactory 和 ColorFactory，这两个工厂类都是扩展了 AbstractFactory。然后创建一个工厂创造器/生成器类 FactoryProducer。<br>AbstractFactoryPatternDemo，我们的演示类使用 FactoryProducer 来获取 AbstractFactory 对象。它将向 AbstractFactory 传递形状信息 Shape（CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。同时它还向 AbstractFactory 传递颜色信息 Color（RED / GREEN / BLUE），以便获取它所需对象的类型。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/abstractfactory_pattern_uml_diagram.jpg" alt="抽象工厂模式的 UML 图"></p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br>注意：<br>1、单例类只能有一个实例。<br>2、单例类必须自己创建自己的唯一实例。<br>3、单例类必须给所有其他对象提供这一实例。</p>
<h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>主要解决：一个全局使用的类频繁地创建与销毁。<br>何时使用：当您想控制实例数目，节省系统资源的时候。<br>如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。<br>关键代码：构造函数是私有的。<br>应用实例： 1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。<br>优点： 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。<br>缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。<br>使用场景： 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。<br>注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p>
<h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 SingleObject 类。SingleObject 类有它的私有构造函数和本身的一个静态实例。<br>SingleObject 类提供了一个静态方法，供外界获取它的静态实例。SingletonPatternDemo，我们的演示类使用 SingleObject 类来获取 SingleObject 对象。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/singleton_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p>
<h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>意图：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。<br>主要解决：主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。<br>何时使用：一些基本部件不会变，而其组合经常变化的时候。<br>如何解决：将变与不变分离开。<br>关键代码：建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。<br>应用实例： 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”。 2、JAVA 中的 StringBuilder。<br>优点： 1、建造者独立，易扩展。 2、便于控制细节风险。<br>缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。<br>使用场景： 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。<br>注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p>
<h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><p>我们假设一个快餐店的商业案例，其中，一个典型的套餐可以是一个汉堡（Burger）和一杯冷饮（Cold drink）。汉堡（Burger）可以是素食汉堡（Veg Burger）或鸡肉汉堡（Chicken Burger），它们是包在纸盒中。冷饮（Cold drink）可以是可口可乐（coke）或百事可乐（pepsi），它们是装在瓶子中。<br>我们将创建一个表示食物条目（比如汉堡和冷饮）的 Item 接口和实现 Item 接口的实体类，以及一个表示食物包装的 Packing 接口和实现 Packing 接口的实体类，汉堡是包在纸盒中，冷饮是装在瓶子中。<br>然后我们创建一个 Meal 类，带有 Item 的 ArrayList 和一个通过结合 Item 来创建不同类型的 Meal 对象的 MealBuilder。BuilderPatternDemo，我们的演示类使用 MealBuilder 来创建一个 Meal。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/builder_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p>
<h4 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h4><p>意图：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。<br>主要解决：在运行期建立和删除原型。<br>何时使用： 1、当一个系统应该独立于它的产品创建，构成和表示时。 2、当要实例化的类是在运行时刻指定时，例如，通过动态装载。 3、为了避免创建一个与产品类层次平行的工厂类层次时。 4、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。<br>如何解决：利用已有的一个原型对象，快速地生成和原型对象一样的实例。<br>关键代码： 1、实现克隆操作，在 JAVA 继承 Cloneable，重写 clone()，在 .NET 中可以使用 Object 类的 MemberwiseClone() 方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。 2、原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些”易变类”拥有稳定的接口。<br>应用实例： 1、细胞分裂。 2、JAVA 中的 Object clone() 方法。<br>优点： 1、性能提高。 2、逃避构造函数的约束。<br>缺点： 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。 3、逃避构造函数的约束。<br>使用场景： 1、资源优化场景。 2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。 3、性能和安全要求的场景。 4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。 5、一个对象多个修改者的场景。 6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。 7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。<br>注意事项：与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。</p>
<h4 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个抽象类 Shape 和扩展了 Shape 类的实体类。下一步是定义类 ShapeCache，该类把 shape 对象存储在一个 Hashtable 中，并在请求的时候返回它们的克隆。<br>PrototypPatternDemo，我们的演示类使用 ShapeCache 类来获取 Shape 对象。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/prototype_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="结构型模式（8种）"><a href="#结构型模式（8种）" class="headerlink" title="结构型模式（8种）"></a>结构型模式（8种）</h3><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p>
<ul>
<li>适配器模式（Adapter Pattern）</li>
<li>桥接模式（Bridge Pattern）</li>
<li>过滤器模式（Filter、Criteria Pattern）</li>
<li>组合模式（Composite Pattern）</li>
<li>装饰器模式（Decorator Pattern）</li>
<li>外观模式（Facade Pattern）</li>
<li>享元模式（Flyweight Pattern）</li>
<li>代理模式（Proxy Pattern）</li>
</ul>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。<br>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。<br>我们通过下面的实例来演示适配器模式的使用。其中，音频播放器设备只能播放 mp3 文件，通过使用一个更高级的音频播放器来播放 vlc 和 mp4 文件。</p>
<h4 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h4><p>意图：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。<br>主要解决：主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。<br>何时使用： 1、系统需要使用现有的类，而此类的接口不符合系统的需要。 2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）<br>如何解决：继承或依赖（推荐）。<br>关键代码：适配器继承或依赖已有的对象，实现想要的目标接口。<br>应用实例： 1、美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。 2、JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。 3、在 LINUX 上运行 WINDOWS 程序。 4、JAVA 中的 jdbc。<br>优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。<br>缺点： 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。<br>使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。<br>注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</p>
<h4 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h4><p>我们有一个 MediaPlayer 接口和一个实现了 MediaPlayer 接口的实体类 AudioPlayer。默认情况下，AudioPlayer 可以播放 mp3 格式的音频文件。<br>我们还有另一个接口 AdvancedMediaPlayer 和实现了 AdvancedMediaPlayer 接口的实体类。该类可以播放 vlc 和 mp4 格式的文件。<br>我们想要让 AudioPlayer 播放其他格式的音频文件。为了实现这个功能，我们需要创建一个实现了 MediaPlayer 接口的适配器类 MediaAdapter，并使用 AdvancedMediaPlayer 对象来播放所需的格式。<br>AudioPlayer 使用适配器类 MediaAdapter 传递所需的音频类型，不需要知道能播放所需格式音频的实际类。AdapterPatternDemo，我们的演示类使用 AudioPlayer 类来播放各种格式。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/adapter_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。<br>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。<br>我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。</p>
<h4 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h4><p>意图：将抽象部分与实现部分分离，使它们都可以独立的变化。<br>主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。<br>何时使用：实现系统可能有多个角度分类，每一种角度都可能变化。<br>如何解决：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。<br>关键代码：抽象类依赖实现类。<br>应用实例： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。<br>优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。<br>缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。<br>使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。<br>注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。</p>
<h4 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h4><p>我们有一个作为桥接实现的 DrawAPI 接口和实现了 DrawAPI 接口的实体类 RedCircle、GreenCircle。Shape 是一个抽象类，将使用 DrawAPI 的对象。BridgePatternDemo，我们的演示类使用 Shape 类来画出不同颜色的圆。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/bridge_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="过滤器模式"><a href="#过滤器模式" class="headerlink" title="过滤器模式"></a>过滤器模式</h3><p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p>
<h4 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 Person 对象、Criteria 接口和实现了该接口的实体类，来过滤 Person 对象的列表。CriteriaPatternDemo，我们的演示类使用 Criteria 对象，基于各种标准和它们的结合来过滤 Person 对象的列表。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/filter_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。<br>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。<br>我们通过下面的实例来演示组合模式的用法。实例演示了一个组织中员工的层次结构。</p>
<h4 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h4><p>意图：将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。<br>主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。<br>何时使用： 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。<br>如何解决：树枝和叶子实现统一接口，树枝内部组合该接口。<br>关键代码：树枝内部组合该接口，并且含有内部属性 List，里面放 Component。<br>应用实例： 1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作树、操作符和另一个操作数。 2、在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。<br>优点： 1、高层模块调用简单。 2、节点自由增加。<br>缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。<br>使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理。<br>注意事项：定义时为具体类。</p>
<h4 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h4><p>我们有一个类 Employee，该类被当作组合模型类。CompositePatternDemo，我们的演示类使用 Employee 类来添加部门层次结构，并打印所有员工。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/composite_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。<br>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。<br>我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。</p>
<h4 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h4><p>意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。<br>主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。<br>何时使用：在不想增加很多子类的情况下扩展类。<br>如何解决：将具体功能职责划分，同时继承装饰者模式。<br>关键代码： 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。<br>应用实例： 1、孙悟空有 72 变，当他变成”庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。 2、不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。<br>优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。<br>缺点：多层装饰比较复杂。<br>使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。<br>注意事项：可代替继承。</p>
<h4 id="实现-9"><a href="#实现-9" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 Shape 接口和实现了 Shape 接口的实体类。然后我们创建一个实现了 Shape 接口的抽象装饰类 ShapeDecorator，并把 Shape 对象作为它的实例变量。<br>RedShapeDecorator 是实现了 ShapeDecorator 的实体类。<br>DecoratorPatternDemo，我们的演示类使用 RedShapeDecorator 来装饰 Shape 对象。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。<br>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p>
<h4 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h4><p>意图：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。<br>主要解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。<br>何时使用： 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可。 2、定义系统的入口。<br>如何解决：客户端不与系统耦合，外观类与系统耦合。<br>关键代码：在客户端和复杂系统之间再加一层，这一次将调用顺序、依赖关系等处理好。<br>应用实例： 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 2、JAVA 的三层开发模式。<br>优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。<br>缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。<br>使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。<br>注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。</p>
<h4 id="实现-10"><a href="#实现-10" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 Shape 接口和实现了 Shape 接口的实体类。下一步是定义一个外观类 ShapeMaker。<br>ShapeMaker 类使用实体类来代表用户对这些类的调用。FacadePatternDemo，我们的演示类使用 ShapeMaker 类来显示结果。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/facade_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。<br>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 Circle 对象。</p>
<h4 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h4><p>意图：运用共享技术有效地支持大量细粒度的对象。<br>主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。<br>何时使用： 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。<br>如何解决：用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。<br>关键代码：用 HashMap 存储这些对象。<br>应用实例： 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。<br>优点：大大减少对象的创建，降低系统的内存，使效率提高。<br>缺点：提高了系统的负责度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。<br>使用场景： 1、系统有大量相似对象。 2、需要缓冲池的场景。<br>注意事项： 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。</p>
<h4 id="实现-11"><a href="#实现-11" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 Shape 接口和实现了 Shape 接口的实体类 Circle。下一步是定义工厂类 ShapeFactory。<br>ShapeFactory 有一个 Circle 的 HashMap，其中键名为 Circle 对象的颜色。无论何时接收到请求，都会创建一个特定颜色的圆。ShapeFactory 检查它的 HashMap 中的 circle 对象，如果找到 Circle 对象，则返回该对象，否则将创建一个存储在 hashmap 中以备后续使用的新对象，并把该对象返回到客户端。<br>FlyWeightPatternDemo，我们的演示类使用 ShapeFactory 来获取 Shape 对象。它将向 ShapeFactory 传递信息（red / green / blue/ black / white），以便获取它所需对象的颜色。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/flyweight_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。<br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p>
<h4 id="介绍-11"><a href="#介绍-11" class="headerlink" title="介绍"></a>介绍</h4><p>意图：为其他对象提供一种代理以控制对这个对象的访问。<br>主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。<br>何时使用：想在访问一个类时做一些控制。<br>如何解决：增加中间层。<br>关键代码：实现与被代理类组合。<br>应用实例： 1、Windows 里面的快捷方式。 2、猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。 3、买火车票不一定在火车站买，也可以去代售点。 4、一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。 5、spring aop。<br>优点： 1、职责清晰。 2、高扩展性。 3、智能化。<br>缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。<br>使用场景：按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。<br>注意事项： 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p>
<h4 id="实现-12"><a href="#实现-12" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。<br>ProxyPatternDemo，我们的演示类使用 ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/proxy_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="行为型模式（12种）"><a href="#行为型模式（12种）" class="headerlink" title="行为型模式（12种）"></a>行为型模式（12种）</h3><p>这些设计模式特别关注对象之间的通信。</p>
<ul>
<li>责任链模式（Chain of Responsibility Pattern）</li>
<li>命令模式（Command Pattern）</li>
<li>解释器模式（Interpreter Pattern）</li>
<li>迭代器模式（Iterator Pattern）</li>
<li>中介者模式（Mediator Pattern）</li>
<li>备忘录模式（Memento Pattern）</li>
<li>观察者模式（Observer Pattern）</li>
<li>状态模式（State Pattern）</li>
<li>空对象模式（Null Object Pattern）</li>
<li>策略模式（Strategy Pattern）</li>
<li>模板模式（Template Pattern）</li>
<li>访问者模式（Visitor Pattern）</li>
</ul>
<h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。<br>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p>
<h4 id="介绍-12"><a href="#介绍-12" class="headerlink" title="介绍"></a>介绍</h4><p>意图：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。<br>主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。<br>何时使用：在处理消息的时候以过滤很多道。<br>如何解决：拦截的类都实现统一接口。<br>关键代码：Handler 里面聚合它自己，在 HanleRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。<br>应用实例： 1、红楼梦中的”击鼓传花”。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。<br>优点： 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。<br>缺点： 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。<br>使用场景： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。<br>注意事项：在 JAVA WEB 中遇到很多应用。</p>
<h4 id="实现-13"><a href="#实现-13" class="headerlink" title="实现"></a>实现</h4><p>我们创建抽象类 AbstractLogger，带有详细的日志记录级别。然后我们创建三种类型的记录器，都扩展了 AbstractLogger。每个记录器消息的级别是否属于自己的级别，如果是则相应地打印出来，否则将不打印并把消息传给下一个记录器。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/chain_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p>
<h4 id="介绍-13"><a href="#介绍-13" class="headerlink" title="介绍"></a>介绍</h4><p>意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。<br>主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。<br>何时使用：在某些场合，比如要对行为进行”记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将”行为请求者”与”行为实现者”解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。<br>如何解决：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。<br>关键代码：定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口<br>应用实例：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。<br>优点： 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。<br>缺点：使用命令模式可能会导致某些系统有过多的具体命令类。<br>使用场景：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。<br>注意事项：系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。</p>
<h4 id="实现-14"><a href="#实现-14" class="headerlink" title="实现"></a>实现</h4><p>我们首先创建作为命令的接口 Order，然后创建作为请求的 Stock 类。实体命令类 BuyStock 和 SellStock，实现了 Order 接口，将执行实际的命令处理。创建作为调用对象的类 Broker，它接受订单并能下订单。<br>Broker 对象使用命令模式，基于命令的类型确定哪个对象执行哪个命令。CommandPatternDemo，我们的演示类使用 Broker 类来演示命令模式。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/command_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p>
<h4 id="介绍-14"><a href="#介绍-14" class="headerlink" title="介绍"></a>介绍</h4><p>意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。<br>主要解决：对于一些固定文法构建一个解释句子的解释器。<br>何时使用：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。<br>如何解决：构件语法树，定义终结符与非终结符。<br>关键代码：构件环境类，包含解释器之外的一些全局信息，一般是 HashMap。<br>应用实例：编译器、运算表达式计算。<br>优点： 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。<br>缺点： 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。<br>使用场景： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。<br>注意事项：可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。</p>
<h4 id="实现-15"><a href="#实现-15" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个接口 Expression 和实现了 Expression 接口的实体类。定义作为上下文中主要解释器的 TerminalExpression 类。其他的类 OrExpression、AndExpression 用于创建组合式表达式。<br>InterpreterPatternDemo，我们的演示类使用 Expression 类创建规则和演示表达式的解析。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/interpreter_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。<br>迭代器模式属于行为型模式。</p>
<h4 id="介绍-15"><a href="#介绍-15" class="headerlink" title="介绍"></a>介绍</h4><p>意图：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。<br>主要解决：不同的方式来遍历整个整合对象。<br>何时使用：遍历一个聚合对象。<br>如何解决：把在元素之间游走的责任交给迭代器，而不是聚合对象。<br>关键代码：定义接口：hasNext, next。<br>应用实例：JAVA 中的 iterator。<br>优点： 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。<br>缺点：由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。<br>使用场景： 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。<br>注意事项：迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</p>
<h4 id="实现-16"><a href="#实现-16" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个叙述导航方法的 Iterator 接口和一个返回迭代器的 Container 接口。实现了 Container 接口的实体类将负责实现 Iterator 接口。<br>IteratorPatternDemo，我们的演示类使用实体类 NamesRepository 来打印 NamesRepository 中存储为集合的 Names。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/iterator_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。</p>
<h4 id="介绍-16"><a href="#介绍-16" class="headerlink" title="介绍"></a>介绍</h4><p>意图：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。<br>主要解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。<br>何时使用：多个类相互耦合，形成了网状结构。<br>如何解决：将上述网状结构分离为星型结构。<br>关键代码：对象 Colleague 之间的通信封装到一个类中单独处理。<br>应用实例： 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。<br>优点： 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。<br>缺点：中介者会庞大，变得复杂难以维护。<br>使用场景： 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。<br>注意事项：不应当在职责混乱的时候使用。</p>
<h4 id="实现-17"><a href="#实现-17" class="headerlink" title="实现"></a>实现</h4><p>我们通过聊天室实例来演示中介者模式。实例中，多个用户可以向聊天室发送消息，聊天室向所有的用户显示消息。我们将创建两个类 ChatRoom 和 User。User 对象使用 ChatRoom 方法来分享他们的消息。<br>MediatorPatternDemo，我们的演示类使用 User 对象来显示他们之间的通信。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/mediator_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。</p>
<h4 id="介绍-17"><a href="#介绍-17" class="headerlink" title="介绍"></a>介绍</h4><p>意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。<br>主要解决：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。<br>何时使用：很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有”后悔药”可吃。<br>如何解决：通过一个备忘录类专门存储对象状态。<br>关键代码：客户不与备忘录类耦合，与备忘录管理类耦合。<br>应用实例： 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。<br>优点： 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。<br>缺点：消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。<br>使用场景： 1、需要保存/恢复数据的相关状态场景。 2、提供一个可回滚的操作。<br>注意事项： 1、为了符合迪米特原则，还要增加一个管理备忘录的类。 2、为了节约内存，可使用原型模式+备忘录模式。</p>
<h4 id="实现-18"><a href="#实现-18" class="headerlink" title="实现"></a>实现</h4><p>备忘录模式使用三个类 Memento、Originator 和 CareTaker。Memento 包含了要被恢复的对象的状态。Originator 创建并在 Memento 对象中存储状态。Caretaker 对象负责从 Memento 中恢复对象的状态。<br>MementoPatternDemo，我们的演示类使用 CareTaker 和 Originator 对象来显示对象的状态恢复。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/memento_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。</p>
<h4 id="介绍-18"><a href="#介绍-18" class="headerlink" title="介绍"></a>介绍</h4><p>意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。<br>主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。<br>何时使用：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。<br>如何解决：使用面向对象技术，可以将这种依赖关系弱化。<br>关键代码：在抽象类里有一个 ArrayList 存放观察者们。<br>应用实例： 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。<br>优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。<br>缺点： 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。<br>使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。<br>注意事项： 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</p>
<h4 id="实现-19"><a href="#实现-19" class="headerlink" title="实现"></a>实现</h4><p>观察者模式使用三个类 Subject、Observer 和 Client。Subject 对象带有绑定观察者到 Client 对象和从 Client 对象解绑观察者的方法。我们创建 Subject 类、Observer 抽象类和扩展了抽象类 Observer 的实体类。<br>ObserverPatternDemo，我们的演示类使用 Subject 和实体类对象来演示观察者模式。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。<br>在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。</p>
<h4 id="介绍-19"><a href="#介绍-19" class="headerlink" title="介绍"></a>介绍</h4><p>意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。<br>主要解决：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。<br>何时使用：代码中包含大量与对象状态有关的条件语句。<br>如何解决：将各种具体的状态类抽象出来。<br>关键代码：通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if…else 等条件选择语句。<br>应用实例： 1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态。 2、曾侯乙编钟中，’钟是抽象接口’,’钟A’等是具体状态，’曾侯乙编钟’是具体环境（Context）。<br>优点： 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。<br>缺点： 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。<br>使用场景： 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。<br>注意事项：在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。</p>
<h4 id="实现-20"><a href="#实现-20" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 State 接口和实现了 State 接口的实体状态类。Context 是一个带有某个状态的类。<br>StatePatternDemo，我们的演示类使用 Context 和状态对象来演示 Context 在状态改变时的行为变化。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/state_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="空对象模式"><a href="#空对象模式" class="headerlink" title="空对象模式"></a>空对象模式</h3><p>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。<br>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。</p>
<h4 id="实现-21"><a href="#实现-21" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个定义操作（在这里，是客户的名称）的 AbstractCustomer 抽象类，和扩展了 AbstractCustomer 类的实体类。工厂类 CustomerFactory 基于客户传递的名字来返回 RealCustomer 或 NullCustomer 对象。<br>NullPatternDemo，我们的演示类使用 CustomerFactory 来演示空对象模式的用法。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/null_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。<br>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p>
<h4 id="介绍-20"><a href="#介绍-20" class="headerlink" title="介绍"></a>介绍</h4><p>意图：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。<br>主要解决：在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。<br>何时使用：一个系统有许多许多类，而区分它们的只是他们直接的行为。<br>如何解决：将这些算法封装成一个一个的类，任意地替换。<br>关键代码：实现同一个接口。<br>应用实例： 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。<br>优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。<br>缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。<br>使用场景： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。<br>注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p>
<h4 id="实现-22"><a href="#实现-22" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个定义活动的 Strategy 接口和实现了 Strategy 接口的实体策略类。Context 是一个使用了某种策略的类。<br>StrategyPatternDemo，我们的演示类使用 Context 和策略对象来演示 Context 在它所配置或使用的策略改变时的行为变化。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p>
<h4 id="介绍-21"><a href="#介绍-21" class="headerlink" title="介绍"></a>介绍</h4><p>意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<br>主要解决：一些方法通用，却在每一个子类都重新写了这一方法。<br>何时使用：有一些通用的方法。<br>如何解决：将这些通用算法抽象出来。<br>关键代码：在抽象类实现，其他步骤在子类实现。<br>应用实例： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、Spirng 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。<br>优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。<br>缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。<br>使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。<br>注意事项：为防止恶意操作，一般模板方法都加上 final 关键词。</p>
<h4 id="实现-23"><a href="#实现-23" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个定义操作的 Game 抽象类，其中，模板方法设置为 final，这样它就不会被重写。Cricket 和 Football 是扩展了 Game 的实体类，它们重写了抽象类的方法。<br>TemplatePatternDemo，我们的演示类使用 Game 来演示模板模式的用法。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p>
<h4 id="介绍-22"><a href="#介绍-22" class="headerlink" title="介绍"></a>介绍</h4><p>意图：主要将数据结构与数据操作分离。<br>主要解决：稳定的数据结构和易变的操作耦合问题。<br>何时使用：需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，使用访问者模式将这些封装到类中。<br>如何解决：在被访问的类里面加一个对外提供接待访问者的接口。<br>关键代码：在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。<br>应用实例：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。<br>优点： 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。<br>缺点： 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。<br>使用场景： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。<br>注意事项：访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。</p>
<h4 id="实现-24"><a href="#实现-24" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个定义接受操作的 ComputerPart 接口。Keyboard、Mouse、Monitor 和 Computer 是实现了 ComputerPart 接口的实体类。我们将定义另一个接口 ComputerPartVisitor，它定义了访问者类的操作。Computer 使用实体访问者来执行相应的动作。<br>VisitorPatternDemo，我们的演示类使用 Computer、ComputerPartVisitor 类来演示访问者模式的用法。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/visitor_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="MVC-架构模式"><a href="#MVC-架构模式" class="headerlink" title="MVC 架构模式"></a>MVC 架构模式</h3><p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。<br>Model（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。<br>View（视图） - 视图代表模型包含的数据的可视化。<br>Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</p>
<h4 id="实现-25"><a href="#实现-25" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个作为模型的 Student 对象。StudentView 是一个把学生详细信息输出到控制台的视图类，StudentController 是负责存储数据到 Student 对象中的控制器类，并相应地更新视图 StudentView。<br>MVCPatternDemo，我们的演示类使用 StudentController 来演示 MVC 模式的用法。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/mvc_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="设计模式之间的关系"><a href="#设计模式之间的关系" class="headerlink" title="设计模式之间的关系"></a>设计模式之间的关系</h3><p><img src="http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg" alt=""></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://design-patterns.readthedocs.org/zh_CN/latest/index.html" target="_blank" rel="external">http://design-patterns.readthedocs.org/zh_CN/latest/index.html</a></li>
<li><a href="http://www.runoob.com/design-pattern/design-pattern-intro.html" target="_blank" rel="external">http://www.runoob.com/design-pattern/design-pattern-intro.html</a></li>
<li><a href="https://zh.wikipedia.org/wiki/设计模式_(计算机)" target="_blank" rel="external">https://zh.wikipedia.org/wiki/设计模式_(计算机)</a></li>
<li><a href="http://willtea.iteye.com/blog/1704806" target="_blank" rel="external">http://willtea.iteye.com/blog/1704806</a></li>
<li><a href="https://github.com/huang303513/Design-Pattern-For-iOS" target="_blank" rel="external">Design Pattern For iOS Objective-C代码</a></li>
<li><a href="https://github.com/ochococo/Design-Patterns-In-Swift" target="_blank" rel="external">Design Patterns In Swift 代码</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面向过程和面向对象&quot;&gt;&lt;a href=&quot;#面向过程和面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向过程和面向对象&quot;&gt;&lt;/a&gt;面向过程和面向对象&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;面向过程是祈使句，面向对象是主谓（宾）结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;面向过程注重数据的存储和操作，面向对象注重用程序模拟生活逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;面向过程数据和操作数据的过程是分离的，没有逻辑上的必然联系；面向对象中数据和操作数据的方法是逻辑上的整体，称之为对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;面向对象的基本概念&quot;&gt;&lt;a href=&quot;#面向对象的基本概念&quot; class=&quot;headerlink&quot; title=&quot;面向对象的基本概念&quot;&gt;&lt;/a&gt;面向对象的基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对象：现实世界中的对象是我们认识世界的基本单元，世界就是由这些基本单元组成的。一切皆为对象；每个对象都是独一无二的；对象都有属性和行为；对象都属于某个类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类：类是对一组具有共同属性和行为的对象的抽象，它是对象的蓝图和模板。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消息：对象与对象之间存在着一定的联系，这种联系通过消息的传递来实现。程序中的一切操作都通过向对象发送消息来实现，对象接收到消息后，调用有关对象的行为来完成相应的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;面向对象的3个基本要素&quot;&gt;&lt;a href=&quot;#面向对象的3个基本要素&quot; class=&quot;headerlink&quot; title=&quot;面向对象的3个基本要素&quot;&gt;&lt;/a&gt;面向对象的3个基本要素&lt;/h2&gt;&lt;h3 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;headerlink&quot; title=&quot;封装&quot;&gt;&lt;/a&gt;封装&lt;/h3&gt;&lt;p&gt;封装是把一个事物包装起来，使外界不了解它的内部的具体情况。在面向对象的程序设计中，封装就是把相关的数据和代码结合成一个有机的整体，形成数据和操作代码的封装体，对外只提供一个可以控制的接口，内部大部分的实现细节对外隐蔽，达到对数据访问权的合理控制。封装使程序中个部分之间的相互联系达到最小，提高了程序的安全性，简化了程序代码的编写工作。&lt;/p&gt;
&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;p&gt;继承是从已有的类创建新类的过程，提供继承信息的称为父类，得到继承信息的称为子类，子类和父类之间是IS-A关系，继承使得类与类之间形成一个层次结构。&lt;/p&gt;
&lt;h3 id=&quot;多态&quot;&gt;&lt;a href=&quot;#多态&quot; class=&quot;headerlink&quot; title=&quot;多态&quot;&gt;&lt;/a&gt;多态&lt;/h3&gt;&lt;p&gt;多态是不同结构的对象可以以各自不同的方式响应同一个消息，或者说同一个消息可以根据发送消息的对象的不同而采用多种不同的操作行为，这是面向对象最精髓的部分。&lt;/p&gt;
    
    </summary>
    
      <category term="软件设计" scheme="http://chaosky.me/categories/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://chaosky.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Design Pattern" scheme="http://chaosky.me/tags/Design-Pattern/"/>
    
      <category term="SOLID" scheme="http://chaosky.me/tags/SOLID/"/>
    
  </entry>
  
  <entry>
    <title>App Store 审核指南——2016.6</title>
    <link href="http://chaosky.me/2016/06/24/App-Store-Review-Guidelines/"/>
    <id>http://chaosky.me/2016/06/24/App-Store-Review-Guidelines/</id>
    <published>2016-06-24T07:15:57.000Z</published>
    <updated>2016-09-26T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提交应用之前的检查列表"><a href="#提交应用之前的检查列表" class="headerlink" title="提交应用之前的检查列表"></a>提交应用之前的检查列表</h2><p>为了帮助你的应用能够尽可能顺利的过审，请查看下面列出来的可能降低审核速度或者被拒绝的常见失误。本清单无法代替审核条款，但你需要确保你已经达到了清单的要求作为良好的开始。</p>
<p><strong>确保你已经：</strong></p>
<ul>
<li>测试你的应用程序，保证它不会发生崩溃和错误</li>
<li>确保你的应用程序的信息和应用内容保持完整和准确</li>
<li>保证联系人信息始终有效，审核团队可以及时联系到你</li>
<li>提供一个有效的测试帐号以及登录信息，并提供测试功能必要的的硬件和资源（例如，一个测试用的二维码）</li>
<li>保证后台服务在审核期间运行正常</li>
<li>如果应用的某些功能和应用内付费隐藏较深，需提供详细的描述文档和支持文档。如果因为地域的原因我们无法正常使用该功能，请提供该功能的描述视频链接。</li>
<li><p>请检查你的应用程序是否符合其他规范，包括（注意文中部分内容也有对应的条款和说明，请注意查看）</p>
<p>开发指南<br><a href="https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072" target="_blank" rel="external">应用程序编程指南（App Programming Guide）</a><br><a href="https://developer.apple.com/library/mac/documentation/General/Conceptual/ExtensibilityPG/" target="_blank" rel="external">应用扩展编程指南（App Extension Programming Guide）</a><br><a href="https://developer.apple.com/icloud/documentation/data-storage/index.html" target="_blank" rel="external">iOS数据存储条款（iOS Data Storage Guidelines）</a><br><a href="https://developer.apple.com/library/mac/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010672" target="_blank" rel="external">Mac OS X文件系统文档（Mac OS X File System Documentation）</a><br><a href="https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/Introduction/Introduction.html" target="_blank" rel="external">Safari扩展开发指南（Safari Extensions Development Guide）</a><br><a href="https://developer.apple.com/library/ios/iTunesConnectGuide/" target="_blank" rel="external">iTunes Connect开发指南（iTunes Connect Developer Guide）</a></p>
<p>设计指南<br><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/" target="_blank" rel="external">iOS人机交互界面条款（iOS Human Interface Guidelines）</a><br><a href="https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/OSXHIGuidelines/" target="_blank" rel="external">Mac OS人机交互界面条款（Mac OS Human Interface Guidelines）</a><br><a href="https://developer.apple.com/tvos/human-interface-guidelines/" target="_blank" rel="external">tvOS人机交互界面条款（tvOS Human Interface Guidelines）</a><br><a href="https://developer.apple.com/watch/human-interface-guidelines/" target="_blank" rel="external">watchOS人机交互界面条款（watchOS Human Interface Guidelines）</a></p>
<p>品牌营销指南<br><a href="https://developer.apple.com/app-store/marketing/guidelines/" target="_blank" rel="external">App Store市场营销条款（App Store Marketing Guidelines）</a><br><a href="https://developer.apple.com/apple-pay/Apple-Pay-Identity-Guidelines.pdf" target="_blank" rel="external">苹果支付身份条款（Apple Pay Identity Guidelines）</a><br><a href="https://developer.apple.com/wallet/Add-to-Apple-Wallet-Guidelines.pdf" target="_blank" rel="external">加入苹果支付许可条款（Add to Apple Wallet Guidelines）</a><br><a href="http://www.apple.com/legal/intellectual-property/guidelinesfor3rdparties.html" target="_blank" rel="external">使用Apple商标和版权的条款（Guidelines for Using Apple Trademarks and Copyrights）</a></p>
</li>
</ul>
<a id="more"></a>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>当用户从App Store安装应用的时候，他们需要确认这样的操作是安全的。所以应用程序不能包含令人不快或者冒犯性的内容，而且使用中不会造成身心伤害。我们列出了常见的几种缺陷，如果你的应用准备冒犯用户或者与用户发生冲突，App Store不是你的应用应该上架的地方。</p>
<h3 id="1-1不当内容"><a href="#1-1不当内容" class="headerlink" title="1.1不当内容"></a>1.1不当内容</h3><p>应用程序不应该包括攻击性，敏感，令人不悦，侮辱或者品味低下的内容。例如：</p>
<p>1.1.1 诽谤或者人格侮辱的内容，包括引用或者评论宗教、种族、性取向、性别或者其他目标群体的内容，特别是该应用对特定的人群造成了伤害（只有专业的政治讽刺作家和幽默大师才不会受到此限制）。</p>
<p>1.1.2 对人或动物被杀害、致残、折磨、虐待的逼真的描述或者具有暴力倾向的内容。如果是游戏，那么其中的敌人不能只针对特定的种族、文化、政府、公司以及任何其他实体。</p>
<p>1.1.3 鼓励人们非法或者轻率使用武器和危险品的内容，或者方便人们购买枪支的内容。</p>
<p>1.1.4 公开的性爱或色情的内容。根据韦氏词典（Webster’s Dictionary）的定义，这些内容特指“明确的描述或展示性器官，或者目的在于激发人们的性欲，而不是展示美学或者渲染气氛”。</p>
<p>1.1.5 煽动宗教仇恨或者对宗教文献的误导性和不准确的引用。</p>
<p>1.1.6 提供虚假信息和虚假功能，包括提供不正确的设备信息，提供恶作剧的功能例如虚假的位置跟踪工具。即便是明确指出该应用程序是出于娱乐性的目的也不会无视该条款。发送匿名虚假诈骗信息或者拨打恶意电话的应用会被直接拒绝。</p>
<h3 id="1-2-用户生成的内容"><a href="#1-2-用户生成的内容" class="headerlink" title="1.2 用户生成的内容"></a>1.2 用户生成的内容</h3><p>为了防止非法滥用用户生成的内容，从而给用户提供虚假信息、盗取用户的知识产权，社交应用以及应用当中包含用户生成的信息的应用必须包括下述功能：</p>
<ul>
<li>过滤不良内容</li>
<li>提供举报机制</li>
<li>后台服务可以提供阻止骚扰用户的行为</li>
<li>提供官方联系方式，让用户可以快速联系到开发商</li>
</ul>
<p>如果应用在使用用户生成的内容或者提供服务的时候，主要目的是发布色情内容，人肉搜索、侮辱用户，人身威胁、恐吓用户，这种应用不应该放在应用商店，而且苹果可能会不通知开发商并直接下架。如果你的应用使用用户生成的信息来提供网络服务，并且网页上包含了一些限制级的内容，需要默认隐藏并且提供明显的NSFW（不适合工作场所）标识，用户主动点击才会显示。</p>
<h3 id="1-3-儿童分类"><a href="#1-3-儿童分类" class="headerlink" title="1.3 儿童分类"></a>1.3 儿童分类</h3><p>儿童分类是人们找到适合儿童的应用的良好方式。如果你希望你的应用上架到这个类别当中，你需要关注并且在设计应用的时候需要照顾到儿童的良好体验。这些应用程序不可以包括指向其他应用的链接，付费入口以及其他可能会吸引儿童的不适合的内容，除非提供给家长监控和开启的能力。请记住，一旦客户期望你的应用程序遵循儿童类别的要求，那么它需要进行不断的修改从而满足后续版本的儿童类别的条款更新。即便是你打算取消发布在儿童类别当中也一样需要遵守这些条款。点此了解家长监控的更多内容。</p>
<p>儿童类别的应用不允许包括基于用户行为的广告（也就是这种广告会根据用户行为而决定展示什么样的内容）。如果包含了广告，这些广告必须也适合儿童。与此同时，你也需要特别留意世界各地有关在线收集儿童数据的相关法律法规。请务必查看本条款的隐私条款来了解更多的相关信息。</p>
<h3 id="1-4-人身伤害"><a href="#1-4-人身伤害" class="headerlink" title="1.4 人身伤害"></a>1.4 人身伤害</h3><p>如果你的应用程序可能会危害到人身安全，我们可能会拒绝掉它。这类情况包括：</p>
<p>1.4.1 如果你的应用属于医疗范畴，那我们将会对这个应用提供用于医疗诊断的信息的准确性进行更加严格的审查。如果你的医疗应用已经获得了相关监管部门的批准，你需要随同你的应用一并提供指向相关批准文档的链接用于审核</p>
<p>1.4.2 药物剂量计算器必须来自药物生产企业、医院、高校、健康保险公司以及其他具有合法资质的实体。或者你的计算方法已经获得了FDA或其他国际上的同行的认可。考虑到潜在的人身伤害的危险，我们需要确保你的应用会长期获得更新和支持</p>
<p>1.4.3 应用程序不允许鼓励人们非法摄入过量的酒精或药物，或者鼓励未成年人消费药物、酒精和烟草。与此同时，严禁销售大麻等毒品。</p>
<p>1.4.4 应用程序只能显示执法机构提供的酒后驾驶检查站，而且不允许鼓励人们进行危险的行为，包括酒驾、超速。</p>
<p>1.4.5 应用程序禁止强迫人们采用违背苹果硬件的安全文档的方式，包括冒着设备损坏或者造成人身伤害的危险使用他们的设备。例如，应用程序不应该鼓励人们将设备塞到床垫下面或枕头下面充电。</p>
<h3 id="1-5-开发者信息"><a href="#1-5-开发者信息" class="headerlink" title="1.5 开发者信息"></a>1.5 开发者信息</h3><p>用户需要了解当他们遇到问题的时候该如何与您联系。确保你提供的链接当中包含了使用户找到你的非常方便的方法。如果联系人信息不准确或者过期，这不仅令用户失望，在有些国家和地区这也属于违法行为。与此同时，确保支付许可包含发行商的有效联系信息，并且这些信息采用分配给发行商的来自权威机构的合法的根证书进行签名。</p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><h3 id="2-1-应用程序的完整性"><a href="#2-1-应用程序的完整性" class="headerlink" title="2.1 应用程序的完整性"></a>2.1 应用程序的完整性</h3><p>提审版本的应用必须是最终版本，并且包含了所有应用内容以及所有有效链接。应用在提交的时候需要清除掉所有占位符、无效地址和临时内容。确保你的应用在提交审核之前经过充分测试并且没有BUG，如果你的应用需要登陆，需要包含一个合法的账户而且对应的后台服务也是正常有效的。如果你的应用包含应用内付费，确保他们是完整的，最新的，并且审核人员可以很容易找到。如果不可以，需要提供明确的解释为何不行。请不要把应用程序审核当作软件测试服务，如果你的应用不完整或者存在明显的技术缺陷，它将直接被拒绝。</p>
<h3 id="2-2-Beta版测试"><a href="#2-2-Beta版测试" class="headerlink" title="2.2 Beta版测试"></a>2.2 Beta版测试</h3><p>您的应用程序的测试版本不应该上架到应用商店，请使用Testflight来代替。如果你的应用提交到Testflight Beta，那么这个应用已经准备好对外发布，并且符合应用审核条款。请注意，Testflight版本的应用不允许从测试人员当中获取任何利益，包括来自众筹的资金。你应该对测试人员提供明确的更新说明。请通过Testflight Beta测试说明了解更多信息。</p>
<h3 id="2-3-应用内容的准确性"><a href="#2-3-应用内容的准确性" class="headerlink" title="2.3 应用内容的准确性"></a>2.3 应用内容的准确性</h3><p>客户在下载你的应用的时候需要明确了解你的应用是什么，所以请确保你的应用描述、截图、预览视频始终是最新版本，并且能够准确反映你的应用。</p>
<p>2.3.1 不要在你的应用当中包含任何隐藏和没有相关说明文档的功能。你的应用程序的功能必须让用户和审核人员了解清楚。如果这样的行为过分或者反复出现，你可能会被苹果从开发者身份当中除名。我们努力确保App Store是一个令人信赖的生态系统，并且期望每一个开发者也能够遵守这种要求。如果你没有信誉，我们不想和你合作。</p>
<p>2.3.2 如果你的应用程序包含了应用内付费功能，请确保你的应用程序的描述、截图和预览视频能够明确表明哪些功能、关卡、订阅内容等需要额外购买。</p>
<p>2.3.3 你的截图必须符合你的应用程序的实际内容，而不是标题艺术，登陆界面和闪屏界面。</p>
<p>2.3.4 你的预览视频是让用户能够快速了解你的应用是用来做什么的好方法。为了确保人们可以清楚的了解他们将会在你的应用当中获得什么内容，你的预览视频必须从应用程序本身的运行效果当中捕获。你可以添加旁白或者文本描述来帮助解释视频本身无法解释清楚的内容。</p>
<p>2.3.5 你需要遵守App Store的类别定义，并且为你的应用选择最合适的类别。如果你选择的类别不符合你的应用，我们可能会帮助你改变应用类别。</p>
<p>2.3.6 你必须诚实的回答iTunes Connect上面提供的年龄分级的问题，从而你的应用可以良好的使用家长控制功能。如果你的应用年龄分级不正确，用户可能会对你的应用程序的行为表示十分意外，这也可能导致某些国家和地区的监管部门对你的应用分级不正确的问题开展调查。</p>
<p>2.3.7 你需要创建一个独一无二的应用名称，设计一套准确描述你的应用的关键词。不要尝试使用商标术语、流行的应用名称以及其他不相关的词语来包装你的应用。苹果可能随时修改不恰当的关键词。</p>
<p>2.3.8 你的应用内容应该适合所有的用户，所以一定要确保你的应用图标、截图和预览视频能够准确的反映你的应用。即使你的应用程序年龄分级高于4+，你的图标、截图和预览视频也必须符合4+的年龄分级。例如你的应用是一个游戏，并且具有暴力内容，你必须选择一个不反映死亡、枪决的截图放到应用商店当中。记住确保你的应用内容，包括应用名称和图标（小图标、大图标、Apple Watch图标等）是一致的从而防止用户感到迷惑。</p>
<p>2.3.9 开发商具有保证版权合法的责任，包括应用程序图标，截图，预览视频的版权。图标、截图和预览视频需要使用一个虚构的账户的信息，而不是一个真实的用户信息。</p>
<h3 id="2-4-硬件兼容性"><a href="#2-4-硬件兼容性" class="headerlink" title="2.4 硬件兼容性"></a>2.4 硬件兼容性</h3><p>2.4.1 为了确保人们可以尽可能充分的体验你的应用，在可能的情况下iPhone应用也可以完美支持iPad。我们鼓励您建立通用的应用，使得用户可以在不同的设备上使用。</p>
<p>2.4.2 你的应用需要高效的利用电量。应用程序不应该快速的消耗电池电量并且产生过多的热量，或者对用户的设备造成不必要的负担。</p>
<p>2.4.3 你的Apple TV应用可以在只有Siri遥控器或者游戏手柄的时候可以正常运行，但我们不反对你通过更多的外围设备增强你的应用功能的做法。如果你需要一个游戏控制器，请确保在游戏当中对这个游戏控制器提供明确的教程，从而让用户知道如何使用这个控制器。</p>
<p>2.4.4 应用程序不应该建议或者要求设备重新启动。</p>
<p>2.4.5 通过Mac App Store发布的应用还需要遵守额外的要求：</p>
<p>（i）它们必须适当的被沙盒化，而且遵守Mac OS文件系统文档。这些应用也必须通过对应的Mac OSAPI来修改其他应用的数据（例如书签、地址簿和日历）。</p>
<p>（ii）必须使用Xcode对应用进行打包，不允许包含第三方的安装程序。它们必须是自我包含的、单一文件的安装包，而且不能在共享的位置安装代码和解压资源。</p>
<p>（iii）在未经用户允许的情况下不允许自动启动或者开机启动，而且用户退出应用之后不允许在未经用户同意的情况下残留后台进程。应用不允许自动将图标放在Dock或者用户桌面。</p>
<p>（iv）应用程序不允许私自下载和安装其他应用，驱动，额外的代码，以及添加应用功能或者明显改变与审核版本的应用不同的应用工作方式的资源文件。</p>
<p>（v）应用程序不允许要求升级到root权限，或者使用setuid属性来升级权限。</p>
<p>（vi）这些应用运行的时候不允许弹出要求许可证的窗口，或者其他的显示方式来反盗版（应用商店允许付费并视为购买了正版授权）。</p>
<p>（vii）必须使用Mac App Store发布更新，其他方式不被允许。</p>
<p>（viii）应用程序仅在在当前版本的系统就可以运行，不允许使用可选安装的技术或者废弃过时的技术（例如Java, Rosetta等）</p>
<p>（ix）所有的本地化版本必须包含在同一个应用程序包下。</p>
<h3 id="2-5-软件要求"><a href="#2-5-软件要求" class="headerlink" title="2.5 软件要求"></a>2.5 软件要求</h3><p>2.5.1 应用程序只能使用公共API，不允许使用私有API。</p>
<p>2.5.2 应用程序bundle当中需要是自包含的，不允许读写它们设计的容器之外的数据，并且不得下载、安装或执行代码，包括其他iOS，watchOS，macOS和tvOS的应用。</p>
<p>2.5.3 如果应用程序传播病毒、文件、计算机代码或者其他可能损坏操作系统和硬件的功能，包括消息推送和游戏中心，将被拒绝。如果这种行为十分恶劣而且反复出现，开发者可能会被苹果除名。</p>
<p>2.5.4 多任务的应用只能在预期目的下运行后台服务，例如网络电话、音频播放、定位服务、任务计划、本地通知等。如果你的应用程序使用了定位服务，需要提供一个明确的提醒告诉用户这么做会加快电量消耗。</p>
<p>2.5.5 我们会在IPv6网络上审核你的应用，所以如果你的应用程序无法使用IPv6协议，可能会被拒绝。</p>
<p>2.5.6 应用程序如果浏览网络，必须使用WebKit框架和WebKit Javascript标准。</p>
<p>2.5.7 使用蜂窝数据网络播放的视频如果超过10分钟，必须使用HTTP Live Streaming技术并且提供192kbps的码率选项。</p>
<p>2.5.8 改动用户桌面/home界面环境体验的应用，以及模拟多应用小工具使用体验的的应用将会被拒绝。</p>
<p>2.5.9 应用程序如果修改了标准开关的功能，例如音量上下键和响铃开关，或者其他原生用户界面元素和行为将会被拒绝。</p>
<p>2.5.10 应用程序在提交的时候不允许包含一个空的广告栏或者测试广告。</p>
<h2 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h2><p>你的应用可以在App Store当中有多种方式赚钱。如果你的应用的商业模式不够明显，请在应用内容或者审核备注当中提供商业化描述。如果你的应用程序的行为我们无法理解，或者你的应用内付费入口不够明显，将会使得你的应用审核速度变慢甚至被拒绝。尽管定价权在你，但是如果你的应用或者应用内付费存在明显的敲竹杠的行为，我们也会拒绝发布这个应用或者这个应用内付费。我们会拒绝掉视图以不正常的高价格欺骗用户的昂贵的应用。</p>
<p>如果我们发现你视图诱导用户给较高评价等操纵评价的行为，例如通过支付来诱导、过滤不良评价、通过水军刷虚假评价或者通过第三方的公司或团队代表您进行这类操作，我们会采取措施来维护App Store的环境，其中可能包括将你从开发人员当中除名。</p>
<h3 id="3-1-付款"><a href="#3-1-付款" class="headerlink" title="3.1 付款"></a>3.1 付款</h3><p>3.1.1 应用内付费：如果你希望通过付费才可以解锁你的应用当中的一些功能（例如，订阅内容，游戏货币，游戏关卡，获取优质内容，解锁完整版本），你必须使用应用内付费（IAP）。应用程序不允许包括按钮、链接或者其他调用方式和行为指导用户采用非IAP的方式付费。通过IAP购买的游戏内的虚拟货币或积分必须只能在这个应用内才可以消费，不能过期，你应该确保你的应用针对具有可恢复的应用内付费具有恢复应用内付费的购买状态的功能和机制。如果你的应用内付费的付费类型不正确，你的应用会被拒绝。应用不可以直接或间接使用应用内付费的内容和功能向其他用户赠送礼品。在Mac应用商店发布的APP需要使用其他机制或者包含一个插件而不是应用商店本身来完成这样的赠送功能。</p>
<p>3.1.2 订阅：自动更新的订阅只能使用应用内付费来提供，并且只能用于期刊（例如报杂志），商业应用（例如企业、生产力、专业创作和云存储），媒体应用（例如视频，音频，语音和照片共享），以及其他批准的服务（例如约会计划、食谱管理和天气预报）。这些订阅必须持续不少于7天，而且从这款应用可以运行的用户的所有的设备当中都可以获取。你可能会提供跨应用程序的丁芸，但这些订阅内容不允许再扩展到第三方的应用或服务。</p>
<p>3.1.3 基于内容的“阅读”应用：应用可以允许用户访问他们之前购买的内容或者订阅的内容（比如报纸、杂志、书籍、音频，音乐，视频，专业的数据库，网络电话，云存储以及其他被批准的服务例如管理学生成绩和课程表的教育应用）。应用程序提供商不允许指引用户采用IAP之外的付费机制付费。</p>
<p>3.1.4 代码：应用不允许使用自己的机制来解锁应用内容和功能。包括许可证密钥，增强现实的标识，二维码等。在条件不允许的情况下（例如这个功能需要搭配特定的硬件才可以使用，比如天文应用程序在有望远镜的情况下可以扩展它的功能），这些应用可以不使用应用内付费来解锁这些功能。应用程序的功能如果搭配一个被批准的硬件来使用（例如一个玩具），可以只解锁基本的功能，并提供一个应用内付费解锁增值功能。您不允许要求用户购买一个不相关的产品或者参加一个市场营销活动来解锁应用的功能。</p>
<p>3.1.5 应用之外的商品和服务：如果你的应用允许人们购买商品和服务，但这些商品和服务的消费和该应用无关，你必须使用非IAP的方式完成支付。例如Apple Pay，信用卡和借记卡支付入口。应用程序可以使用批准的虚拟货币进行交易（例如比特币，狗狗币），只要这些付费方式遵守这个应用发布的国家和地区的相关法律法规即可。</p>
<p>3.1.6 ApplePay：使用Apple Pay的应用程序在出售商品或服务之前，必须提供所有商品和服务的信息给用户。必须正确的使用Apple Pay的品牌和用户界面元素，符合Apple Pay身份识别条款和人机交互界面条款（Apple Pay Identity Guidelines and Human Interface Guidelines）。使用Apple Pay提供定期付款必须提供下述信息：</p>
<p>定期的时间长度以及明确指出在取消之前定期付款将一直持续<br>每个周期提供什么样的功能和服务<br>实际收费的账单<br>取消定期付款的方式</p>
<h3 id="3-2-其他商业模式问题"><a href="#3-2-其他商业模式问题" class="headerlink" title="3.2 其他商业模式问题"></a>3.2 其他商业模式问题</h3><p>下面的列表并不全面，而且拟提交的应用可能会触犯我们以后更新的最新政策。但是这里面也提供了一些额外的你应该和不应该做的内容：</p>
<p>3.2.1 可接受的方式<br>（i）你的应用可以展示给用户你开发的其他应用，但你的应用程序不能仅仅是提供其他应用程序的目录应用</p>
<p>（ii）展示或者建议其他的第三方应用的集合，并且这些应用被设计为在特定领域才发挥作用（例如健康管理，航空服务，交通服务），你的应用程序需要提供强大的编辑能力，使得它看起来不像是一个单独的商店页面。</p>
<p>（iii）当租约过期的时候禁止用户访问特定的需要批准出租的内容（例如电影、电视节目、音乐和书籍）。但是其他的物品和服务不能过期。</p>
<p>（iv）支付许可可以用于付款或者收费，转移优惠券和票据（例如电影票，优惠券和VIP凭证）。其他用途可能会导致应用被拒绝或者撤销支付许可证书。</p>
<p>（v）保险类应用必须是免费的，符合发布地区的相关法律法规，且不能使用应用内付费。</p>
<p>3.2.2 不可接受的方式<br> （i）展示第三方应用的界面、扩展、插件看起来和App Store很像，或者作为一般的兴趣集合。</p>
<p>（ii）苹果的硬件和系统内置的功能需要付费才可以解锁，例如通知推送，照相机，陀螺仪。包括苹果服务，例如苹果音乐的访问能力和iCloud存储的访问能力。</p>
<p>（iii）人为的增加广告的展示量和点击量，包括应用程序被设计为主要展示广告的应用。</p>
<p>（iv）在应用内为慈善机构募捐资金。这类应用在应用商店必须免费而且必须使用其他方式募捐资金，例如通过短信，网页内支付。</p>
<p>（v）通过某种方式人为限制应用的使用人群，例如通过位置或者载体来限制。</p>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>苹果的客户十分喜欢那些简洁、精致、创新和易于使用的应用，这正是我们希望在应用商店当中看到的。尽管是你在创造出伟大的设计，但下面的这些标准都是通过应用商店审核的最低标准。</p>
<h3 id="4-1-模仿者"><a href="#4-1-模仿者" class="headerlink" title="4.1 模仿者"></a>4.1 模仿者</h3><p>拿出你自己的创意，我们知道你具有创意，所以请将你的创意实现出来。不要简单照搬应用商店当中的流行应用，或者仅仅对这个应用的名称和UI进行简单的修改并将其作为自己的应用。除了冒着侵犯他人知识产权的风险外，应用商店也难以搜索到正确的应用，并且这也使得你的同行受到不公正的待遇。</p>
<h3 id="4-2-最少功能"><a href="#4-2-最少功能" class="headerlink" title="4.2 最少功能"></a>4.2 最少功能</h3><p>你的应用在除了仅仅包装一个网站页面之外还要包含其他的功能和内容。如果你的应用程序不是特别有用、独特、或者看起来像是一个应用程序，那么它不应该在应用商店上架。如果你的应用没有提供持久的娱乐价值，或者仅限于让人们感觉毛骨悚然，这个应用可能会被拒。如果应用仅仅是一首歌曲或者一部电影，它应该被提交到iTunes Store。如果应用仅仅是一本书或者一本游戏指南，那它应该被提交到iBooks商店。</p>
<p>4.2.1 应用程序应该按照它的预期目的来调用API和开发框架。并且在应用描述当中明确指出这种融合方式。例如，HomeKit框架应该提供家庭自动化服务，HealthKit应该是基于健康和健身的目的并且集成在健康类应用程序当中。</p>
<p>4.2.2 除了目录用于提供专门的类别之外。应用程序的主要功能不应该是提供营销材料，广告，网络剪辑，内容聚合或者链接集合。</p>
<p>4.2.3 你的应用程序应该不依赖其他应用或功能就可以正常工作。</p>
<p>4.2.4 Apple Watch应用如果看起来像是一个表盘会令用户困惑，因为用户期望Apple Watch具有丰富的功能，例如刷卡，消息提醒和第三方服务。如果你的应用程序使用独特的方式展示时间是具有创造性的（例如对于冲浪爱好者展示潮汐的时间），但是如果你的应用看起来特别像传统的手表的表盘，我们会拒绝它。</p>
<p>4.2.5 如果应用的主要功能是访问iCloud以及iCloud的文件管理器，你需要提供额外的附加功能来使你的应用批准上架。</p>
<h3 id="4-3-垃圾应用"><a href="#4-3-垃圾应用" class="headerlink" title="4.3 垃圾应用"></a>4.3 垃圾应用</h3><p>不要为同一个应用程序创建多个Bundle ID。如果你的应用程序有多个版本，例如针对特定的国家和地区的版本，体育队伍，大学等，考虑提交一个版本的应用但是使用应用内付费来作区分。此外还要避免将你的应用放到已经饱和的分类下。App Store当中已经有了足够多的手电、放屁、打嗝、和某种不好的词语的应用。如果想要往App Store投放垃圾应用可能会导致你的开发者资格被撤销。</p>
<h3 id="4-4-扩展"><a href="#4-4-扩展" class="headerlink" title="4.4 扩展"></a>4.4 扩展</h3><p>应用程序扩展必须符合应用程序扩展开发指南（App Extension Programming Guide）或Safari扩展开发指南（Safari Extensions Development Guide），并且如果可能应该包括额外的功能，例如帮助界面，设置界面等。扩展应用的界面不应该包括市场营销内容，广告和应用内付费。</p>
<p>4.4.1 键盘扩展有一些额外的规则，他们必须：</p>
<p>提供键盘输入功能（比如键入字符）<br>提供切换输入法的方式<br>在无网络的情况下仍然可以正常使用<br>根据应用扩展开发指南（App Extension Programming Guide）的要求提供数字和符号输入键盘<br>如果键盘输入是这个应用的主要功能，那它的主要类别是工具（Utilities）<br>只基于增强iOS设备输入功能的目的收集用户信息</p>
<p>4.4.2 Safari扩展必须可以在当前OS X系统上的Safari浏览器上正常运行，它们不能干扰到系统和Safari UI元素，并且绝不能包含恶意或者误导用户的代码。违反此规则会被从开发者当中除名。</p>
<h3 id="4-5-苹果网站和服务"><a href="#4-5-苹果网站和服务" class="headerlink" title="4.5 苹果网站和服务"></a>4.5 苹果网站和服务</h3><p>4.5.1 应用可以订阅一些苹果提供的RSS源，例如iTunes Store RSS源。但是不能收集从苹果网站上获得的任何信息（包括apple.com，iTunes Store，App Store，iTunes Connect，开发人员门户网站等），或者创建一个基于这些信息的排名。</p>
<p>4.5.2 苹果音乐API可以允许用户在使用你的应用的时候访问他们的订阅内容。用户必须主动使用播放、暂停和跳过按钮来访问播放列表，不允许应用擅自访问和播放。此外你的应用不允许要求用户必须付费或者间接赚钱才可以访问苹果音乐服务（例如应用内付费，观看广告，获取用户信息等）。</p>
<p>4.5.3 不要使用苹果服务去发送垃圾信息，钓鱼，发送垃圾邮件。包括游戏中心，推送消息等。不要尝试反向追踪，扫描，嗅探，或者非法获取玩家ID，别名和其他来自Game Center的信息，否则你会被从开发者当中除名。</p>
<p>4.5.4 推送通知不得作为应用必选项才能使用这个应用，不能用于广告，促销和直销的目的，或者发送敏感和机密信息。</p>
<p>4.5.5 只能使用Game Center规定的方式访问Game Center玩家ID等信息，但不能展示在APP当中或者分发给第三方厂商。</p>
<h2 id="法律"><a href="#法律" class="headerlink" title="法律"></a>法律</h2><p>应用程序必须遵守当地的所有法律法规才可以正常使用（如果你不确认需要遵守哪些法律法规，请咨询律师）。我们了解这些事情十分复杂，但是保证遵守当地一切适用的法规是你应尽的义务，不仅仅是遵守我们的条款。当然，如果应用程序拉帮结派、煽动和蛊惑人们犯罪的这种鲁莽行为会直接导致应用被拒。</p>
<h3 id="5-1-隐私"><a href="#5-1-隐私" class="headerlink" title="5.1 隐私"></a>5.1 隐私</h3><p>保护隐私是苹果生态系统当中的重中之重。你应该谨慎小心的使用收集到的个人信息，以确保你遵守适用的法律条款和苹果开发人员计划许可协议（Apple Developer Program License Agreement）。更不用说这些都是用户对你的的期望。更具体地说：</p>
<p>5.1.1 数据收集和存储<br>（i）收集用户数据的应用必须具有隐私政策并且安全的取得用户的同意。这包括但不限于应用程序如果使用了HealthKit和其他医疗、健康技术的应用、HomeKit，键盘扩展，Apple Pay，并且包括登陆、访问设备上的用户数据（例如地理位置，通讯录，日历等）。</p>
<p>（ii）如果你的应用程序不包括明显需要使用用户账户的功能，那么请让用户不登陆的情况下就可以正常使用。应用程序不能要求用户输入用户个人信息来使用其中的功能，但核心功能必要或者法律要求的情况下除外。</p>
<p>（iii）开发人员如果使用应用窃取用户密码和其他隐私数据会从开发人员当中除名。</p>
<p>5.1.2 数据的使用和分享<br>（i）你在向用户提供明确的如何使用用户数据的说明文档并取得用户明确的许可之前，你的应用不能使用或者转移用户的数据。</p>
<p>（ii）如果不是基于提升用户体验，提升软硬件性能或者符合苹果开发者计划许可协议（Apple Developer Program License Agreement）的广告推广目的，不允许使用或者向第三方厂商告知用户数据。</p>
<p>（iii）从HomeKit API当中获得的数据不允许应用在广告投放和数据挖掘的目的。</p>
<p>（iv）使用苹果支付并且通过苹果支付获取用户数据的应用，在使用或向第三方厂商告知的时候只能基于促进或改善商品和服务的交付的目的。</p>
<p>5.1.3 卫生与健康研究<br>健康、健身和医疗数据十分敏感，所以这类应用程序需要遵守额外的规则以保护客户的隐私安全：</p>
<p>（i）如果目的是打广告或者用户数据挖掘（用于提升健康管理，或者用于获得了批准的科研目的除外），那么应用不得使用或者向第三方披露用户的健康、健身和医疗数据。这些数据来自但不限于HealthKit API，运动和健身功能，或者其他有关健康的学科的研究课题。</p>
<p>（ii）应用不能向HealthKit以及其他医疗研究和健康管理应用当中写入虚假数据，而且不能够在iCloud上存储健康数据。</p>
<p>（iii）致力于人类健康相关的学科研究必须在参与者的同意之下才可以进行，或者对于未成年人，他们的父母和监护人的同意之下才可以进行。相关许可条款必须包括（a）性质、宗旨和研究时长；（b）研究程序，风险和参与人的利害关系；（c）数据的保密性和管理方法，包括与第三方共享的任何数据；（d）参与者如果有疑问需要知道的联络方式；（e）参与者如何撤出的机制。</p>
<p>（iv）如果应用进行健康相关的研究必须具有独立的伦理审查委员会的许可。此类批准必须按照要求提供。</p>
<p>5.1.4 儿童<br>基于很多因素，在使用来自儿童的数据的时候务必保持谨慎。我们希望您在使用这些数据之前能够仔细了解相关要求和国际适用的法律条款，例如儿童在线隐私保护法（Children‘s online privacy protection act，COPPA）。</p>
<p>应用程序只能基于提供必要的功能和非年龄相关的娱乐价值的目的下，而且在遵守相关法律的前提下才可以请求获取孩子的生日和父母的联系方式。</p>
<p>此外，儿童类应用如果需要采集、传输、分享儿童的信息（包括姓名、地址、电子邮件、位置、照片、视频、图画、聊天功能、其他个人数据和与上述任何信息一起使用的永久的标识符），必须提供隐私条款，而且必须符合所有适用于儿童的隐私政策。为了明确起见，如果这类应用需要家长监控，通常这两种情况所需要提供的隐私条款会有所不同。点此了解详细信息。</p>
<p>5.1.5 位置服务<br>使用位置服务的应用程序必须提供和位置服务直接相关的功能。使用基于位置的API不允许用于提供紧急服务，或者实现自动控制车辆、飞行器以及其他设备（小型的设备例如小型无人机和玩具例外），远程控制汽车警报系统等。在收集、传输和使用用户的位置数据之前，请确保你已经取得了用户的同意。如果应用程序使用了后台定位服务，务必在应用当中阐明其目的。参考人机交互界面条款（Human Interface Guidelines）了解最佳的做法。</p>
<h3 id="5-2-知识产权"><a href="#5-2-知识产权" class="headerlink" title="5.2 知识产权"></a>5.2 知识产权</h3><p>确保你的应用只包括你创建的内容，或者在使用他人的内容的时候具有合法的许可协议。如果你在许可协议规定的方式之外使用这些内容可能会被苹果下架你的应用。当然，这也意味着其他盗用你的内容的应用也可能会被下架。如果你认为你的知识产权已经被侵犯，请填写这个表单发起诉讼申请。知识产权相关法规在每个国家和地区有所不同，但你的应用必须避免以下最基本的错误：</p>
<p>5.2.1 一般而言：不要使用受保护的第三方内容，如商标、版权作品，或者在你的应用当中使用未经专利许可的创意。不要包含误导、虚假，山寨的描述，名称和应用内容在你的应用当中。</p>
<p>5.2.2 第三方网站/服务：如果你的应用使用、访问、展示和商业化第三方的服务，请保证你已经获得了相应的授权许可。并且许可文件必须根据要求在审核前一并提供。</p>
<p>5.2.3 音频和视频下载：应用程序不能对非法分享、保存、转换或者来自第三方源的数据的非法使用提供方便（第三方来源包括Apple Music, YouTube, SoundCloud, Vimeo等），除非具有相应的合法授权协议。如果应用提供了音视频文件，可能这些文件也会违反知识产权，所以你的应用在提供这些文件和服务的访问能力之前务必具有合法授权协议并且必须按照要求在审核前提供。</p>
<p>5.2.4 苹果广告代言：不要明示或暗示苹果公司是你的应用的供应商，或者苹果为你的应用的功能和质量代言。如果你的应用被授予“编辑选择奖”，苹果会自动加上这个徽章。</p>
<p>5.2.5 苹果产品：禁止创建一个应用看起来与苹果已有的产品，用户界面（如Finder），应用（如App Store, iTunes Store或Messages），广告主题相似，并且不允许拼错苹果产品名称（如Iphone, iTunz）。iTunes音乐的预览不允许在取得对应的授权许可之前直接使用。例如作为拼图应用的背景音乐，游戏背景音乐等。如果你的应用展示了Activity圆圈，不允许修改圆圈的显示方式以及它们代表的数据。人机界面交互条款当中对如何使用Activity圆圈有更多的信息。</p>
<h3 id="5-3-游戏，赌博，彩票"><a href="#5-3-游戏，赌博，彩票" class="headerlink" title="5.3 游戏，赌博，彩票"></a>5.3 游戏，赌博，彩票</h3><p>赌博、游戏和彩票功能可能是最难以管理也是苹果应用商店当中最普遍的促销方式。只有当你完全明白相关法律风险并且已经准备好足够的时间应对监管部门的审查的时候才可以考虑使用。不过有些事情需要牢记：</p>
<p>5.3.1 抽奖和竞猜必须由应用开发商赞助</p>
<p>5.3.2 用于抽奖和竞猜的官方规则必须在应用当中予以提供，并且明确表明苹果公司不是赞助商或者以任何形式参与该活动。</p>
<p>5.3.3 应用不允许使用应用内付费购买信用点或者虚拟货币，并把它们与实际的货币结合使用，也不允许在应用当中购买彩票，抽奖券，和进行资金转移。</p>
<p>5.3.4 提供需要使用真实货币进行游戏的应用（例如体育博彩、扑克赌博、赌场游戏和赛马竞猜等）或者提供彩票，必须具有当地相关监管部门的合法的授权许可。而且发行的地区仅限于许可协议规定的地点，并且在应用商店当中必须是免费的。非法赌博的工具，包括计牌客不允许上架到App Store当中。彩票App必须具有下列要素：报酬，中奖几率和奖金。</p>
<p>After<br>提交应用之后<br>一旦你将应用程序和元数据提交到iTunes Connect当中，并且进入审核流程，这里有一些事情你需要牢记：</p>
<p>时间：应用审核团队会尽快审核你的应用，我们也一直努力加快审核速度。可以在此了解更多有关App审核的信息。</p>
<p>状态更新：你的应用的当前状态会在iTunes Connect当中直接反映。所以你可以在上面留意你的应用状态。</p>
<p>加急审核申请：如果你们对时间非常敏感，你们可以点此申请加急审核。请务必当你在真正需要它的情况下才进行加急审核，因为你也需要尊重你的同行。如果我们发现你在滥用这个系统，我们可能会拒绝你的加急申请。</p>
<p>发布日期：如果你的发布日期设为未来的某个时候，你的应用在到达那个时间点之前不会发布到应用商店上面，即便是已经通过了审核。请记住，你的应用在所有选定的应用商店上架可能需要长达24小时的时间。</p>
<p>被拒：我们的目标是严格遵守这些准则，但人无完人，如果你的应用程序被拒绝并且你对此表示疑问或者希望提供更多的信息，请使用解决方案中心来和应用审核团队直接沟通。这可能对你的应用尽快上架有帮助，而且这也可能帮助我们完善应用程序审核流程或者让我们发现审核政策当中表述不清的地方。如果你仍然对结果有异议，请点此提出上诉。</p>
<blockquote>
<p>Apple:We’re excited to see what you come up with next!<br>——我们很期待看到你们未来发布的产品！</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzIwNDAxNjIzNg==&amp;mid=2650120083&amp;idx=1&amp;sn=73d9419687c25fece39eb5ac817d144d&amp;scene=1&amp;srcid=0616Vn6NAmGEqGYmXICtrXVY#rd" target="_blank" rel="external">中文翻译来源</a></li>
<li><a href="https://developer.apple.com/app-store/review/guidelines/" target="_blank" rel="external">官方App Store Review Guidelines</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提交应用之前的检查列表&quot;&gt;&lt;a href=&quot;#提交应用之前的检查列表&quot; class=&quot;headerlink&quot; title=&quot;提交应用之前的检查列表&quot;&gt;&lt;/a&gt;提交应用之前的检查列表&lt;/h2&gt;&lt;p&gt;为了帮助你的应用能够尽可能顺利的过审，请查看下面列出来的可能降低审核速度或者被拒绝的常见失误。本清单无法代替审核条款，但你需要确保你已经达到了清单的要求作为良好的开始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确保你已经：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试你的应用程序，保证它不会发生崩溃和错误&lt;/li&gt;
&lt;li&gt;确保你的应用程序的信息和应用内容保持完整和准确&lt;/li&gt;
&lt;li&gt;保证联系人信息始终有效，审核团队可以及时联系到你&lt;/li&gt;
&lt;li&gt;提供一个有效的测试帐号以及登录信息，并提供测试功能必要的的硬件和资源（例如，一个测试用的二维码）&lt;/li&gt;
&lt;li&gt;保证后台服务在审核期间运行正常&lt;/li&gt;
&lt;li&gt;如果应用的某些功能和应用内付费隐藏较深，需提供详细的描述文档和支持文档。如果因为地域的原因我们无法正常使用该功能，请提供该功能的描述视频链接。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请检查你的应用程序是否符合其他规范，包括（注意文中部分内容也有对应的条款和说明，请注意查看）&lt;/p&gt;
&lt;p&gt;开发指南&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072&quot;&gt;应用程序编程指南（App Programming Guide）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/General/Conceptual/ExtensibilityPG/&quot;&gt;应用扩展编程指南（App Extension Programming Guide）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/icloud/documentation/data-storage/index.html&quot;&gt;iOS数据存储条款（iOS Data Storage Guidelines）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010672&quot;&gt;Mac OS X文件系统文档（Mac OS X File System Documentation）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/Introduction/Introduction.html&quot;&gt;Safari扩展开发指南（Safari Extensions Development Guide）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/iTunesConnectGuide/&quot;&gt;iTunes Connect开发指南（iTunes Connect Developer Guide）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设计指南&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/&quot;&gt;iOS人机交互界面条款（iOS Human Interface Guidelines）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/OSXHIGuidelines/&quot;&gt;Mac OS人机交互界面条款（Mac OS Human Interface Guidelines）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/tvos/human-interface-guidelines/&quot;&gt;tvOS人机交互界面条款（tvOS Human Interface Guidelines）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/watch/human-interface-guidelines/&quot;&gt;watchOS人机交互界面条款（watchOS Human Interface Guidelines）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;品牌营销指南&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/app-store/marketing/guidelines/&quot;&gt;App Store市场营销条款（App Store Marketing Guidelines）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/apple-pay/Apple-Pay-Identity-Guidelines.pdf&quot;&gt;苹果支付身份条款（Apple Pay Identity Guidelines）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/wallet/Add-to-Apple-Wallet-Guidelines.pdf&quot;&gt;加入苹果支付许可条款（Add to Apple Wallet Guidelines）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.apple.com/legal/intellectual-property/guidelinesfor3rdparties.html&quot;&gt;使用Apple商标和版权的条款（Guidelines for Using Apple Trademarks and Copyrights）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Guidelines" scheme="http://chaosky.me/tags/Guidelines/"/>
    
      <category term="审核指南" scheme="http://chaosky.me/tags/%E5%AE%A1%E6%A0%B8%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>iOS 密码技术</title>
    <link href="http://chaosky.me/2016/06/13/iOS-Common-Crypto/"/>
    <id>http://chaosky.me/2016/06/13/iOS-Common-Crypto/</id>
    <published>2016-06-13T04:27:03.000Z</published>
    <updated>2016-09-26T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转码技术"><a href="#转码技术" class="headerlink" title="转码技术"></a>转码技术</h2><h3 id="URL转码（百分号转码）"><a href="#URL转码（百分号转码）" class="headerlink" title="URL转码（百分号转码）"></a>URL转码（百分号转码）</h3><p>URL：只有字母和数字[0-9a-zA-Z]、一些特殊符号<code>$-_.+!*&#39;(),[不包括双引号]</code>、以及某些保留字，才可以不经过编码直接用于URL。</p>
<h4 id="URL-编码实现"><a href="#URL-编码实现" class="headerlink" title="URL 编码实现"></a>URL 编码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 废弃接口</div><div class="line">- (NSString *)stringByAddingPercentEscapesUsingEncoding:(NSStringEncoding)encoding</div><div class="line">// iOS 7 之后</div><div class="line">- (NSString *)stringByAddingPercentEncodingWithAllowedCharacters:(NSCharacterSet *)allowedCharacters</div></pre></td></tr></table></figure>
<h4 id="URL-解码实现"><a href="#URL-解码实现" class="headerlink" title="URL 解码实现"></a>URL 解码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 废弃接口</div><div class="line">- (NSString *)stringByReplacingPercentEscapesUsingEncoding:(NSStringEncoding)encoding</div><div class="line">// iOS 7 之后</div><div class="line">@property(readonly, copy) NSString *stringByRemovingPercentEncoding</div></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="http://www.w3school.com.cn/tags/html_ref_urlencode.html" target="_blank" rel="external">http://www.w3school.com.cn/tags/html_ref_urlencode.html</a></li>
<li><a href="https://zh.wikipedia.org/wiki/百分号编码" target="_blank" rel="external">维基百科</a></li>
<li><a href="http://tool.oschina.net/encode?type=4" target="_blank" rel="external">在线工具</a></li>
</ul>
<a id="more"></a>
<h3 id="Base64-转码"><a href="#Base64-转码" class="headerlink" title="Base64 转码"></a>Base64 转码</h3><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。</p>
<h4 id="Base64索引表"><a href="#Base64索引表" class="headerlink" title="Base64索引表"></a>Base64索引表</h4><p>数值    字符         数值    字符         数值    字符         数值    字符<br>0    A    16    Q    32    g    48    w<br>1    B    17    R    33    h    49    x<br>2    C    18    S    34    i    50    y<br>3    D    19    T    35    j    51    z<br>4    E    20    U    36    k    52    0<br>5    F    21    V    37    l    53    1<br>6    G    22    W    38    m    54    2<br>7    H    23    X    39    n    55    3<br>8    I    24    Y    40    o    56    4<br>9    J    25    Z    41    p    57    5<br>10    K    26    a    42    q    58    6<br>11    L    27    b    43    r    59    7<br>12    M    28    c    44    s    60    8<br>13    N    29    d    45    t    61    9<br>14    O    30    e    46    u    62    +<br>15    P    31    f    47    v    63    /</p>
<h4 id="例子：编码『Man』"><a href="#例子：编码『Man』" class="headerlink" title="例子：编码『Man』"></a>例子：编码『Man』</h4><p>文本：Man</p>
<p>ASCII编码：77 97 110</p>
<p>二进制位：01001101 01100001 01101110</p>
<p>索引：19 22 5 46</p>
<p>Base64编码：TWFu</p>
<p>如果要编码的字节数不能被3整除，最后会多出1个或2个字节，那么可以使用下面的方法进行处理：先使用0字节值在末尾补足，使其能够被3整除，然后再进行base64的编码。在编码后的base64文本后加上一个或两个’=’号，代表补足的字节数。也就是说，当最后剩余一个八位字节（一个byte）时，最后一个6位的base64字节块有四位是0值，最后附加上两个等号；如果最后剩余两个八位字节（2个byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号。</p>
<h4 id="Base64-编码实现"><a href="#Base64-编码实现" class="headerlink" title="Base64 编码实现"></a>Base64 编码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (NSData *)base64EncodedDataWithOptions:(NSDataBase64EncodingOptions)options</div><div class="line">- (NSString *)base64EncodedStringWithOptions:(NSDataBase64EncodingOptions)options</div></pre></td></tr></table></figure>
<h4 id="Base64-解码实现"><a href="#Base64-解码实现" class="headerlink" title="Base64 解码实现"></a>Base64 解码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (instancetype)initWithBase64EncodedData:(NSData *)base64Data options:(NSDataBase64DecodingOptions)options</div><div class="line">- (instancetype)initWithBase64EncodedString:(NSString *)base64String options:(NSDataBase64DecodingOptions)options</div></pre></td></tr></table></figure>
<h4 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://zh.wikipedia.org/zh-cn/Base64" target="_blank" rel="external">维基百科</a></li>
<li><a href="http://tool.oschina.net/encrypt?type=3" target="_blank" rel="external">http://tool.oschina.net/encrypt?type=3</a></li>
</ul>
<h2 id="对称密码（共享密钥密码）——用相同的密钥进行加密和解密"><a href="#对称密码（共享密钥密码）——用相同的密钥进行加密和解密" class="headerlink" title="对称密码（共享密钥密码）——用相同的密钥进行加密和解密"></a>对称密码（共享密钥密码）——用相同的密钥进行加密和解密</h2><h3 id="一次性密码本——绝对不会被破译的密码"><a href="#一次性密码本——绝对不会被破译的密码" class="headerlink" title="一次性密码本——绝对不会被破译的密码"></a>一次性密码本——绝对不会被破译的密码</h3><p>一次性密码本是一种非常简单的密码，它的原理是『将明文与一串随机的比特序列进行XOR运算』。</p>
<p>为什么一次性密码本是绝对无法破译的呢？我们假设对一次性密码本的密文尝试进行暴力破解，那么总有一天我们会尝试到和加密时相同的密钥，<strong>但是我们无法判断它是否是正确的明文</strong>。</p>
<p>一次性密码本是<strong>无条件安全的，在理论上是无法破译的。</strong></p>
<h3 id="DES（Data-Encryption-Standard）"><a href="#DES（Data-Encryption-Standard）" class="headerlink" title="DES（Data Encryption Standard）"></a>DES（Data Encryption Standard）</h3><p>DES是一种将64比特的明文加密成64比特的密文的对称密码算法，他的密钥长度是56比特。尽管从规格上来说，DES的密钥长度是64比特，但由于每隔7比特会设置一个用于错误检测的比特，因此实质上器密钥长度是56比特。</p>
<p><strong>PS：现在DES已经能够被暴力破解。</strong></p>
<h4 id="DES加密实现"><a href="#DES加密实现" class="headerlink" title="DES加密实现"></a>DES加密实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  DES加密</div><div class="line"> *</div><div class="line"> *  @param data 加密的二进制数据</div><div class="line"> *  @param key  加密的密钥，长度为8字节</div><div class="line"> *  @param iv   初始化向量，每次加密时都会随机产生一个不同的比特序列来作为初始化向量</div><div class="line"> *</div><div class="line"> *  @return 加密后的二进制数据</div><div class="line"> */</div><div class="line">NSData * desEncrypt(NSData * data, NSData * key, NSData * iv)</div><div class="line">&#123;</div><div class="line">	// 密码长度为8字节  </div><div class="line">    if ([key length] != 8) &#123;</div><div class="line">        @throw [NSException exceptionWithName:@&quot;DES Encrypt&quot;</div><div class="line">                                       reason:@&quot;Length of key is wrong. Length of iv should be 8(64bits)&quot;</div><div class="line">                                     userInfo:nil];</div><div class="line">    &#125;</div><div class="line">    // 加密后的数据长度为数据长度+DES block size</div><div class="line">    size_t bufferSize = [data length] + kCCBlockSizeDES;</div><div class="line">    void * buffer = malloc(bufferSize);</div><div class="line">    size_t encryptedSize = 0;</div><div class="line">    // DES加密</div><div class="line">    CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt,</div><div class="line">                                          kCCAlgorithmDES,</div><div class="line">                                          kCCOptionPKCS7Padding,</div><div class="line">                                          [key bytes], kCCKeySizeDES,</div><div class="line">                                          [iv bytes],</div><div class="line">                                          [data bytes],</div><div class="line">                                          [data length],</div><div class="line">                                          buffer, bufferSize,</div><div class="line">                                          &amp;encryptedSize);</div><div class="line">  	// 判断加密是否成功</div><div class="line">    if (cryptStatus == kCCSuccess) &#123;</div><div class="line">        NSData * encryptedData = [NSData dataWithBytes:buffer length:encryptedSize];</div><div class="line">        free(buffer);</div><div class="line">        return encryptedData;</div><div class="line">    &#125;else&#123;</div><div class="line">        free(buffer);</div><div class="line">        @throw [NSException exceptionWithName:@&quot;DES Encrypt&quot;</div><div class="line">                                       reason:@&quot;Encrypt Error!&quot;</div><div class="line">                                     userInfo:nil];</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="DES解密实现"><a href="#DES解密实现" class="headerlink" title="DES解密实现"></a>DES解密实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  DES 解密</div><div class="line"> *</div><div class="line"> *  @param data 解密的二进制数据</div><div class="line"> *  @param key  解密的密钥，长度8字节</div><div class="line"> *  @param iv   初始化向量</div><div class="line"> *</div><div class="line"> *  @return 解密后的数据</div><div class="line"> */</div><div class="line">NSData *desDecrypt(NSData * data, NSData * key, NSData * iv)</div><div class="line">&#123;</div><div class="line">    if ([key length] != 8) &#123;</div><div class="line">        @throw [NSException exceptionWithName:@&quot;DES Encrypt&quot;</div><div class="line">                                       reason:@&quot;Length of key is wrong. Length of iv should be 8(64bits)&quot;</div><div class="line">                                     userInfo:nil];</div><div class="line">    &#125;</div><div class="line">    // 加密后的数据长度为数据长度+DES block size</div><div class="line">    size_t bufferSize = [data length] + kCCBlockSizeDES;</div><div class="line">    void * buffer = malloc(bufferSize);</div><div class="line">    size_t decryptedSize = 0;</div><div class="line"></div><div class="line"></div><div class="line">    CCCryptorStatus cryptStatus = CCCrypt(kCCDecrypt,</div><div class="line">                                          kCCAlgorithmDES,</div><div class="line">                                          kCCOptionPKCS7Padding,</div><div class="line">                                          [key bytes], kCCKeySizeDES,</div><div class="line">                                          [iv bytes],</div><div class="line">                                          [data bytes],</div><div class="line">                                          [data length],</div><div class="line">                                          buffer, bufferSize,</div><div class="line">                                          &amp;decryptedSize);</div><div class="line">    if (cryptStatus == kCCSuccess) &#123;</div><div class="line">        NSData * decryptedData = [NSData dataWithBytes:buffer length:decryptedSize];</div><div class="line">        free(buffer);</div><div class="line">        return decryptedData;</div><div class="line">    &#125;else&#123;</div><div class="line">        free(buffer);</div><div class="line">        @throw [NSException exceptionWithName:@&quot;DES Decrypt&quot;</div><div class="line">                                       reason:@&quot;Decrypt Error!&quot;</div><div class="line">                                     userInfo:nil];</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="参考链接-2"><a href="#参考链接-2" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/資料加密標準" target="_blank" rel="external">https://zh.wikipedia.org/wiki/資料加密標準</a></li>
</ul>
<h3 id="3DES（-Triple-Data-Encryption-Standard）"><a href="#3DES（-Triple-Data-Encryption-Standard）" class="headerlink" title="3DES（ Triple Data Encryption Standard）"></a>3DES（ Triple Data Encryption Standard）</h3><p><strong> 三重DES（triple-DES）</strong> 是为了增加DES的强度，将DES重复3次所得到的一种密码算法，通常缩写为<strong>3DES</strong>。</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/三重資料加密演算法" target="_blank" rel="external">https://zh.wikipedia.org/wiki/三重資料加密演算法</a></li>
</ul>
<h3 id="AES（Advanced-Encryption-Standard）"><a href="#AES（Advanced-Encryption-Standard）" class="headerlink" title="AES（Advanced Encryption Standard）"></a>AES（Advanced Encryption Standard）</h3><p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/高级加密标准" target="_blank" rel="external">https://zh.wikipedia.org/wiki/高级加密标准</a></li>
</ul>
<h3 id="对称加密-解密实现"><a href="#对称加密-解密实现" class="headerlink" title="对称加密/解密实现"></a>对称加密/解密实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CCCryptorStatus CCCrypt(</div><div class="line">    CCOperation op,         /* kCCEncrypt, etc. */</div><div class="line">    CCAlgorithm alg,        /* kCCAlgorithmAES128, etc. */</div><div class="line">    CCOptions options,      /* kCCOptionPKCS7Padding, etc. */</div><div class="line">    const void *key,</div><div class="line">    size_t keyLength,</div><div class="line">    const void *iv,         /* optional initialization vector */</div><div class="line">    const void *dataIn,     /* optional per op and alg */</div><div class="line">    size_t dataInLength,</div><div class="line">    void *dataOut,          /* data RETURNED here */</div><div class="line">    size_t dataOutAvailable,</div><div class="line">    size_t *dataOutMoved)</div></pre></td></tr></table></figure>
<h4 id="CCOperation：加密解密操作"><a href="#CCOperation：加密解密操作" class="headerlink" title="CCOperation：加密解密操作"></a>CCOperation：加密解密操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/*!</div><div class="line">    @enum       CCOperation</div><div class="line">    @abstract   密码操作类型.</div><div class="line"></div><div class="line">    @constant   kCCEncrypt  对称加密.</div><div class="line">    @constant   kCCDecrypt  对称解密.</div><div class="line">*/</div><div class="line">enum &#123;</div><div class="line">    kCCEncrypt = 0,</div><div class="line">    kCCDecrypt,     </div><div class="line">&#125;;</div><div class="line">typedef uint32_t CCOperation;</div></pre></td></tr></table></figure>
<h4 id="CCAlgorithm：加密算法"><a href="#CCAlgorithm：加密算法" class="headerlink" title="CCAlgorithm：加密算法"></a>CCAlgorithm：加密算法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/*!</div><div class="line">    @enum       CCAlgorithm</div><div class="line">    @abstract   Encryption algorithms implemented by this module.</div><div class="line"></div><div class="line">    @constant   kCCAlgorithmAES128  Advanced Encryption Standard, 128-bit block</div><div class="line">                                    This is kept for historical reasons.  It&apos;s</div><div class="line">                                    preferred now to use kCCAlgorithmAES since</div><div class="line">                                    128-bit blocks are part of the standard.</div><div class="line">    @constant   kCCAlgorithmAES     Advanced Encryption Standard, 128-bit block</div><div class="line">    @constant   kCCAlgorithmDES     Data Encryption Standard</div><div class="line">    @constant   kCCAlgorithm3DES    Triple-DES, three key, EDE configuration</div><div class="line">    @constant   kCCAlgorithmCAST    CAST</div><div class="line"> 	@constant   kCCAlgorithmRC4     RC4 stream cipher</div><div class="line"> 	@constant   kCCAlgorithmBlowfish    Blowfish block cipher</div><div class="line">*/</div><div class="line">enum &#123;</div><div class="line">    kCCAlgorithmAES128 = 0,</div><div class="line">    kCCAlgorithmAES = 0,</div><div class="line">    kCCAlgorithmDES,</div><div class="line">    kCCAlgorithm3DES,       </div><div class="line">    kCCAlgorithmCAST,       </div><div class="line">    kCCAlgorithmRC4,</div><div class="line">    kCCAlgorithmRC2,   </div><div class="line">    kCCAlgorithmBlowfish    </div><div class="line">&#125;;</div><div class="line">typedef uint32_t CCAlgorithm;</div></pre></td></tr></table></figure>
<h4 id="CCOptions：配置选项"><a href="#CCOptions：配置选项" class="headerlink" title="CCOptions：配置选项"></a>CCOptions：配置选项</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/*!</div><div class="line">    @<span class="class"><span class="keyword">enum</span>       <span class="title">CCOptions</span></span></div><div class="line">    @<span class="keyword">abstract</span>   Options flags, passed to CCCryptorCreate().</div><div class="line"></div><div class="line">    @constant   kCCOptionPKCS7Padding   Perform PKCS7 padding.</div><div class="line">    @constant   kCCOptionECBMode        Electronic Code Book Mode.</div><div class="line">                                        Default is CBC.</div><div class="line">*<span class="regexp">/</span></div><div class="line">enum &#123;</div><div class="line">    /* options <span class="keyword">for</span> block ciphers *<span class="regexp">/</span></div><div class="line">    kCCOptionPKCS7Padding   = 0x0001,</div><div class="line">    kCCOptionECBMode        = 0x0002</div><div class="line">    /* stream ciphers currently have no options *<span class="regexp">/</span></div><div class="line">&#125;;</div><div class="line">typedef uint32_t CCOptions;</div></pre></td></tr></table></figure>
<p>PKCS：Public Key Cryptography Standards，公钥加密标准</p>
<p>PKCS7：密码消息语法标准（Cryptographic Message Syntax Standard）</p>
<p>ECB：电子密码本（Electronic codebook，ECB）模式。需要加密的消息按照块密码的块大小被分为数个块，并对每个块进行独立加密。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c4/Ecb_encryption.png" alt=""></p>
<p>CBC：在CBC模式中，每个平文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有平文块。同时，为了保证每条消息的唯一性，在第一个块中需要使用初始化向量。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/d/d3/Cbc_encryption.png" alt=""></p>
<h4 id="key、keyLength：密钥长度"><a href="#key、keyLength：密钥长度" class="headerlink" title="key、keyLength：密钥长度"></a>key、keyLength：密钥长度</h4><p>密钥长度必须为指定的长度。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">enum &#123;</div><div class="line">    kCCKeySizeAES128          = 16,</div><div class="line">    kCCKeySizeAES192          = 24,</div><div class="line">    kCCKeySizeAES256          = 32,</div><div class="line">    kCCKeySizeDES             = 8,</div><div class="line">    kCCKeySize3DES            = 24,</div><div class="line">    kCCKeySizeMinCAST         = 5,</div><div class="line">    kCCKeySizeMaxCAST         = 16,</div><div class="line">    kCCKeySizeMinRC4          = 1,</div><div class="line">    kCCKeySizeMaxRC4          = 512,</div><div class="line">    kCCKeySizeMinRC2          = 1,</div><div class="line">    kCCKeySizeMaxRC2          = 128,</div><div class="line">    kCCKeySizeMinBlowfish     = 8,</div><div class="line">    kCCKeySizeMaxBlowfish     = 56,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="iv：初始化向量（可选）"><a href="#iv：初始化向量（可选）" class="headerlink" title="iv：初始化向量（可选）"></a>iv：初始化向量（可选）</h4><p>初始化向量（IV，Initialization Vector）是许多工作模式中用于随机化加密的一块数据，因此可以由相同的明文，相同的密钥产生不同的密文，而无需重新产生密钥，避免了通常相当复杂的这一过程。</p>
<p><strong>用于CBC模式</strong>。如果存在，必须和选择算法的block size一样长。</p>
<p>如果使用ECB模式或者使用流式密码算法将自动忽略。</p>
<p><code>Byte iv[] = {0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF};</code></p>
<h4 id="dataIn、dataInLength：要加密或解密的数据"><a href="#dataIn、dataInLength：要加密或解密的数据" class="headerlink" title="dataIn、dataInLength：要加密或解密的数据"></a>dataIn、dataInLength：要加密或解密的数据</h4><h4 id="dataOut、dataOutAvailable：加密或解密后的输出数据"><a href="#dataOut、dataOutAvailable：加密或解密后的输出数据" class="headerlink" title="dataOut、dataOutAvailable：加密或解密后的输出数据"></a>dataOut、dataOutAvailable：加密或解密后的输出数据</h4><p>创建对应算法需要的输出数据字节大小。输出数据的bufferSize足够大，大约要加密数据的长度+kCCBlockSize长度。</p>
<p>示例如下，DES加密解密需要的内存块大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">size_t bufferSize = [data length] + kCCBlockSizeDES;</div><div class="line">void *buffer = malloc(bufferSize);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/*!</div><div class="line">    @enum           Block sizes</div><div class="line"></div><div class="line">    @discussion     Block sizes, in bytes, for supported algorithms.</div><div class="line"></div><div class="line">    @constant kCCBlockSizeAES128    AES block size (currently, only 128-bit</div><div class="line">                                    blocks are supported).</div><div class="line">    @constant kCCBlockSizeDES       DES block size.</div><div class="line">    @constant kCCBlockSize3DES      Triple DES block size.</div><div class="line">    @constant kCCBlockSizeCAST      CAST block size.</div><div class="line">*/</div><div class="line">enum &#123;</div><div class="line">    /* AES */</div><div class="line">    kCCBlockSizeAES128        = 16,</div><div class="line">    /* DES */</div><div class="line">    kCCBlockSizeDES           = 8,</div><div class="line">    /* 3DES */</div><div class="line">    kCCBlockSize3DES          = 8,</div><div class="line">    /* CAST */</div><div class="line">    kCCBlockSizeCAST          = 8,</div><div class="line">    kCCBlockSizeRC2           = 8,</div><div class="line">    kCCBlockSizeBlowfish      = 8,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="dataOutMoved"><a href="#dataOutMoved" class="headerlink" title="dataOutMoved"></a>dataOutMoved</h4><p>成功时，返回写入到dataOut内存块中字节数。</p>
<p>kCCBufferTooSmall时，返回需要提供不足的内存空间大小。</p>
<h4 id="CCCryptorStatus：返回加密-解密状态"><a href="#CCCryptorStatus：返回加密-解密状态" class="headerlink" title="CCCryptorStatus：返回加密/解密状态"></a>CCCryptorStatus：返回加密/解密状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">enum &#123;</div><div class="line">    kCCSuccess          = 0,</div><div class="line">    kCCParamError       = -4300,</div><div class="line">    kCCBufferTooSmall   = -4301,</div><div class="line">    kCCMemoryFailure    = -4302,</div><div class="line">    kCCAlignmentError   = -4303,</div><div class="line">    kCCDecodeError      = -4304,</div><div class="line">    kCCUnimplemented    = -4305,</div><div class="line">    kCCOverflow         = -4306,</div><div class="line">    kCCRNGFailure       = -4307,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="公钥密码——用公钥加密，用私钥解密"><a href="#公钥密码——用公钥加密，用私钥解密" class="headerlink" title="公钥密码——用公钥加密，用私钥解密"></a>公钥密码——用公钥加密，用私钥解密</h2><p>公钥密码（public-key cryptography）中，密钥分为加密密钥和解密密钥两种，发送者用加密密钥对消息进行加密，接收者用解密密钥对密文进行解密。</p>
<p>仔细思考一下加密密钥和解密密钥的区别，我们可以发现：</p>
<ul>
<li>发送者只需要加密密钥</li>
<li>接收者只需要解密密钥</li>
<li>解密密钥不可以被窃听者获取</li>
<li>加密密钥被窃听者获取也没问题</li>
</ul>
<p>公钥密码中，加密密钥一般是公开的。正是由于加密密钥可以任意公开，因此该密钥被称为<strong>公钥（public key）</strong>。当然，我们也没有必要将公钥公开给全世界所有的人，但至少我们需要将公钥发送给需要使用公钥进行加密的通信对象（也就是给自己发送密文的发送者）。</p>
<p>相对地，解密密钥是绝对不能公开的，这个密钥只能由你自己来使用，一次成为<strong>私钥（private key）</strong>。私钥不可以被别人知道，也不可以将它发送给别人，甚至也不能发送给自己的通信对象。</p>
<p>公钥和私钥是一一对应的，一对公钥和私钥统称为<strong>密钥对（key pair）</strong>，由公钥进行加密的密文，必须使用与该公钥配对的私钥才能够解密。密钥对中的两个密钥之间具有非常密切的关系——数学上的关系——因此公钥和私钥是不能分别单独生成的。</p>
<p>公钥密码的使用者需要生成一个包括公钥和私钥的密钥对，其中公钥会发送给别人，而私钥则仅供自己使用。</p>
<p>常见的公钥加密算法有：RSA、ElGamal、背包算法、Rabin（RSA的特例）、迪菲－赫尔曼密钥交换协议中的公钥加密算法、椭圆曲线加密算法（英语：Elliptic Curve Cryptography, ECC）。使用最广泛的是RSA算法（由发明者Rivest、Shmir和Adleman姓氏首字母缩写而来）是著名的公开金钥加密算法，ElGamal是另一种常用的非对称加密算法。</p>
<p><strong>RSA加密算法</strong>是一种<strong>非对称加密算法</strong>。在公开密钥加密和电子商业中RSA被广泛使用。</p>
<h3 id="RSA密钥生成命令"><a href="#RSA密钥生成命令" class="headerlink" title="RSA密钥生成命令"></a>RSA密钥生成命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 生成RSA私钥</div><div class="line">$ openssl genrsa -out rsa_private_key.pem 1024</div><div class="line">// 生成RSA公钥</div><div class="line">$ openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</div><div class="line">// 将RSA私钥转换成PKCS8格式</div><div class="line">openssl pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt</div></pre></td></tr></table></figure>
<h2 id="单向散列函数——获取消息的『指纹』"><a href="#单向散列函数——获取消息的『指纹』" class="headerlink" title="单向散列函数——获取消息的『指纹』"></a>单向散列函数——获取消息的『指纹』</h2><p>散列函数（或散列算法，又称哈希函数，英语：Hash Function）是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用来代表一个短的随机字母和数字组成的字符串。好的散列函数在输入域中很少出现散列冲突。在散列表和数据处理中，不抑制冲突来区别数据，会使得数据库记录更难找到。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/d/da/Hash_function.svg" alt="散列函数的工作原理"></p>
<p>单向散列函数，就是把任意长的输入消息串变化成固定长的输出串且由输出串难以得到输入串的一种函数。这个输出串称为该消息的散列值。</p>
<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p><strong>单向散列函数</strong>：也称为<strong>消息摘要函数</strong>（message digest function），<strong>哈希函数</strong>或者<strong>杂凑函数</strong>。</p>
<p>输入单向散列函数的<strong>消息</strong>也称为<strong>原像</strong>（pre-image）。</p>
<p>单向散列函数输出的<strong>散列值</strong>也称为<strong>消息摘要</strong>（message digest）或者<strong>指纹</strong>（fingerprint）。</p>
<p>完整性也称为一致性。</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul>
<li><h4 id="根据任意长度的消息计算出固定长度的散列值"><a href="#根据任意长度的消息计算出固定长度的散列值" class="headerlink" title="根据任意长度的消息计算出固定长度的散列值"></a>根据任意长度的消息计算出固定长度的散列值</h4><p>首先，单向散列函数的输入必须能够使任意长度的消息。其次，无论输入多长的消息，单向散列函数必须都能够生成长度很短的散列值，散列值的长度最好是短且固定的。</p>
</li>
<li><h4 id="能够快速计算出散列值"><a href="#能够快速计算出散列值" class="headerlink" title="能够快速计算出散列值"></a>能够快速计算出散列值</h4></li>
<li><h4 id="消息不同散列值也不同"><a href="#消息不同散列值也不同" class="headerlink" title="消息不同散列值也不同"></a>消息不同散列值也不同</h4><p>当给定某条消息的散列值时，单向散列函数必须确保<strong>要找到和该条消息具备相同散列值的另外一条消息是非常困难的</strong>。这一性质称为『<strong>弱抗碰撞性</strong>』。单向散列函数都必须具备弱抗碰撞性。</p>
<p>和弱抗碰撞性相对的，还有强抗碰撞性，所谓强抗碰撞性，是指<strong>要找到散列值相同的两条不同的消息是非常困难的</strong>。在这里，散列值可以是任意值。</p>
</li>
<li><h4 id="具备单向性"><a href="#具备单向性" class="headerlink" title="具备单向性"></a>具备单向性</h4><p>单向散列函数必须具备单向性，单向性指的是无法通过散列值反算出消息的性质。</p>
</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li><h4 id="检测软件是否被篡改"><a href="#检测软件是否被篡改" class="headerlink" title="检测软件是否被篡改"></a>检测软件是否被篡改</h4></li>
<li><h4 id="基于口令的加密"><a href="#基于口令的加密" class="headerlink" title="基于口令的加密"></a>基于口令的加密</h4><p>单向散列函数也被用于基于口令的加密（Password Based Encryption, PBE）</p>
<p>PBE的原理是将口令和盐（salt，通过伪随机数生成器产生的随机值）混合后计算其散列值，然后将这个散列值用作加密的密钥。</p>
</li>
<li><h4 id="消息认证码"><a href="#消息认证码" class="headerlink" title="消息认证码"></a>消息认证码</h4><p>消息认证码是将『发送者和接收者之间的共享密钥』和『消息』进行混合后计算出的散列值。使用消息认证码可以检测并防止通信过程中的错误、篡改以及伪装。</p>
</li>
<li><h4 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h4><p>数字签名是现实社会中的签名（sign）和盖章这样的行为在数字世界中实现。数字签名的处理过程非常耗时，一次一般不会对整个消息内容直接施加数字签名，而是先通过单向散列函数计算出消息的散列值，然后再对这个散列值施加数字签名。</p>
</li>
<li><h4 id="伪随机数生成器"><a href="#伪随机数生成器" class="headerlink" title="伪随机数生成器"></a>伪随机数生成器</h4><p>密码技术中所使用的随机数需要具备『事实上不可能根据过去的随机数列预测未来的随机数列』这样的性质。为了保证不可预测性，可以利用单向散列函数的单向性。</p>
</li>
<li><h4 id="一次性口令"><a href="#一次性口令" class="headerlink" title="一次性口令"></a>一次性口令</h4><p>一次性口令经常被用于服务器对客户端的合法性认证。在这种方式中，通过使用单向散列函数可以保证口令只在通信链路上传送一次，因此即使窃听者窃取了口令，也无法使用。</p>
</li>
</ul>
<h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。</p>
<p><strong>PS：已发现碰撞。</strong></p>
<h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><p>MD5已经广泛使用在为文件传输提供一定的可靠性方面。例如，服务器预先提供一个MD5校验和，用户下载完文件以后，用MD5算法计算下载文件的MD5校验和，然后通过检查这两个校验和是否一致，就能判断下载的文件是否出错。</p>
<p>MD5亦有应用于部分网上赌场以保证赌博的公平性，原理是系统先在玩家下注前已生成该局的结果，将该结果的字符串配合一组随机字符串利用MD5 加密，将该加密字符串于玩家下注前便显示给玩家，再在结果开出后将未加密的字符串显示给玩家，玩家便可利用MD5工具加密验证该字符串是否吻合。</p>
<p>例子: 在玩家下注骰宝前，赌场便先决定该局结果，假设生成的随机结果为4、5、 6大，赌场便会先利用MD5 加密“4, 5, 6”此字符串并于玩家下注前告诉玩家；由于赌场是无法预计玩家会下什么注，所以便能确保赌场不能作弊；当玩家下注完毕后，赌场便告诉玩家该原始字符串，即“4, 5, 6”，玩家便可利用MD5工具加密该字符串是否与下注前的加密字符串吻合。</p>
<p>该字符串一般会加上一组随机字符串 (Random string)，以防止玩家利用碰撞 (Collision) 解密字符串，但如使用超级电脑利用碰撞亦有可能从加上随机字符串的加密字符串中获取游戏结果。随机字符串的长度与碰撞的次数成正比关系，一般网上赌场使用的随机字符串是长于20字，有些网上赌场的随机字符串更长达500字，以增加解密难度。</p>
<h4 id="MD5代码实现"><a href="#MD5代码实现" class="headerlink" title="MD5代码实现"></a>MD5代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*** MD5 ***/</div><div class="line">#define CC_MD5_DIGEST_LENGTH    16          /* digest length in bytes */</div><div class="line">#define CC_MD5_BLOCK_BYTES      64          /* block size in bytes */</div><div class="line">unsigned char *CC_MD5(const void *data, CC_LONG len, unsigned char *md)</div></pre></td></tr></table></figure>
<h4 id="参考链接-3"><a href="#参考链接-3" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/MD5" target="_blank" rel="external">https://zh.wikipedia.org/wiki/MD5</a></li>
</ul>
<h3 id="SHA家族"><a href="#SHA家族" class="headerlink" title="SHA家族"></a>SHA家族</h3><p><strong>安全散列算法</strong>（英语：Secure Hash Algorithm，缩写为SHA）是一个密码散列函数家族，是FIPS所认证的五种安全散列算法。能计算出一个数字消息所对应到的，长度固定的字符串（又称消息摘要）的算法。且若输入的消息不同，它们对应到不同字符串的概率很高。这些算法之所以称作“安全”是基于以下两点（根据官方标准的描述）：</p>
<ul>
<li>由消息摘要反推原输入消息，从计算理论上来说是很困难的。</li>
<li>想要找到两组不同的消息对应到相同的消息摘要，从计算理论上来说也是很困难的。任何对输入消息的变动，都有很高的概率导致其产生的消息摘要迥异。</li>
</ul>
<p>SHA家族的五个算法，分别是SHA-1、SHA-224、SHA-256、SHA-384，和SHA-512，由美国国家安全局（NSA）所设计，并由美国国家标准与技术研究院（NIST）发布；是美国的政府标准。后四者有时并称为SHA-2。SHA-1在许多安全协议中广为使用，包括TLS和SSL、PGP、SSH、S/MIME和IPsec，曾被视为是MD5（更早之前被广为使用的散列函数）的后继者。但SHA-1的安全性如今被密码学家严重质疑；虽然至今尚未出现对SHA-2有效的攻击，它的算法跟SHA-1基本上仍然相似；因此有些人开始发展其他替代的散列算法。缘于最近[何时？]对SHA-1的种种攻击发表，“美国国家标准与技术研究院（NIST）开始设法经由公开竞争管道（类似高级加密标准AES的发展经过），发展一个或多个新的散列算法。”</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-06-12-Snip20160612_1.png" alt=""></p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-06-12-Snip20160612_2.png" alt=""></p>
<h4 id="SHA代码实现"><a href="#SHA代码实现" class="headerlink" title="SHA代码实现"></a>SHA代码实现</h4><h5 id="SHA-1"><a href="#SHA-1" class="headerlink" title="SHA-1"></a>SHA-1</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*** SHA1 ***/</div><div class="line">#define CC_SHA1_DIGEST_LENGTH   20          /* digest length in bytes */</div><div class="line">#define CC_SHA1_BLOCK_BYTES     64          /* block size in bytes */</div><div class="line">unsigned char *CC_SHA1(const void *data, CC_LONG len, unsigned char *md)</div></pre></td></tr></table></figure>
<h5 id="SHA-224"><a href="#SHA-224" class="headerlink" title="SHA-224"></a>SHA-224</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*** SHA224 ***/</div><div class="line">#define CC_SHA224_DIGEST_LENGTH     28          /* digest length in bytes */</div><div class="line">#define CC_SHA224_BLOCK_BYTES       64          /* block size in bytes */</div><div class="line">unsigned char *CC_SHA224(const void *data, CC_LONG len, unsigned char *md)</div></pre></td></tr></table></figure>
<h5 id="SHA-256"><a href="#SHA-256" class="headerlink" title="SHA-256"></a>SHA-256</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*** SHA256 ***/</div><div class="line">#define CC_SHA256_DIGEST_LENGTH     32          /* digest length in bytes */</div><div class="line">#define CC_SHA256_BLOCK_BYTES       64          /* block size in bytes */</div><div class="line">unsigned char *CC_SHA256(const void *data, CC_LONG len, unsigned char *md)</div></pre></td></tr></table></figure>
<h5 id="SHA-384"><a href="#SHA-384" class="headerlink" title="SHA-384"></a>SHA-384</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*** SHA384 ***/</div><div class="line">#define CC_SHA384_DIGEST_LENGTH     48          /* digest length in bytes */</div><div class="line">#define CC_SHA384_BLOCK_BYTES      128          /* block size in bytes */</div><div class="line">unsigned char *CC_SHA384(const void *data, CC_LONG len, unsigned char *md)</div></pre></td></tr></table></figure>
<h5 id="SHA-512"><a href="#SHA-512" class="headerlink" title="SHA-512"></a>SHA-512</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*** SHA512 ***/</div><div class="line">#define CC_SHA512_DIGEST_LENGTH     64          /* digest length in bytes */</div><div class="line">#define CC_SHA512_BLOCK_BYTES      128          /* block size in bytes */</div><div class="line">unsigned char *CC_SHA512(const void *data, CC_LONG len, unsigned char *md)</div></pre></td></tr></table></figure>
<h3 id="参考链接-4"><a href="#参考链接-4" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/散列函數" target="_blank" rel="external">https://zh.wikipedia.org/wiki/散列函數</a></li>
<li><a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="external">在线工具</a></li>
</ul>
<h2 id="消息认证码-1"><a href="#消息认证码-1" class="headerlink" title="消息认证码"></a>消息认证码</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>消息认证码</strong>（message authentication code）是一种确认完整性并进行认证的技术，简称『<strong>MAC</strong>』。</p>
<p>消息认证码的输入包括任意长度的消息和一个发送者与接收者之间<strong>共享的密钥</strong>，他可以输出固定长度的数据，这个数据称为<strong>MAC值</strong>。</p>
<p>使用SHA-1、MD5之类的单向散列函数可以实现消息认证码，其中一种实现方法称为<strong>HMAC</strong>。</p>
<p><strong>密钥散列消息认证码</strong>（英语：Keyed-hash message authentication code，缩写为HMAC），又称散列消息认证码（Hash-based message authentication code），是一种通过特别计算方式之后产生的消息认证码（MAC），使用密码散列函数，同时结合一个加密密钥。它可以用来保证数据的完整性，同时可以用来作某个消息的身份验证。</p>
<h3 id="HMAC的应用"><a href="#HMAC的应用" class="headerlink" title="HMAC的应用"></a>HMAC的应用</h3><p>hmac主要应用在身份验证中，它的使用方法是这样的：<br>(1) 客户端发出登录请求（假设是浏览器的GET请求）<br>(2) 服务器返回一个随机值，并在会话中记录这个随机值<br>(3) 客户端将该随机值作为密钥，用户密码进行hmac运算，然后提交给服务器<br>(4) 服务器读取用户数据库中的用户密码和步骤2中发送的随机值做与客户端一样的hmac运算，然后与用户发送的结果比较，如果结果一致则验证用户合法。</p>
<p>在这个过程中，可能遭到安全攻击的是服务器发送的随机值和用户发送的hmac结果，而对于截获了这两个值的黑客而言这两个值是没有意义的，绝无获取用户密码的可能性，随机值的引入使hmac只在当前会话中有效，大大增强了安全性和实用性。</p>
<h3 id="HMAC实现"><a href="#HMAC实现" class="headerlink" title="HMAC实现"></a>HMAC实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">void CCHmac(</div><div class="line">    CCHmacAlgorithm algorithm,  /* kCCHmacSHA1, kCCHmacMD5 */</div><div class="line">    const void *key,</div><div class="line">    size_t keyLength,           /* length of key in bytes */</div><div class="line">    const void *data,</div><div class="line">    size_t dataLength,          /* length of data in bytes */</div><div class="line">    void *macOut)               /* MAC written here */</div></pre></td></tr></table></figure>
<h3 id="参考链接-5"><a href="#参考链接-5" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/金鑰雜湊訊息鑑別碼" target="_blank" rel="external">密钥散列消息认证码——维基百科</a></li>
</ul>
<h2 id="Key-Derivation（密钥导出）"><a href="#Key-Derivation（密钥导出）" class="headerlink" title="Key Derivation（密钥导出）"></a>Key Derivation（密钥导出）</h2><p>PBKDF2(Password-Based Key Derivation Function)是一个用来导出密钥的函数，常用于生成加密的密码。</p>
<p>它的基本原理是通过一个伪随机函数（例如HMAC函数），把明文和一个盐值作为输入参数，然后重复进行运算，并最终产生密钥。</p>
<p>如果重复的次数足够大，破解的成本就会变得很高。而盐值的添加也会增加“彩虹表”攻击的难度。</p>
<h3 id="PBKDF2函数的定义"><a href="#PBKDF2函数的定义" class="headerlink" title="PBKDF2函数的定义"></a>PBKDF2函数的定义</h3><p>DK = PBKDF2(PRF, Password, Salt, c, dkLen)<br>PRF是一个伪随机函数，例如HASH_HMAC函数，它会输出长度为hLen的结果。<br>Password是用来生成密钥的原文密码。<br>Salt是一个加密用的盐值。<br>c是进行重复计算的次数。<br>dkLen是期望得到的密钥的长度。<br>DK是最后产生的密钥。</p>
<h4 id="PBKDF代码实现"><a href="#PBKDF代码实现" class="headerlink" title="PBKDF代码实现"></a>PBKDF代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int CCKeyDerivationPBKDF( CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen,</div><div class="line">                      const uint8_t *salt, size_t saltLen,</div><div class="line">                      CCPseudoRandomAlgorithm prf, uint rounds,</div><div class="line">                      uint8_t *derivedKey, size_t derivedKeyLen)</div></pre></td></tr></table></figure>
<h2 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">CCRNGStatus <span class="title">CCRandomGenerateBytes</span><span class="params">(<span class="keyword">void</span> *bytes, <span class="keyword">size_t</span> count)</span></span></div></pre></td></tr></table></figure>
<h2 id="Symmetric-Key-Wrap"><a href="#Symmetric-Key-Wrap" class="headerlink" title="Symmetric Key Wrap"></a>Symmetric Key Wrap</h2><p>Wrap a symmetric key with a Key Encryption Key (KEK).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int  </div><div class="line">CCSymmetricKeyWrap( CCWrappingAlgorithm algorithm,</div><div class="line">                   const uint8_t *iv, const size_t ivLen,</div><div class="line">                   const uint8_t *kek, size_t kekLen,</div><div class="line">                   const uint8_t *rawKey, size_t rawKeyLen,</div><div class="line">                   uint8_t  *wrappedKey, size_t *wrappedKeyLen)</div></pre></td></tr></table></figure>
<h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><ul>
<li><a href="https://github.com/kelp404/CocoaSecurity" target="_blank" rel="external">https://github.com/kelp404/CocoaSecurity</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;转码技术&quot;&gt;&lt;a href=&quot;#转码技术&quot; class=&quot;headerlink&quot; title=&quot;转码技术&quot;&gt;&lt;/a&gt;转码技术&lt;/h2&gt;&lt;h3 id=&quot;URL转码（百分号转码）&quot;&gt;&lt;a href=&quot;#URL转码（百分号转码）&quot; class=&quot;headerlink&quot; title=&quot;URL转码（百分号转码）&quot;&gt;&lt;/a&gt;URL转码（百分号转码）&lt;/h3&gt;&lt;p&gt;URL：只有字母和数字[0-9a-zA-Z]、一些特殊符号&lt;code&gt;$-_.+!*&amp;#39;(),[不包括双引号]&lt;/code&gt;、以及某些保留字，才可以不经过编码直接用于URL。&lt;/p&gt;
&lt;h4 id=&quot;URL-编码实现&quot;&gt;&lt;a href=&quot;#URL-编码实现&quot; class=&quot;headerlink&quot; title=&quot;URL 编码实现&quot;&gt;&lt;/a&gt;URL 编码实现&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 废弃接口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (NSString *)stringByAddingPercentEscapesUsingEncoding:(NSStringEncoding)encoding&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// iOS 7 之后&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (NSString *)stringByAddingPercentEncodingWithAllowedCharacters:(NSCharacterSet *)allowedCharacters&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;URL-解码实现&quot;&gt;&lt;a href=&quot;#URL-解码实现&quot; class=&quot;headerlink&quot; title=&quot;URL 解码实现&quot;&gt;&lt;/a&gt;URL 解码实现&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 废弃接口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (NSString *)stringByReplacingPercentEscapesUsingEncoding:(NSStringEncoding)encoding&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// iOS 7 之后&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@property(readonly, copy) NSString *stringByRemovingPercentEncoding&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/tags/html_ref_urlencode.html&quot;&gt;http://www.w3school.com.cn/tags/html_ref_urlencode.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/百分号编码&quot;&gt;维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tool.oschina.net/encode?type=4&quot;&gt;在线工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Cryptography" scheme="http://chaosky.me/tags/Cryptography/"/>
    
      <category term="密码技术" scheme="http://chaosky.me/tags/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
