<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chaosky&#39;s Notes</title>
  <subtitle>Getting Real。源码之前，了无秘密。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chaosky.me/"/>
  <updated>2016-12-07T03:52:20.000Z</updated>
  <id>http://chaosky.me/</id>
  
  <author>
    <name>Alex Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cydia 源 和 插件</title>
    <link href="http://chaosky.me/2016/12/07/Cydia-Sources-and-Tweaks/"/>
    <id>http://chaosky.me/2016/12/07/Cydia-Sources-and-Tweaks/</id>
    <published>2016-12-07T03:52:20.000Z</published>
    <updated>2016-12-07T03:52:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<h2 id="Cydia-源"><a href="#Cydia-源" class="headerlink" title="Cydia 源"></a>Cydia 源</h2><ol>
<li>JBnow Repo <a href="http://repo.jbnow.me/" target="_blank" rel="external">http://repo.jbnow.me/</a></li>
<li>BigBoss Repo <a href="http://apt.thebigboss.org/repofiles/cydia/" target="_blank" rel="external">http://apt.thebigboss.org/repofiles/cydia/</a></li>
<li>ModMyi Repo <a href="http://apt.modmyi.com/" target="_blank" rel="external">http://apt.modmyi.com/</a></li>
<li>BiteYourApple Repo <a href="http://repo.biteyourapple.net/" target="_blank" rel="external">http://repo.biteyourapple.net/</a></li>
<li>filippoBiga <a href="http://filippobiga.me/repo/" target="_blank" rel="external">http://filippobiga.me/repo/</a></li>
<li>SINful iPhone Rep <a href="http://sinfuliphonerepo.com/" target="_blank" rel="external">http://sinfuliphonerepo.com/</a> </li>
<li>ihacksrepo <a href="http://ihacksrepo.com/" target="_blank" rel="external">http://ihacksrepo.com/</a></li>
<li>iNsanelyi Repo <a href="http://repo.insanelyi.com" target="_blank" rel="external">http://repo.insanelyi.com</a></li>
<li>iHackStore Repo <a href="http://ihackstore.com/repo" target="_blank" rel="external">http://ihackstore.com/repo</a></li>
<li>SinfuliPhone Repo <a href="http://sinfuliphonerepo.com/" target="_blank" rel="external">http://sinfuliphonerepo.com/</a></li>
<li>iPhoneCake Repo <a href="http://cydia.iphonecake.com" target="_blank" rel="external">http://cydia.iphonecake.com</a></li>
<li>威锋源 <a href="http://apt.so/" target="_blank" rel="external">http://apt.so/</a></li>
<li>PP助手源 <a href="http://apt.25pp.com/" target="_blank" rel="external">http://apt.25pp.com/</a></li>
</ol>
<a id="more"></a>
<h2 id="100-免费的越狱插件"><a href="#100-免费的越狱插件" class="headerlink" title="100 免费的越狱插件"></a>100 免费的越狱插件</h2><ul>
<li>20 Second Lockscreen</li>
<li>3DNoLag</li>
<li>DeleteForever</li>
<li>Alkaline</li>
<li>AlwaysMore For Spotlight</li>
<li>Appendix</li>
<li>Apple File Conduit “2”</li>
<li>Cuttlefish</li>
<li>Bars</li>
<li>BerryC8</li>
<li>BetterFiveColumnHomescreen</li>
<li>BetterFiveIconDock</li>
<li>Bloard</li>
<li>BlurryBadges</li>
<li>Cream</li>
<li>BreadcrumbsAway</li>
<li>Browser Changer</li>
<li>BytaFont 3</li>
<li>CCDeseparator</li>
<li>CCColor</li>
<li>CCloader</li>
<li>CCMeters</li>
<li>CCircle</li>
<li>CircleIcons</li>
<li>CCBackground</li>
<li>Cylinder</li>
<li>DetailedBatteryUsage</li>
<li>Ethos</li>
<li>FaceDown</li>
<li>CCSettings</li>
<li>FlatSafariURL</li>
<li>GlowBadge</li>
<li>Goodges</li>
<li>GrabberApp8</li>
<li>HotDog</li>
<li>IconBounce</li>
<li>Incognito Messages</li>
<li>Instabetter</li>
<li>Activator</li>
<li>LockGlyph</li>
<li>MTerminal</li>
<li>Messages Customiser</li>
<li>MinimalHUD</li>
<li>Mobius</li>
<li>SpotlightBeGone</li>
<li>MultiIconMover</li>
<li>NCReveal9</li>
<li>NCIfNeeded</li>
<li>NoAppStoreRedirect</li>
<li>PM, Really?</li>
<li>PhoneAppNoFav</li>
<li>RePower</li>
<li>PowerTap</li>
<li>PriorityHUB</li>
<li>PullToRespring</li>
<li>SafariTabCount</li>
<li>SafariCloseAllTabs</li>
<li>SmoothCursor</li>
<li>Speed Intensifier</li>
<li>RomanPasscode</li>
<li>SendDelay</li>
<li>StatusBarColor</li>
<li>StatusBarTimer</li>
<li>StatusModifier</li>
<li>ReturnToSender</li>
<li>RoundDock</li>
<li>SwipeSelection</li>
<li>SwipeForMore</li>
<li>Tactful</li>
<li>VintageSwitcher</li>
<li>Zeppelin</li>
<li>Folder6Plus</li>
<li>FullFolder9</li>
<li>IconArt</li>
<li>AppColorClose</li>
<li>Floater</li>
<li>FlashRing</li>
<li>IconRenamer</li>
<li>NCColor</li>
<li>Tintch</li>
<li>Record ‘n Torch</li>
<li>TapTapFlip</li>
<li>Wink</li>
<li>TransparentDock</li>
<li>Unlock Sound</li>
<li>BottomBar</li>
<li>Cask</li>
<li>SwipyFolders</li>
<li>iCleaner</li>
<li>SafariRefresh</li>
<li>SpinSettings</li>
<li>KeyboardVibrate8</li>
<li>Harbor</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Cydia-源&quot;&gt;&lt;a href=&quot;#Cydia-源&quot; class=&quot;headerlink&quot; title=&quot;Cydia 源&quot;&gt;&lt;/a&gt;Cydia 源&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;JBnow Repo &lt;a href=&quot;http://repo.jbnow.me/&quot;&gt;http://repo.jbnow.me/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BigBoss Repo &lt;a href=&quot;http://apt.thebigboss.org/repofiles/cydia/&quot;&gt;http://apt.thebigboss.org/repofiles/cydia/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ModMyi Repo &lt;a href=&quot;http://apt.modmyi.com/&quot;&gt;http://apt.modmyi.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BiteYourApple Repo &lt;a href=&quot;http://repo.biteyourapple.net/&quot;&gt;http://repo.biteyourapple.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;filippoBiga &lt;a href=&quot;http://filippobiga.me/repo/&quot;&gt;http://filippobiga.me/repo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SINful iPhone Rep &lt;a href=&quot;http://sinfuliphonerepo.com/&quot;&gt;http://sinfuliphonerepo.com/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;ihacksrepo &lt;a href=&quot;http://ihacksrepo.com/&quot;&gt;http://ihacksrepo.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iNsanelyi Repo &lt;a href=&quot;http://repo.insanelyi.com&quot;&gt;http://repo.insanelyi.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iHackStore Repo &lt;a href=&quot;http://ihackstore.com/repo&quot;&gt;http://ihackstore.com/repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SinfuliPhone Repo &lt;a href=&quot;http://sinfuliphonerepo.com/&quot;&gt;http://sinfuliphonerepo.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iPhoneCake Repo &lt;a href=&quot;http://cydia.iphonecake.com&quot;&gt;http://cydia.iphonecake.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;威锋源 &lt;a href=&quot;http://apt.so/&quot;&gt;http://apt.so/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PP助手源 &lt;a href=&quot;http://apt.25pp.com/&quot;&gt;http://apt.25pp.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Jailbreak" scheme="http://chaosky.me/tags/Jailbreak/"/>
    
      <category term="Cydia" scheme="http://chaosky.me/tags/Cydia/"/>
    
  </entry>
  
  <entry>
    <title>非官方iOS9.2-iOS9.3.3越狱图文教程</title>
    <link href="http://chaosky.me/2016/12/07/Jailbreak-Using-Pangu-and-Cydia-Impactor/"/>
    <id>http://chaosky.me/2016/12/07/Jailbreak-Using-Pangu-and-Cydia-Impactor/</id>
    <published>2016-12-07T01:06:21.000Z</published>
    <updated>2016-12-07T01:06:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<p>本越狱教程在 Windows 和 Mac 上都可以。</p>
<h2 id="越狱前须知"><a href="#越狱前须知" class="headerlink" title="越狱前须知"></a>越狱前须知</h2><ol>
<li>备份，备份，备份</li>
<li>支持设备: iPhone 5s iPhone 6 iPhone 6+ iPhone 6s iPhone 6s+ iPhone 5E iPod Touch 6G iPad Mini 2 iPad Mini 3 iPad Mini 4 iPad Air iPad Air 2 iPad Pro</li>
<li>支持固件版本：iOS9.2 ~ iOS9.3.3</li>
<li>电脑或者 Mac 安装iTunes，保证设备电量充足</li>
</ol>
<a id="more"></a>
<h2 id="越狱步骤"><a href="#越狱步骤" class="headerlink" title="越狱步骤"></a>越狱步骤</h2><h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><p>下载最新版的盘古越狱 IPA 文件。下载地址：<a href="http://www.iclarified.com/files/pangu/NvwaStone_1.0.ipa" target="_blank" rel="external">http://www.iclarified.com/files/pangu/NvwaStone_1.0.ipa</a></p>
<p>下载 Cydia Impactor。下载地址：<a href="http://www.cydiaimpactor.com" target="_blank" rel="external">http://www.cydiaimpactor.com</a></p>
<p>Mac</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268035-640.jpg" alt="268035-640"></p>
<p>Windows</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268173.jpg" alt="268173"></p>
<h3 id="安装-Impactor"><a href="#安装-Impactor" class="headerlink" title="安装 Impactor"></a>安装 Impactor</h3><p>Mac：双击 Impactor dmg 安装</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268041.jpg" alt="268041"></p>
<p>Windows: 解压缩 Impactor zip</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268176.jpg" alt="268176"></p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268178.jpg" alt="268178"></p>
<h3 id="运行-Impactor-并-连接-iPhone"><a href="#运行-Impactor-并-连接-iPhone" class="headerlink" title="运行 Impactor 并 连接 iPhone"></a>运行 Impactor 并 连接 iPhone</h3><p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268050.jpg" alt="268050"></p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268053.jpg" alt="268053"></p>
<h3 id="安装-NvwaStone-IPA"><a href="#安装-NvwaStone-IPA" class="headerlink" title="安装 NvwaStone IPA"></a>安装 NvwaStone IPA</h3><p>拖拽 NvwaStone IPA 文件到 Cydia Impactor 应用中。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268070.jpg" alt="268070"></p>
<p>拖拽进去以后，将会要求你输入 Apple ID 和 密码，用来对 IPA 文件签名并且能够运行在你的设备上。不幸的是，如果你没有开发者账号，IPA 文件签名只有7天有效，也就是只能运行7天。如果你有开发者账号 IPA 文件签名有1年。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268059.jpg" alt="268059"></p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268062.jpg" alt="268062"></p>
<p>Cydia Impactor 将会显示一个警告给开发者：这个应用将会撤销和替换该账号已有的开发证书，这可能会影响你现在的开发工作。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268065.jpg" alt="268065"></p>
<p>Cydia Impactor 将会签名 IPA 并 安装盘古越狱 APP 到你的设备上。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268073.jpg" alt="268073"></p>
<h3 id="信任开发者描述文件"><a href="#信任开发者描述文件" class="headerlink" title="信任开发者描述文件"></a>信任开发者描述文件</h3><p>盘古越狱 APP 安装到设备上后，你需要信任开发者描述文件。</p>
<p>点击【设置】——&gt; 【通用】——&gt; 【描述文件与设备管理】，找到你在 Cydia Impactor 中填写的对应邮箱地址。PS: 开发者账号不用信任即可。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-QQ20161207-0@2x.png" alt="QQ20161207-0@2x"></p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-QQ20161207-1@2x.png" alt="QQ20161207-1@2x"></p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-QQ20161207-2@2x.png" alt="QQ20161207-2@2x"></p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268088.jpg" alt="268088"></p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268091.jpg" alt="268091"></p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268094.jpg" alt="268094"></p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268097.jpg" alt="268097"></p>
<h3 id="运行-盘古越狱-APP"><a href="#运行-盘古越狱-APP" class="headerlink" title="运行 盘古越狱 APP"></a>运行 盘古越狱 APP</h3><p>回到主界面，运行 盘古越狱 APP。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268100.jpg" alt="268100"></p>
<p>允许通知</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268103.jpg" alt="268103"></p>
<p>点击开始按钮</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268106.jpg" alt="268106"></p>
<p>锁屏等待6秒钟，你将会收到你的设备已经越狱成功的通知。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268112.jpg" alt="268112"></p>
<p>解锁设备，重新进入盘古越狱APP，正在准备越狱环境和安装 Cydia。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268115.jpg" alt="268115"></p>
<p>完成后，屏幕会重启，Cydia出现在主界面上。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-12-07-268118.jpg" alt="268118"></p>
<h3 id="重要提示"><a href="#重要提示" class="headerlink" title="重要提示"></a>重要提示</h3><p>每次重启设备后，需要重新运行盘古越狱 APP 来恢复越狱环境。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://onlinejailbreak.com/osx" target="_blank" rel="external">http://onlinejailbreak.com/osx</a></li>
<li><a href="http://onlinejailbreak.com/windows" target="_blank" rel="external">http://onlinejailbreak.com/windows</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本越狱教程在 Windows 和 Mac 上都可以。&lt;/p&gt;
&lt;h2 id=&quot;越狱前须知&quot;&gt;&lt;a href=&quot;#越狱前须知&quot; class=&quot;headerlink&quot; title=&quot;越狱前须知&quot;&gt;&lt;/a&gt;越狱前须知&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;备份，备份，备份&lt;/li&gt;
&lt;li&gt;支持设备: iPhone 5s iPhone 6 iPhone 6+ iPhone 6s iPhone 6s+ iPhone 5E iPod Touch 6G iPad Mini 2 iPad Mini 3 iPad Mini 4 iPad Air iPad Air 2 iPad Pro&lt;/li&gt;
&lt;li&gt;支持固件版本：iOS9.2 ~ iOS9.3.3&lt;/li&gt;
&lt;li&gt;电脑或者 Mac 安装iTunes，保证设备电量充足&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Jailbreak" scheme="http://chaosky.me/tags/Jailbreak/"/>
    
      <category term="Cydia" scheme="http://chaosky.me/tags/Cydia/"/>
    
  </entry>
  
  <entry>
    <title>iOS 依赖库管理工具</title>
    <link href="http://chaosky.me/2016/11/13/Cocoa-Dependency-Manager/"/>
    <id>http://chaosky.me/2016/11/13/Cocoa-Dependency-Manager/</id>
    <published>2016-11-13T12:31:44.000Z</published>
    <updated>2016-11-13T12:31:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<ul>
<li>2016-11-13 重新整理 iOS的包依赖管理工具，更新到最新安装方法</li>
</ul>
<h2 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h2><h3 id="CocoaPods-简介"><a href="#CocoaPods-简介" class="headerlink" title="CocoaPods 简介"></a>CocoaPods 简介</h3><p>CocoaPods是一个用来帮助我们管理第三方依赖库的工具。它可以解决库与库之间的依赖关系，下载库的源代码，同时通过创建一个Xcode的workspace来将这些第三方库和我们的工程连接起来，供我们开发使用。</p>
<p>使用CocoaPods的目的是让我们能自动化的、集中的、直观的管理第三方开源库。</p>
<a id="more"></a>
<h3 id="检查Mac是否安装Ruby和gem"><a href="#检查Mac是否安装Ruby和gem" class="headerlink" title="检查Mac是否安装Ruby和gem"></a>检查Mac是否安装Ruby和gem</h3><p>在终端中输入命令：<code>ruby --version</code> 和<code>gem --version</code></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ruby --version</div><div class="line">ruby <span class="number">2.0</span><span class="number">.0</span>p643 (<span class="number">2015</span><span class="number">-02</span><span class="number">-25</span> revision <span class="number">49749</span>) [x86_64-darwin14<span class="number">.3</span><span class="number">.0</span>]</div><div class="line">$ gem --version</div><div class="line"><span class="number">2.4</span><span class="number">.8</span></div></pre></td></tr></table></figure>
<p>Ruby 是一门开发语言，gem 为 Ruby 第三方库管理工具，CocoaPods 是用 Ruby 写的一个第三方工具。</p>
<p><strong>Ruby的版本需要大于 2.2.2版本。如果小于该版本，通过以下方式安装更高版本的 Ruby。</strong></p>
<h3 id="安装-Ruby-环境"><a href="#安装-Ruby-环境" class="headerlink" title="安装 Ruby 环境"></a>安装 Ruby 环境</h3><ol>
<li>安装 Xcode 及 Command Line Tools。安装 Command Line Tools 命令：<code>xcode-select --install</code></li>
<li><p>安装 RVM，Ruby 的多版本管理工具。并通过 RVM 安装更高版本的 Ruby。</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> curl -L https:<span class="comment">//get.rvm.io | bash -s stable</span></div><div class="line"><span class="symbol">$</span> source ~/.rvm/scripts/rvm</div><div class="line"><span class="symbol">$</span> rvm install <span class="number">2.3</span><span class="number">.0</span></div><div class="line"><span class="symbol">$</span> rvm use <span class="number">2.3</span><span class="number">.0</span></div><div class="line"><span class="symbol">$</span> /bin/bash --login</div></pre></td></tr></table></figure>
</li>
<li><p>修改 gem 镜像</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ gem sources --<span class="built_in">add</span> http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.org/ --<span class="built_in">remove</span> http<span class="variable">s:</span>//rubygems.org/</div><div class="line">$ gem sources -<span class="keyword">l</span></div><div class="line">http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.org</div><div class="line"># 确保只有 gems.<span class="keyword">ruby</span>-china.org</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装-CocoaPods"><a href="#安装-CocoaPods" class="headerlink" title="安装 CocoaPods"></a>安装 CocoaPods</h3><p>安装</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gem <span class="keyword">install</span> cocoapods</div></pre></td></tr></table></figure>
<p>初始化 CocoaPods 环境</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod <span class="built_in">setup</span></div></pre></td></tr></table></figure>
<p>初始化环境需要更新下载 CocoaPods 仓库，该步骤花费很长时间。更简便的方式是：从其他已初始化好的电脑上，拷贝目录 <code>~/.cocoapods/repos/</code> 到本机的相同目录中。</p>
<h3 id="使用-CocoaPods"><a href="#使用-CocoaPods" class="headerlink" title="使用 CocoaPods"></a>使用 CocoaPods</h3><ol>
<li><p>创建 Xcode 工程并切换到该工程路径</p>
</li>
<li><p>使用命令 <code>pod init</code> 在当前文件夹下生成一个 <strong>Podfile</strong> 文件</p>
</li>
<li><p>编辑 Podfile，输入如下类似信息：</p>
 <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>vim Podfile</div><div class="line">platform <span class="symbol">:ios</span>, <span class="string">'8.0'</span></div><div class="line"><span class="comment"># 屏蔽 CocoaPods 库里面的所有警告</span></div><div class="line">inhibit_all_warnings!</div><div class="line">	</div><div class="line">target <span class="string">'CocoaPodsDemo'</span> <span class="keyword">do</span></div><div class="line">  <span class="comment"># 可以用framework的pod替代静态库</span></div><div class="line">  <span class="comment"># use_frameworks!</span></div><div class="line">	</div><div class="line">  <span class="comment"># Pods for CocoaPodsDemo</span></div><div class="line">  pod <span class="string">"AFNetworking"</span>, <span class="string">"~&gt; 2.5.4"</span></div><div class="line">  pod <span class="string">'SDWebImage'</span></div><div class="line">  pod <span class="string">'KVNProgress'</span></div><div class="line">	</div><div class="line">  target <span class="string">'CocoaPodsDemoTests'</span> <span class="keyword">do</span></div><div class="line">    inherit! <span class="symbol">:search_paths</span></div><div class="line">    <span class="comment"># Pods for testing</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">	</div><div class="line">  target <span class="string">'CocoaPodsDemoUITests'</span> <span class="keyword">do</span></div><div class="line">    inherit! <span class="symbol">:search_paths</span></div><div class="line">    <span class="comment"># Pods for testing</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">	</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Pod 语法格式为：<code>pod &#39;第三库名称&#39;, &#39;版本号&#39;</code>，一个依赖项通过pod名和可选的版本号来声明。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">pod</span> <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 2.5.4'</span></div></pre></td></tr></table></figure>
<p>最新版本的依赖，可以忽略版本号，这样写：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">pod</span> <span class="string">'AFNetworking'</span></div></pre></td></tr></table></figure>
<p>指定Pod固定版本，可以写上具体的版本号来指定：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">pod</span> <span class="string">'AFNetworking'</span>, <span class="string">'2.5.4'</span></div></pre></td></tr></table></figure>
<p>版本号标识区别：</p>
<blockquote>
<p><strong>&gt;1.0</strong>        高于1.0的任何版本<br><strong>>= 1.0</strong>    至少版本为1.0<br><strong>&lt;1.0</strong>        低于1.0的任何版本<br><strong>&lt;=1.0</strong>        版本1.0和任何低于1.0的版本<br><strong>~&gt; 1.0</strong>     兼容1.0版本的最新版<br><strong>== 1.0或1.0</strong>    都表示指定版本</p>
</blockquote>
<p><strong>inhibit_all_warnings!</strong>：屏蔽 CocoaPods 库里面的所有警告<br><strong>use_frameworks!</strong>：可以用framework的pod替代静态库</p>
</li>
<li><p>安装工程依赖的第三方库</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ pod <span class="keyword">install</span></div><div class="line">Updating <span class="keyword">local</span> specs repositories</div><div class="line">Analyzing dependencies</div><div class="line">Downloading dependencies</div><div class="line">Installing AFNetworking (<span class="number">2.5</span><span class="number">.4</span>)</div><div class="line">Installing KVNProgress (<span class="number">2.2</span><span class="number">.2</span>)</div><div class="line">Installing SDWebImage (<span class="number">3.7</span><span class="number">.3</span>)</div><div class="line">Generating Pods <span class="keyword">project</span></div><div class="line">Integrating <span class="keyword">client</span> <span class="keyword">project</span></div><div class="line">[!] Please <span class="keyword">close</span> <span class="keyword">any</span> <span class="keyword">current</span> Xcode sessions <span class="keyword">and</span> <span class="keyword">use</span> <span class="string">`CocoaPodsDemo.xcworkspace`</span> <span class="keyword">for</span> this <span class="keyword">project</span> <span class="keyword">from</span> <span class="keyword">now</span> on.</div><div class="line">Sending stats</div><div class="line">Pod installation <span class="keyword">complete</span>! There <span class="keyword">are</span> <span class="number">3</span> dependencies <span class="keyword">from</span> the Podfile <span class="keyword">and</span> <span class="number">3</span> total</div><div class="line">pods installed.</div></pre></td></tr></table></figure>
<p>若出现<code>pods installed</code>字样表示安装成功。</p>
</li>
<li><p>关闭Xcode工程，打开.xcworkspace文件。</p>
</li>
<li><p>在工程中导入第三库文件，只需要<code>#import &lt;AFNetworking.h&gt;</code>类似的即可，开启CocoaPods之旅。</p>
</li>
</ol>
<p>更多用法参考本文提供的参考链接。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://code4app.com/article/cocoapods-install-usage" target="_blank" rel="external">http://code4app.com/article/cocoapods-install-usage</a></li>
<li><a href="http://blog.csdn.net/wzzvictory/article/details/18737437" target="_blank" rel="external">http://blog.csdn.net/wzzvictory/article/details/18737437</a></li>
<li><a href="http://blog.csdn.net/wzzvictory/article/details/19178709" target="_blank" rel="external">http://blog.csdn.net/wzzvictory/article/details/19178709</a></li>
</ol>
<h2 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h2><h3 id="Carthage-简介"><a href="#Carthage-简介" class="headerlink" title="Carthage 简介"></a>Carthage 简介</h3><p>Carthage的目标是用最简单的方式来管理Cocoa第三方框架。</p>
<p>Carthage编译你的依赖，并提供框架的二进制文件，但你仍然保留对项目的结构和设置的完整控制。Carthage不会自动的修改你的项目文件或编译设置。</p>
<p><strong>Carthage只正式支持动态框架，动态框架能够在任何版本的OS X上使用，但只能在iOS 8及以上版本使用。</strong></p>
<h3 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h3><p>OS X 不可或缺的套件管理器，用于安装命令工具。</p>
<p>终端中执行如下命令：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></div></pre></td></tr></table></figure>
<h3 id="安装-Carthage"><a href="#安装-Carthage" class="headerlink" title="安装 Carthage"></a>安装 Carthage</h3><p>终端执行命令安装Carthage</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>update</div><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>carthage</div></pre></td></tr></table></figure>
<h3 id="使用Carthage"><a href="#使用Carthage" class="headerlink" title="使用Carthage"></a>使用Carthage</h3><ol>
<li>创建Xcode工程并切换到该工程路径</li>
<li><p>创建一个<code>Cartfile</code>，将你想要使用的框架列在里面</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">github <span class="string">"AFNetworking/AFNetworking"</span><span class="function"> ~&gt;</span> <span class="number">3.0</span></div><div class="line">github <span class="string">"rs/SDWebImage"</span></div></pre></td></tr></table></figure>
</li>
<li><p>运行<code>carthage update</code>，将获取依赖文件到一个<code>Carthage.checkout</code>文件夹，然后编译每个依赖</p>
</li>
<li>在你的应用程序target的<code>General</code>设置标签中的<code>Embedded Binaries</code>区域，将框架从<code>Carthage.build</code>文件夹拖拽进去。</li>
</ol>
<h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://www.cocoachina.com/ios/20141204/10528.html" target="_blank" rel="external">http://www.cocoachina.com/ios/20141204/10528.html</a></li>
<li><a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">官方文档</a></li>
</ol>
<h2 id="Carthage与CocoaPods的不同"><a href="#Carthage与CocoaPods的不同" class="headerlink" title="Carthage与CocoaPods的不同"></a>Carthage与CocoaPods的不同</h2><ol>
<li><p>Carthage只支持iOS 8及以上版本使用。</p>
</li>
<li><p>首先，CocoaPods默认会自动创建并更新你的应用程序和所有依赖的Xcode workspace。Carthage使用xcodebuild来编译框架的二进制文件，但如何集成它们将交由用户自己判断。CocoaPods的方法更易于使用，但Carthage更灵活并且是非侵入性的。</p>
</li>
<li><p>CocoaPods的目标在它的README文件描述如下：</p>
<blockquote>
<p>…为提高第三方开源库的可见性和参与度，创建一个更中心化的生态系统。</p>
</blockquote>
<p>与之对照，Carthage创建的是去中心化的依赖管理器。它没有总项目的列表，这能够减少维护工作并且避免任何中心化带来的问题（如中央服务器宕机）。不过，这样也有一些缺点，就是项目的发现将更困难，用户将依赖于Github的趋势页面或者类似的代码库来寻找项目。</p>
</li>
<li><p>CocoaPods项目同时还必须包含一个podspec文件，里面是项目的一些元数据，以及确定项目的编译方式。Carthage使用xcodebuild来编译依赖，而不是将他们集成进一个workspace，因此无需类似的设定文件。不过依赖需要包含自己的Xcode工程文件来描述如何编译。</p>
</li>
<li><p>最后，我们创建Carthage的原因是想要一种尽可能简单的工具——一个只关心本职工作的依赖管理器，而不是取代部分Xcode的功能，或者需要让框架作者做一些额外的工作。CocoaPods提供的一些特性很棒，但由于附加的复杂性，它们将不会被包含在Carthage当中。</p>
</li>
</ol>
<h2 id="Swift-Package-Manager"><a href="#Swift-Package-Manager" class="headerlink" title="Swift Package Manager"></a>Swift Package Manager</h2><p>Swift包管理器是一个用于管理Swift代码分发的工具。它与Swift构建系统集成，自动化处理下载、编译和链接依赖关系。</p>
<p>软件包管理器包含在Swift 3.0及更高版本中。</p>
<h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><p>下载安装 <a href="https://developer.apple.com/download/" target="_blank" rel="external">Xcode 8.1</a>。</p>
<h4 id="Ubuntu-Linux"><a href="#Ubuntu-Linux" class="headerlink" title="Ubuntu Linux"></a>Ubuntu Linux</h4><ol>
<li><p>安装以下Linux 系统包：</p>
 <figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">$ sudo apt-<span class="built_in">get</span> install clang libicu-<span class="built_in">dev</span> libcurl4-openssl-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
</li>
<li><p>从 <a href="https://swift.org/download/" target="_blank" rel="external">swift.org</a> 下载 Swift 工具链。</p>
</li>
<li><p>解压缩 <strong>.tar.gz</strong> 文件，更新 <strong>PATH</strong> 环境变量，包含以下工具：</p>
 <figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ export <span class="built_in">PATH</span>=&lt;<span class="built_in">path</span> to uncompressed tar contents&gt;/usr/bin:$<span class="built_in">PATH</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><ol>
<li><p>创建工程路径</p>
 <figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">mkdir</span> myFirstProject</div></pre></td></tr></table></figure>
</li>
<li><p>使用 Swift 包管理器创建 Swift 工程</p>
 <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">cd</span> myFirstProject</div><div class="line">$ swift package init --<span class="built_in">type</span> <span class="built_in">executable</span></div></pre></td></tr></table></figure>
</li>
<li><p>在 <strong>myFirstProject</strong> 目录下的目录结构如下</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">myFirstProject</div><div class="line">├── Package<span class="selector-class">.swift</span></div><div class="line">├── Sources</div><div class="line">│   └── main<span class="selector-class">.swift</span></div><div class="line">└── Tests</div></pre></td></tr></table></figure>
</li>
<li><p>在 <strong>Package.swift</strong> 中添加依赖项</p>
 <figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> PackageDescription</div><div class="line"></div><div class="line">let <span class="keyword">package</span> = <span class="keyword">Package</span>(</div><div class="line">    name: <span class="string">"myFirstProject"</span>,</div><div class="line">    <span class="keyword">dependencies</span>: [</div><div class="line">        .<span class="keyword">Package</span>(url: <span class="string">"https://github.com/IBM-Swift/Kitura.git"</span>, majorVersion: <span class="number">1</span>, minor: <span class="number">1</span>)</div><div class="line">    ])</div></pre></td></tr></table></figure>
</li>
<li><p>编译程序</p>
 <figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">swift </span><span class="keyword">build</span></div></pre></td></tr></table></figure>
</li>
<li><p>在代码中就可以通过 <code>import Kitura</code> 导入模块。<br> 在 <strong>Sources/main.swift</strong> 添加如下代码：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  import Kitura</div><div class="line"></div><div class="line">// <span class="keyword">Create</span> a <span class="keyword">new</span> router</div><div class="line">let router = Router()</div><div class="line"></div><div class="line">// Handle <span class="keyword">HTTP</span> <span class="keyword">GET</span> requests <span class="keyword">to</span> /</div><div class="line">router.get(<span class="string">"/"</span>) &#123;</div><div class="line">    request, response, <span class="keyword">next</span> <span class="keyword">in</span></div><div class="line">    response.send(<span class="string">"Hello, World!"</span>)</div><div class="line">    <span class="keyword">next</span>()</div><div class="line">&#125;</div><div class="line"></div><div class="line">// <span class="keyword">Add</span> an <span class="keyword">HTTP</span> <span class="keyword">server</span> <span class="keyword">and</span> <span class="keyword">connect</span> it <span class="keyword">to</span> the router</div><div class="line">Kitura.addHTTPServer(onPort: <span class="number">8090</span>, <span class="keyword">with</span>: router)</div><div class="line"></div><div class="line">// <span class="keyword">Start</span> the Kitura runloop (this <span class="keyword">call</span> <span class="keyword">never</span> <span class="keyword">returns</span>)</div><div class="line">Kitura.run()</div></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
 <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ .build<span class="regexp">/debug/my</span>FirstProject</div></pre></td></tr></table></figure>
</li>
<li><p>在 macOS 上可以生成 Xcode 工程</p>
 <figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ swift <span class="keyword">package</span> <span class="keyword">generate</span>-xcodeproj</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2016-11-13 重新整理 iOS的包依赖管理工具，更新到最新安装方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CocoaPods&quot;&gt;&lt;a href=&quot;#CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods&quot;&gt;&lt;/a&gt;CocoaPods&lt;/h2&gt;&lt;h3 id=&quot;CocoaPods-简介&quot;&gt;&lt;a href=&quot;#CocoaPods-简介&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods 简介&quot;&gt;&lt;/a&gt;CocoaPods 简介&lt;/h3&gt;&lt;p&gt;CocoaPods是一个用来帮助我们管理第三方依赖库的工具。它可以解决库与库之间的依赖关系，下载库的源代码，同时通过创建一个Xcode的workspace来将这些第三方库和我们的工程连接起来，供我们开发使用。&lt;/p&gt;
&lt;p&gt;使用CocoaPods的目的是让我们能自动化的、集中的、直观的管理第三方开源库。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="CocoaPods" scheme="http://chaosky.me/tags/CocoaPods/"/>
    
      <category term="Carthage" scheme="http://chaosky.me/tags/Carthage/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 2.0 要点</title>
    <link href="http://chaosky.me/2016/11/11/Effective-Objective-C-2-0/"/>
    <id>http://chaosky.me/2016/11/11/Effective-Objective-C-2-0/</id>
    <published>2016-11-11T09:06:06.000Z</published>
    <updated>2016-11-11T09:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<h2 id="第1章-熟悉-Objective-C"><a href="#第1章-熟悉-Objective-C" class="headerlink" title="第1章 熟悉 Objective-C"></a>第1章 熟悉 Objective-C</h2><h3 id="第1条-了解-Objective-C-语言的起源"><a href="#第1条-了解-Objective-C-语言的起源" class="headerlink" title="第1条 了解 Objective-C 语言的起源"></a>第1条 了解 Objective-C 语言的起源</h3><ul>
<li>Objective-C 为C语言添加了面向对象特性，是其超集。Objective-C 使用动态绑定的消息结构，也就是说，在运行时才会检查对象类型。接收一条消息之后，究竟应执行何种代码，由运行期环境而非编译器来决定。</li>
<li>理解C语言的核心概念有助于写好Objective-C程序。尤其要掌握内存模型与指针。</li>
</ul>
<h3 id="第2条-在类的头文件中尽量少引入其他头文件"><a href="#第2条-在类的头文件中尽量少引入其他头文件" class="headerlink" title="第2条 在类的头文件中尽量少引入其他头文件"></a>第2条 在类的头文件中尽量少引入其他头文件</h3><ul>
<li>除非确有必要，否则不要引入头文件。一般来说，应在某个类的头文件中使用向前声明来提及别的类，并在实现文件中引入那些类的头文件。这样做可以尽量降低类之间的耦合。</li>
<li>有时无法使用向前声明，比如要声明某个类遵循一项协议。这种情况下，尽量把『该类遵循某协议』的这条声明移至『class-continuation分类』中。如果不行的话，就把协议单独放在一个头文件中，然后将其引入。</li>
</ul>
<h3 id="第3条-多用字面量语法，少用与之等价的方法"><a href="#第3条-多用字面量语法，少用与之等价的方法" class="headerlink" title="第3条 多用字面量语法，少用与之等价的方法"></a>第3条 多用字面量语法，少用与之等价的方法</h3><ul>
<li>应该使用字面量语法来创建字符串、数值、数组、字典。与创建此类对象的常规方法相比，这么做更加简明扼要。</li>
<li>应该通过取下标操作来访问数组下标或字典中的键所对应的元素。</li>
<li>用字面量语法创建数组或字典时，若值中有nil，则会抛出异常。因此，务必确保值里不含nil。</li>
</ul>
<h3 id="第4条-多用类型常量，少用-define-预处理指令"><a href="#第4条-多用类型常量，少用-define-预处理指令" class="headerlink" title="第4条 多用类型常量，少用 #define 预处理指令"></a>第4条 多用类型常量，少用 #define 预处理指令</h3><ul>
<li>不要用预处理指令定义常量。这样定义出来的常量不含类型信息，编译器只是会在编译前据此执行查找与替换操作。即使有人重新定义了常量值，编译器也不会产生警告信息，这将导致应用程序中的常量值不一致。</li>
<li>在实现文件中使用 static const 来定义『只在编译单元内可见的常量』（translation-unit-specific constant）。由于此类常量不在全局符号表中，所以无须为其名称加前缀。</li>
<li>在头文件中使用 extern 来声明全局常量，并在相关实现文件中定义其值。这种常量要出现在全局符号表中，所有其名称应加以区隔，通常用与之相关的类名做前缀。</li>
</ul>
<h3 id="第5条-用枚举表示状态、选项、状态码"><a href="#第5条-用枚举表示状态、选项、状态码" class="headerlink" title="第5条 用枚举表示状态、选项、状态码"></a>第5条 用枚举表示状态、选项、状态码</h3><ul>
<li>应该用枚举来表示状态机的状态、传递给方法的选项以及状态码等值，给这些值起个易懂的名字。</li>
<li>如果把传递给某个方法的选项表示为枚举类型，而多个选项又可同时使用，那么就将各选项值定义为2的幂，以便通过按位或操作将其组合起来。</li>
<li>用 NS_ENUM 与 NS_OPTIONS 宏来定义枚举类型，并指明其底层数据类型。这样做可以确保枚举是用开发者所选的底层数据类型实现出来的，而不会采用编译器所选的类型。</li>
<li>在处理枚举类型的 switch 语句中不要实现 default 分支。这样的话，加入新枚举之后，编译器就会提示开发者：switch 语句并未处理所有枚举。</li>
</ul>
<a id="more"></a>
<h2 id="第2章-对象、消息、运行期"><a href="#第2章-对象、消息、运行期" class="headerlink" title="第2章 对象、消息、运行期"></a>第2章 对象、消息、运行期</h2><h3 id="第6条-理解『属性』这一概念"><a href="#第6条-理解『属性』这一概念" class="headerlink" title="第6条 理解『属性』这一概念"></a>第6条 理解『属性』这一概念</h3><ul>
<li>可以用 @property 语法来定义对象中所封装的数据。</li>
<li>通过『特质』来指定存储数据所需的正确语义。</li>
<li>在设置所对应的实例变量时，一定要遵从该属性所声明的语义。</li>
<li>开发 iOS 程序时应该使用 nonatomic 属性，因为 atomic 属性会严重影响性能。</li>
</ul>
<h3 id="第7条-在对象内部尽量直接访问实例变量"><a href="#第7条-在对象内部尽量直接访问实例变量" class="headerlink" title="第7条 在对象内部尽量直接访问实例变量"></a>第7条 在对象内部尽量直接访问实例变量</h3><ul>
<li>在对象内部读取数据时，应该直接通过实例变量来读，而写入数据时，则应通过属性来写。</li>
<li>在初始化方法及dealloc方法中，总是应该直接通过实例变量来读写数据。</li>
<li>有时会使用惰性初始化技术配置某份数据，这种情况下，需要通过属性来读取数据。</li>
</ul>
<h3 id="第8条-理解『对象等同性』这一概念"><a href="#第8条-理解『对象等同性』这一概念" class="headerlink" title="第8条 理解『对象等同性』这一概念"></a>第8条 理解『对象等同性』这一概念</h3><ul>
<li>若想检测对象的等同性，请提供『isEqual:』与 hash 方法。</li>
<li>相同的对象必须具有相同的哈希码，但是两个哈希码相同的对象却未必相同。</li>
<li>不要盲目地逐个检测每条属性，而是应该依照具体需求来指定检测方案。</li>
<li>编写 hash 方法时，应该使用计算速度快而且哈希码碰撞几率低的算法。</li>
</ul>
<h3 id="第9条-以『类族模式』隐藏实现细节"><a href="#第9条-以『类族模式』隐藏实现细节" class="headerlink" title="第9条 以『类族模式』隐藏实现细节"></a>第9条 以『类族模式』隐藏实现细节</h3><ul>
<li>类族模式可以把实现细节隐藏在一套简单的公共接口后面。</li>
<li>系统框架中经常使用类族。</li>
<li>从类族的公共抽象基类中继承子类时要当心，若有开发文档，则应首先阅读。</li>
</ul>
<h3 id="第10条-在既有类中使用关联对象存放自定义数据"><a href="#第10条-在既有类中使用关联对象存放自定义数据" class="headerlink" title="第10条 在既有类中使用关联对象存放自定义数据"></a>第10条 在既有类中使用关联对象存放自定义数据</h3><ul>
<li>可以通过『关联对象』机制来把两个对象连起来。</li>
<li>定义关联对象时可指定内存管理语义，用以模仿定义属性时所采用的『拥有关系』与『非拥有关系』。</li>
<li>只有在其他做法不可行时才应选用关联对象，因为这种做法通常会引入难于查找的 bug。</li>
</ul>
<h3 id="第11条-理解-objc-msgSend-的作用"><a href="#第11条-理解-objc-msgSend-的作用" class="headerlink" title="第11条 理解 objc_msgSend 的作用"></a>第11条 理解 objc_msgSend 的作用</h3><ul>
<li>消息由接收者、选择子及参数构成。给某对象『发送消息』（invoke a message）也就相当于在该对象上『调用方法』（call a method）。</li>
<li>发给某对象的全部消息都要由『动态消息派发系统』（dynamic message dispatch system）来处理，该系统会查出对应的方法，并执行其代码。</li>
</ul>
<h3 id="第12条-理解消息转发机制"><a href="#第12条-理解消息转发机制" class="headerlink" title="第12条 理解消息转发机制"></a>第12条 理解消息转发机制</h3><ul>
<li>若对象无法响应某个选择子，则进入消息转发流程。</li>
<li>通过运行期的动态方法解析功能，我们可以在需要用到某个方法时再将其加入类中。</li>
<li>对象可以把其无法解读的某些选择子交给其他对象来处理。</li>
<li>经过上述两步之后，如果还是没办法处理选择子，那就启动完整的消息转发机制。</li>
</ul>
<h3 id="第13条-用『方法调配技术』调试『黑盒方法』"><a href="#第13条-用『方法调配技术』调试『黑盒方法』" class="headerlink" title="第13条 用『方法调配技术』调试『黑盒方法』"></a>第13条 用『方法调配技术』调试『黑盒方法』</h3><ul>
<li>使用另一份实现来替换原来的方法实现，这道工序叫做『方法调配』，开发者常用此技术向原有实现中添加新功能。</li>
<li>一般来说，只有调试程序的时候才需要在运行期修改方法实现，这种做法不宜滥用。</li>
</ul>
<h3 id="第14条-理解『类对象』的用意"><a href="#第14条-理解『类对象』的用意" class="headerlink" title="第14条 理解『类对象』的用意"></a>第14条 理解『类对象』的用意</h3><ul>
<li>每个实例都有一个指向 Class 对象的指针，用以表明其类型，而这些 Class 对象则构成了类的继承体系。</li>
<li>如果对象类型无法在编译器确定，那么久应该使用类型信息查询方法来探知。</li>
<li>尽量使用类型信息查询方法来确定对象类型，而不要直接比较类对象，因为某些对象可能实现了消息转发功能。</li>
</ul>
<h2 id="第3章-接口与-API-设计"><a href="#第3章-接口与-API-设计" class="headerlink" title="第3章 接口与 API 设计"></a>第3章 接口与 API 设计</h2><h3 id="第15条-用前缀避免命名空间冲突"><a href="#第15条-用前缀避免命名空间冲突" class="headerlink" title="第15条 用前缀避免命名空间冲突"></a>第15条 用前缀避免命名空间冲突</h3><ul>
<li>选择与你的公司、应用程序或二者皆有关联之名称作为类名的前缀，并在所有代码中均使用这一前缀。</li>
<li>若自己所开发的程序库中用到了第三方库，则应为其中的名称加上前缀。</li>
</ul>
<h3 id="第16条-提供『全能初始化方法』"><a href="#第16条-提供『全能初始化方法』" class="headerlink" title="第16条 提供『全能初始化方法』"></a>第16条 提供『全能初始化方法』</h3><ul>
<li>在类中提供一个全能初始化方法，并在文档里指明。其他初始化方法均应调用此方法。</li>
<li>若全能初始化方法与超类不同，则需覆写超类中的对应方法。</li>
<li>如果超类的初始化方法不适用于子类，那么应该覆写这个超类方法，并在其中抛出异常。</li>
</ul>
<h3 id="第17条-实现-description-方法"><a href="#第17条-实现-description-方法" class="headerlink" title="第17条 实现 description 方法"></a>第17条 实现 description 方法</h3><ul>
<li>实现 description 方法返回一个有意义的字符串，用以描述该实例。</li>
<li>若想在调试时打印出更详尽的对象描述信息，则应实现 debugDescription 方法。</li>
</ul>
<h3 id="第18条-尽量使用不可变对象"><a href="#第18条-尽量使用不可变对象" class="headerlink" title="第18条 尽量使用不可变对象"></a>第18条 尽量使用不可变对象</h3><ul>
<li>尽量创建不可变的对象。</li>
<li>若某属性仅可于对象内部修改，则在『class-continuation 分类』中将其由 readonly 属性扩展为 readwrite 属性。</li>
<li>不要把可变的 collection 作为属性公开，而应提供相关方法，以此修改对象中的可变 collection。</li>
</ul>
<h3 id="第19条-使用清晰而协调的命名方式"><a href="#第19条-使用清晰而协调的命名方式" class="headerlink" title="第19条 使用清晰而协调的命名方式"></a>第19条 使用清晰而协调的命名方式</h3><ul>
<li>起名时应遵从标准的 Objective-C 命名规范，这样创建出来的接口更容易为开发者所理解。</li>
<li>方法名要言简意赅，从左至右读起来要像个日常用语中的句子才好。</li>
<li>方法名里不要使用缩略后的类型名称。</li>
<li>给方法起名时的第一要务就是确保其风格与你自己的代码或所要集成的框架相符。</li>
</ul>
<h3 id="第20条-为私有方法名加前缀"><a href="#第20条-为私有方法名加前缀" class="headerlink" title="第20条 为私有方法名加前缀"></a>第20条 为私有方法名加前缀</h3><ul>
<li>给私有方法的名称加上前缀，这样可以很容易地将其同公共方法区分开。</li>
<li>不要单用一个下划线做私有方法的前缀，因为这种做法是预留给苹果公司用的。</li>
</ul>
<h3 id="第21条-理解-Objective-C-错误模型"><a href="#第21条-理解-Objective-C-错误模型" class="headerlink" title="第21条 理解 Objective-C 错误模型"></a>第21条 理解 Objective-C 错误模型</h3><ul>
<li>只要发生了可使整个应用程序崩溃的严重错误时，才应使用异常。</li>
<li>在错误不那么严重的情况下，可以指派『委托方法』（delegate method）来处理错误，也可以把错误信息放在 NSError 对象里，经由『输出参数』返回给调用者。</li>
</ul>
<h3 id="第22条-理解-NSCopying-协议"><a href="#第22条-理解-NSCopying-协议" class="headerlink" title="第22条 理解 NSCopying 协议"></a>第22条 理解 NSCopying 协议</h3><ul>
<li>若想令自己所写的对象具有拷贝功能，则需实现 NSCopying 协议。</li>
<li>如果自定义的对象分为可变版本与不可变版本，那么就要同时实现 NSCopying 与 NSMutableCopying 协议。</li>
<li>复制对象时需决定采用浅拷贝还是深拷贝，一般情况下应该尽量执行浅拷贝。</li>
<li>如果你所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。</li>
</ul>
<h2 id="第4章-协议与分类"><a href="#第4章-协议与分类" class="headerlink" title="第4章 协议与分类"></a>第4章 协议与分类</h2><h3 id="第23条-通过委托与数据源协议进行对象间通信"><a href="#第23条-通过委托与数据源协议进行对象间通信" class="headerlink" title="第23条 通过委托与数据源协议进行对象间通信"></a>第23条 通过委托与数据源协议进行对象间通信</h3><ul>
<li>委托模式为对象提供了一套接口，使其可由此将相关事件告知其他对象。</li>
<li>将委托对象应该支持的接口定义成协议，在协议中把可能需要处理的事件定义成方法。</li>
<li>当某对象需要从另一个对象中获取数据时，可以使用委托模式。这种情况下，该模式亦称『数据源协议』（data source protocal）。</li>
<li>若有必要，可实现含有位段的结构体，将委托对象是否能响应相关协议方法这一信息缓存至其中。</li>
</ul>
<h3 id="第24条-将类的实现代码分散到便于管理的数个分类之中"><a href="#第24条-将类的实现代码分散到便于管理的数个分类之中" class="headerlink" title="第24条 将类的实现代码分散到便于管理的数个分类之中"></a>第24条 将类的实现代码分散到便于管理的数个分类之中</h3><ul>
<li>使用分类机制把类的实现代码划分成易于管理的小块。</li>
<li>将应该视为『私有』的方法归入名叫Private的分类中，以隐藏实现细节。</li>
</ul>
<h3 id="第25条-总是为第三方类的分类名称加前缀"><a href="#第25条-总是为第三方类的分类名称加前缀" class="headerlink" title="第25条 总是为第三方类的分类名称加前缀"></a>第25条 总是为第三方类的分类名称加前缀</h3><ul>
<li>向第三方类中添加分类时，总应给其名称加上你专用的前缀。</li>
<li>向第三方类中添加分类时，总应给其中的方法名加上你专用的前缀。</li>
</ul>
<h3 id="第26条-勿在分类中声明属性"><a href="#第26条-勿在分类中声明属性" class="headerlink" title="第26条 勿在分类中声明属性"></a>第26条 勿在分类中声明属性</h3><ul>
<li>把封装数据所用的全部属性都定义在主接口里。</li>
<li>在『class-continuation分类』之外的其他分类中，可以定义存取方法，但尽量不要定义属性。</li>
</ul>
<h3 id="第27条-使用『class-continuation分类』隐藏实现细节"><a href="#第27条-使用『class-continuation分类』隐藏实现细节" class="headerlink" title="第27条 使用『class-continuation分类』隐藏实现细节"></a>第27条 使用『class-continuation分类』隐藏实现细节</h3><ul>
<li>通过『class-continuation分类』向类中新增实例变量。</li>
<li>如果某属性在主接口中声明为『只读』，而类的内部又要用设置方法修改此属性，那么就在『class-continuation分类』中将其扩展为『可读写』。</li>
<li>把私有方法的原型声明在『class-continuation分类』里面。</li>
<li>若想使类所遵循的协议不为人所知，则可于『class-continuation分类』中声明。</li>
</ul>
<h3 id="第28条-通过协议提供匿名对象"><a href="#第28条-通过协议提供匿名对象" class="headerlink" title="第28条 通过协议提供匿名对象"></a>第28条 通过协议提供匿名对象</h3><ul>
<li>协议可在某种程度上提供匿名类型，具体的对象类型可以淡化成遵从某协议的 id 类型，协议里规定了对象所应实现的方法。</li>
<li>使用匿名对象来隐藏类型名称（或类名）。</li>
<li>使用具体类型不重要，重要的是对象能够响应（定义在协议里的）特定方法，那么可使用匿名对象来表示。</li>
</ul>
<h2 id="第5章-内存管理"><a href="#第5章-内存管理" class="headerlink" title="第5章 内存管理"></a>第5章 内存管理</h2><h3 id="第29条-理解引用计数"><a href="#第29条-理解引用计数" class="headerlink" title="第29条 理解引用计数"></a>第29条 理解引用计数</h3><ul>
<li>引用计数机制通过可以递增递减的计数器来管理内存。对象创建好之后，其保留计数至少为1。若保留计数为正，则对象继续存活。当保留计数降为0时，对象就被销毁了。</li>
<li>在对象生命期中，其余对象通过引用来保留或释放此对象。保留与释放操作分别会递增及递减保留计数。</li>
</ul>
<h3 id="第30条-以-ARC-简化引用计数"><a href="#第30条-以-ARC-简化引用计数" class="headerlink" title="第30条 以 ARC 简化引用计数"></a>第30条 以 ARC 简化引用计数</h3><ul>
<li>有 ARC 之后，程序员就无须担心内存管理问题了。使用 ARC 来编程，可省去类中的许多『样板代码』。</li>
<li>ARC 管理对象生命期的办法基本上就是：在合适的地方插入『保留』及『释放』操作。在 ARC 环境下，变量的内存管理语义可以通过修饰符指明，而原来则需要手工执行『保留』及『释放』操作。</li>
<li>由方法返回的对象，其内存管理语义总是通过方法名来体现。 ARC 将此确定为开发者必须遵守的规则。</li>
<li>ARC 只负责管理 Objective-C 对象的内存。尤其要注意：CoreFoundation 对象不归ARC 管理，开发者必须适时调用 CFRetain/CFRelease。</li>
</ul>
<h3 id="第31条-在-dealloc-方法中只释放引用并解除监听"><a href="#第31条-在-dealloc-方法中只释放引用并解除监听" class="headerlink" title="第31条 在 dealloc 方法中只释放引用并解除监听"></a>第31条 在 dealloc 方法中只释放引用并解除监听</h3><ul>
<li>在 dealloc 方法里，应该做的事情就是释放指向其他对象的引用，并取消原来订阅的『键值观测』（KVO）或 NSNotificationCenter 等通知，不要做其他事情。</li>
<li>如果对象持有文件描述符等系统资源，那么应该专门编写一个方法来释放此种资源。这样的类要和其使用者约定：用完资源后必须调用 close 方法。</li>
<li>执行异步任务的方法不应在 dealloc 里调用；只能在正常状态下执行的那些方法也不应在dealloc里调用，因为此时对象已处于正在回收的状态了。</li>
</ul>
<h3 id="第32条-编写『异常安全代码』时留意内存管理问题"><a href="#第32条-编写『异常安全代码』时留意内存管理问题" class="headerlink" title="第32条 编写『异常安全代码』时留意内存管理问题"></a>第32条 编写『异常安全代码』时留意内存管理问题</h3><ul>
<li>捕获异常时，一定要注意将 try 块内所创立的对象清理干净。</li>
<li>在默认情况下，ARC 不生成安全处理异常所需的清理代码，开启编译器标志后，可生成这种代码，不过会导致应用程序变大，而且会降低运行效率。</li>
</ul>
<h3 id="第33条-以弱引用避免保留环"><a href="#第33条-以弱引用避免保留环" class="headerlink" title="第33条 以弱引用避免保留环"></a>第33条 以弱引用避免保留环</h3><ul>
<li>将某些引用设为 weak，可避免出现『保留环』。</li>
<li>weak 引用可以自动清空，也可以不自动清空。自动清空（autonilling）是随着 ARC 而引入的新特性，由运行期系统来实现。在具备自动清空功能的弱引用上，可以随意读取其数据，因为这种引用不会指向已经回收过的对象。</li>
</ul>
<h3 id="第34条-以『自动释放池块』降低内存峰值"><a href="#第34条-以『自动释放池块』降低内存峰值" class="headerlink" title="第34条 以『自动释放池块』降低内存峰值"></a>第34条 以『自动释放池块』降低内存峰值</h3><ul>
<li>自动释放池排布在栈中，对象收到 autorelease 消息后，系统将其放入最顶端的池里。</li>
<li>合理运用自动释放池，可降低应用程序的内存峰值。</li>
<li>@autoreleasepool 这种新式写法能创建出更为轻便的自动释放池。</li>
</ul>
<h3 id="第35条-用『僵尸对象』调试内存管理问题"><a href="#第35条-用『僵尸对象』调试内存管理问题" class="headerlink" title="第35条 用『僵尸对象』调试内存管理问题"></a>第35条 用『僵尸对象』调试内存管理问题</h3><ul>
<li>系统在回收对象时，可以不将其真的回收，而是把它转化为僵尸对象。通过环境变量 NSZombieEnabled 可开启此功能。</li>
<li>系统会修改对象的 isa 指针，令其指向特殊的僵尸类，从而使该对象变成僵尸对象。僵尸类能够响应所有的选择子，响应方式为：打印一条包含消息内容及其接收者的消息，然后终止应用程序。</li>
</ul>
<h3 id="第36条-不要使用-retainCount"><a href="#第36条-不要使用-retainCount" class="headerlink" title="第36条 不要使用 retainCount"></a>第36条 不要使用 retainCount</h3><ul>
<li>对象的保留计数看似有用，实则不然，因为任何给定时间点上的『绝对保留计数』（absolute retain count）都无法反映对象生命期的全貌。</li>
<li>引入 ARC 之后，retainCount 方法就正式废止了，在 ARC 下调用该方法会导致编译器报错。</li>
</ul>
<h2 id="第6章-块（block）与大中枢派发（GCD）"><a href="#第6章-块（block）与大中枢派发（GCD）" class="headerlink" title="第6章 块（block）与大中枢派发（GCD）"></a>第6章 块（block）与大中枢派发（GCD）</h2><h3 id="第37条-理解『块』这一概念"><a href="#第37条-理解『块』这一概念" class="headerlink" title="第37条 理解『块』这一概念"></a>第37条 理解『块』这一概念</h3><ul>
<li>块是C、C++、Objective-C 中的词法闭包。</li>
<li>块可接受参数，也可返回值。</li>
<li>块可以分配在栈或堆上，也可以是全局的。分配在栈上的块可拷贝到堆里，这样的话，就和标准的 Objective-C 对象一样，具备引用计数了。</li>
</ul>
<h3 id="第38条-为常用的块类型创建-typedef"><a href="#第38条-为常用的块类型创建-typedef" class="headerlink" title="第38条 为常用的块类型创建 typedef"></a>第38条 为常用的块类型创建 typedef</h3><ul>
<li>以 typedef 重新定义块类型，可令块变量用起来更加简单。</li>
<li>定义新类型时应遵从现有的命名习惯，勿使其名称与别的类型相冲突。</li>
<li>不妨为同一个块签名定义多个类型别名。如果要重构的代码使用了块类型的某个别名，那么只需修改相应 typedef 中的块签名即可，无须改动其他 typedef。</li>
</ul>
<h3 id="第39条-用-handler-块降低代码分散程度"><a href="#第39条-用-handler-块降低代码分散程度" class="headerlink" title="第39条 用 handler 块降低代码分散程度"></a>第39条 用 handler 块降低代码分散程度</h3><ul>
<li>在创建对象时，可以使用内联的 handler 块将相关业务逻辑一并声明。</li>
<li>在有多个实例需要监控时，如果采用委托模式，那么经常需要根据传入的对象来切换，而若改用 handler 块来实现，则可直接将块与相关对象放在一起。</li>
<li>设计 API 时如果用到了 handler 块，那么可以增加一个参数，使调用者可通过此参数来决定应该把块安排在哪个队列上执行。</li>
</ul>
<h3 id="第40条-用块引用其所属对象时不要出现保留环"><a href="#第40条-用块引用其所属对象时不要出现保留环" class="headerlink" title="第40条 用块引用其所属对象时不要出现保留环"></a>第40条 用块引用其所属对象时不要出现保留环</h3><ul>
<li>如果块所捕获的对象直接或间接地保留了块本身，那么就得当心保留环问题。</li>
<li>一定要找个适当的时机解除保留环，而不能把责任推给API的调用者。</li>
</ul>
<h3 id="第41条-多用派发队列，少用同步锁"><a href="#第41条-多用派发队列，少用同步锁" class="headerlink" title="第41条 多用派发队列，少用同步锁"></a>第41条 多用派发队列，少用同步锁</h3><ul>
<li>派发队列可用来表述同步语义（synchronization semantic），这种做法要比使用 @synchronized 块或 NSLock 对象更简单。</li>
<li>将同步与异步派发结合起来，可以实现与普通加锁机制一样的同步行为，而这么做却不会阻塞执行异步派发的线程。</li>
<li>使用同步队列及栅栏块，可以令同步行为更加高效。</li>
</ul>
<h3 id="第42条-多用-GCD，少用-performSelector-系列方法"><a href="#第42条-多用-GCD，少用-performSelector-系列方法" class="headerlink" title="第42条 多用 GCD，少用 performSelector 系列方法"></a>第42条 多用 GCD，少用 performSelector 系列方法</h3><ul>
<li>performSelector 系列方法在内存管理方面容易有疏失。它无法确定将要执行的选择子具体是什么，因而 ARC 编译器也就无法插入适当的内存管理方法。</li>
<li>performSelector 系列方法所能处理的选择子太过局限了，选择子的返回值类型及发送给方法的参数个数都受到限制。</li>
<li>如果想把任务放在另一个线程上执行，那么最好不要用 performSelector 系列方法，而是应该把任务封装到块里，然后调用大中枢派发机制的相关方法来实现。</li>
</ul>
<h3 id="第43条-掌握-GCD-及操作队列的使用时机"><a href="#第43条-掌握-GCD-及操作队列的使用时机" class="headerlink" title="第43条 掌握 GCD 及操作队列的使用时机"></a>第43条 掌握 GCD 及操作队列的使用时机</h3><ul>
<li>在解决多线程与任务管理问题时，派发队列并非唯一方案。</li>
<li>操作队列提供了一套高层的 Objective-C API，能实现纯 GCD 所具备的绝大部分功能，而且还能完成一些更为复杂的操作，那些操作若改用 GCD 来实现，则需另外编写代码。</li>
</ul>
<h3 id="第44条-通过-Dispatch-Group-机制，根据系统资源状况来执行任务"><a href="#第44条-通过-Dispatch-Group-机制，根据系统资源状况来执行任务" class="headerlink" title="第44条 通过 Dispatch Group 机制，根据系统资源状况来执行任务"></a>第44条 通过 Dispatch Group 机制，根据系统资源状况来执行任务</h3><ul>
<li>一系列任务可归入一个 dispatch group 之中。开发者可以在这组任务执行完毕时获得通知。</li>
<li>通过 dispatch group，可以在并发式派发队列里同时执行多项任务。此时 GCD 会根据系统资源状况来调度这些并发执行的任务。开发者若自己来实现此功能，则需编写大量代码。</li>
</ul>
<h3 id="第45条-使用-dispatch-once-来执行只需运行一次的线程安全代码"><a href="#第45条-使用-dispatch-once-来执行只需运行一次的线程安全代码" class="headerlink" title="第45条 使用 dispatch_once 来执行只需运行一次的线程安全代码"></a>第45条 使用 dispatch_once 来执行只需运行一次的线程安全代码</h3><ul>
<li>经常需要编写『只需执行一次的线程安全代码』（thread-safe single-code execution）。通过 GCD 所提供的 dispatch_once 函数，很容易就能实现此功能。</li>
<li>标记应该声明在 static 或 global 作用域中，这样的话，在把只需执行一次的块传给 dispatch_once 函数时，传进去的标记也是相同的。</li>
</ul>
<h3 id="第46条-不要使用-dispatch-get-current-queue"><a href="#第46条-不要使用-dispatch-get-current-queue" class="headerlink" title="第46条 不要使用 dispatch_get_current_queue"></a>第46条 不要使用 dispatch_get_current_queue</h3><ul>
<li>dispatch_get_current_queue 函数的行为常常与开发者所预期的不同。此函数已经废弃，只应做调试之用。</li>
<li>由于派发队列是按层级来组织的，所以无法单用某个队列对象来描述『当前队列』这一概念。</li>
<li>dispatch_get_current_queue 函数用于解决由不可重入的代码所引发的死锁，然而能用此函数解决的问题，通常也能改用『队列特定数据』来解决。</li>
</ul>
<h2 id="第7章-系统框架"><a href="#第7章-系统框架" class="headerlink" title="第7章 系统框架"></a>第7章 系统框架</h2><h3 id="第47条-熟悉系统框架"><a href="#第47条-熟悉系统框架" class="headerlink" title="第47条 熟悉系统框架"></a>第47条 熟悉系统框架</h3><ul>
<li>许多系统框架都可以直接使用。其中最重要的是 Foundation 和 CoreFoundation，这两个框架提供了构建应用程序所需的许多核心功能。</li>
<li>很多常见任务都能用框架来做，例如音频与视频处理、网络通信、数据管理等。</li>
<li>请记住：用纯 C 写成的框架与用 Objective-C 写成的一样重要，若想成为优秀的 Objective-C 开发者，应该掌握 C 语言的核心概念。</li>
</ul>
<h3 id="第48条-多用块枚举，少用-for-循环"><a href="#第48条-多用块枚举，少用-for-循环" class="headerlink" title="第48条 多用块枚举，少用 for 循环"></a>第48条 多用块枚举，少用 for 循环</h3><ul>
<li>遍历 collection 有四种方式。最基本的办法是 for 循环，其次是 NSEnumerator 遍历法及快速遍历法，最新、最先进的方式则是『块枚举法』。</li>
<li>『块枚举法』本身就能通过 GCD 来并发执行遍历操作，无须另行编写代码。而采用其他遍历方式则无法轻易实现这一点。</li>
<li>若提前知道待遍历的 collection 含有何种对象，则应修改块签名，指出对象的具体类型。</li>
</ul>
<h3 id="第49条-对自定义其内存管理语义的-collection-使用无缝桥接"><a href="#第49条-对自定义其内存管理语义的-collection-使用无缝桥接" class="headerlink" title="第49条 对自定义其内存管理语义的 collection 使用无缝桥接"></a>第49条 对自定义其内存管理语义的 collection 使用无缝桥接</h3><ul>
<li>通过无缝桥接技术，可以在 Foundation 框架中的 Objective-C 对象与 CoreFoundation 框架中的 C 语言数据结构之间来回转换。</li>
<li>在 CoreFoundation 层面创建 collection 时，可以指定许多回调函数，这些函数表示此 collection 应如何处理其元素。然后，可运用无缝桥接技术，将其转换成具备特殊内存管理语义的 Objective-C collection。</li>
</ul>
<h3 id="第50条-构建缓存时选用-NSCache-而非-NSDictionary"><a href="#第50条-构建缓存时选用-NSCache-而非-NSDictionary" class="headerlink" title="第50条 构建缓存时选用 NSCache 而非 NSDictionary"></a>第50条 构建缓存时选用 NSCache 而非 NSDictionary</h3><ul>
<li>实现缓存时应选用 NSCache 而非 NSDictionary 对象。因为 NSCache 可以提供优雅的自动删减功能，而且是『线程安全的』。此外，它与字典不同，并不会拷贝键。</li>
<li>可以给 NSCache 对象设置上限，用以限制缓存中的对象总个数及『总成本』。而这些尺度则定义了缓存删减其中对象的时机。但是绝对不要把这些尺度当成可靠的『硬限制』（hard limit），它们仅对 NSCache 起指导作用。</li>
<li>将 NSPurgeableData 与 NSCache 搭配使用，可实现自动清除数据的功能，也就是说，当 NSPurgeableData 对象所占内存为系统所丢弃时，该对象自身也会从缓存中移除。</li>
<li>如果缓存使用的得当，那么应用程序的响应速度就能提高。只有那种『重新计算起来很费事的』数据，才值得放入缓存，比如那些需要从网络获取或从磁盘读取的数据。</li>
</ul>
<h3 id="第51条-精简-initialize-与-load-的实现代码"><a href="#第51条-精简-initialize-与-load-的实现代码" class="headerlink" title="第51条 精简 initialize 与 load 的实现代码"></a>第51条 精简 initialize 与 load 的实现代码</h3><ul>
<li>在加载阶段，如果类实现了 load 方法，那么系统就会调用它。分类里也可以定义此方法，类的 load 方法要比分类中的先调用。与其他方法不同，load 方法不参与覆写机制。</li>
<li>首次使用某个类之前，系统会向其发送 initialize 消息。由于此方法遵从普通的覆写规则，所以通常应该在里面判断当前要初始化的是那个类。</li>
<li>load 与 initialize 方法都应该实现得精简一些，这有助于保持应用程序的响应能力，也能减少引入『依赖环』（interdependency cycle）的几率。</li>
<li>无法在编译器设定的全局变量，可以放在 initialize 方法里初始化。</li>
</ul>
<h3 id="第52条-别忘了-NSTimer-会保留其目标对象"><a href="#第52条-别忘了-NSTimer-会保留其目标对象" class="headerlink" title="第52条 别忘了 NSTimer 会保留其目标对象"></a>第52条 别忘了 NSTimer 会保留其目标对象</h3><ul>
<li>NSTimer 对象会保留其目标，直到计时器本身失效为止，调用 invalidate 方法可令计时器失效，另外，一次性的计时器在触发完任务之后也会失效。</li>
<li>反复执行任务的计时器（repeating timer），很容易引入保留环，如果这种计时器的目标对象又保留了计时器本身，那肯定会导致保留环。这种环状保留关系，可能是直接发生的，也可能是通过对象图里的其他对象间接发生的。</li>
<li>可以扩充 NSTimer 的功能，用『块』来打破保留环。不过，除非 NSTimer 将来在公共接口里提供此功能，否则必须创建分类，将相关实现代码加入其中。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;第1章-熟悉-Objective-C&quot;&gt;&lt;a href=&quot;#第1章-熟悉-Objective-C&quot; class=&quot;headerlink&quot; title=&quot;第1章 熟悉 Objective-C&quot;&gt;&lt;/a&gt;第1章 熟悉 Objective-C&lt;/h2&gt;&lt;h3 id=&quot;第1条-了解-Objective-C-语言的起源&quot;&gt;&lt;a href=&quot;#第1条-了解-Objective-C-语言的起源&quot; class=&quot;headerlink&quot; title=&quot;第1条 了解 Objective-C 语言的起源&quot;&gt;&lt;/a&gt;第1条 了解 Objective-C 语言的起源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Objective-C 为C语言添加了面向对象特性，是其超集。Objective-C 使用动态绑定的消息结构，也就是说，在运行时才会检查对象类型。接收一条消息之后，究竟应执行何种代码，由运行期环境而非编译器来决定。&lt;/li&gt;
&lt;li&gt;理解C语言的核心概念有助于写好Objective-C程序。尤其要掌握内存模型与指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;第2条-在类的头文件中尽量少引入其他头文件&quot;&gt;&lt;a href=&quot;#第2条-在类的头文件中尽量少引入其他头文件&quot; class=&quot;headerlink&quot; title=&quot;第2条 在类的头文件中尽量少引入其他头文件&quot;&gt;&lt;/a&gt;第2条 在类的头文件中尽量少引入其他头文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;除非确有必要，否则不要引入头文件。一般来说，应在某个类的头文件中使用向前声明来提及别的类，并在实现文件中引入那些类的头文件。这样做可以尽量降低类之间的耦合。&lt;/li&gt;
&lt;li&gt;有时无法使用向前声明，比如要声明某个类遵循一项协议。这种情况下，尽量把『该类遵循某协议』的这条声明移至『class-continuation分类』中。如果不行的话，就把协议单独放在一个头文件中，然后将其引入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;第3条-多用字面量语法，少用与之等价的方法&quot;&gt;&lt;a href=&quot;#第3条-多用字面量语法，少用与之等价的方法&quot; class=&quot;headerlink&quot; title=&quot;第3条 多用字面量语法，少用与之等价的方法&quot;&gt;&lt;/a&gt;第3条 多用字面量语法，少用与之等价的方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;应该使用字面量语法来创建字符串、数值、数组、字典。与创建此类对象的常规方法相比，这么做更加简明扼要。&lt;/li&gt;
&lt;li&gt;应该通过取下标操作来访问数组下标或字典中的键所对应的元素。&lt;/li&gt;
&lt;li&gt;用字面量语法创建数组或字典时，若值中有nil，则会抛出异常。因此，务必确保值里不含nil。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;第4条-多用类型常量，少用-define-预处理指令&quot;&gt;&lt;a href=&quot;#第4条-多用类型常量，少用-define-预处理指令&quot; class=&quot;headerlink&quot; title=&quot;第4条 多用类型常量，少用 #define 预处理指令&quot;&gt;&lt;/a&gt;第4条 多用类型常量，少用 #define 预处理指令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不要用预处理指令定义常量。这样定义出来的常量不含类型信息，编译器只是会在编译前据此执行查找与替换操作。即使有人重新定义了常量值，编译器也不会产生警告信息，这将导致应用程序中的常量值不一致。&lt;/li&gt;
&lt;li&gt;在实现文件中使用 static const 来定义『只在编译单元内可见的常量』（translation-unit-specific constant）。由于此类常量不在全局符号表中，所以无须为其名称加前缀。&lt;/li&gt;
&lt;li&gt;在头文件中使用 extern 来声明全局常量，并在相关实现文件中定义其值。这种常量要出现在全局符号表中，所有其名称应加以区隔，通常用与之相关的类名做前缀。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;第5条-用枚举表示状态、选项、状态码&quot;&gt;&lt;a href=&quot;#第5条-用枚举表示状态、选项、状态码&quot; class=&quot;headerlink&quot; title=&quot;第5条 用枚举表示状态、选项、状态码&quot;&gt;&lt;/a&gt;第5条 用枚举表示状态、选项、状态码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;应该用枚举来表示状态机的状态、传递给方法的选项以及状态码等值，给这些值起个易懂的名字。&lt;/li&gt;
&lt;li&gt;如果把传递给某个方法的选项表示为枚举类型，而多个选项又可同时使用，那么就将各选项值定义为2的幂，以便通过按位或操作将其组合起来。&lt;/li&gt;
&lt;li&gt;用 NS_ENUM 与 NS_OPTIONS 宏来定义枚举类型，并指明其底层数据类型。这样做可以确保枚举是用开发者所选的底层数据类型实现出来的，而不会采用编译器所选的类型。&lt;/li&gt;
&lt;li&gt;在处理枚举类型的 switch 语句中不要实现 default 分支。这样的话，加入新枚举之后，编译器就会提示开发者：switch 语句并未处理所有枚举。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://chaosky.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>使用 R 进行数据分析</title>
    <link href="http://chaosky.me/2016/11/07/Data-Analysis-With-R/"/>
    <id>http://chaosky.me/2016/11/07/Data-Analysis-With-R/</id>
    <published>2016-11-07T04:42:41.000Z</published>
    <updated>2016-11-07T04:42:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<h2 id="macOS-上搭建-R-开发环境"><a href="#macOS-上搭建-R-开发环境" class="headerlink" title="macOS 上搭建 R 开发环境"></a>macOS 上搭建 R 开发环境</h2><p>R 语言官方网站：<a href="https://www.r-project.org" target="_blank" rel="external">https://www.r-project.org</a></p>
<p>RStudio 官方网站：<a href="https://www.rstudio.com" target="_blank" rel="external">https://www.rstudio.com</a></p>
<p>RStudio 是 R 语言的IDE。</p>
<h3 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h3><ol>
<li><p>安装 XQuartz</p>
<p>下载地址：<a href="https://www.xquartz.org" target="_blank" rel="external">https://www.xquartz.org</a></p>
</li>
<li><p>安装 R</p>
<p>下载地址：<a href="https://cran.r-project.org" target="_blank" rel="external">https://cran.r-project.org</a></p>
</li>
<li><p>安装 RStudio</p>
<p>下载地址：<a href="https://www.rstudio.com/products/rstudio/download/" target="_blank" rel="external">https://www.rstudio.com/products/rstudio/download/</a></p>
</li>
</ol>
<h3 id="命令行安装"><a href="#命令行安装" class="headerlink" title="命令行安装"></a>命令行安装</h3><ol>
<li><p>安装 Homebrew</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="keyword">bin/ruby </span>-e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></div><div class="line"><span class="keyword">brew </span>tap caskroom/cask</div><div class="line"><span class="keyword">brew </span>install <span class="keyword">brew-cask</span></div><div class="line"><span class="keyword">brew </span>update &amp;&amp; <span class="keyword">brew </span>upgrade <span class="keyword">brew-cask </span>&amp;&amp; <span class="keyword">brew </span>cleanup &amp;&amp; <span class="keyword">brew </span>cask cleanup</div></pre></td></tr></table></figure>
</li>
<li><p>安装 R 开发工具</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>cask install xquartz</div><div class="line"><span class="keyword">brew </span>tap homebrew/science</div><div class="line"><span class="keyword">brew </span>install R</div><div class="line"><span class="keyword">brew </span>cask install rstudio</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;macOS-上搭建-R-开发环境&quot;&gt;&lt;a href=&quot;#macOS-上搭建-R-开发环境&quot; class=&quot;headerlink&quot; title=&quot;macOS 上搭建 R 开发环境&quot;&gt;&lt;/a&gt;macOS 上搭建
    
    </summary>
    
      <category term="数据分析" scheme="http://chaosky.me/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="R" scheme="http://chaosky.me/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>【译】ARC 最佳实践</title>
    <link href="http://chaosky.me/2016/11/04/ARC-Best-Practices/"/>
    <id>http://chaosky.me/2016/11/04/ARC-Best-Practices/</id>
    <published>2016-11-04T01:06:04.000Z</published>
    <updated>2016-11-04T01:06:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<p>英文原文出处：<a href="http://amattn.com/p/arc_best_practices.html" target="_blank" rel="external">http://amattn.com/p/arc_best_practices.html</a></p>
<h2 id="一些可选背景故事："><a href="#一些可选背景故事：" class="headerlink" title="一些可选背景故事："></a>一些可选背景故事：</h2><ul>
<li>相关文档：<a href="https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html" target="_blank" rel="external">迁移至ARC版本说明</a></li>
<li>Mike Ash 在他的 <a href="http://www.mikeash.com/pyblog/friday-qa-2011-09-30-automatic-reference-counting.html" target="_blank" rel="external">Friday Q&amp;As</a> 也有一篇关于ARC的文章。</li>
<li>深入的技术文档在 LLVM 项目的 <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html" target="_blank" rel="external">CLANG 网站</a>上。</li>
</ul>
<p>假设你正在使用 iOS 5 或者更高版本，而不是 4。实际上，弱指针是 ARC 中的一个重要工具，所以我不建议在 iOS 4 中使用 ARC。</p>
<h2 id="更新注意事项"><a href="#更新注意事项" class="headerlink" title="更新注意事项"></a>更新注意事项</h2><p>这份文件自从2011年发布以来，一直在不断更新。最后一次微小的修订是在 2013年发布 iOS 7。</p>
<a id="more"></a>
<h2 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h2><ul>
<li><p>纯量类型属性应该使用 <strong>assign</strong>。</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">int</span> scalarInt;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> scalarFloat;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGPoint</span> scalarStruct;</div></pre></td></tr></table></figure>
</li>
<li><p>需要保留或者引用向下对象层次结构的对象属性应该使用 <strong>strong</strong>。</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> childObject;</div></pre></td></tr></table></figure>
</li>
<li><p>引用向上对象层次结构的对象属性应该使用 <strong>weak</strong>。此外，当引用委托对象时，<strong>weak</strong> 是最安全的。</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> parentObject;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">NSObject</span> &lt;SomeDelegate&gt; *delegate;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>Blocks</strong> 仍然应该使用 <strong>copy</strong>。</p>
  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">property</span><span class="title"> </span>(nonatomic, copy) SomeBlockType someBlock;</div></pre></td></tr></table></figure>
</li>
<li><p>在 <strong>dealloc</strong> 中：</p>
<ul>
<li>移除观察者</li>
<li>注销通知</li>
<li>设置所有不是 <strong>weak</strong> 的委托为 <strong>nil</strong></li>
<li>使所有定时器失效（译注：如果定时器是strong的属性，dealloc可能永远都不会被调用，所以定时器失效应该在ViewWillDisappear中完成）</li>
</ul>
</li>
<li><p><strong>IBOutlets</strong> 应该是 <strong>weak</strong>，除了顶层 <strong>IBOutlets</strong>是 <strong>strong</strong>。（译注：使用storyboard（xib不行）创建的vc，会有一个叫_topLevelObjectsToKeepAliveFromStoryboard的私有数组强引用所有top level的对象，所以这时即便outlet声明成weak也没关系）</p>
</li>
</ul>
<h2 id="桥接"><a href="#桥接" class="headerlink" title="桥接"></a>桥接</h2><p>官方文档：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> my_id;</div><div class="line"><span class="built_in">CFStringRef</span> my_cfref;</div><div class="line"><span class="built_in">NSString</span>   *a = (__bridge <span class="built_in">NSString</span>*)my_cfref;     <span class="comment">// Noop cast.</span></div><div class="line"><span class="built_in">CFStringRef</span> b = (__bridge <span class="built_in">CFStringRef</span>)my_id;      <span class="comment">// Noop cast.</span></div><div class="line"><span class="built_in">NSString</span>   *c = (__bridge_transfer <span class="built_in">NSString</span>*)my_cfref; <span class="comment">// -1 on the CFRef</span></div><div class="line"><span class="built_in">CFStringRef</span> d = (__bridge_retained <span class="built_in">CFStringRef</span>)my_id;  <span class="comment">// returned CFRef +1</span></div></pre></td></tr></table></figure>
<p>详细解释：</p>
<ul>
<li><strong>__bridge</strong> 对于内存管理是无操作的</li>
<li><strong>__bridge_transfer</strong> 用于转换 CFRef 为 Objective-C 对象。ARC 将减少 CFRef 的retain count，因此请确保 CFRef 具有+1 retain count。</li>
<li><strong>__bridge_retained</strong> 用于转换 Objective-C 对象为 CFRef。这将有效地给你返回一个 retain count +1的CFRef。 您有责任在未来某个时候调用 CFRef 的 CFRelease。</li>
</ul>
<h2 id="NSError"><a href="#NSError" class="headerlink" title="NSError"></a>NSError</h2><p>无处不在的 <strong>NSError</strong> 是有点棘手。典型的 Cocoa 约定是它们通过输出参数（也称为间接指针）实现。</p>
<p>在ARC中，输出参数默认是 <strong>__autoreleasing</strong>，应该这样实现:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)performWithError:(__autoreleasing <span class="built_in">NSError</span> **)error</div><div class="line">&#123;</div><div class="line">    <span class="comment">// ... some error occurs ...</span></div><div class="line">    <span class="keyword">if</span> (error)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// write to the out-parameter, ARC will autorelease it</span></div><div class="line">        *error = [[<span class="built_in">NSError</span> alloc] initWithDomain:<span class="string">@""</span> </div><div class="line">                                            code:<span class="number">-1</span> </div><div class="line">                                        userInfo:<span class="literal">nil</span>];</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当使用输出参数时，你应该在 <strong>*error</strong> 对象使用 <strong>__autoreleasing</strong>。</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSError __autoreleasing *<span class="built_in">error</span> = <span class="built_in">error</span>;</div><div class="line"><span class="keyword">BOOL</span> OK = [myObject performOperationWithError:&amp;<span class="built_in">error</span>];</div><div class="line"><span class="keyword">if</span> (!OK)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// handle the error.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你忘记 <strong>__autoreleasing</strong>，编译器将会简单地为你插入一个临时的中间自动释放对象。 这是在向后兼容性的压迫性制度下作出的妥协。我看到一些编译器配置不会自动使它们<strong>__autoreleasing</strong>。 对所有新代码包含 <strong>__autoreleasing</strong> 更安全的。</p>
<h2 id="autoreleasepool"><a href="#autoreleasepool" class="headerlink" title="@autoreleasepool"></a>@autoreleasepool</h2><p>使用 <strong>@autoreleasepool</strong> 内部循环：</p>
<ul>
<li>迭代很多，很多次</li>
<li>创建大量的临时对象</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If someArray is huge</span></div><div class="line"><span class="selector-tag">for</span> (id obj in someArray)</div><div class="line">&#123;</div><div class="line">    <span class="variable">@autoreleasepool</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// or you are creating lots </span></div><div class="line">        <span class="comment">// of temporary objects here...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 <strong>@autoreleasepool</strong> 指令创建和销毁自动释放池比蓝灯特价(译注：blue light special是沃尔玛的一个购物区域)还便宜。不要担心在循环中这样做。如果你超偏执，至少先检查profiler。</p>
<h2 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h2><p>一般来说，<strong>blocks</strong> 都能使用。但是有一些例外。</p>
<p>当将 <strong>block</strong> 指针添加到集合时，你首先得复制它们。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">someBlockType someBlock = ^&#123;NSLog(@<span class="string">"hi"</span>)<span class="comment">;&#125;;</span></div><div class="line">[someArray <span class="keyword">addObject:[someBlock </span>copy]]<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><strong>blocks</strong> 的循环引用有些危险。你可能看到过这个警告：</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">warning: capturing <span class="string">'self'</span> strongly <span class="keyword">in</span> <span class="keyword">this</span> </div><div class="line">block <span class="keyword">is</span> likely <span class="keyword">to</span> lead <span class="keyword">to</span> a retain cycle </div><div class="line">[-Warc-retain-cycles,<span class="number">4</span>]</div><div class="line"></div><div class="line">SomeBlockType someBlock = ^&#123;</div><div class="line">    [self someMethod];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>原因是 <strong>someBlock</strong> 被 self 强引用，并且当 <strong>block</strong> 拷贝到堆中时将捕获并且 retain  <strong>self</strong>。</p>
<p>使用任何实例变量也将捕获父对象，同样有不太明显的潜在循环引用：</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The following block will retain "self"</span></div><div class="line">SomeBlockType someBlock = ^&#123;</div><div class="line">    BOOL isDone = _isDone;  <span class="comment">// _isDone is an ivar of self</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>更安全，但令人愉快的解决办法是使用 <strong>weakSelf</strong>：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">__<span class="keyword">weak</span> SomeObjectClass *weakSelf = <span class="keyword">self</span>;</div><div class="line"></div><div class="line">SomeBlockType someBlock = ^&#123;</div><div class="line">    SomeObjectClass *strongSelf = weakSelf;</div><div class="line">    <span class="keyword">if</span> (strongSelf == <span class="literal">nil</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// The original self doesn't exist anymore.</span></div><div class="line">        <span class="comment">// Ignore, notify or otherwise handle this case.</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        [strongSelf someMethod];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>有时，你需要注意避免使用任意对象的循环引用：如果 <strong>someObject</strong> 强引用 <strong>someObject</strong> 的 <strong>block</strong>，你需要使用 <strong>weakSomeObject</strong> 打破循环引用。</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">SomeObjectClass *<span class="attr">someObject</span> = ...</div><div class="line">__weak SomeObjectClass *<span class="attr">weakSomeObject</span> = someObject;</div><div class="line"></div><div class="line">someObject.<span class="attr">completionHandler</span> = ^&#123;</div><div class="line">    SomeObjectClass *<span class="attr">strongSomeObject</span> = weakSomeObject;</div><div class="line">    <span class="keyword">if</span> (<span class="attr">strongSomeObject</span> == nil)</div><div class="line">    &#123;</div><div class="line">        // The original someObject doesn't exist anymore.</div><div class="line">        // Ignore, notify <span class="literal">or</span> otherwise handle this case.</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        // okay, NOW we can do something <span class="keyword">with</span> someObject</div><div class="line">        [strongSomeObject someMethod];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="从NS对象或者UI对象访问CGRef"><a href="#从NS对象或者UI对象访问CGRef" class="headerlink" title="从NS对象或者UI对象访问CGRef"></a>从NS对象或者UI对象访问CGRef</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIColor</span> *redColor = [<span class="built_in">UIColor</span> redColor]; </div><div class="line"><span class="built_in">CGColorRef</span> redRef = redColor.CGColor;</div><div class="line"><span class="comment">// do some stuff with redRef.</span></div></pre></td></tr></table></figure>
<p>上面的例子有一些非常微妙的问题。当你创建 <strong>redRef</strong>，如果 <strong>redColor</strong> 不再使用，那么<strong>redColor</strong> 就在注释代码之后被销毁。</p>
<p>问题是 <strong>redColor</strong> 持有 <strong>redRef</strong>，并且当访问 <strong>redRef</strong>，它可能或者可能不再是 <strong>colorRef</strong>。更糟的是，这种类型的错误很少出现在模拟器上。当在较低工作内存的设备（比如：早期的iPad）上使用时，更有可能发生。</p>
<p>有几个解决办法。基本上都是当你在使用 <strong>redRef</strong> 时，保证 <strong>redColor</strong> 不会被释放。</p>
<p>一种非常简单的实现就是使用 <strong>__autoreleasing</strong>。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIColor</span> * __autoreleasing redColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line"><span class="built_in">CGColorRef</span> redRef = redColor.CGColor;</div></pre></td></tr></table></figure>
<p>现在，<strong>redColor</strong> 不会被销毁，直到方法返回后某个不确定的时间，都能很好地使用。 我们可以安全地在方法的作用域使用 <strong>redRef</strong>。</p>
<p>另一个方法是 retain <strong>redRef</strong>：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIColor</span> *redColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line"><span class="built_in">CGColorRef</span> redRef = <span class="built_in">CFRetain</span>(redColor.CGColor);</div><div class="line"><span class="comment">// use redRef and when done release it:</span></div><div class="line"><span class="built_in">CFRelease</span>(redRef);</div></pre></td></tr></table></figure>
<p>重要提示：你需要 在使用<strong>redColor.CGColor</strong> 的同一行使用 <strong>CFRetain()</strong>。<strong>redColor</strong> 在上次使用之后有效地被破坏。以下方式不会有用：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIColor</span> *redColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line"><span class="built_in">CGColorRef</span> redRef = redColor.CGColor; <span class="comment">// redColor is released right after this...</span></div><div class="line"><span class="built_in">CFRetain</span>(redRef);  <span class="comment">// This may crash...</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>上面标有“This may crash”一行是一个有趣的注释。再次，我的经验里在模拟器上它不会经常崩溃，但在实际的iOS设备上100%崩溃。开发者请注意。</p>
<p>The Big Nerd Ranch 对这个问题有非常深入的探讨: <a href="http://weblog.bignerdranch.com/?p=296" target="_blank" rel="external">http://weblog.bignerdranch.com/?p=296</a></p>
<h2 id="Singletons"><a href="#Singletons" class="headerlink" title="Singletons"></a>Singletons</h2><p>仅仅偶然地与ARC有关。本地生成的单例实现是一种激增。（许多不必要的重写 retain 和 release）</p>
<p>这些都应该被替换为以下代码：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+ (MyClass *)singleton</div><div class="line">&#123;</div><div class="line">    static MyClass *<span class="keyword">sharedMyClass </span>= nil<span class="comment">;</span></div><div class="line">    static <span class="keyword">dispatch_once_t </span>once = <span class="number">0</span><span class="comment">;</span></div><div class="line">    <span class="keyword">dispatch_once(&amp;once, </span>^&#123;<span class="keyword">sharedMyClass </span>= [[self alloc] init]<span class="comment">;&#125;);</span></div><div class="line">    return <span class="keyword">sharedMyClass;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每一次你需要销毁单例的能力。如果你使用这个除了 UnitTests，你可能不再使用单例。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// declare the static variable outside of the singleton method</span></div><div class="line"><span class="keyword">static</span> MyClass *__sharedMyClass = <span class="literal">nil</span>;</div><div class="line"></div><div class="line">+ (MyClass *)singleton</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> once = <span class="number">0</span>;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;once, ^&#123;__sharedMyClass = [[<span class="keyword">self</span> alloc] init];&#125;);</div><div class="line">    <span class="keyword">return</span> __sharedMyClass;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// For use by test frameworks only!</span></div><div class="line">- (<span class="keyword">void</span>)destroyAndRecreateSingleton</div><div class="line">&#123;</div><div class="line">    __sharedMyClass = [[<span class="keyword">self</span> alloc] init];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="译者后记"><a href="#译者后记" class="headerlink" title="译者后记"></a>译者后记</h2><p>第一次翻译，请大家多多指教。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;英文原文出处：&lt;a href=&quot;http://amattn.com/p/arc_best_practices.html&quot;&gt;http://amattn.com/p/arc_best_practices.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一些可选背景故事：&quot;&gt;&lt;a href=&quot;#一些可选背景故事：&quot; class=&quot;headerlink&quot; title=&quot;一些可选背景故事：&quot;&gt;&lt;/a&gt;一些可选背景故事：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;相关文档：&lt;a href=&quot;https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html&quot;&gt;迁移至ARC版本说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mike Ash 在他的 &lt;a href=&quot;http://www.mikeash.com/pyblog/friday-qa-2011-09-30-automatic-reference-counting.html&quot;&gt;Friday Q&amp;amp;As&lt;/a&gt; 也有一篇关于ARC的文章。&lt;/li&gt;
&lt;li&gt;深入的技术文档在 LLVM 项目的 &lt;a href=&quot;http://clang.llvm.org/docs/AutomaticReferenceCounting.html&quot;&gt;CLANG 网站&lt;/a&gt;上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设你正在使用 iOS 5 或者更高版本，而不是 4。实际上，弱指针是 ARC 中的一个重要工具，所以我不建议在 iOS 4 中使用 ARC。&lt;/p&gt;
&lt;h2 id=&quot;更新注意事项&quot;&gt;&lt;a href=&quot;#更新注意事项&quot; class=&quot;headerlink&quot; title=&quot;更新注意事项&quot;&gt;&lt;/a&gt;更新注意事项&lt;/h2&gt;&lt;p&gt;这份文件自从2011年发布以来，一直在不断更新。最后一次微小的修订是在 2013年发布 iOS 7。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="ARC" scheme="http://chaosky.me/tags/ARC/"/>
    
      <category term="译文" scheme="http://chaosky.me/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Xcode Snippets（代码片段）</title>
    <link href="http://chaosky.me/2016/10/31/Xcode-Snippets/"/>
    <id>http://chaosky.me/2016/10/31/Xcode-Snippets/</id>
    <published>2016-10-31T03:35:24.000Z</published>
    <updated>2016-10-31T03:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<p>关于 <strong>Xcode Snippets</strong> 的介绍，可以通过<a href="http://nshipster.cn/xcode-snippets/" target="_blank" rel="external">这篇文章</a>了解，以及如何生成自定义的代码片段。</p>
<h2 id="安装-NShipster-提供的代码片段"><a href="#安装-NShipster-提供的代码片段" class="headerlink" title="安装 NShipster 提供的代码片段"></a>安装 NShipster 提供的代码片段</h2><p>仓库地址：<a href="https://github.com/Xcode-Snippets" target="_blank" rel="external">https://github.com/Xcode-Snippets</a></p>
<ol>
<li>安装命令行工具：<code>gem install xcodesnippet</code></li>
<li>下载代码仓库：<code>git clone https://github.com/Xcode-Snippets/Objective-C.git</code></li>
<li>进入该目录添加单条代码片段：<code>xcodesnippet install path/to/source.m</code></li>
<li>该目录下有很多代码片段，可以通过命令批量添加：<code>ls -1 | xargs -L1 xcodesnippet install</code></li>
</ol>
<h2 id="安装唐巧提供的代码片段"><a href="#安装唐巧提供的代码片段" class="headerlink" title="安装唐巧提供的代码片段"></a>安装唐巧提供的代码片段</h2><p>仓库地址：<a href="https://github.com/tangqiaoboy/xcode_tool" target="_blank" rel="external">https://github.com/tangqiaoboy/xcode_tool</a></p>
<ol>
<li>下载项目仓库：<code>git clone https://github.com/tangqiaoboy/xcode_tool</code></li>
<li><code>cd xcode_tool</code></li>
<li><code>./setup_snippets.sh</code></li>
</ol>
<p>需要注意的是唐巧提供的代码片段，以后需要更新时可以直接仓库即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于 &lt;strong&gt;Xcode Snippets&lt;/strong&gt; 的介绍，可以通过&lt;a href=&quot;http://nshipster.cn/xcode-snippets/&quot; target=&quot;_blank&quot; rel
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Tools" scheme="http://chaosky.me/tags/Tools/"/>
    
      <category term="Xcode" scheme="http://chaosky.me/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Method Swizzle</title>
    <link href="http://chaosky.me/2016/10/26/Objective-C-Method-Swizzle/"/>
    <id>http://chaosky.me/2016/10/26/Objective-C-Method-Swizzle/</id>
    <published>2016-10-26T13:05:50.000Z</published>
    <updated>2016-10-26T13:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<p>Method Swizzle（方法调配、方法混合、方法调和、方法混写） 是 Objective-C 运行时的黑魔法之一。我们可以通过 Swizzle 的手段，在运行时对某些方法的实现进行替换，这是 Objective-C 甚至说 Cocoa 开发中最为华丽，同时也是最为危险的技巧之一。Swizzle 使用了 Objective-C 的动态派发，对于 NSObject 的子类是可以直接使用的。</p>
<p>通过此方案，可以为那些『完全不知道其具体实现的』黑盒方法增加日志记录功能，这非常有助于程序调试。然而，次做法只在调试程序时有用。很少有人在调试程序之外的场合用上述『Method Swillze』来永久改动某个类的功能。不能仅仅因为Objective-C 语言里有这个特性就一定要用它。若是滥用，反而会令代码变得不易读懂且难于维护。</p>
<a id="more"></a>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><script src="https://gist.github.com/chaoskyme/4758787cda11d473c2abdf3ef5c63d67.js"></script>

<h2 id="示例demo"><a href="#示例demo" class="headerlink" title="示例demo"></a>示例demo</h2><p>demo 中实现了通过 Swizzle 的方式统计应用内所有按钮的点击次数。</p>
<p>代码下载地址：<a href="https://github.com/chaoskyme/Demo/tree/master/SwizzleDemo" target="_blank" rel="external">https://github.com/chaoskyme/Demo/tree/master/SwizzleDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Method Swizzle（方法调配、方法混合、方法调和、方法混写） 是 Objective-C 运行时的黑魔法之一。我们可以通过 Swizzle 的手段，在运行时对某些方法的实现进行替换，这是 Objective-C 甚至说 Cocoa 开发中最为华丽，同时也是最为危险的技巧之一。Swizzle 使用了 Objective-C 的动态派发，对于 NSObject 的子类是可以直接使用的。&lt;/p&gt;
&lt;p&gt;通过此方案，可以为那些『完全不知道其具体实现的』黑盒方法增加日志记录功能，这非常有助于程序调试。然而，次做法只在调试程序时有用。很少有人在调试程序之外的场合用上述『Method Swillze』来永久改动某个类的功能。不能仅仅因为Objective-C 语言里有这个特性就一定要用它。若是滥用，反而会令代码变得不易读懂且难于维护。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://chaosky.me/tags/Objective-C/"/>
    
      <category term="Runtime" scheme="http://chaosky.me/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>地下城堡2：黑暗觉醒</title>
    <link href="http://chaosky.me/2016/10/24/dungeon2/"/>
    <id>http://chaosky.me/2016/10/24/dungeon2/</id>
    <published>2016-10-24T08:20:17.000Z</published>
    <updated>2016-10-24T08:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<h2 id="地下城堡2：黑暗觉醒转职一览表"><a href="#地下城堡2：黑暗觉醒转职一览表" class="headerlink" title="地下城堡2：黑暗觉醒转职一览表"></a>地下城堡2：黑暗觉醒转职一览表</h2><p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-10-24-地下城堡2：黑暗觉醒转职一览表.png" alt="地下城堡2：黑暗觉醒转职一览表"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;地下城堡2：黑暗觉醒转职一览表&quot;&gt;&lt;a href=&quot;#地下城堡2：黑暗觉醒转职一览表&quot; class=&quot;headerlink&quot; title=&quot;地下城堡2：黑暗觉醒转职一览表&quot;&gt;&lt;/a&gt;地下城堡2：黑暗觉醒转职
    
    </summary>
    
      <category term="Game" scheme="http://chaosky.me/categories/Game/"/>
    
    
      <category term="地下城堡2" scheme="http://chaosky.me/tags/%E5%9C%B0%E4%B8%8B%E5%9F%8E%E5%A0%A12/"/>
    
  </entry>
  
  <entry>
    <title>越狱检测</title>
    <link href="http://chaosky.me/2016/10/12/Check-Jailbroken/"/>
    <id>http://chaosky.me/2016/10/12/Check-Jailbroken/</id>
    <published>2016-10-12T03:53:53.000Z</published>
    <updated>2016-10-12T03:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<p>代码详情查看以下</p>
<a id="more"></a>
<script src="https://gist.github.com/chaoskyme/12d9b72b65f55d0faf7d9690fa1a71b1.js"></script>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码详情查看以下&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Jailbreak" scheme="http://chaosky.me/tags/Jailbreak/"/>
    
  </entry>
  
  <entry>
    <title>持续集成</title>
    <link href="http://chaosky.me/2016/09/26/Continuous-Integration/"/>
    <id>http://chaosky.me/2016/09/26/Continuous-Integration/</id>
    <published>2016-09-26T15:00:51.000Z</published>
    <updated>2016-09-26T15:00:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<p>持续集成主要有两大好处：一是省去手动构建部署的繁琐，二是每一个提交都有自动跑测试保证质量。</p>
<p>本文主要介绍两大持续集成工具：TravisCI 和 Jenkins。</p>
<h2 id="TravisCI"><a href="#TravisCI" class="headerlink" title="TravisCI"></a>TravisCI</h2><p>Travis CI 可以和 Github 无缝集成，每次push都可以触发相应的操作，跑测试、自动部署都能完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;持续集成主要有两大好处：一是省去手动构建部署的繁琐，二是每一个提交都有自动跑测试保证质量。&lt;/p&gt;
&lt;p&gt;本文主要介绍两大持续集成工具：TravisCI 和 Jenkins。&lt;/p&gt;
&lt;h2 id=&quot;TravisCI
    
    </summary>
    
      <category term="CI" scheme="http://chaosky.me/categories/CI/"/>
    
    
      <category term="TravisCI" scheme="http://chaosky.me/tags/TravisCI/"/>
    
      <category term="Jenkins" scheme="http://chaosky.me/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>单例类</title>
    <link href="http://chaosky.me/2016/09/24/Singteton-Class/"/>
    <id>http://chaosky.me/2016/09/24/Singteton-Class/</id>
    <published>2016-09-24T12:09:24.000Z</published>
    <updated>2016-09-24T12:09:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>单例模式（Singleton Pattern）最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<p>注意：</p>
<p>1、单例类只能有一个实例。</p>
<p>2、单例类必须自己创建自己的唯一实例。</p>
<p>3、单例类必须给所有其他对象提供这一实例。</p>
<a id="more"></a>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个 SingleObject 类。SingleObject 类有它的私有构造函数和本身的一个静态实例。<br>SingleObject 类提供了一个静态方法，供外界获取它的静态实例。SingletonPatternDemo，我们的演示类使用 SingleObject 类来获取 SingleObject 对象。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/singleton_pattern_uml_diagram.jpg" alt=""></p>
<script src="https://gist.github.com/chaoskyme/23a6095423494752f3bee55c114a2a97.js"></script>

]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;单例模式（Singleton Pattern）最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/p&gt;
&lt;p&gt;这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;1、单例类只能有一个实例。&lt;/p&gt;
&lt;p&gt;2、单例类必须自己创建自己的唯一实例。&lt;/p&gt;
&lt;p&gt;3、单例类必须给所有其他对象提供这一实例。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Singteton" scheme="http://chaosky.me/tags/Singteton/"/>
    
  </entry>
  
  <entry>
    <title>我关注的公众号</title>
    <link href="http://chaosky.me/2016/09/21/Official-Accounts/"/>
    <id>http://chaosky.me/2016/09/21/Official-Accounts/</id>
    <published>2016-09-21T07:47:09.000Z</published>
    <updated>2016-09-21T07:47:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<ul>
<li>2016.09.21 更新微信公众号</li>
</ul>
<h2 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><h4 id="iOS开发"><a href="#iOS开发" class="headerlink" title="iOS开发"></a>iOS开发</h4><p>微信号：iOSDevTip</p>
<p>功能介绍：最新iOS、iPhone资讯，万名iOS开发者、swift开发、果粉聚集，参与技术讨论，整理开发技巧，分享创业经验！享受生活、热爱编程！</p>
<h4 id="CocoaChina"><a href="#CocoaChina" class="headerlink" title="CocoaChina"></a>CocoaChina</h4><p>微信号: cocoachinabbs</p>
<p>功能介绍: CocoaChina苹果开发中文社区官方微信，提供教程资源、app推广营销、招聘、外包及培训信息、各类沙龙交流活动以及更多开发者服务。</p>
<h4 id="Crossin的编程教室"><a href="#Crossin的编程教室" class="headerlink" title="Crossin的编程教室"></a>Crossin的编程教室</h4><p>微信号: crossincode</p>
<p>功能介绍: 每天5分钟，学点简单的编程，用新的思维方式看世界。</p>
<h4 id="待字闺中"><a href="#待字闺中" class="headerlink" title="待字闺中"></a>待字闺中</h4><p>微信号: daiziguizhongren</p>
<p>功能介绍: 深度分析大数据、深度学习、人工智能等技术，切中实际应用场景，为大家授业解惑。间或，也会介绍国内外相关领域有趣的面试题。</p>
<h4 id="程序人生"><a href="#程序人生" class="headerlink" title="程序人生"></a>程序人生</h4><p>微信号: programmer_life</p>
<p>功能介绍: 十年漫漫程序人生，打过各种杂，也做过让我骄傲的软件；管理过十多人的团队，还带领一班兄弟姐妹创过业。关注程序人生，了解程序猿，学做程序猿，让我们的人生不再屌丝化。</p>
<h4 id="唐巧——iOS开发"><a href="#唐巧——iOS开发" class="headerlink" title="唐巧——iOS开发"></a>唐巧——iOS开发</h4><p>微信号: iosDevTips</p>
<p>功能介绍: 我叫唐巧，InfoQ 编辑，《iOS开发进阶》作者，现在在猿题库创业。本账号主要分享我精选的 iOS 开发文章和一些创业感悟。</p>
<h4 id="利器"><a href="#利器" class="headerlink" title="利器"></a>利器</h4><p>微信号：liqiio</p>
<p>功能介绍：创造者和他们的工具.</p>
<h4 id="论码农的自我修养"><a href="#论码农的自我修养" class="headerlink" title="论码农的自我修养"></a>论码农的自我修养</h4><p>微信号：bit_tiger</p>
<p>功能介绍：“有趣,有用,有效”.刷项目,做实战,捅破技术的那层纸.</p>
<h4 id="Pinapps"><a href="#Pinapps" class="headerlink" title="Pinapps"></a>Pinapps</h4><p>微信号：Pinapps</p>
<p>功能介绍：我推荐的不仅是apps,更是一种态度!</p>
<h4 id="ThoughtWorks"><a href="#ThoughtWorks" class="headerlink" title="ThoughtWorks"></a>ThoughtWorks</h4><p>微信号：ThoughtWorks</p>
<p>功能介绍：最新技术雷达/各类技术干货/精选职位招聘/精彩活动预告/经典案例故事,就在ThoughtWorks.</p>
<h3 id="人文"><a href="#人文" class="headerlink" title="人文"></a>人文</h3><h4 id="不止读书"><a href="#不止读书" class="headerlink" title="不止读书"></a>不止读书</h4><p>微信号: buzhidushu</p>
<p>功能介绍: 不止读书，读书不止。推荐好书。</p>
<h4 id="伯乐在线"><a href="#伯乐在线" class="headerlink" title="伯乐在线"></a>伯乐在线</h4><p>微信号: jobbole</p>
<p>功能介绍：关注职业资讯；学习各类职业感悟、心得和经验分享，扩大职业视野；体会求职、工作和创业的历程 - 就在JobBole.com 伯乐在线</p>
<h4 id="槽边往事"><a href="#槽边往事" class="headerlink" title="槽边往事"></a>槽边往事</h4><p>微信号: bitsea</p>
<p>功能介绍: 和菜头的微信Blog，用于分享各种新鲜资讯</p>
<h4 id="鬼脚七"><a href="#鬼脚七" class="headerlink" title="鬼脚七"></a>鬼脚七</h4><p>微信号: taobaoguijiaoqi</p>
<p>功能介绍: 鬼脚七，真名文德，自媒体人。做自己，爱生活！</p>
<h4 id="懒人在思考"><a href="#懒人在思考" class="headerlink" title="懒人在思考"></a>懒人在思考</h4><p>微信号：lazy-thought</p>
<p>功能介绍：以黑客那种邪气看待世界.而你,务必保持自己的独立思维. By 余弦</p>
<h4 id="老鹰说"><a href="#老鹰说" class="headerlink" title="老鹰说"></a>老鹰说</h4><p>微信号：joeytalks</p>
<p>功能介绍：创业就是典当灵魂,成功者才能将灵魂赎回.老鹰在这里与你分享赎回灵魂路上的点点滴滴.</p>
<h4 id="连岳"><a href="#连岳" class="headerlink" title="连岳"></a>连岳</h4><p>微信号：ilianyue</p>
<p>功能介绍：连岳文字，当今中国最活跃的专栏作家之一,著名专栏《我爱问连岳》</p>
<h4 id="罗辑思维"><a href="#罗辑思维" class="headerlink" title="罗辑思维"></a>罗辑思维</h4><p>微信号：luojisw</p>
<p>功能介绍：罗胖每天早上60秒语音,用文字回复语音中的关键词可阅读文章.</p>
<h4 id="MacTalk"><a href="#MacTalk" class="headerlink" title="MacTalk"></a>MacTalk</h4><p>微信号：sagacity-mac</p>
<p>功能介绍：MacTalk 开通于2012年末,内容起于 Mac 而不止 Mac,内容覆盖了技术、创业、产品和人文思考.文风有趣,又有一点力量.相关图书《MacTalk·人生元编程》《MacTalk·跨越边界》</p>
<h4 id="厉哥——虚拟机"><a href="#厉哥——虚拟机" class="headerlink" title="厉哥——虚拟机"></a>厉哥——虚拟机</h4><p>微信号：mintshow</p>
<p>功能介绍：毫无悬念最值得关注的账号.世界上牛人有无数,而厉哥只有一个.</p>
<h4 id="三表龙门阵"><a href="#三表龙门阵" class="headerlink" title="三表龙门阵"></a>三表龙门阵</h4><p>微信号：sanbiao1984</p>
<p>功能介绍：负责吐槽一切!互联网大喷壶,大嘴善喷喷天下可喷之事!</p>
<h4 id="神秘的程序员们"><a href="#神秘的程序员们" class="headerlink" title="神秘的程序员们"></a>神秘的程序员们</h4><p>微信号：coderstory</p>
<p>功能介绍：作为一个程序员星人,在地球上工作生活时,你是否会感到孤独呢? 这里有来自程序员母星的亲切问候和地球漫游指南.国内首部以程序员文化、技术主题、项目管理及互联网创业的为主题漫画,诞生于09年.主创:西乔、…</p>
<h4 id="Tiny4Voice"><a href="#Tiny4Voice" class="headerlink" title="Tiny4Voice"></a>Tiny4Voice</h4><p>微信号：tiny4voice</p>
<p>功能介绍：一天一条来自 Tinyfool 的语音鸡汤,暖胃暖心,让我们一起在漫漫长夜里面默默前行,在死之前,没有终点,不会停歇.</p>
<h4 id="图灵访谈"><a href="#图灵访谈" class="headerlink" title="图灵访谈"></a>图灵访谈</h4><p>微信号：ituring_interview</p>
<p>功能介绍：对话国外知名技术作者,讲述国内码农精彩人生.你听得见他们,他们也听得见你.</p>
<h4 id="图灵教育"><a href="#图灵教育" class="headerlink" title="图灵教育"></a>图灵教育</h4><p>微信号：turingbooks</p>
<p>功能介绍：是好书,把我们联系在一起</p>
<h4 id="歪理邪说"><a href="#歪理邪说" class="headerlink" title="歪理邪说"></a>歪理邪说</h4><p>微信号：wxieshuo</p>
<p>功能介绍：一切关于未来的故事在实现之前都是歪理邪说.</p>
<h4 id="我和世界之间"><a href="#我和世界之间" class="headerlink" title="我和世界之间"></a>我和世界之间</h4><p>微信号：between_world_and_me</p>
<p>功能介绍：更有品位 · 更有智慧 Better Taste · Wiser Life</p>
<h4 id="小道消息"><a href="#小道消息" class="headerlink" title="小道消息"></a>小道消息</h4><p>微信号：WebNotes</p>
<p>功能介绍：在这里,我想为你呈现一副中国互联网的清明上河图.冯大辉,丁香园技术产品负责人.</p>
<h4 id="余晟以为"><a href="#余晟以为" class="headerlink" title="余晟以为"></a>余晟以为</h4><p>微信号：yurii-says</p>
<p>功能介绍：我是这么以为的,当然你也可以那么以为</p>
<h3 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h3><h4 id="桂辉最久"><a href="#桂辉最久" class="headerlink" title="桂辉最久"></a>桂辉最久</h4><p>微信号: queendrunk</p>
<p>功能介绍: 原创+精选的科技类账号，干货分享TMT领域的行业热点、产品设计、大数据、市场趋势、商业模式、创业的深度分析和经典案例。第一大自媒体联盟WeMedia成员。</p>
<h4 id="InfoQ"><a href="#InfoQ" class="headerlink" title="InfoQ"></a>InfoQ</h4><p>微信号: infoqchina</p>
<p>功能介绍: 有内容的技术社区媒体</p>
<h4 id="极客公园"><a href="#极客公园" class="headerlink" title="极客公园"></a>极客公园</h4><p>微信号: geekpark</p>
<p>功能介绍: 科技创新者的大本营。汇聚优秀的产品报道、评测视频和高质量的线下活动。</p>
<h4 id="极客邦科技Geekbang"><a href="#极客邦科技Geekbang" class="headerlink" title="极客邦科技Geekbang"></a>极客邦科技Geekbang</h4><p>微信号: geekbang01</p>
<p>功能介绍: 极客邦科技是一家IT技术学习服务综合提供商，使命是帮助技术人和企业成长，旗下运营InfoQ技术媒体、EGO社交网络、StuQ在线教育、GIT企业培训等四大业务品牌，通过帮助技术人成长来推动企业发展。</p>
<h4 id="可能吧"><a href="#可能吧" class="headerlink" title="可能吧"></a>可能吧</h4><p>微信号: knbknb</p>
<p>功能介绍: 「可能吧」是一个诞生于2007年的博客，在2009年获得搜狐 IT 新闻奖、2010年获得德国之声最佳中文博客奖之后，因为众所周知的原因无法在中国访问。现在，它以另一种姿态存在。「可能吧」更新频率不高，文章一般不怎么客观，请谨慎关注。</p>
<h4 id="PingWest中文网"><a href="#PingWest中文网" class="headerlink" title="PingWest中文网"></a>PingWest中文网</h4><p>微信号：wepingwest</p>
<p>功能介绍：有品好玩的科技,一切与你有关。科技博客PingWest中文网(pingwest.com)</p>
<h4 id="商业价值"><a href="#商业价值" class="headerlink" title="商业价值"></a>商业价值</h4><p>微信号：bvmagazine</p>
<p>功能介绍：中国最好的技术商业杂志,关注更创新,更智慧,更可持续的商业,专为变革者打造.</p>
<h4 id="深圳湾"><a href="#深圳湾" class="headerlink" title="深圳湾"></a>深圳湾</h4><p>微信号：shenzhenware</p>
<p>功能介绍：深圳湾(ShenzhenWare)关注软件、硬件、以及软硬结合的生态系统.</p>
<h4 id="100offer说"><a href="#100offer说" class="headerlink" title="100offer说"></a>100offer说</h4><p>微信号：shuo100offer</p>
<p>功能介绍：有关互联网人才流动和发展,我们触摸得到真实客观的跳槽数据,我们感受得到有血有肉的故事.我们在观察,我们也在思考,我们在这里「说」</p>
<h4 id="36氪"><a href="#36氪" class="headerlink" title="36氪"></a>36氪</h4><p>微信号：wow36kr</p>
<p>功能介绍：36氪(36kr.com)是中国最具影响力的互联网创投媒体,提供最新锐最具深度的商业报道.我们强调趋势与价值,我们的slogan是:让一部分人先看到未来.</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2016.09.21 更新微信公众号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;微信公众号&quot;&gt;&lt;a href=&quot;#微信公众号&quot; class=&quot;headerlink&quot; title=&quot;微信公众号&quot;&gt;&lt;/a&gt;微信公众号&lt;/h2&gt;&lt;h3 id=&quot;技术&quot;&gt;&lt;a href=&quot;#技术&quot; class=&quot;headerlink&quot; title=&quot;技术&quot;&gt;&lt;/a&gt;技术&lt;/h3&gt;&lt;h4 id=&quot;iOS开发&quot;&gt;&lt;a href=&quot;#iOS开发&quot; class=&quot;headerlink&quot; title=&quot;iOS开发&quot;&gt;&lt;/a&gt;iOS开发&lt;/h4&gt;&lt;p&gt;微信号：iOSDevTip&lt;/p&gt;
&lt;p&gt;功能介绍：最新iOS、iPhone资讯，万名iOS开发者、swift开发、果粉聚集，参与技术讨论，整理开发技巧，分享创业经验！享受生活、热爱编程！&lt;/p&gt;
&lt;h4 id=&quot;CocoaChina&quot;&gt;&lt;a href=&quot;#CocoaChina&quot; class=&quot;headerlink&quot; title=&quot;CocoaChina&quot;&gt;&lt;/a&gt;CocoaChina&lt;/h4&gt;&lt;p&gt;微信号: cocoachinabbs&lt;/p&gt;
&lt;p&gt;功能介绍: CocoaChina苹果开发中文社区官方微信，提供教程资源、app推广营销、招聘、外包及培训信息、各类沙龙交流活动以及更多开发者服务。&lt;/p&gt;
&lt;h4 id=&quot;Crossin的编程教室&quot;&gt;&lt;a href=&quot;#Crossin的编程教室&quot; class=&quot;headerlink&quot; title=&quot;Crossin的编程教室&quot;&gt;&lt;/a&gt;Crossin的编程教室&lt;/h4&gt;&lt;p&gt;微信号: crossincode&lt;/p&gt;
&lt;p&gt;功能介绍: 每天5分钟，学点简单的编程，用新的思维方式看世界。&lt;/p&gt;
&lt;h4 id=&quot;待字闺中&quot;&gt;&lt;a href=&quot;#待字闺中&quot; class=&quot;headerlink&quot; title=&quot;待字闺中&quot;&gt;&lt;/a&gt;待字闺中&lt;/h4&gt;&lt;p&gt;微信号: daiziguizhongren&lt;/p&gt;
&lt;p&gt;功能介绍: 深度分析大数据、深度学习、人工智能等技术，切中实际应用场景，为大家授业解惑。间或，也会介绍国内外相关领域有趣的面试题。&lt;/p&gt;
&lt;h4 id=&quot;程序人生&quot;&gt;&lt;a href=&quot;#程序人生&quot; class=&quot;headerlink&quot; title=&quot;程序人生&quot;&gt;&lt;/a&gt;程序人生&lt;/h4&gt;&lt;p&gt;微信号: programmer_life&lt;/p&gt;
&lt;p&gt;功能介绍: 十年漫漫程序人生，打过各种杂，也做过让我骄傲的软件；管理过十多人的团队，还带领一班兄弟姐妹创过业。关注程序人生，了解程序猿，学做程序猿，让我们的人生不再屌丝化。&lt;/p&gt;
&lt;h4 id=&quot;唐巧——iOS开发&quot;&gt;&lt;a href=&quot;#唐巧——iOS开发&quot; class=&quot;headerlink&quot; title=&quot;唐巧——iOS开发&quot;&gt;&lt;/a&gt;唐巧——iOS开发&lt;/h4&gt;&lt;p&gt;微信号: iosDevTips&lt;/p&gt;
&lt;p&gt;功能介绍: 我叫唐巧，InfoQ 编辑，《iOS开发进阶》作者，现在在猿题库创业。本账号主要分享我精选的 iOS 开发文章和一些创业感悟。&lt;/p&gt;
&lt;h4 id=&quot;利器&quot;&gt;&lt;a href=&quot;#利器&quot; class=&quot;headerlink&quot; title=&quot;利器&quot;&gt;&lt;/a&gt;利器&lt;/h4&gt;&lt;p&gt;微信号：liqiio&lt;/p&gt;
&lt;p&gt;功能介绍：创造者和他们的工具.&lt;/p&gt;
&lt;h4 id=&quot;论码农的自我修养&quot;&gt;&lt;a href=&quot;#论码农的自我修养&quot; class=&quot;headerlink&quot; title=&quot;论码农的自我修养&quot;&gt;&lt;/a&gt;论码农的自我修养&lt;/h4&gt;&lt;p&gt;微信号：bit_tiger&lt;/p&gt;
&lt;p&gt;功能介绍：“有趣,有用,有效”.刷项目,做实战,捅破技术的那层纸.&lt;/p&gt;
&lt;h4 id=&quot;Pinapps&quot;&gt;&lt;a href=&quot;#Pinapps&quot; class=&quot;headerlink&quot; title=&quot;Pinapps&quot;&gt;&lt;/a&gt;Pinapps&lt;/h4&gt;&lt;p&gt;微信号：Pinapps&lt;/p&gt;
&lt;p&gt;功能介绍：我推荐的不仅是apps,更是一种态度!&lt;/p&gt;
&lt;h4 id=&quot;ThoughtWorks&quot;&gt;&lt;a href=&quot;#ThoughtWorks&quot; class=&quot;headerlink&quot; title=&quot;ThoughtWorks&quot;&gt;&lt;/a&gt;ThoughtWorks&lt;/h4&gt;&lt;p&gt;微信号：ThoughtWorks&lt;/p&gt;
&lt;p&gt;功能介绍：最新技术雷达/各类技术干货/精选职位招聘/精彩活动预告/经典案例故事,就在ThoughtWorks.&lt;/p&gt;
&lt;h3 id=&quot;人文&quot;&gt;&lt;a href=&quot;#人文&quot; class=&quot;headerlink&quot; title=&quot;人文&quot;&gt;&lt;/a&gt;人文&lt;/h3&gt;&lt;h4 id=&quot;不止读书&quot;&gt;&lt;a href=&quot;#不止读书&quot; class=&quot;headerlink&quot; title=&quot;不止读书&quot;&gt;&lt;/a&gt;不止读书&lt;/h4&gt;&lt;p&gt;微信号: buzhidushu&lt;/p&gt;
&lt;p&gt;功能介绍: 不止读书，读书不止。推荐好书。&lt;/p&gt;
&lt;h4 id=&quot;伯乐在线&quot;&gt;&lt;a href=&quot;#伯乐在线&quot; class=&quot;headerlink&quot; title=&quot;伯乐在线&quot;&gt;&lt;/a&gt;伯乐在线&lt;/h4&gt;&lt;p&gt;微信号: jobbole&lt;/p&gt;
&lt;p&gt;功能介绍：关注职业资讯；学习各类职业感悟、心得和经验分享，扩大职业视野；体会求职、工作和创业的历程 - 就在JobBole.com 伯乐在线&lt;/p&gt;
&lt;h4 id=&quot;槽边往事&quot;&gt;&lt;a href=&quot;#槽边往事&quot; class=&quot;headerlink&quot; title=&quot;槽边往事&quot;&gt;&lt;/a&gt;槽边往事&lt;/h4&gt;&lt;p&gt;微信号: bitsea&lt;/p&gt;
&lt;p&gt;功能介绍: 和菜头的微信Blog，用于分享各种新鲜资讯&lt;/p&gt;
&lt;h4 id=&quot;鬼脚七&quot;&gt;&lt;a href=&quot;#鬼脚七&quot; class=&quot;headerlink&quot; title=&quot;鬼脚七&quot;&gt;&lt;/a&gt;鬼脚七&lt;/h4&gt;&lt;p&gt;微信号: taobaoguijiaoqi&lt;/p&gt;
&lt;p&gt;功能介绍: 鬼脚七，真名文德，自媒体人。做自己，爱生活！&lt;/p&gt;
&lt;h4 id=&quot;懒人在思考&quot;&gt;&lt;a href=&quot;#懒人在思考&quot; class=&quot;headerlink&quot; title=&quot;懒人在思考&quot;&gt;&lt;/a&gt;懒人在思考&lt;/h4&gt;&lt;p&gt;微信号：lazy-thought&lt;/p&gt;
&lt;p&gt;功能介绍：以黑客那种邪气看待世界.而你,务必保持自己的独立思维. By 余弦&lt;/p&gt;
&lt;h4 id=&quot;老鹰说&quot;&gt;&lt;a href=&quot;#老鹰说&quot; class=&quot;headerlink&quot; title=&quot;老鹰说&quot;&gt;&lt;/a&gt;老鹰说&lt;/h4&gt;&lt;p&gt;微信号：joeytalks&lt;/p&gt;
&lt;p&gt;功能介绍：创业就是典当灵魂,成功者才能将灵魂赎回.老鹰在这里与你分享赎回灵魂路上的点点滴滴.&lt;/p&gt;
&lt;h4 id=&quot;连岳&quot;&gt;&lt;a href=&quot;#连岳&quot; class=&quot;headerlink&quot; title=&quot;连岳&quot;&gt;&lt;/a&gt;连岳&lt;/h4&gt;&lt;p&gt;微信号：ilianyue&lt;/p&gt;
&lt;p&gt;功能介绍：连岳文字，当今中国最活跃的专栏作家之一,著名专栏《我爱问连岳》&lt;/p&gt;
&lt;h4 id=&quot;罗辑思维&quot;&gt;&lt;a href=&quot;#罗辑思维&quot; class=&quot;headerlink&quot; title=&quot;罗辑思维&quot;&gt;&lt;/a&gt;罗辑思维&lt;/h4&gt;&lt;p&gt;微信号：luojisw&lt;/p&gt;
&lt;p&gt;功能介绍：罗胖每天早上60秒语音,用文字回复语音中的关键词可阅读文章.&lt;/p&gt;
&lt;h4 id=&quot;MacTalk&quot;&gt;&lt;a href=&quot;#MacTalk&quot; class=&quot;headerlink&quot; title=&quot;MacTalk&quot;&gt;&lt;/a&gt;MacTalk&lt;/h4&gt;&lt;p&gt;微信号：sagacity-mac&lt;/p&gt;
&lt;p&gt;功能介绍：MacTalk 开通于2012年末,内容起于 Mac 而不止 Mac,内容覆盖了技术、创业、产品和人文思考.文风有趣,又有一点力量.相关图书《MacTalk·人生元编程》《MacTalk·跨越边界》&lt;/p&gt;
&lt;h4 id=&quot;厉哥——虚拟机&quot;&gt;&lt;a href=&quot;#厉哥——虚拟机&quot; class=&quot;headerlink&quot; title=&quot;厉哥——虚拟机&quot;&gt;&lt;/a&gt;厉哥——虚拟机&lt;/h4&gt;&lt;p&gt;微信号：mintshow&lt;/p&gt;
&lt;p&gt;功能介绍：毫无悬念最值得关注的账号.世界上牛人有无数,而厉哥只有一个.&lt;/p&gt;
&lt;h4 id=&quot;三表龙门阵&quot;&gt;&lt;a href=&quot;#三表龙门阵&quot; class=&quot;headerlink&quot; title=&quot;三表龙门阵&quot;&gt;&lt;/a&gt;三表龙门阵&lt;/h4&gt;&lt;p&gt;微信号：sanbiao1984&lt;/p&gt;
&lt;p&gt;功能介绍：负责吐槽一切!互联网大喷壶,大嘴善喷喷天下可喷之事!&lt;/p&gt;
&lt;h4 id=&quot;神秘的程序员们&quot;&gt;&lt;a href=&quot;#神秘的程序员们&quot; class=&quot;headerlink&quot; title=&quot;神秘的程序员们&quot;&gt;&lt;/a&gt;神秘的程序员们&lt;/h4&gt;&lt;p&gt;微信号：coderstory&lt;/p&gt;
&lt;p&gt;功能介绍：作为一个程序员星人,在地球上工作生活时,你是否会感到孤独呢? 这里有来自程序员母星的亲切问候和地球漫游指南.国内首部以程序员文化、技术主题、项目管理及互联网创业的为主题漫画,诞生于09年.主创:西乔、…&lt;/p&gt;
&lt;h4 id=&quot;Tiny4Voice&quot;&gt;&lt;a href=&quot;#Tiny4Voice&quot; class=&quot;headerlink&quot; title=&quot;Tiny4Voice&quot;&gt;&lt;/a&gt;Tiny4Voice&lt;/h4&gt;&lt;p&gt;微信号：tiny4voice&lt;/p&gt;
&lt;p&gt;功能介绍：一天一条来自 Tinyfool 的语音鸡汤,暖胃暖心,让我们一起在漫漫长夜里面默默前行,在死之前,没有终点,不会停歇.&lt;/p&gt;
&lt;h4 id=&quot;图灵访谈&quot;&gt;&lt;a href=&quot;#图灵访谈&quot; class=&quot;headerlink&quot; title=&quot;图灵访谈&quot;&gt;&lt;/a&gt;图灵访谈&lt;/h4&gt;&lt;p&gt;微信号：ituring_interview&lt;/p&gt;
&lt;p&gt;功能介绍：对话国外知名技术作者,讲述国内码农精彩人生.你听得见他们,他们也听得见你.&lt;/p&gt;
&lt;h4 id=&quot;图灵教育&quot;&gt;&lt;a href=&quot;#图灵教育&quot; class=&quot;headerlink&quot; title=&quot;图灵教育&quot;&gt;&lt;/a&gt;图灵教育&lt;/h4&gt;&lt;p&gt;微信号：turingbooks&lt;/p&gt;
&lt;p&gt;功能介绍：是好书,把我们联系在一起&lt;/p&gt;
&lt;h4 id=&quot;歪理邪说&quot;&gt;&lt;a href=&quot;#歪理邪说&quot; class=&quot;headerlink&quot; title=&quot;歪理邪说&quot;&gt;&lt;/a&gt;歪理邪说&lt;/h4&gt;&lt;p&gt;微信号：wxieshuo&lt;/p&gt;
&lt;p&gt;功能介绍：一切关于未来的故事在实现之前都是歪理邪说.&lt;/p&gt;
&lt;h4 id=&quot;我和世界之间&quot;&gt;&lt;a href=&quot;#我和世界之间&quot; class=&quot;headerlink&quot; title=&quot;我和世界之间&quot;&gt;&lt;/a&gt;我和世界之间&lt;/h4&gt;&lt;p&gt;微信号：between_world_and_me&lt;/p&gt;
&lt;p&gt;功能介绍：更有品位 · 更有智慧 Better Taste · Wiser Life&lt;/p&gt;
&lt;h4 id=&quot;小道消息&quot;&gt;&lt;a href=&quot;#小道消息&quot; class=&quot;headerlink&quot; title=&quot;小道消息&quot;&gt;&lt;/a&gt;小道消息&lt;/h4&gt;&lt;p&gt;微信号：WebNotes&lt;/p&gt;
&lt;p&gt;功能介绍：在这里,我想为你呈现一副中国互联网的清明上河图.冯大辉,丁香园技术产品负责人.&lt;/p&gt;
&lt;h4 id=&quot;余晟以为&quot;&gt;&lt;a href=&quot;#余晟以为&quot; class=&quot;headerlink&quot; title=&quot;余晟以为&quot;&gt;&lt;/a&gt;余晟以为&lt;/h4&gt;&lt;p&gt;微信号：yurii-says&lt;/p&gt;
&lt;p&gt;功能介绍：我是这么以为的,当然你也可以那么以为&lt;/p&gt;
&lt;h3 id=&quot;资讯&quot;&gt;&lt;a href=&quot;#资讯&quot; class=&quot;headerlink&quot; title=&quot;资讯&quot;&gt;&lt;/a&gt;资讯&lt;/h3&gt;&lt;h4 id=&quot;桂辉最久&quot;&gt;&lt;a href=&quot;#桂辉最久&quot; class=&quot;headerlink&quot; title=&quot;桂辉最久&quot;&gt;&lt;/a&gt;桂辉最久&lt;/h4&gt;&lt;p&gt;微信号: queendrunk&lt;/p&gt;
&lt;p&gt;功能介绍: 原创+精选的科技类账号，干货分享TMT领域的行业热点、产品设计、大数据、市场趋势、商业模式、创业的深度分析和经典案例。第一大自媒体联盟WeMedia成员。&lt;/p&gt;
&lt;h4 id=&quot;InfoQ&quot;&gt;&lt;a href=&quot;#InfoQ&quot; class=&quot;headerlink&quot; title=&quot;InfoQ&quot;&gt;&lt;/a&gt;InfoQ&lt;/h4&gt;&lt;p&gt;微信号: infoqchina&lt;/p&gt;
&lt;p&gt;功能介绍: 有内容的技术社区媒体&lt;/p&gt;
&lt;h4 id=&quot;极客公园&quot;&gt;&lt;a href=&quot;#极客公园&quot; class=&quot;headerlink&quot; title=&quot;极客公园&quot;&gt;&lt;/a&gt;极客公园&lt;/h4&gt;&lt;p&gt;微信号: geekpark&lt;/p&gt;
&lt;p&gt;功能介绍: 科技创新者的大本营。汇聚优秀的产品报道、评测视频和高质量的线下活动。&lt;/p&gt;
&lt;h4 id=&quot;极客邦科技Geekbang&quot;&gt;&lt;a href=&quot;#极客邦科技Geekbang&quot; class=&quot;headerlink&quot; title=&quot;极客邦科技Geekbang&quot;&gt;&lt;/a&gt;极客邦科技Geekbang&lt;/h4&gt;&lt;p&gt;微信号: geekbang01&lt;/p&gt;
&lt;p&gt;功能介绍: 极客邦科技是一家IT技术学习服务综合提供商，使命是帮助技术人和企业成长，旗下运营InfoQ技术媒体、EGO社交网络、StuQ在线教育、GIT企业培训等四大业务品牌，通过帮助技术人成长来推动企业发展。&lt;/p&gt;
&lt;h4 id=&quot;可能吧&quot;&gt;&lt;a href=&quot;#可能吧&quot; class=&quot;headerlink&quot; title=&quot;可能吧&quot;&gt;&lt;/a&gt;可能吧&lt;/h4&gt;&lt;p&gt;微信号: knbknb&lt;/p&gt;
&lt;p&gt;功能介绍: 「可能吧」是一个诞生于2007年的博客，在2009年获得搜狐 IT 新闻奖、2010年获得德国之声最佳中文博客奖之后，因为众所周知的原因无法在中国访问。现在，它以另一种姿态存在。「可能吧」更新频率不高，文章一般不怎么客观，请谨慎关注。&lt;/p&gt;
&lt;h4 id=&quot;PingWest中文网&quot;&gt;&lt;a href=&quot;#PingWest中文网&quot; class=&quot;headerlink&quot; title=&quot;PingWest中文网&quot;&gt;&lt;/a&gt;PingWest中文网&lt;/h4&gt;&lt;p&gt;微信号：wepingwest&lt;/p&gt;
&lt;p&gt;功能介绍：有品好玩的科技,一切与你有关。科技博客PingWest中文网(pingwest.com)&lt;/p&gt;
&lt;h4 id=&quot;商业价值&quot;&gt;&lt;a href=&quot;#商业价值&quot; class=&quot;headerlink&quot; title=&quot;商业价值&quot;&gt;&lt;/a&gt;商业价值&lt;/h4&gt;&lt;p&gt;微信号：bvmagazine&lt;/p&gt;
&lt;p&gt;功能介绍：中国最好的技术商业杂志,关注更创新,更智慧,更可持续的商业,专为变革者打造.&lt;/p&gt;
&lt;h4 id=&quot;深圳湾&quot;&gt;&lt;a href=&quot;#深圳湾&quot; class=&quot;headerlink&quot; title=&quot;深圳湾&quot;&gt;&lt;/a&gt;深圳湾&lt;/h4&gt;&lt;p&gt;微信号：shenzhenware&lt;/p&gt;
&lt;p&gt;功能介绍：深圳湾(ShenzhenWare)关注软件、硬件、以及软硬结合的生态系统.&lt;/p&gt;
&lt;h4 id=&quot;100offer说&quot;&gt;&lt;a href=&quot;#100offer说&quot; class=&quot;headerlink&quot; title=&quot;100offer说&quot;&gt;&lt;/a&gt;100offer说&lt;/h4&gt;&lt;p&gt;微信号：shuo100offer&lt;/p&gt;
&lt;p&gt;功能介绍：有关互联网人才流动和发展,我们触摸得到真实客观的跳槽数据,我们感受得到有血有肉的故事.我们在观察,我们也在思考,我们在这里「说」&lt;/p&gt;
&lt;h4 id=&quot;36氪&quot;&gt;&lt;a href=&quot;#36氪&quot; class=&quot;headerlink&quot; title=&quot;36氪&quot;&gt;&lt;/a&gt;36氪&lt;/h4&gt;&lt;p&gt;微信号：wow36kr&lt;/p&gt;
&lt;p&gt;功能介绍：36氪(36kr.com)是中国最具影响力的互联网创投媒体,提供最新锐最具深度的商业报道.我们强调趋势与价值,我们的slogan是:让一部分人先看到未来.&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://chaosky.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="公众号" scheme="http://chaosky.me/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="微信" scheme="http://chaosky.me/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>第三方登录和分享常见问题集锦</title>
    <link href="http://chaosky.me/2016/09/09/SNS-Platform/"/>
    <id>http://chaosky.me/2016/09/09/SNS-Platform/</id>
    <published>2016-09-09T09:17:36.000Z</published>
    <updated>2016-09-09T09:17:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<h2 id="新浪微博"><a href="#新浪微博" class="headerlink" title="新浪微博"></a>新浪微博</h2><h3 id="iOS-sso-package-or-sign-error"><a href="#iOS-sso-package-or-sign-error" class="headerlink" title="iOS sso package or sign error"></a>iOS sso package or sign error</h3><p>出现这个问题是因为在新浪微博开放平台上申请的应用的<code>Bundle ID</code>和你项目的<code>Bundle ID</code>不一致或者未设置。  </p>
<p>解决方法：更改新浪微博开发平台上应用的<code>Bundle ID</code></p>
<h3 id="error-redirect-uri-mismatch"><a href="#error-redirect-uri-mismatch" class="headerlink" title="error:redirect_uri_mismatch"></a>error:redirect_uri_mismatch</h3><p>在程序中设置的<code>Redirect URL</code>和新浪微博开放平台申请的应用的<code>授权回调页</code>URL不一致。</p>
<p>解决方法：在新浪微博开放平台 ——&gt; 应用信息 ——&gt; 高级信息 ——&gt; OAuth2.0 授权设置 ——&gt; 授权回调页，设置和程序的<code>Redirect URL</code>一致。</p>
<h3 id="新浪微博登录授权失败，responseCode等于5051"><a href="#新浪微博登录授权失败，responseCode等于5051" class="headerlink" title="新浪微博登录授权失败，responseCode等于5051"></a>新浪微博登录授权失败，responseCode等于5051</h3><p>在项目中集成友盟第三方登录，新浪微博登录，登录授权失败，返回状态码为5051（获取账户失败）。</p>
<p>原因：App在测试阶段(未上线)，授权的微博账号和开通开放平台的微博账号不是同一账号。</p>
<p>解决办法：在新浪微博开放平台中，选择我的应用——对应应用——应用信息——测试信息，选择编辑，添加测试账号。</p>
<h2 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h2><h3 id="scope参数错误或没有scope权限"><a href="#scope参数错误或没有scope权限" class="headerlink" title="scope参数错误或没有scope权限"></a>scope参数错误或没有scope权限</h3><ol>
<li>没有相关的权限</li>
<li>账号没有认证，没有相关的权限</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;新浪微博&quot;&gt;&lt;a href=&quot;#新浪微博&quot; class=&quot;headerlink&quot; title=&quot;新浪微博&quot;&gt;&lt;/a&gt;新浪微博&lt;/h2&gt;&lt;h3 id=&quot;iOS-sso-package-or-sign-erro
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="SNS" scheme="http://chaosky.me/tags/SNS/"/>
    
      <category term="第三方分享" scheme="http://chaosky.me/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%88%86%E4%BA%AB/"/>
    
      <category term="第三方登录" scheme="http://chaosky.me/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Unix 编程艺术</title>
    <link href="http://chaosky.me/2016/09/05/Unix-Art/"/>
    <id>http://chaosky.me/2016/09/05/Unix-Art/</id>
    <published>2016-09-05T07:55:51.000Z</published>
    <updated>2016-09-05T07:55:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>《Unix 编程艺术》：这本书在模块化、文本化、配置、接口、复杂度、优化、可移植性等方面，都提供了Unix/Linux世界所积累的宝贵经验。好的程序可以经受时间、平台与用户的考验，好的编程思想可以经受实践的检验。</p>
<blockquote>
<p>读书笔记摘录自 《Unix 编程艺术》</p>
</blockquote>
<h2 id="Unix-设计原则"><a href="#Unix-设计原则" class="headerlink" title="Unix 设计原则"></a>Unix 设计原则</h2><p>所有的 Unix 哲学浓缩为一条铁律，『KISS』原则：Keep It Simple, Stupid!</p>
<a id="more"></a>
<h3 id="Unix-管道的发明人、Unix-传统的奠基人之一-Doug-Mcllroy"><a href="#Unix-管道的发明人、Unix-传统的奠基人之一-Doug-Mcllroy" class="headerlink" title="Unix 管道的发明人、Unix 传统的奠基人之一 Doug Mcllroy"></a>Unix 管道的发明人、Unix 传统的奠基人之一 Doug Mcllroy</h3><ol>
<li>让每个程序就做好一件事。如果有新任务，就重新开始，不要往原程序中加入新功能而搞得复杂。</li>
<li>假定每个程序的输出都会成为另一个程序的输入，哪怕那个程序还是未知的。输出中不要有无关的信息干扰。避免使用严格的分栏格式和二进制格式输入。不要坚持使用交互式输入。</li>
<li>尽可能早地将设计和编译的软件投入试用，哪怕是操作系统也不例外，理想情况下，应该是在几星期内。对拙劣的代码别犹豫，扔掉重写。</li>
<li>优先使用工具而不是拙劣的帮助来减轻编程任务的负担。工欲善其事必先利其器。</li>
</ol>
<p>一个程序只做一件事，并做好。程序要能协作。程序要能处理文本流，因为这是最通用的接口。</p>
<h3 id="最伟大的C语言大师之一-Rob-Pike"><a href="#最伟大的C语言大师之一-Rob-Pike" class="headerlink" title="最伟大的C语言大师之一 Rob Pike"></a>最伟大的C语言大师之一 Rob Pike</h3><ol>
<li>你无法断定程序会在什么地方耗费运行时间。瓶颈经常出现在想不到的地方，所以别急于胡乱找个地方改代码，除非你已经证实那儿就是瓶颈所在。</li>
<li>估量。在你没对代码进行估量，特别是没找到最耗时的那部分之前，别去优化速度。</li>
<li>花哨的算法在 n 很小时通常很慢，而 n 通常很小。花哨算法的常数复杂度很大。除非你确定 n 总是很大，否则不要用花哨算法（即使 n 很大，也优先考虑原则2）。</li>
<li><p>花哨的算法比简单算法更容易出 bug，更难实现。尽量使用简单的算法配合简单的数据结构。</p>
<blockquote>
<p>拿不准就穷举。</p>
</blockquote>
</li>
<li><p>数据压倒一切。如果已经选择了正确的数据结构并且把一切都组织得井井有条，正确的算法也就不言自明。编程的核心是数据结构，而不是算法。</p>
<blockquote>
<p>给我看流程图而不让我看数据表，我仍会迷茫不解；如果给我看数据表，通常就不需要流程图了；数据表是够说明问题了。</p>
</blockquote>
</li>
</ol>
<h3 id="Unix-哲学"><a href="#Unix-哲学" class="headerlink" title="Unix 哲学"></a>Unix 哲学</h3><h4 id="模块原则：使用简洁的接口拼合简单的部件"><a href="#模块原则：使用简洁的接口拼合简单的部件" class="headerlink" title="模块原则：使用简洁的接口拼合简单的部件"></a>模块原则：使用简洁的接口拼合简单的部件</h4><p>计算机编程的本质就是控制复杂度。</p>
<p>要编制复杂软件而又不至于一败涂地的唯一方法就是降低其整体复杂度——用清晰的接口把若干简单的模块组合成一个复杂软件。如此一来，多数问题只会局限于某个局部，那么就还有希望对局部进行改进而不至牵动全身。</p>
<h4 id="清晰原则：清晰胜于机巧"><a href="#清晰原则：清晰胜于机巧" class="headerlink" title="清晰原则：清晰胜于机巧"></a>清晰原则：清晰胜于机巧</h4><p>在写程序时，要想到你不是写给执行代码的计算机看的，而是给人——将来阅读维护源码的人，包括你自己——看的。</p>
<p>在选择算法和实现时就应该考虑到将来的可扩展性。而为了取得程序一丁点的性能提升就大幅度增加技术的复杂度和晦涩性，这个买卖做不得——这不仅仅是因为复杂的代码容易滋生 bug，也因为它会使日后的阅读和维护工作更加艰难。</p>
<p>相反，优雅而清晰的代码不仅不容易崩溃——而且更易于让后来的修改者立刻理解。</p>
<p>永远不要去吃力地解读语段晦涩的代码三次。</p>
<h4 id="组合原则：设计时考虑拼接组合"><a href="#组合原则：设计时考虑拼接组合" class="headerlink" title="组合原则：设计时考虑拼接组合"></a>组合原则：设计时考虑拼接组合</h4><p>如果程序彼此之间不能有效通信，那么软件就难免会陷入复杂度的泥淖。</p>
<p>在输入输出方面，Unix 传统极力提倡采用简单、文本化、面向流、设备无关的格式。文本刘界面的简洁性加强了工具的封装性。</p>
<p>要想让程序具有组合性，就要使程序彼此独立。在文本流这一端的程序应该尽可能不要考虑文本流另一端的程序。将一端的程序替换为另一个截然不同的程序，而完全不惊扰另一端应该很容易做到。</p>
<p>当程序无法自然地使用序列化、协议形式的接口时，正确的 Unix 设计至少是，把尽可能多的编程元素组织为一套定义良好的 API。这样，至少你可以通过链接调用应用程序，或者可以根据不同任务的需求粘合使用不同的接口。</p>
<h4 id="分离原则：策略同机制分离，接口同引擎分离"><a href="#分离原则：策略同机制分离，接口同引擎分离" class="headerlink" title="分离原则：策略同机制分离，接口同引擎分离"></a>分离原则：策略同机制分离，接口同引擎分离</h4><p>实行机制，而不是策略。因为策略和机制是按照不同的时间尺度变化的，策略的变化要远远快于机制。GUI 工具包的观感时尚来去匆匆，而光栅操作和组合却是永恒的。</p>
<h4 id="简洁原则：设计要简洁，复杂度能低则低"><a href="#简洁原则：设计要简洁，复杂度能低则低" class="headerlink" title="简洁原则：设计要简洁，复杂度能低则低"></a>简洁原则：设计要简洁，复杂度能低则低</h4><p>简洁而漂亮。总是设法将程序系统分解为几个能够协作的小部分，并本能地抵制任何用过多噱头来粉饰程序的企图。</p>
<h4 id="吝啬原则：除非确无他法，不要编写庞大的程序"><a href="#吝啬原则：除非确无他法，不要编写庞大的程序" class="headerlink" title="吝啬原则：除非确无他法，不要编写庞大的程序"></a>吝啬原则：除非确无他法，不要编写庞大的程序</h4><p>『大』有两重含义：体积大，复杂程度高。程序大了，维护起来就困难。</p>
<h4 id="透明性原则：设计要可见，以便审查和调试"><a href="#透明性原则：设计要可见，以便审查和调试" class="headerlink" title="透明性原则：设计要可见，以便审查和调试"></a>透明性原则：设计要可见，以便审查和调试</h4><p>因为调试通常会占用四分之三甚至更多的开发时间，所有一开始就多做点工作以减少日后调试的工作量会很划算。一个特别有效的减少调试工作量的方法就是设计时充分考虑透明性和显见性。</p>
<p>软件系统的透明性是指你一眼就能看出软件是在做什么以及怎么做的。显见性指程序带有监视和显示内部状态的功能，这样程序不仅能够运行良好，而且还可以看得出它以何种方式运行。</p>
<p>程序如果要展示其正确性，应该使用足够简单的输入输出格式，这样才能保证很容易地检验有效输入和正确输出之间的关系是否正确。</p>
<p>出于充分考虑透明性和显见性的目的，还应该提倡接口简洁，以方便其他程序对其进行操作——尤其是测试监视工具和调试脚本。</p>
<h4 id="健壮原则：健壮源于透明与简洁"><a href="#健壮原则：健壮源于透明与简洁" class="headerlink" title="健壮原则：健壮源于透明与简洁"></a>健壮原则：健壮源于透明与简洁</h4><p>软件的健壮性指软件不仅能在正常情况下运行良好，而且在超出设计者设想的意外条件下也能够运行良好。</p>
<p>让程序健壮的方法，就是让程序的内部逻辑更易于理解。要做到这一点主要两种方法：透明化和简洁化。</p>
<p>在有异常输入的情况下，保证软件健壮性的一个相当重要的策略就是避免在代码中出现特例。bug 通常隐藏在处理特例的代码以及处理不同特殊情况的交互操作部分的代码中。</p>
<p>模块性（代码简朴，接口简洁）是组织程序以达到更简洁目的的一个方法。</p>
<h4 id="表示原则：把知识叠入数据以求逻辑质朴而健壮"><a href="#表示原则：把知识叠入数据以求逻辑质朴而健壮" class="headerlink" title="表示原则：把知识叠入数据以求逻辑质朴而健壮"></a>表示原则：把知识叠入数据以求逻辑质朴而健壮</h4><p>即使最简单的程序逻辑让人类来验证也很困难，但是就算是很复杂的数据，对人类来说，还是相对容易地就能够推导和建模的。</p>
<p>数据要比编程逻辑更容易驾驭。所以接下来，如果要在复杂数据和复杂代码中选择一个，宁愿选择前者。更进一步：在设计中，你应该主动将代码的复杂度转移到数据之中去。</p>
<p>特别是 C 语言对指针使用控制的功能，促进了在内核以上各个编码层面上对动态修改引用结构。在结构中用非常简单的指针操作就能够完成的任务，在其他语言中，往往不得不用更复杂的过程才能完成。</p>
<h4 id="通俗原则：接口设计避免标新立异"><a href="#通俗原则：接口设计避免标新立异" class="headerlink" title="通俗原则：接口设计避免标新立异"></a>通俗原则：接口设计避免标新立异</h4><p>也就是众所周知的『最少惊奇原则』。</p>
<p>最易用的程序就是用户需要学习新东西最少的程序——或者，换句话说，最易用的程序就是最切合用户已有知识的程序。</p>
<p>接口设计应该避免毫无来由的标新立异和自作聪明；关注目标受众，对于不同的人群，最少惊奇的意义也不同；关注传统惯例，Unix 世界形成了一套系统的惯例，这些惯例的存在有个极好的理由：缓和学习曲线。</p>
<h4 id="缄默原则：如果一个程序没什么好说的，就保持沉默"><a href="#缄默原则：如果一个程序没什么好说的，就保持沉默" class="headerlink" title="缄默原则：如果一个程序没什么好说的，就保持沉默"></a>缄默原则：如果一个程序没什么好说的，就保持沉默</h4><p>Unix 中最古老最持久的设计原则之一就是：若程序没有什么特别之处可讲，就保持沉默。行为良好的程序应该默默工作，决不唠唠叨叨，碍手碍脚。沉默是金。</p>
<p>设计良好的程序将用户的注意力视为有限的宝贵资源，只有在必要时才要求使用。</p>
<h4 id="补救原则：出现异常时，马上退出并给出足量错误信息"><a href="#补救原则：出现异常时，马上退出并给出足量错误信息" class="headerlink" title="补救原则：出现异常时，马上退出并给出足量错误信息"></a>补救原则：出现异常时，马上退出并给出足量错误信息</h4><p>软件在发生错误的时候也应该与在正常操作的情况下一样，有透明的逻辑。最理想的情况当然是软件能够适应和应付非正常操作；而如果补救措施明明没有成功，却悄无声息地埋下崩溃的隐患，直到很久以后才显现出来，这就是最坏的一种情况。</p>
<p>因此，软件要尽可能从容地应付各种错误输入和自身的运行错误。但是，如果做不到这一点，就让程序尽可能以一种容易诊断错误的方式终止。</p>
<h4 id="经济原则：宁花机器一分，不花程序员一秒"><a href="#经济原则：宁花机器一分，不花程序员一秒" class="headerlink" title="经济原则：宁花机器一分，不花程序员一秒"></a>经济原则：宁花机器一分，不花程序员一秒</h4><h4 id="生成原则：避免手工-hack，尽量编写程序去生成程序"><a href="#生成原则：避免手工-hack，尽量编写程序去生成程序" class="headerlink" title="生成原则：避免手工 hack，尽量编写程序去生成程序"></a>生成原则：避免手工 hack，尽量编写程序去生成程序</h4><p>程序中的任何手工 hacking 都是滋生错误和延误的温床。程序规格越简单抽象，设计者就越容易做对。有程序生成代码几乎（在各个层次）总是比手写代码廉价并且更值得信赖。</p>
<h4 id="优化原则：雕琢前先得有原型，跑之前先学会走"><a href="#优化原则：雕琢前先得有原型，跑之前先学会走" class="headerlink" title="优化原则：雕琢前先得有原型，跑之前先学会走"></a>优化原则：雕琢前先得有原型，跑之前先学会走</h4><p>原型设计最基本的原则：『90%的功能现在能实现，比100%的功能永远实现不了强』。做好原型设计可以帮助你避免为蝇头小利而投入过多的时间。</p>
<p>过早的优化是万恶之源。</p>
<p>还不知道瓶颈所在就匆忙进行优化，这可能是唯一一个比乱加功能更损害设计的错误。从畸形的代码到杂乱无章的数据布局，牺牲透明性和简洁性而片面追求速度、内存或者磁盘使用的后果随处可见。滋生无数 bug，耗费以百万计的人时——这点芝麻大的好处，远不能抵消后续排错所付出的代价。</p>
<p>先制作原型，在精雕细琢。优化之前先确保能用。</p>
<p>先求运行，再求正确，最后求快。</p>
<p>先给你的设计做个未优化的、运行缓慢、很耗内存但是正确的实现，然后进行系统地调整，寻找那些可以通过牺牲最小的局部简洁性而获得较大性能提升的地方。</p>
<p>制作原型对于系统设计和优化同样重要——比起阅读一个冗长的规格说明，判断一个原型究竟是不是符合设想要容易得多。借助原型化找出哪些功能不必实现，有助于对性能进行优化；那些不用写的代码显然无需优化。</p>
<h4 id="多样原则：绝不相信所谓『不二法门』的断言"><a href="#多样原则：绝不相信所谓『不二法门』的断言" class="headerlink" title="多样原则：绝不相信所谓『不二法门』的断言"></a>多样原则：绝不相信所谓『不二法门』的断言</h4><p>即使最出色的软件也常常会受限于设计者的想象力。没有人能聪明到把所有东西都最优化，也不可能预想到软件所有可能的用途。设计一个僵化、封闭、不愿与外界沟通的软件，简直就是一种病态的傲慢。</p>
<p>Unix 奉行的是广泛采用多种语言、开放的可扩展系统和用户定制机制。</p>
<h4 id="扩展原则：设计着眼未来，未来总比预想快"><a href="#扩展原则：设计着眼未来，未来总比预想快" class="headerlink" title="扩展原则：设计着眼未来，未来总比预想快"></a>扩展原则：设计着眼未来，未来总比预想快</h4><p>为数据格式和代码留下扩展的空间，否则，就会发现自己常常被原先的不明智选择捆住了手脚，因为你无法既要改变他们又要维持对原来的兼容性。</p>
<p>设计协议或者文件格式时，应使其具有充分的自描述性以便可以扩展。</p>
<p>设计代码时，要有很好的组织，让将来的开发者增加新功能时无需拆毁或者重建整个架构。</p>
<h3 id="运用-Unix-哲学"><a href="#运用-Unix-哲学" class="headerlink" title="运用 Unix 哲学"></a>运用 Unix 哲学</h3><p>要良好的运用 Unix 哲学，你就应该不断追求卓越。你必须相信，软件设计时一门技艺，值得你付出所有的智慧、创造力和激情。否则，你的视线就不会超越哪些简单、老套的设计和实现：你就会在应该思考的时候急急忙忙跑去编程。你就会在该无情删繁就简的时候反而把问题复杂化——然后你还会反过来奇怪你的代码怎么会那么臃肿、那么难以调试，</p>
<p>要良好地运用 Unix 哲学，你应该珍惜你的时间绝不浪费。一旦某人已经解决了某个问题，就直接拿来利用，不要让骄傲或偏见拽住你又去重做一遍。永远不要蛮干：要多用巧劲，省下力气到需要的时候在用，好钢用在刀刃上。善用工具，尽可能将一切都自动化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Unix 编程艺术》：这本书在模块化、文本化、配置、接口、复杂度、优化、可移植性等方面，都提供了Unix/Linux世界所积累的宝贵经验。好的程序可以经受时间、平台与用户的考验，好的编程思想可以经受实践的检验。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;读书笔记摘录自 《Unix 编程艺术》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Unix-设计原则&quot;&gt;&lt;a href=&quot;#Unix-设计原则&quot; class=&quot;headerlink&quot; title=&quot;Unix 设计原则&quot;&gt;&lt;/a&gt;Unix 设计原则&lt;/h2&gt;&lt;p&gt;所有的 Unix 哲学浓缩为一条铁律，『KISS』原则：Keep It Simple, Stupid!&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://chaosky.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Unix 编程艺术" scheme="http://chaosky.me/tags/Unix-%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>设计灵感 —— 寻找素材</title>
    <link href="http://chaosky.me/2016/08/05/Design-Inspiration/"/>
    <id>http://chaosky.me/2016/08/05/Design-Inspiration/</id>
    <published>2016-08-05T01:19:13.000Z</published>
    <updated>2016-11-07T09:10:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于设计而言，除了基本的理论，积累大量素材更为重要。</p>
<p>当积累了大量设计语言，以及元素的组合方式后，融合你生活中对美好设计的体验，属于你自己的优秀设计也便会自然诞生。</p>
<a id="more"></a>
<h2 id="Dribbble"><a href="#Dribbble" class="headerlink" title="Dribbble"></a><a href="https://dribbble.com" target="_blank" rel="external">Dribbble</a></h2><p>Dribbble是在设计师中非常流行的一个分享设计的社区。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_2.png" alt="Snip20160805_2"></p>
<h2 id="Behance"><a href="#Behance" class="headerlink" title="Behance"></a><a href="https://www.behance.net" target="_blank" rel="external">Behance</a></h2><p>Behance这个社区更为专业，里面的作品完成度都非常高，覆盖的范围也更加广泛。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_3.png" alt="Snip20160805_3"></p>
<h2 id="Siiimple"><a href="#Siiimple" class="headerlink" title="Siiimple"></a><a href="http://siiimple.com" target="_blank" rel="external">Siiimple</a></h2><p>这是一个专门收集极简主义网站设计的网站，筛选的作品都很独特并且具有启发性。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_4.png" alt="Snip20160805_4"></p>
<h2 id="Reeoo"><a href="#Reeoo" class="headerlink" title="Reeoo"></a><a href="http://reeoo.com" target="_blank" rel="external">Reeoo</a></h2><p>Reeoo也是一个专门收集优秀网页设计网站，提供了详细的分类目录，从App，艺术，卡通到摄影，体育一应俱全，还可以根据颜色的主题筛选。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_6.png" alt="Snip20160805_6"></p>
<h2 id="Land-Book"><a href="#Land-Book" class="headerlink" title="Land Book"></a><a href="http://land-book.com" target="_blank" rel="external">Land Book</a></h2><p>LandBook 专门收集了优秀的landing page页面，品类齐全，值得时不时地看一看。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_8.png" alt="Snip20160805_8"></p>
<h2 id="Call-to-idea"><a href="#Call-to-idea" class="headerlink" title="Call to idea"></a><a href="http://www.calltoidea.com" target="_blank" rel="external">Call to idea</a></h2><p>Call to idea 是一个以类别为线索收集各种设计的网站，专业、精美，是激发灵感的好地方。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_9.png" alt="Snip20160805_9"></p>
<h2 id="Designer-News"><a href="#Designer-News" class="headerlink" title="Designer News"></a><a href="https://www.designernews.co" target="_blank" rel="external">Designer News</a></h2><p>Designer News 是全世界最热闹的设计师的资讯社区，新的设计想法，新的产品，都会在这里进行讨论。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_10.png" alt="Snip20160805_10"></p>
<h2 id="NEXT"><a href="#NEXT" class="headerlink" title="NEXT"></a><a href="http://next.36kr.com" target="_blank" rel="external">NEXT</a></h2><p>NEXT 是一个快速发现、分享和讨论新产品的社区。在这里，你可以第一时间发现国内外最新、最酷、最好玩的互联网产品，也可分享自己最喜爱的产品，参与圈内人士的讨论。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_11.png" alt="Snip20160805_11"></p>
<h2 id="MindStore"><a href="#MindStore" class="headerlink" title="MindStore"></a><a href="http://mindstore.io" target="_blank" rel="external">MindStore</a></h2><p>MindStore 是一个发现、分享、探讨新酷产品的社区，帮助您找到最好的产品和想法。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_12.png" alt="Snip20160805_12"></p>
<h2 id="Product-Hunt"><a href="#Product-Hunt" class="headerlink" title="Product Hunt"></a><a href="https://www.producthunt.com" target="_blank" rel="external">Product Hunt</a></h2><p>Product Hunt surfaces the best new products, every day. It’s a place for product-loving enthusiasts to share and geek out about the latest mobile apps, websites, hardware projects, and tech creations.</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-05-Snip20160805_14.png" alt="Snip20160805_14"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于设计而言，除了基本的理论，积累大量素材更为重要。&lt;/p&gt;
&lt;p&gt;当积累了大量设计语言，以及元素的组合方式后，融合你生活中对美好设计的体验，属于你自己的优秀设计也便会自然诞生。&lt;/p&gt;
    
    </summary>
    
      <category term="设计" scheme="http://chaosky.me/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="素材" scheme="http://chaosky.me/tags/%E7%B4%A0%E6%9D%90/"/>
    
  </entry>
  
  <entry>
    <title>macOS 开发配置手册——设置篇</title>
    <link href="http://chaosky.me/2016/07/29/macOS-Setup-Guide-Setting/"/>
    <id>http://chaosky.me/2016/07/29/macOS-Setup-Guide-Setting/</id>
    <published>2016-07-29T05:14:54.000Z</published>
    <updated>2016-09-26T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>工欲善其事，必先利其器。—— 设置篇</p>
</blockquote>
<a id="more"></a>
<h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><h3 id="将功能键-F1-F12-设置为标准的功能键"><a href="#将功能键-F1-F12-设置为标准的功能键" class="headerlink" title="将功能键(F1-F12)设置为标准的功能键"></a>将功能键(F1-F12)设置为标准的功能键</h3><p>MacBook键盘最上面一排的功能键(F1-F12)默认是系统亮度和声音之类的快捷设置，当MacBook作为你的娱乐电脑时，这样的默认设置是非常方便的，但是对于将MacBook作为工作电脑而且需要频繁使用功能键(F1-F12)的人，最好将功能键(F1-F12)的行为设置为标准的功能键。</p>
<p>打开【系统设置】，点击【键盘】，设置如下：<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160729_1.png" alt="Snip20160729_1"></p>
<h3 id="设置触摸板"><a href="#设置触摸板" class="headerlink" title="设置触摸板"></a>设置触摸板</h3><p>打开【系统设置】，点击【触摸板】，根据需要设置，众享丝滑。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160729_2.png" alt="Snip20160729_2"><br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160729_3.png" alt="Snip20160729_3"><br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160729_4.png" alt="Snip20160729_4"></p>
<h3 id="将Dock停靠在屏幕左边"><a href="#将Dock停靠在屏幕左边" class="headerlink" title="将Dock停靠在屏幕左边"></a>将Dock停靠在屏幕左边</h3><p>MacBook的屏幕是一个长方形，如果你将Dock放在下面，那么屏幕的可用宽度就会减少，另外人眼阅读时的顺序是从左往右，因此Dock放在左边更适合将MacBook作为工作电脑的人。</p>
<p>打开【系统设置】，点击【Dock】,</p>
<ul>
<li>将图标的Size调到合适大小</li>
<li>关闭放大特效（即鼠标放到Dock上图标放大的效果，此效果干扰注意力）</li>
<li>在【置于屏幕上的位置】一栏，选择【左边】</li>
<li>勾选【将窗口最小化为应用程序图标】</li>
</ul>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160729_5.png" alt="Snip20160729_5"></p>
<h3 id="快速锁定屏幕"><a href="#快速锁定屏幕" class="headerlink" title="快速锁定屏幕"></a>快速锁定屏幕</h3><p>打开【系统设置】，点击【桌面与屏幕保护程序】图标，选择【屏幕保护程序】标签页，点击右下角的【触发角..】，在弹出的界面中右下角选择【将显示器置入睡眠状态】，点击【好】确定。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160803_1.png" alt="Snip20160803_1"><br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-Snip20160803_3.png" alt="Snip20160803_3"></p>
<h3 id="系统常用快捷键"><a href="#系统常用快捷键" class="headerlink" title="系统常用快捷键"></a>系统常用快捷键</h3><p>学习系统快捷键，适当使用快捷键将会提升你的工作效率。<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-03-1280800.png" alt="1280800"></p>
<p>壁纸下载地址：<a href="http://bbs.feng.com/read-htm-tid-4254274.html" target="_blank" rel="external">http://bbs.feng.com/read-htm-tid-4254274.html</a><br>Mac 键盘快捷键 官方总览：<a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="external">https://support.apple.com/zh-cn/HT201236</a></p>
<h3 id="关闭自动纠正拼写"><a href="#关闭自动纠正拼写" class="headerlink" title="关闭自动纠正拼写"></a>关闭自动纠正拼写</h3><p>有些时候在文本输入框中输入文本时，会出现如下情况。一按空格键或者回车键会填写弹出框的文本，很烦人。</p>
<p><img src="http://7vzrbk.com1.z0.glb.clouddn.com/ghost/content/images/2015/10/QQ20151025-0-2x.png" alt=""></p>
<p>可以通过【关闭自动纠正拼写】解决</p>
<p><img src="http://7vzrbk.com1.z0.glb.clouddn.com/ghost/content/images/2015/10/QQ20151024-0-2x.png" alt=""></p>
<h3 id="tree命令中文文件名显示异常"><a href="#tree命令中文文件名显示异常" class="headerlink" title="tree命令中文文件名显示异常"></a>tree命令中文文件名显示异常</h3><p><img src="http://7xooko.com1.z0.glb.clouddn.com/QQ20160123-0@2x.png" alt=""></p>
<p>解决办法：追加<code>tree -N</code>参数</p>
<h3 id="Mac-中滚动截屏"><a href="#Mac-中滚动截屏" class="headerlink" title="Mac 中滚动截屏"></a>Mac 中滚动截屏</h3><p>安装腾讯的snip</p>
<p><a href="http://www.snip.qq.com" target="_blank" rel="external">官方下载地址</a></p>
<p><a href="http://jingyan.baidu.com/article/fec4bce2458d03f2618d8b8e.html" target="_blank" rel="external">详细设置教程</a></p>
<h3 id="How-to-Solve-Missing-Fonts-in-Sketch-App"><a href="#How-to-Solve-Missing-Fonts-in-Sketch-App" class="headerlink" title="How to Solve Missing Fonts in Sketch App"></a>How to Solve Missing Fonts in Sketch App</h3><p>All you have to do is enter the following command in Terminal.</p>
<p><code>$ curl https://raw.githubusercontent.com/qrpike/Web-Font-Load/master/install.sh | sh</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器。—— 设置篇&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="macOS" scheme="http://chaosky.me/categories/macOS/"/>
    
    
      <category term="Tools" scheme="http://chaosky.me/tags/Tools/"/>
    
      <category term="Setup Guide" scheme="http://chaosky.me/tags/Setup-Guide/"/>
    
  </entry>
  
  <entry>
    <title>macOS 开发配置手册——工具篇</title>
    <link href="http://chaosky.me/2016/07/29/macOS-Setup-Guide-Tools/"/>
    <id>http://chaosky.me/2016/07/29/macOS-Setup-Guide-Tools/</id>
    <published>2016-07-29T05:08:28.000Z</published>
    <updated>2016-11-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新日志</strong></p>
<ul>
<li>2016-08-05 添加node、Python等终端命令</li>
<li>2016-09-12 更新<a href="#查找命令">查找命令</a></li>
<li>2016-11-24 更新 ruby、node、python的工具集</li>
</ul>
<blockquote>
<p>工欲善其事，必先利其器。—— 工具篇</p>
</blockquote>
<a id="more"></a>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><h3 id="Xcode-Command-Line-Tools"><a href="#Xcode-Command-Line-Tools" class="headerlink" title="Xcode Command Line Tools"></a>Xcode Command Line Tools</h3><p>从 App store 或苹果开发者网站安装 <a href="https://developer.apple.com/xcode/" target="_blank" rel="external">Xcode</a> 。  </p>
<p>紧接着，在终端中运行安装 <strong>Xcode Command Line Tools</strong>，执行命令：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ xcode-<span class="keyword">select</span> <span class="comment">--install</span></div></pre></td></tr></table></figure>
<h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p>zsh的介绍可以查看池老师的文章<a href="http://macshuo.com/?p=676" target="_blank" rel="external">终极 Shell</a></p>
<h4 id="切换zsh"><a href="#切换zsh" class="headerlink" title="切换zsh"></a>切换zsh</h4><p>切换当前用户的shell，执行命令：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chsh -s <span class="regexp">/bin/</span>zsh</div></pre></td></tr></table></figure>
<p>执行时会要求输入密码</p>
<h4 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h4><p>Oh My Zsh 介绍</p>
<blockquote>
<p>Oh My Zsh is an open source, community-driven framework for managing your zsh configuration. That sounds boring. Let’s try this again.<br>Oh My Zsh is a way of life! Once installed, your terminal prompt will become the talk of the town or your money back! Each time you interact with your command prompt, you’ll be able to take advantage of the hundreds of bundled plugins and pretty themes. Strangers will come up to you in cafés and ask you, “that is amazing. are you some sort of genius?” Finally, you’ll begin to get the sort of attention that you always felt that you deserved. …or maybe you’ll just use the time that you saved to start flossing more often.</p>
</blockquote>
<p>通过curl安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<h4 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h4><p>zsh 的配置主要集中在用户当前目录的.zshrc里，用 vim 或你喜欢的其他编辑器打开.zshrc，具体配置参见官方文档：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a></p>
<h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p>包管理工具可以让你安装和更新程序变得更方便，目前在 macOS 系统中最受欢迎的包管理工具是 Homebrew 。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在安装 Homebrew 之前，需要将 <strong>Xcode Command Line Tools</strong> 安装完成，这样你就可以使用基于 <strong>Xcode Command Line Tools</strong> 编译的 Homebrew。</p>
<p>在<strong>终端</strong>中执行以下命令，跟随指引，将完成 Hombrew 安装。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></div></pre></td></tr></table></figure>
<p>检查brew是否运行正常：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>doctor</div></pre></td></tr></table></figure>
<h4 id="Homebrew-基本使用"><a href="#Homebrew-基本使用" class="headerlink" title="Homebrew 基本使用"></a>Homebrew 基本使用</h4><p>安装程序包：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>&lt;package_name&gt;</div></pre></td></tr></table></figure>
<p>更新本地Homebrew和程序包缓存：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>update</div></pre></td></tr></table></figure>
<p>更新程序包：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>upgrade &lt;package_name&gt;</div></pre></td></tr></table></figure></p>
<p>清除旧版程序包：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>cleanup</div></pre></td></tr></table></figure>
<p>查看已安装过的程序包列表：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew <span class="built_in">list</span> <span class="comment">--versions</span></div></pre></td></tr></table></figure>
<h4 id="常用程序包"><a href="#常用程序包" class="headerlink" title="常用程序包"></a>常用程序包</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> brew install carthage</div><div class="line"><span class="symbol">$</span> brew install cmake</div><div class="line"><span class="symbol">$</span> brew install ffmpeg</div><div class="line"><span class="symbol">$</span> brew install gdb			<span class="comment">// GNU debugger</span></div><div class="line"><span class="symbol">$</span> brew install git-flow	<span class="comment">//</span></div><div class="line"><span class="symbol">$</span> brew install jenkins</div><div class="line"><span class="symbol">$</span> brew install llvm			<span class="comment">// Next-gen compiler infrastructure</span></div><div class="line"><span class="symbol">$</span> brew install node</div><div class="line"><span class="symbol">$</span> brew install nvm</div><div class="line"><span class="symbol">$</span> brew install rmtrash		<span class="comment">// Move files to OS X's Trash</span></div><div class="line"><span class="symbol">$</span> brew install rename		<span class="comment">// Perl-powered file rename script with many helpful built-ins</span></div><div class="line"><span class="symbol">$</span> brew install subversion</div><div class="line"><span class="symbol">$</span> brew install swiftenv	<span class="comment">// Swift version manager</span></div><div class="line"><span class="symbol">$</span> brew install tldr			<span class="comment">// </span></div><div class="line"><span class="symbol">$</span> brew install tree			<span class="comment">//</span></div><div class="line"><span class="symbol">$</span> brew install wget</div><div class="line"><span class="symbol">$</span> brew install xctool</div></pre></td></tr></table></figure>
<h4 id="安装Homebrew-Cask"><a href="#安装Homebrew-Cask" class="headerlink" title="安装Homebrew Cask"></a>安装Homebrew Cask</h4><p>通过 Homebrew Cask 优雅、简单、快速的安装和管理 OS X 图形界面程序，比如 Google Chrome 和 Dropbox。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>tap caskroom/cask  // 添加 Github 上的 caskroom/cask 库</div><div class="line">$ <span class="keyword">brew </span>install <span class="keyword">brew-cask </span> // 安装 <span class="keyword">brew-cask</span></div><div class="line">$ <span class="keyword">brew </span>cask install google-chrome // 安装 Google 浏览器</div><div class="line">$ <span class="keyword">brew </span>update &amp;&amp; <span class="keyword">brew </span>upgrade <span class="keyword">brew-cask </span>&amp;&amp; <span class="keyword">brew </span>cleanup // 更新</div></pre></td></tr></table></figure>
<h5 id="文件预览插件"><a href="#文件预览插件" class="headerlink" title="文件预览插件"></a>文件预览插件</h5><p>有些 插件 可以让 Mac 上的文件预览更有效，比如语法高亮、markdown 渲染、json 预览等等。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>qlcolorcode</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>qlstephen</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>qlmarkdown</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>quicklook-<span class="keyword">json</span></div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>qlprettypatch</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>quicklook-csv</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span><span class="keyword">betterzipql</span></div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>webp-quicklook</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>suspicious-package</div><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>cheatsheet</div></pre></td></tr></table></figure>
<h5 id="launchrocket"><a href="#launchrocket" class="headerlink" title="launchrocket"></a>launchrocket</h5><p>brew cask 安装 launchrocket，来管理通过 brew 安装的 service</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>launchrocket</div></pre></td></tr></table></figure>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-08-01-Snip20160729_9.png" alt="Snip20160729_9"></p>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="RVM"><a href="#RVM" class="headerlink" title="RVM"></a>RVM</h4><p>RVM 是一个命令行工具，可以提供一个便捷的多版本 Ruby 环境的管理和切换。</p>
<p><a href="https://rvm.io/" target="_blank" rel="external">https://rvm.io/</a></p>
<h5 id="RVM-安装"><a href="#RVM-安装" class="headerlink" title="RVM 安装"></a>RVM 安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="_">-s</span>SL https://get.rvm.io | bash <span class="_">-s</span> stable --auto-dotfiles</div><div class="line">$ <span class="built_in">source</span> ~/.rvm/scripts/rvm</div></pre></td></tr></table></figure>
<p>修改 RVM 的 Ruby 安装源到 Ruby China 的 Ruby 镜像服务器，这样能提高安装速度。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>echo <span class="string">"ruby_url=https://cache.ruby-china.org/pub/ruby"</span> &gt; ~<span class="regexp">/.rvm/user</span><span class="regexp">/db</span></div></pre></td></tr></table></figure>
<h5 id="Ruby-的安装与切换"><a href="#Ruby-的安装与切换" class="headerlink" title="Ruby 的安装与切换"></a>Ruby 的安装与切换</h5><p>列出已知的 Ruby 版本</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rvm <span class="built_in">list</span> known</div></pre></td></tr></table></figure>
<p>安装一个 Ruby 版本</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rvm install <span class="number">2.3</span><span class="number">.0</span></div></pre></td></tr></table></figure>
<p>切换 Ruby 版本</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>rvm <span class="keyword">use</span> <span class="number">2.3</span>.<span class="number">0</span></div></pre></td></tr></table></figure>
<p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rvm use <span class="number">2.3</span><span class="number">.0</span> --default</div><div class="line">``` </div><div class="line"></div><div class="line">查询已经安装的ruby</div></pre></td></tr></table></figure>
<p>rvm list<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">卸载一个已安装版本</div></pre></td></tr></table></figure></p>
<p>rvm remove 2.3.0<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### RubyGems</div><div class="line"></div><div class="line">RubyGems 是 Ruby 的一个包管理器，提供了分发 Ruby 程序和函式庫的标准格式“gem”，旨在方便地管理gem安装的工具，以及用于分发gem的服务器。</div></pre></td></tr></table></figure></p>
<p>$ gem install cocoapods<br>$ gem install fastlane<br>$ gem install tty<br>$ gem install leancloud<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### Python</div><div class="line"></div><div class="line">#### pyenv</div><div class="line"></div><div class="line">Python 多版本管理器，可以用来管理和切换不同的 Python 版本。</div><div class="line"></div><div class="line">##### 安装</div></pre></td></tr></table></figure></p>
<p>$ brew install pyenv<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### 配置</div><div class="line"></div><div class="line">如果使用的是bash</div></pre></td></tr></table></figure></p>
<p>$ echo ‘export PYENV_ROOT=”$HOME/.pyenv”‘ &gt;&gt; ~/.bashrc<br>$ echo ‘export PATH=”$PYENV_ROOT/bin:$PATH”‘ &gt;&gt; ~/.bashrc<br>$ echo ‘eval “$(pyenv init -)”‘ &gt;&gt; ~/.bashrc<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">如果使用的是zsh</div></pre></td></tr></table></figure></p>
<p>$ echo ‘export PYENV_ROOT=”$HOME/.pyenv”‘ &gt;&gt; ~/.zshrc<br>$ echo ‘export PATH=”$PYENV_ROOT/bin:$PATH”‘ &gt;&gt; ~/.zshrc<br>$ echo ‘eval “$(pyenv init -)”‘ &gt;&gt; ~/.zshrc<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### 使用</div><div class="line"></div><div class="line">查看现在使用的 Python 版本</div></pre></td></tr></table></figure></p>
<p>$ pyenv version<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">查看可供 pyenv 使用的 Python 版本</div></pre></td></tr></table></figure></p>
<p>$ pyenv versions<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">安装 Python 版本</div></pre></td></tr></table></figure></p>
<p>$ pyenv install 3.5.2<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">安装的版本会在~/.pyenv/versions目录下。</div><div class="line"></div><div class="line">此外，可以用 `--list` 参数查看所有可安装版本</div></pre></td></tr></table></figure></p>
<p>$ pyenv install –list<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">卸载 Python 版本</div></pre></td></tr></table></figure></p>
<p>$ pyenv uninstall 3.5.2<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">设置全局 Python 版本，一般不建议改变全局设置</div></pre></td></tr></table></figure></p>
<p>$ pyenv global 3.5.2<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">设置局部 Python 版本</div></pre></td></tr></table></figure></p>
<p>$ pyenv local 3.5.2<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">设置之后可以在目录内外分别试下 `which python`或 `python --version` 看看效果, 如果没变化的话可以 `python rehash` 之后再试试</div><div class="line"></div><div class="line">#### pip &amp; setuptools</div><div class="line"></div><div class="line">pip 和 setuptools 是 Python 的包管理器。</div><div class="line"></div><div class="line">更新 pip 和 setuptools 包管理器：</div></pre></td></tr></table></figure></p>
<p>  pip install –upgrade pip setuptools<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">安装程序包</div></pre></td></tr></table></figure></p>
<p>  pip install <package><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">通过依赖文件安装程序包</div></pre></td></tr></table></figure></package></p>
<p>pip install -r requirements.txt<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">卸载程序包</div></pre></td></tr></table></figure></p>
<p>$ pip uninstall <package><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">查看所有已安装程序包</div></pre></td></tr></table></figure></package></p>
<p>$ pip list<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">搜索程序包</div></pre></td></tr></table></figure></p>
<p>$ pip search “query”<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">升级程序包</div></pre></td></tr></table></figure></p>
<p>$ pip install –upgrade SomePackage<br><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="undefined">常用 Python 程序包</span></div></pre></td></tr></table></figure></p>
<p>$ pip install beautifulsoup4 // HTML解析<br>$ pip install NetEase-MusicBox // 网易云音乐命令行版<br>$ pip install starred    // 利用GitHub上stars项目生成类 awesome 列表的汇总页面。<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### Node</div><div class="line"></div><div class="line">#### nvm</div><div class="line"></div><div class="line">node 的版本管理工具。</div><div class="line"></div><div class="line">##### 安装</div></pre></td></tr></table></figure></p>
<p>$ brew install nvm<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### 配置</div><div class="line"></div><div class="line">添加一下代码到 .zshrc 配置文件中：</div></pre></td></tr></table></figure></p>
<p>export NVM_DIR=”$HOME/.nvm”<br>. “/usr/local/opt/nvm/nvm.sh”<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### 使用</div></pre></td></tr></table></figure></p>
<p>Usage:<br>  nvm –help                                Show this message<br>  nvm –version                             Print out the latest released version of nvm<br>  nvm install [-s] <version>                Download and install a <version>, [-s] from source. Uses .nvmrc if available<br>    –reinstall-packages-from=<version>     When installing, reinstall packages installed in <node|iojs|node version="" number=""><br>    –lts                                   When installing, only select from LTS (long-term support) versions<br>    –lts=<lts name="">                        When installing, only select from versions for a specific LTS line<br>  nvm uninstall <version>                   Uninstall a version<br>  nvm uninstall –lts                       Uninstall using automatic LTS (long-term support) alias <code>lts/*</code>, if available.<br>  nvm uninstall –lts=<lts name="">            Uninstall using automatic alias for provided LTS line, if available.<br>  nvm use [–silent] <version>              Modify PATH to use <version>. Uses .nvmrc if available<br>    –lts                                   Uses automatic LTS (long-term support) alias <code>lts/*</code>, if available.<br>    –lts=<lts name="">                        Uses automatic alias for provided LTS line, if available.<br>  nvm exec [–silent] <version> [<command>] Run <command> on <version>. Uses .nvmrc if available<br>    –lts                                   Uses automatic LTS (long-term support) alias <code>lts/*</code>, if available.<br>    –lts=<lts name="">                        Uses automatic alias for provided LTS line, if available.<br>  nvm run [–silent] <version> [<args>]     Run <code>node</code> on <version> with <args> as arguments. Uses .nvmrc if available<br>    –lts                                   Uses automatic LTS (long-term support) alias <code>lts/*</code>, if available.<br>    –lts=<lts name="">                        Uses automatic alias for provided LTS line, if available.<br>  nvm current                               Display currently activated version<br>  nvm ls                                    List installed versions<br>  nvm ls <version>                          List versions matching a given <version><br>  nvm ls-remote                             List remote versions available for install<br>    –lts                                   When listing, only show LTS (long-term support) versions<br>  nvm ls-remote <version>                   List remote versions available for install, matching a given <version><br>    –lts                                   When listing, only show LTS (long-term support) versions<br>    –lts=<lts name="">                        When listing, only show versions for a specific LTS line<br>  nvm version <version>                     Resolve the given description to a single local version<br>  nvm version-remote <version>              Resolve the given description to a single remote version<br>    –lts                                   When listing, only select from LTS (long-term support) versions<br>    –lts=<lts name="">                        When listing, only select from versions for a specific LTS line<br>  nvm deactivate                            Undo effects of <code>nvm</code> on current shell<br>  nvm alias [<pattern>]                     Show all aliases beginning with <pattern><br>  nvm alias <name> <version>                Set an alias named <name> pointing to <version><br>  nvm unalias <name>                        Deletes the alias named <name><br>  nvm reinstall-packages <version>          Reinstall global <code>npm</code> packages contained in <version> to current version<br>  nvm unload                                Unload <code>nvm</code> from shell<br>  nvm which [<version>]                     Display path to installed node version. Uses .nvmrc if available<br>  nvm cache dir                             Display path to the cache directory for nvm<br>  nvm cache clear                           Empty cache directory for nvm</version></version></version></name></name></version></name></version></name></pattern></pattern></lts></version></version></lts></version></version></version></version></lts></args></version></args></version></lts></version></version></lts></version></version></lts></version></lts></node|iojs|node></version></version></version></p>
<p>Example:<br>  nvm install v0.10.32                  Install a specific version number<br>  nvm use 0.10                          Use the latest available 0.10.x release<br>  nvm run 0.10.32 app.js                Run app.js using node v0.10.32<br>  nvm exec 0.10.32 node app.js          Run <code>node app.js</code> with the PATH pointing to node v0.10.32<br>  nvm alias default 0.10.32             Set default node version on a shell</p>
<p>Note:<br>  to remove, delete, or uninstall nvm - just remove the <code>$NVM_DIR</code> folder (usually <code>~/.nvm</code>)<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#### npm</span></div><div class="line"></div><div class="line"><span class="keyword">node</span> <span class="title">的包管理器。</span></div><div class="line"></div><div class="line">安装 node 程序包有两种方式：</div><div class="line"></div><div class="line"><span class="number">1</span>. 安装在本地工程项目中，只能本地项目使用，安装命令如下：</div></pre></td></tr></table></figure></p>
<p>$ npm install <package> –save<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="bullet">2. </span>安装为全局程序包，安装命令如下：</div></pre></td></tr></table></figure></package></p>
<p>$ npm install -g <package><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 常用全局 npm 程序包</div></pre></td></tr></table></figure></package></p>
<p>$ npm install -g hexo-cli    // 静态博客<br>$ npm install -g ionic        // Hybird 开发<br>$ npm install -g react-native-cli // React Native 开发<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 查找命令</div><div class="line"></div><div class="line">#### find</div><div class="line"></div><div class="line">find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。</div><div class="line"></div><div class="line">find的使用格式如下：</div></pre></td></tr></table></figure></p>
<p>$ find &lt;指定目录&gt; &lt;指定条件&gt; &lt;指定动作&gt;</p>
<ul>
<li>&lt;指定目录&gt;： 所要搜索的目录及其所有子目录。默认为当前目录。</li>
<li>&lt;指定条件&gt;： 所要搜索的文件的特征。</li>
<li>&lt;指定动作&gt;： 对搜索结果进行特定的处理。<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#### locate</span></div><div class="line"></div><div class="line">locate命令其实是<span class="string">"find -name"</span>的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库（/var/<span class="class"><span class="keyword">lib</span>/<span class="title">locatedb</span>），这个数据库中含有本地所有文件信息。<span class="title">Linux</span>系统自动创建这个数据库，并且每天自动更新一次，所以使用<span class="title">locate</span>命令查不到最新变动过的文件。为了避免这种情况，可以在使用<span class="title">locate</span>之前，先使用<span class="title">updatedb</span>命令，手动更新数据库。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>locate命令的使用实例：</p>
<p>$ locate /etc/sh<br>搜索etc目录下所有以sh开头的文件。</p>
<p>$ locate ~/m<br>搜索用户主目录下，所有以m开头的文件。</p>
<p>$ locate -i ~/m<br>搜索用户主目录下，所有以m开头的文件，并且忽略大小写。<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### whereis</div><div class="line">whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</div></pre></td></tr></table></figure></p>
<p>whereis命令的使用实例：<br>$ whereis grep<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### which</div><div class="line">which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</div></pre></td></tr></table></figure></p>
<p>which命令的使用实例：<br>$ which grep<br>```</p>
<h2 id="GUI工具"><a href="#GUI工具" class="headerlink" title="GUI工具"></a>GUI工具</h2><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><h4 id="替换系统默认终端-iTerm-2"><a href="#替换系统默认终端-iTerm-2" class="headerlink" title="替换系统默认终端 - iTerm 2"></a>替换系统默认终端 - iTerm 2</h4><h4 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h4><p>推荐安装搜狗输入法。</p>
<h4 id="窗口管理软件-SizeUp"><a href="#窗口管理软件-SizeUp" class="headerlink" title="窗口管理软件 - SizeUp"></a>窗口管理软件 - SizeUp</h4><h4 id="查找文件和应用程序-Alfred"><a href="#查找文件和应用程序-Alfred" class="headerlink" title="查找文件和应用程序 - Alfred"></a>查找文件和应用程序 - Alfred</h4><p>Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac.</p>
<h4 id="来杯免费咖啡-Caffeine"><a href="#来杯免费咖啡-Caffeine" class="headerlink" title="来杯免费咖啡 - Caffeine"></a>来杯免费咖啡 - Caffeine</h4><p>你应该立刻安装这款免费的良心软件—Caffeine，设置开机启动，点一下状态栏的咖啡杯图标，当咖啡是满的时候，MacBook将不会进入休眠模式，再点一下咖啡杯空了就正常休眠，我默认设置开机启动，咖啡杯保持满满的状态。</p>
<h4 id="快速切换和打开应用程序-Manico"><a href="#快速切换和打开应用程序-Manico" class="headerlink" title="快速切换和打开应用程序 - Manico"></a>快速切换和打开应用程序 - Manico</h4><p>MacBook系统默认设置了一个快捷键来显示当前运行中的应用程序，同时按下tab + command，将看到如下图的样式：</p>
<h4 id="随心所欲的复制粘贴-PopClip"><a href="#随心所欲的复制粘贴-PopClip" class="headerlink" title="随心所欲的复制粘贴 - PopClip"></a>随心所欲的复制粘贴 - PopClip</h4><h4 id="增强资源管理器-XtraFinder"><a href="#增强资源管理器-XtraFinder" class="headerlink" title="增强资源管理器 - XtraFinder"></a>增强资源管理器 - XtraFinder</h4><h4 id="管理状态栏图标-Bartender"><a href="#管理状态栏图标-Bartender" class="headerlink" title="管理状态栏图标 - Bartender"></a>管理状态栏图标 - Bartender</h4><h4 id="音乐播放器-网易云音乐"><a href="#音乐播放器-网易云音乐" class="headerlink" title="音乐播放器 - 网易云音乐"></a>音乐播放器 - 网易云音乐</h4><h4 id="词典-有道词典"><a href="#词典-有道词典" class="headerlink" title="词典 - 有道词典"></a>词典 - 有道词典</h4><h4 id="文本编辑-Atom，Visual-Studio-Code"><a href="#文本编辑-Atom，Visual-Studio-Code" class="headerlink" title="文本编辑 - Atom，Visual Studio Code"></a>文本编辑 - Atom，Visual Studio Code</h4><h4 id="文本比较-Beyond-Compare"><a href="#文本比较-Beyond-Compare" class="headerlink" title="文本比较 - Beyond Compare"></a>文本比较 - Beyond Compare</h4><h4 id="垃圾清理-CleanMyMac-3"><a href="#垃圾清理-CleanMyMac-3" class="headerlink" title="垃圾清理 - CleanMyMac 3"></a>垃圾清理 - CleanMyMac 3</h4><h4 id="U盘启动制作-DiskMaker-X-5"><a href="#U盘启动制作-DiskMaker-X-5" class="headerlink" title="U盘启动制作 - DiskMaker X 5"></a>U盘启动制作 - DiskMaker X 5</h4><h4 id="笔记-Evernote"><a href="#笔记-Evernote" class="headerlink" title="笔记 - Evernote"></a>笔记 - Evernote</h4><h4 id="屏幕颜色调整（保护眼睛）-Flux"><a href="#屏幕颜色调整（保护眼睛）-Flux" class="headerlink" title="屏幕颜色调整（保护眼睛）- Flux"></a>屏幕颜色调整（保护眼睛）- Flux</h4><h4 id="图床-iPic"><a href="#图床-iPic" class="headerlink" title="图床 - iPic"></a>图床 - iPic</h4><h4 id="系统监测-iStat-Menus"><a href="#系统监测-iStat-Menus" class="headerlink" title="系统监测 - iStat Menus"></a>系统监测 - iStat Menus</h4><h4 id="gif-录制-licecap"><a href="#gif-录制-licecap" class="headerlink" title="gif 录制 - licecap"></a>gif 录制 - licecap</h4><h4 id="Markdown-MacDown，MWeb，Typora"><a href="#Markdown-MacDown，MWeb，Typora" class="headerlink" title="Markdown - MacDown，MWeb，Typora"></a>Markdown - MacDown，MWeb，Typora</h4><h4 id="思维导图-MindNode，XMind"><a href="#思维导图-MindNode，XMind" class="headerlink" title="思维导图 - MindNode，XMind"></a>思维导图 - MindNode，XMind</h4><h4 id="视频播放-MPlayerX"><a href="#视频播放-MPlayerX" class="headerlink" title="视频播放 - MPlayerX"></a>视频播放 - MPlayerX</h4><h4 id="流程图制作-OmniGraffle"><a href="#流程图制作-OmniGraffle" class="headerlink" title="流程图制作 - OmniGraffle"></a>流程图制作 - OmniGraffle</h4><h4 id="绘图-Paintbrush"><a href="#绘图-Paintbrush" class="headerlink" title="绘图 - Paintbrush"></a>绘图 - Paintbrush</h4><h4 id="虚拟机-Parallels-Desktop，VirtualBox"><a href="#虚拟机-Parallels-Desktop，VirtualBox" class="headerlink" title="虚拟机 - Parallels Desktop，VirtualBox"></a>虚拟机 - Parallels Desktop，VirtualBox</h4><h4 id="壁纸-Pimp-Your-Screen"><a href="#壁纸-Pimp-Your-Screen" class="headerlink" title="壁纸 - Pimp Your Screen"></a>壁纸 - Pimp Your Screen</h4><h4 id="Mac版PhotoShop-Pixelmator"><a href="#Mac版PhotoShop-Pixelmator" class="headerlink" title="Mac版PhotoShop - Pixelmator"></a>Mac版PhotoShop - Pixelmator</h4><h4 id="稍候阅读-Pocket"><a href="#稍候阅读-Pocket" class="headerlink" title="稍候阅读 - Pocket"></a>稍候阅读 - Pocket</h4><h4 id="番茄钟-Pomodoro-Time"><a href="#番茄钟-Pomodoro-Time" class="headerlink" title="番茄钟 - Pomodoro Time"></a>番茄钟 - Pomodoro Time</h4><h4 id="录屏-ScreenFlow"><a href="#录屏-ScreenFlow" class="headerlink" title="录屏 - ScreenFlow"></a>录屏 - ScreenFlow</h4><h4 id="翻墙-Lantern，ShadowsocksX，Surge"><a href="#翻墙-Lantern，ShadowsocksX，Surge" class="headerlink" title="翻墙 - Lantern，ShadowsocksX，Surge"></a>翻墙 - Lantern，ShadowsocksX，Surge</h4><h4 id="屏幕截图-Snip"><a href="#屏幕截图-Snip" class="headerlink" title="屏幕截图 - Snip"></a>屏幕截图 - Snip</h4><h4 id="解压缩-The-Unarchiver"><a href="#解压缩-The-Unarchiver" class="headerlink" title="解压缩 - The Unarchiver"></a>解压缩 - The Unarchiver</h4><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="文档查看-Dash"><a href="#文档查看-Dash" class="headerlink" title="文档查看 - Dash"></a>文档查看 - Dash</h4><h4 id="Andorid-开发-Android-Studio"><a href="#Andorid-开发-Android-Studio" class="headerlink" title="Andorid 开发 - Android Studio"></a>Andorid 开发 - Android Studio</h4><h4 id="原型设计-Axure-RP"><a href="#原型设计-Axure-RP" class="headerlink" title="原型设计 - Axure RP"></a>原型设计 - Axure RP</h4><h4 id="网络抓包-Charles"><a href="#网络抓包-Charles" class="headerlink" title="网络抓包 - Charles"></a>网络抓包 - Charles</h4><h4 id="iOS-动画制作-Core-Animator"><a href="#iOS-动画制作-Core-Animator" class="headerlink" title="iOS 动画制作 - Core Animator"></a>iOS 动画制作 - Core Animator</h4><h4 id="SVN版本控制管理-Cornerstone"><a href="#SVN版本控制管理-Cornerstone" class="headerlink" title="SVN版本控制管理 - Cornerstone"></a>SVN版本控制管理 - Cornerstone</h4><h4 id="Git版本控制管理-SourceTree"><a href="#Git版本控制管理-SourceTree" class="headerlink" title="Git版本控制管理 - SourceTree"></a>Git版本控制管理 - SourceTree</h4><h4 id="HTML-5-制作-Hype-3"><a href="#HTML-5-制作-Hype-3" class="headerlink" title="HTML 5 制作 - Hype 3"></a>HTML 5 制作 - Hype 3</h4><h4 id="应用程序图标制作-IconKit"><a href="#应用程序图标制作-IconKit" class="headerlink" title="应用程序图标制作 - IconKit"></a>应用程序图标制作 - IconKit</h4><h4 id="Objective-C-转换为Swift代码-iSwift"><a href="#Objective-C-转换为Swift代码-iSwift" class="headerlink" title="Objective-C 转换为Swift代码 - iSwift"></a>Objective-C 转换为Swift代码 - iSwift</h4><h4 id="json数据解析-Jason，JSON-Wizard"><a href="#json数据解析-Jason，JSON-Wizard" class="headerlink" title="json数据解析 - Jason，JSON Wizard"></a>json数据解析 - Jason，JSON Wizard</h4><h4 id="数据库-Navicat-Premium"><a href="#数据库-Navicat-Premium" class="headerlink" title="数据库 - Navicat Premium"></a>数据库 - Navicat Premium</h4><h4 id="SQLite数据库-sqlitebrowser"><a href="#SQLite数据库-sqlitebrowser" class="headerlink" title="SQLite数据库 - sqlitebrowser"></a>SQLite数据库 - sqlitebrowser</h4><h4 id="查看Github-Star-OhMyStar"><a href="#查看Github-Star-OhMyStar" class="headerlink" title="查看Github Star - OhMyStar"></a>查看Github Star - OhMyStar</h4><h4 id="Turn-drawings-into-code-PaintCode"><a href="#Turn-drawings-into-code-PaintCode" class="headerlink" title="Turn drawings into code - PaintCode"></a>Turn drawings into code - PaintCode</h4><h4 id="HTTP-API-测试-Paw"><a href="#HTTP-API-测试-Paw" class="headerlink" title="HTTP API 测试 - Paw"></a>HTTP API 测试 - Paw</h4><h4 id="iOS-UI-调试-Reveal"><a href="#iOS-UI-调试-Reveal" class="headerlink" title="iOS UI 调试 - Reveal"></a>iOS UI 调试 - Reveal</h4><h4 id="屏幕取色-Sip"><a href="#屏幕取色-Sip" class="headerlink" title="屏幕取色 - Sip"></a>屏幕取色 - Sip</h4><h4 id="移动应用原型设计-Sketch"><a href="#移动应用原型设计-Sketch" class="headerlink" title="移动应用原型设计 - Sketch"></a>移动应用原型设计 - Sketch</h4><h4 id="UML绘图-StarUML"><a href="#UML绘图-StarUML" class="headerlink" title="UML绘图 - StarUML"></a>UML绘图 - StarUML</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2016-08-05 添加node、Python等终端命令&lt;/li&gt;
&lt;li&gt;2016-09-12 更新&lt;a href=&quot;#查找命令&quot;&gt;查找命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2016-11-24 更新 ruby、node、python的工具集&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器。—— 工具篇&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="macOS" scheme="http://chaosky.me/categories/macOS/"/>
    
    
      <category term="Tools" scheme="http://chaosky.me/tags/Tools/"/>
    
      <category term="Setup Guide" scheme="http://chaosky.me/tags/Setup-Guide/"/>
    
  </entry>
  
  <entry>
    <title>使用Reveal分析别人App的UI布局</title>
    <link href="http://chaosky.me/2016/07/27/iOS-Security-Defense-Reveal/"/>
    <id>http://chaosky.me/2016/07/27/iOS-Security-Defense-Reveal/</id>
    <published>2016-07-27T05:43:53.000Z</published>
    <updated>2016-12-07T04:02:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="越狱iOS设备"><a href="#越狱iOS设备" class="headerlink" title="越狱iOS设备"></a>越狱iOS设备</h3><ol>
<li>如何越狱可以参考<a href="http://www.pangu.io" target="_blank" rel="external">盘古越狱</a>的相关文章，具体详情参见链接：<a href="http://jailbreak.25pp.com/ppjailbreak/?from=25pp_00119" target="_blank" rel="external">http://jailbreak.25pp.com/ppjailbreak/?from=25pp_00119</a>，最新iOS越狱可以支持iOS 9.3.3，也可以看我整理的<a href="http://chaosky.me/2016/12/07/Jailbreak-Using-Pangu-and-Cydia-Impactor/">非官方的越狱文章</a>。</li>
<li>在Cydia源中安装OpenSSH、MobileSubstrate等工具，之后的文章会讲到其他工具</li>
</ol>
<h3 id="macOS-本地安装Reveal"><a href="#macOS-本地安装Reveal" class="headerlink" title="macOS 本地安装Reveal"></a>macOS 本地安装Reveal</h3><p>具体安装及使用可以参见我之前的文章：<a href="http://chaosky.me/2016/07/27/Reveal">http://chaosky.me/2016/07/27/Reveal</a></p>
<a id="more"></a>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="在Cydia中搜索并安装Reveal-Loader"><a href="#在Cydia中搜索并安装Reveal-Loader" class="headerlink" title="在Cydia中搜索并安装Reveal Loader"></a>在Cydia中搜索并安装Reveal Loader</h3><p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_11.png" alt="Snip20160727_11"></p>
<h3 id="远程连接iPhone设备"><a href="#远程连接iPhone设备" class="headerlink" title="远程连接iPhone设备"></a>远程连接iPhone设备</h3><ol>
<li>在Cydia中安装OpenSSH工具</li>
<li><p>打开Wi-Fi设置，获取IP地址（例如：192.168.2.6）<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_1.png" alt="Snip20160727_1"></p>
</li>
<li><p>打开终端，执行命令<code>ssh root@[设备IP地址]</code>（例如：<code>ssh root@192.168.2.6</code>）</p>
</li>
<li><p>等待几分钟后，允许新连接<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_3.png" alt="Snip20160727_3"></p>
</li>
<li><p>输入密码<code>alpine</code>登录iPhone设备<br><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_4.png" alt="Snip20160727_4"></p>
</li>
</ol>
<h3 id="检查iOS设备上-Library-目录下是否有一个名为RHRevealLoader的目录"><a href="#检查iOS设备上-Library-目录下是否有一个名为RHRevealLoader的目录" class="headerlink" title="检查iOS设备上/Library/目录下是否有一个名为RHRevealLoader的目录"></a>检查iOS设备上<code>/Library/</code>目录下是否有一个名为<code>RHRevealLoader</code>的目录</h3><p><img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_5.png" alt="Snip20160727_5"></p>
<ol>
<li>若没有则创建该目录：<code>mkdir /Library/RHRevealLoader</code></li>
<li><p>启动Reveal并选择Help → Show Reveal Library in Finder，这将会打开Finder窗口，并显示一个名为iOS-Libraries的文件夹。<br> <img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/show-reveal-library-in-finder.jpg" alt=""><br> 将该目录下的<code>libReveal.dylib</code>通过scp或者iFunBox上传到刚才的手机目录，scp执行的命令如下：</p>
 <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp /Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib root<span class="variable">@192</span>.<span class="number">168.2</span>.<span class="number">6</span><span class="symbol">:/Library/RHRevealLoader</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="重启设备"><a href="#重启设备" class="headerlink" title="重启设备"></a>重启设备</h3><ol>
<li>可以在设备上执行命令：<code>killall SpringBoard</code></li>
<li>也可以重启设备，不过需要注意的是，最新的越狱为不完美越狱，重启设备需要点击<strong>PP盘古越狱</strong>重新越狱</li>
</ol>
<h3 id="启动Reveal调试别人的App"><a href="#启动Reveal调试别人的App" class="headerlink" title="启动Reveal调试别人的App"></a>启动Reveal调试别人的App</h3><ol>
<li>打开设置程序，配置Reveal Loader<br> <img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_6.png" alt="Snip20160727_6"></li>
<li>在Reveal设置中选择你要查看的App，Enabled Applications<br> <img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_8.png" alt="Snip20160727_8"></li>
<li>在Reveal中调试查看<br> 调试时，需要注意越狱设备和Mac需要在同一网路环境中<br> <img src="http://7xooko.com1.z0.glb.clouddn.com/2016-07-27-Snip20160727_10.png" alt="Snip20160727_10"></li>
</ol>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://wiki.jikexueyuan.com/project/ios-security-defense/reveal.html" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/ios-security-defense/reveal.html</a></li>
<li><a href="https://www.amazon.cn/iOS应用逆向工程-沙梓社/dp/B00VFDVY7E/ref=sr_1_1?ie=UTF8&amp;qid=1469610259&amp;sr=8-1&amp;keywords=iOS+逆向" target="_blank" rel="external">iOS应用逆向工程</a></li>
<li><a href="https://xiuchundao.me/post/integrating-reveal-inspect-app-on-jailbreak-device-with-reveal" target="_blank" rel="external">https://xiuchundao.me/post/integrating-reveal-inspect-app-on-jailbreak-device-with-reveal</a>    </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;越狱iOS设备&quot;&gt;&lt;a href=&quot;#越狱iOS设备&quot; class=&quot;headerlink&quot; title=&quot;越狱iOS设备&quot;&gt;&lt;/a&gt;越狱iOS设备&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;如何越狱可以参考&lt;a href=&quot;http://www.pangu.io&quot;&gt;盘古越狱&lt;/a&gt;的相关文章，具体详情参见链接：&lt;a href=&quot;http://jailbreak.25pp.com/ppjailbreak/?from=25pp_00119&quot;&gt;http://jailbreak.25pp.com/ppjailbreak/?from=25pp_00119&lt;/a&gt;，最新iOS越狱可以支持iOS 9.3.3，也可以看我整理的&lt;a href=&quot;http://chaosky.me/2016/12/07/Jailbreak-Using-Pangu-and-Cydia-Impactor/&quot;&gt;非官方的越狱文章&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;在Cydia源中安装OpenSSH、MobileSubstrate等工具，之后的文章会讲到其他工具&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;macOS-本地安装Reveal&quot;&gt;&lt;a href=&quot;#macOS-本地安装Reveal&quot; class=&quot;headerlink&quot; title=&quot;macOS 本地安装Reveal&quot;&gt;&lt;/a&gt;macOS 本地安装Reveal&lt;/h3&gt;&lt;p&gt;具体安装及使用可以参见我之前的文章：&lt;a href=&quot;http://chaosky.me/2016/07/27/Reveal&quot;&gt;http://chaosky.me/2016/07/27/Reveal&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Tools" scheme="http://chaosky.me/tags/Tools/"/>
    
      <category term="Reveal" scheme="http://chaosky.me/tags/Reveal/"/>
    
      <category term="Jailbreak" scheme="http://chaosky.me/tags/Jailbreak/"/>
    
  </entry>
  
  <entry>
    <title>使用Reveal调试和分析iOS应用UI</title>
    <link href="http://chaosky.me/2016/07/27/Reveal/"/>
    <id>http://chaosky.me/2016/07/27/Reveal/</id>
    <published>2016-07-27T05:38:54.000Z</published>
    <updated>2016-09-26T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Reveal是分析、调试iOS应用UI的利器。</p>
<p>Reveal能够在运行时调试和修改iOS应用程序。它能连接到应用程序，并允许开发者编辑各种用户界面参数，这反过来会立即反应在程序的UI上。就像用FireBug调试HTML页面一样，在不需要重写代码、重新构建和重新部署应用程序的情况下就能够调试和修改iOS用户界面。</p>
<a id="more"></a>
<h2 id="安装Reveal"><a href="#安装Reveal" class="headerlink" title="安装Reveal"></a>安装Reveal</h2><p>Reveal 下载地址：<a href="http://revealapp.com/download/" target="_blank" rel="external">http://revealapp.com/download/</a></p>
<h2 id="集成指南"><a href="#集成指南" class="headerlink" title="集成指南"></a>集成指南</h2><p>集成Reveal无需添加任何代码，无需引入任何头文件。库将会在应用启动时自动加载，并在您的应用内部启动必要的Reveal服务。</p>
<h3 id="三种集成方式"><a href="#三种集成方式" class="headerlink" title="三种集成方式"></a>三种集成方式</h3><h3 id="静态连接"><a href="#静态连接" class="headerlink" title="静态连接"></a>静态连接</h3><p>将Reveal的静态库文件连接入应用，是最简单快捷地启用Reveal检视的方式。</p>
<blockquote>
<p>警告: 不要将Reveal库文件随着正式应用一起发布。 下面的步骤将会展示如何通过构建配置，而把Reveal静态库文件，仅连接到调试构建的流程中。</p>
</blockquote>
<ol>
<li><p>在Xcode中打开您的iOS工程。</p>
</li>
<li><p>启动Reveal并选择<strong>Help → Show Reveal Library in Finder</strong>，这将会打开Finder窗口，并显示一个名为<strong>iOS-Libraries</strong>的文件夹。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/show-reveal-library-in-finder.jpg" alt=""></p>
</li>
<li><p>将 <strong>Reveal.framework</strong> 文件拖入Xcode中的Project Navigator面板。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/drag-in-reveal-framework.jpg" alt=""></p>
</li>
<li><p>在下图所显示的<strong>Add to targets</strong>对话框中，选择所有您希望与Reveal集成的target。可选步骤：选中<strong>Copy items if needed</strong>，将会把 <strong>Reveal.framework</strong> 拷贝到工程中——如果您这么做了， 请记住，当更新Reveal至新版本时，也依照上述步骤再次更新此库文件。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/add-resource-to-project.jpg" alt=""></p>
</li>
<li><p>点击Finish。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/remove-framework-from-project.jpg" alt=""></p>
</li>
<li><p>选择Build Settings标签，在Other Linker Flags的Debug配置项中加入如下配置。</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="deletion">-ObjC -lz -framework Reveal</span></div></pre></td></tr></table></figure>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/add-linker-flags.jpg" alt=""></p>
</li>
<li><p>如果您使用的是Xcode 7, 请确认 Reveal.framework 所在的目录在您的工程配置项 “<strong>Framework Search Paths</strong>” 中。具体的内容看起来会像这样。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">FRAMEWORK_SEARCH_PATHS</span> = $(inherited) <span class="string">"$(SYSTEM_APPS_DIR)/Reveal.app/Contents/SharedSupport/iOS-Libraries"</span></div></pre></td></tr></table></figure>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/add_framework_search_paths.jpg" alt=""></p>
</li>
<li><p>在Xcode中，构建并运行您的应用。如果应用运行于真实设备之上，请确保此设备与正在运行Reveal的Mac机器，处于同一Wi-Fi网络中。</p>
<p>如果一切正常运行，请切换到Reveal应用，此时您的应用应会出现在应用选择器的下拉列表当中。选中您的应用，确认可以看到此时正在模拟器（或设备）中运行的应用界面截图。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/reveal-app-chooser.jpg" alt=""></p>
</li>
</ol>
<h3 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h3><p>动态加载允许iOS应用在运行时，可以按需地加载第三方库。采用这种方式，库文件无需连接入应用的可执行文件，而是被加入到了应用Bundle中去，从而在运行时能按需加载。这种方式使得开发者可以在个人应用中，完全自由地控制Reveal库的加载，以及其服务的启动与停止。</p>
<p>将Reveal加入您的Xcode工程，使得您团队中的其他成员无需任何额外的配置，就可以使用Reveal。</p>
<blockquote>
<p>警告: 永远不要将包含Reveal动态库文件的应用正式发布。Apple不允许将含有动态加载库文件的iOS应用发布到Apple商店中。</p>
</blockquote>
<ol>
<li><p>在Xcode中打开您的iOS工程。</p>
</li>
<li><p>启动Reveal并选择<strong>Help → Show Reveal Library in Finder</strong>，这将会打开Finder窗口，并显示一个名为iOS-Libraries的文件夹。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/show-reveal-library-in-finder.jpg" alt=""></p>
</li>
<li><p>将 <strong>libReveal.dylib</strong> 文件拖入Xcode中的Project Navigator面板。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/drag-in-reveal-dylib.jpg" alt=""></p>
</li>
<li><p>在下图所显示的<strong>Add to targets</strong>对话框中，<strong>反选所有的target</strong>。这确保了Xcode不会在编译时连接动态库文件。可选步骤：选中<strong>Copy items if needed</strong>，将会把 <strong>libReveal.dylib</strong> 拷贝到工程中——如果您这么做了， 请记住，当更新Reveal至新版本时，也依照上述步骤再次更新此库文件。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/add-resource-to-project-no-targets.jpg" alt=""></p>
</li>
<li><p>点击Finish。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/copy-library-bundle-resources.jpg" alt=""></p>
</li>
<li><p>在<strong>Copy Bundle Resources</strong>配置区域中，加入<strong>libReveal.dylib</strong>。</p>
</li>
<li><p>在<strong>Link Binary With Libraries</strong>配置项中：</p>
<ul>
<li>​如果已有libReveal.dylib，请将其移除——不应在编译时连接dylib文件。</li>
<li>如果下列系统框架与库文件还不存在，请将他们加入：<ul>
<li>libz.tdb</li>
<li>CFNetwork.framework</li>
<li>QuartzCore.framework</li>
<li>CoreGraphics.framework - Xcode一般默认会在工程中包含此框架文件。</li>
</ul>
</li>
</ul>
</li>
<li><p>为了能在debugger之外，将库文件动态地载入设备上的应用，您需要在构建过程中加入对libReveal.dylib文件的code sign。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/add-run-script-phase.jpg" alt=""></p>
<p>进入target的<strong>Build Phases</strong>标签页，选择<strong>Editor → Add Build Phase → Add Run Script</strong>菜单。在Run Script阶段中加入以下内容:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> <span class="_">-e</span></div><div class="line"></div><div class="line"> <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$&#123;CODE_SIGN_IDENTITY&#125;</span>"</span> ]; <span class="keyword">then</span></div><div class="line">     codesign -fs <span class="string">"<span class="variable">$&#123;CODE_SIGN_IDENTITY&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;BUILT_PRODUCTS_DIR&#125;</span>/<span class="variable">$&#123;FULL_PRODUCT_NAME&#125;</span>/libReveal.dylib"</span></div><div class="line"> <span class="keyword">fi</span></div></pre></td></tr></table></figure>
</li>
<li><p>将下面的代码加入到项目中合适的类文件中(例如您的<strong>UIApplicationDelegate</strong>)，适当修改使之满足您的需要：</p>
<p><strong>Swift:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - Reveal</span></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">loadReveal</span><span class="params">()</span></span> &#123;</div><div class="line">     <span class="keyword">if</span> <span class="type">NSClassFromString</span>(<span class="string">"IBARevealLoader"</span>) == <span class="literal">nil</span> &#123;</div><div class="line">         <span class="keyword">let</span> revealLibName = <span class="string">"libReveal"</span> <span class="comment">// or "libReveal-tvOS" for tvOS targets</span></div><div class="line">         <span class="keyword">let</span> revealLibExtension = <span class="string">"dylib"</span></div><div class="line">         <span class="keyword">var</span> error: <span class="type">String</span>?</div><div class="line"></div><div class="line">         <span class="keyword">if</span> <span class="keyword">let</span> dylibPath = <span class="type">NSBundle</span>.mainBundle().pathForResource(revealLibName, ofType: revealLibExtension) &#123;</div><div class="line">             <span class="built_in">print</span>(<span class="string">"Loading dynamic library <span class="subst">\(dylibPath)</span>"</span>)</div><div class="line"></div><div class="line">             <span class="keyword">let</span> revealLib = dlopen(dylibPath, <span class="type">RTLD_NOW</span>)</div><div class="line">             <span class="keyword">if</span> revealLib == <span class="literal">nil</span> &#123;</div><div class="line">                 error = <span class="type">String</span>(<span class="type">UTF8String</span>: dlerror())</div><div class="line">             &#125;</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             error = <span class="string">"File not found."</span></div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</div><div class="line">             <span class="keyword">let</span> alert = <span class="type">UIAlertController</span>(title: <span class="string">"Reveal library could not be loaded"</span>,</div><div class="line">                                         message: <span class="string">"<span class="subst">\(revealLibName)</span>.<span class="subst">\(revealLibExtension)</span> failed to load with error: <span class="subst">\(error!)</span>"</span>,</div><div class="line">                                  preferredStyle: .<span class="type">Alert</span>)</div><div class="line">             alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"OK"</span>, style: .<span class="type">Default</span>, handler: <span class="literal">nil</span>))</div><div class="line">             <span class="type">UIApplication</span>.sharedApplication().windows.first?.rootViewController?.presentViewController(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><strong>Objective-C:</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - Reveal</span></div><div class="line"></div><div class="line"> - (<span class="keyword">void</span>)loadReveal</div><div class="line"> &#123;</div><div class="line">     <span class="keyword">if</span> (<span class="built_in">NSClassFromString</span>(<span class="string">@"IBARevealLoader"</span>) == <span class="literal">nil</span>)</div><div class="line">     &#123;</div><div class="line">         <span class="built_in">NSString</span> *revealLibName = <span class="string">@"libReveal"</span>; <span class="comment">// or @"libReveal-tvOS" for tvOS targets</span></div><div class="line">         <span class="built_in">NSString</span> *revealLibExtension = <span class="string">@"dylib"</span>;</div><div class="line">         <span class="built_in">NSString</span> *error;</div><div class="line">         <span class="built_in">NSString</span> *dyLibPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:revealLibName ofType:revealLibExtension];</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (dyLibPath != <span class="literal">nil</span>)</div><div class="line">         &#123;</div><div class="line">             <span class="built_in">NSLog</span>(<span class="string">@"Loading dynamic library: %@"</span>, dyLibPath);</div><div class="line">             <span class="keyword">void</span> *revealLib = dlopen([dyLibPath cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>], RTLD_NOW);</div><div class="line"></div><div class="line">             <span class="keyword">if</span> (revealLib == <span class="literal">NULL</span>)</div><div class="line">             &#123;</div><div class="line">                 error = [<span class="built_in">NSString</span> stringWithUTF8String:dlerror()];</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">else</span></div><div class="line">         &#123;</div><div class="line">             error = <span class="string">@"File not found."</span>;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (error != <span class="literal">nil</span>)</div><div class="line">         &#123;</div><div class="line">             <span class="built_in">NSString</span> *message = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@.%@ failed to load with error: %@"</span>, revealLibName, revealLibExtension, error];</div><div class="line">             <span class="built_in">UIAlertController</span> *alert = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"Reveal library could not be loaded"</span></div><div class="line">                                                                            message:message</div><div class="line">                                                                     preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</div><div class="line">             [alert addAction:[<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"OK"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:<span class="literal">nil</span>]];</div><div class="line">             [[[[[<span class="built_in">UIApplication</span> sharedApplication] windows] firstObject] rootViewController] presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>警告: 不要在发布（release）构建中调用此方法，确保仅是在应用的调试（debug）构建中加载libReveal.dylib。</p>
</blockquote>
</li>
<li><p>一个简单的集成方式是，在<strong>-[UIApplicationDelegate applicationDidBecomeActive:]</strong>方法中调用上面声明的<strong>- (void)loadReveal</strong>方法，以确保Reveal库尽早地被加载进来。<br><strong>Swift:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. <span class="function"><span class="keyword">func</span> <span class="title">applicationDidBecomeActive</span>:<span class="params">(application: UIApplication)</span></span> &#123;</div><div class="line"> <span class="keyword">self</span>.loadReveal()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Objective-C:</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">void</span>)applicationDidBecomeActive:(<span class="built_in">UIApplication</span> *)application</div><div class="line">&#123;</div><div class="line">[<span class="keyword">self</span> loadReveal];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>提示</strong>: 在<code>-[UIApplicationDelegate applicationDidBecomeActive:]</code>方法返回之前加载库的一个好处是，将会让Reveal服务在应用启动的同时也自动启动。</p>
</blockquote>
<p>如果您不希望如上述步骤自动启动Reveal服务，也可以以手动的方式来启动，例如通过一个Debug按钮。在应用启动后，自己调用loadReveal方法，然后再分发一个名为IBARevealRequestStart的NSNotification:<br><strong>Swift:</strong></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">startReveal</span><span class="params">()</span></span> &#123;</div><div class="line">    NSNotificationCenter.defaultCenter().postNotificationName(<span class="string">"IBARevealRequestStart"</span>, object: <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Objective-C:</strong></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startReveal</div><div class="line">&#123;</div><div class="line">    [[NSNotificationCenter defaultCenter] <span class="string">postNotificationName:</span>@<span class="string">"IBARevealRequestStart"</span> <span class="string">object:</span>nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在Xcode中，构建并运行您的应用。如果一切正常运行，请切换到Reveal应用，此时您的应用应会出现在应用选择器的下拉列表当中。选中您的应用，确认可以看到此时正在模拟器（或设备）中运行的应用界面截图。</p>
<p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/reveal-app-chooser.jpg" alt=""></p>
</li>
</ol>
<h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><p>CocoaPods 是一款针对iOS与OSX项目的依赖管理系统。它大大简化了以往Xcode工程里，对第三方库的依赖管理与配置工作。</p>
<p>CocoaPods提供了Podspec用于将Reveal集成入您的项目。</p>
<blockquote>
<p>警告: 不要将连接了Reveal库文件的应用用于正式发布。下面的指南描述了一种使用构建配置来使Reveal静态库文件仅在调试构建中连接的方式。</p>
<p>此说明要求您在之前已经在项目中配置好了CocoaPods，若不然，请先行配置Cocoapods。</p>
</blockquote>
<ol>
<li><p>将下面内容加入你的Podfile中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'Reveal-iOS-SDK'</span>, :<span class="function"><span class="params">configurations</span> =&gt;</span> [<span class="string">'Debug'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>在项目的根目录下执行 <strong>pod install</strong> 命令（如果之前已经在项目中使用了Cocoapods，请执行 <strong>pod update</strong> 命令）。</p>
</li>
</ol>
<h2 id="从您的Xcode项目中移除Reveal"><a href="#从您的Xcode项目中移除Reveal" class="headerlink" title="从您的Xcode项目中移除Reveal"></a>从您的Xcode项目中移除Reveal</h2><p>根据您实际所选择的Reveal集成方式，请根据下述相关步骤来移除Reveal。</p>
<p>一旦库文件成功的移除后，下面的内容将不再会在您的应用启动时出现在Xcode控制台:</p>
<p>INFO: Reveal Server started (Protocol Version X).</p>
<h3 id="静态连接-1"><a href="#静态连接-1" class="headerlink" title="静态连接"></a>静态连接</h3><ol>
<li>打开您的Xcode工程。</li>
<li>从 <strong>Project Navigator</strong> 中<strong>删除 Reveal.framework</strong> 的引用。</li>
<li>在Xcode的 <strong>Project Navigator</strong>中选中您的工程，对于每一个集成了Reveal得target，请选择 <strong>Build Settings</strong> 标签页，将下面内容从 Debug 配置中的 Other <strong>Linked Flags</strong> 设置中移除：<ul>
<li>-framework Reveal</li>
<li>-ObjC and -lz (删除前请确认此配置内容仅是用于Reveal)。</li>
</ul>
</li>
<li>搞定 - 运行应用，确认Reveal没有和应用连接上。</li>
</ol>
<h3 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h3><ol>
<li>打开您的Xcode工程。</li>
<li>从 Project Navigator 中<strong>删除 libReveal.dylib</strong> 的引用。</li>
<li>在Xcode的 Project Navigator中选中您的工程，对于每一个集成了Reveal得target，选择 Build Phases 标签页，如果下列库文件仅供Reveal使用的话，请将它们从 Link Binary With Libraries 配置中移除：<ul>
<li>libz.dylib</li>
<li>CFNetwork.framework</li>
<li>QuartzCore.framework</li>
<li>CoreGraphics.framework</li>
</ul>
</li>
<li>将自定义的codesign内容从 Build Phases 下的 Run Script 中删除。</li>
<li>将 <code>loadReveal / startReveal</code> 方法从您的代码中删除。</li>
<li>搞定 - 运行应用，确认Reveal没有和应用连接上。</li>
</ol>
<h3 id="CocoaPods-1"><a href="#CocoaPods-1" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><ol>
<li><p>在您的Podfile文件中删除下面这行内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'Reveal-iOS-SDK'</span>, :<span class="function"><span class="params">configurations</span> =&gt;</span> [<span class="string">'Debug'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>在项目的根目录下执行 pod update 命令。</p>
</li>
<li><p>如果您的 Podfile 中只有 Reveal-iOS-SDK 一个pod依赖，请根据此说明，将CocoaPods从项目中完全移除。</p>
</li>
<li><p>搞定 - 运行应用，确认Reveal没有和应用连接上。</p>
</li>
</ol>
<h2 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h2><p><img src="http://7xooko.com1.z0.glb.clouddn.com/reveal/reveal_show.png" alt=""></p>
<p>上图是Reveal的运行界面，其界面主要分成3部分：</p>
<ul>
<li><p>左边部分是整个界面的层级关系，在这里可以以树形级层的方式来查看整个界面元素。</p>
</li>
<li><p>中间部分是一个可视化的查看区域，用户可以在这里切换2D或3D的查看方式，这里看到的也是程序运行的实时界面。</p>
</li>
<li><p>右边部边是控件的详细参数查看区域，当我们选中某一个具体的控件时，右边就可以显示出该控件的具体的参数列表。我们除了可以查看这些参数值是否正确外，还可以尝试修改这些值。所有的修改都可以实时反应到中间的实时预览区域。</p>
</li>
</ul>
<h2 id="重要提示"><a href="#重要提示" class="headerlink" title="重要提示"></a>重要提示</h2><ol>
<li><strong>不要将连接了Reveal库文件的应用正式发布</strong>。 Reveal的检视机制，会将您应用的许多内部信息暴露出来，而这将很可能导致您的应用被Apple审查团队拒绝发布。Reveal的目的仅用于内部开发与应用调试。</li>
<li><strong>当iOS应用进入后台后，Reveal服务将会自动停止</strong>。 当应用重新打开时，它又会自动启动。</li>
<li><strong>Reveal支持基于iOS 7及更新版本而编译的应用</strong>。 构建配置中的iOS Deployment Target也必须是’iOS 7.0’或更新版本。 如果iOS版本太旧，您有可能会在构建应用过程中遇到连接错误。</li>
<li><strong>Reveal使用Bonjour协议来连接运行时的iOS应用</strong>。 如果您的iOS应用是运行在真实的设备之上，那么此设备也需要处在同一个网络之内，以便电脑上的Reveal应用能够与之连接。如果您在连接应用时仍遇到问题，请先检查防火墙和代理设置，以确保它们没有阻碍通讯。</li>
</ol>
<h2 id="用Reveal调试其它应用界面"><a href="#用Reveal调试其它应用界面" class="headerlink" title="用Reveal调试其它应用界面"></a>用Reveal调试其它应用界面</h2><p>如果你的设备越狱了，那么还可以用Reveal来”调试“其它应用界面，什么时候会有这种奇怪的需求呢？——当我们想学习别人是如何实现界面效果的时候。iOS设备的目录<strong>/Library/MobileSubstrate/DynamicLibraries</strong> 下存放着所有在系统启动时就需要加载的动态链接库，所以我们只需要将Reveal的动态链接库上传到该目录即可。</p>
<p>对于越狱的设备，我们可以在安装OpenSSH之后，用scp来上传该文件。具体步骤如下：</p>
<p>将libReveal.dylib 上传到 /Library/MobileSubstrate/DynamicLibraries<br>如果libReveal.dylib没有执行权限，用chmod +x libReveal.dylib命令，给其增加执行权限<br>执行 killall SpringBoard 重启桌面</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reveal是分析、调试iOS应用UI的利器。&lt;/p&gt;
&lt;p&gt;Reveal能够在运行时调试和修改iOS应用程序。它能连接到应用程序，并允许开发者编辑各种用户界面参数，这反过来会立即反应在程序的UI上。就像用FireBug调试HTML页面一样，在不需要重写代码、重新构建和重新部署应用程序的情况下就能够调试和修改iOS用户界面。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://chaosky.me/categories/iOS/"/>
    
    
      <category term="Tools" scheme="http://chaosky.me/tags/Tools/"/>
    
      <category term="Reveal" scheme="http://chaosky.me/tags/Reveal/"/>
    
  </entry>
  
</feed>
