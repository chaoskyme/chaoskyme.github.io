<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu下sublime text 中文输入</title>
    <url>/2014/08/19/Sublime-support-chinese-input/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先安装fcitx输入法。"><a href="#首先安装fcitx输入法。" class="headerlink" title="首先安装fcitx输入法。"></a>首先安装fcitx输入法。</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">install</span> fcitx fcitx-config-gtk fcitx-sunpinyin fcitx-googlepinyin fcitx-<span class="keyword">module</span>-cloudpinyin</span><br><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> fcitx-<span class="keyword">table</span>-<span class="keyword">all</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> im-<span class="keyword">switch</span></span><br><span class="line">im-<span class="keyword">switch</span> -s fcitx -z <span class="keyword">default</span></span><br></pre></td></tr></table></figure>
<p>可以选择安装搜狗拼音输入法。<a href="http://pinyin.sogou.com/linux/" target="_blank" rel="noopener">下载地址</a>  </p>
<h2 id="安装C-C-的编译环境和gtk-libgtk2-0-dev"><a href="#安装C-C-的编译环境和gtk-libgtk2-0-dev" class="headerlink" title="安装C/C++的编译环境和gtk libgtk2.0-dev"></a>安装C/C++的编译环境和gtk libgtk2.0-dev</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">sudo</span> apt-<span class="meta">get</span> install <span class="keyword">build-essential </span>libgtk2.<span class="number">0</span>-dev</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="编译sublime-imfix-c文件"><a href="#编译sublime-imfix-c文件" class="headerlink" title="编译sublime-imfix.c文件"></a>编译sublime-imfix.c文件</h2><script src="https://gist.github.com/chaoskyx/ad79f1090c00b2c649d3.js"></script>

<h3 id="编译共享内库"><a href="#编译共享内库" class="headerlink" title="编译共享内库"></a>编译共享内库</h3><pre><code>gcc -shared -o libsublime-imfix.so sublime_imfix.c `pkg-config --libs --cflags gtk+-2.0` -fPIC</code></pre><h3 id="拷贝共享内库到程序目录"><a href="#拷贝共享内库到程序目录" class="headerlink" title="拷贝共享内库到程序目录"></a>拷贝共享内库到程序目录</h3><pre><code>sudo cp libsublime-imfix.so /opt/sublime_text/</code></pre><h2 id="修改命令subl和启动图标"><a href="#修改命令subl和启动图标" class="headerlink" title="修改命令subl和启动图标"></a>修改命令subl和启动图标</h2><h3 id="修改命令subl"><a href="#修改命令subl" class="headerlink" title="修改命令subl"></a>修改命令subl</h3><pre><code>sudo vim /usr/bin/subl</code></pre><p>将<br>    #!/bin/sh<br>    exec /opt/sublime_text/sublime_text “$@”<br>修改为<br>    #!/bin/sh<br>    LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text “$@”  </p>
<h3 id="修改启动图表"><a href="#修改启动图表" class="headerlink" title="修改启动图表"></a>修改启动图表</h3><pre><code>sudo vim /usr/share/applications/sublime-text.desktop  </code></pre><p>修改部分<br>将[Desktop Entry]中的字符串</p>
<pre><code>Exec=/opt/sublime_text/sublime_text %F  </code></pre><p>修改为  </p>
<pre><code>Exec=sh -c &quot;LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text %F&quot;  </code></pre><p>将[Desktop Action Window]中的字符串</p>
<pre><code>Exec=/opt/sublime_text/sublime_text -n  </code></pre><p>修改为</p>
<pre><code>Exec=sh -c &quot;LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text -n&quot;</code></pre><p>将[Desktop Action Document]中的字符串  </p>
<pre><code>Exec=/opt/sublime_text/sublime_text --command new_file  </code></pre><p>修改为  </p>
<pre><code>Exec=sh -c &quot;LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text --command new_file&quot;  </code></pre>]]></content>
      <categories>
        <category>Unix/Linux</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
        <tag>中文输入</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装配置</title>
    <url>/2014/08/19/Ubuntu-install-config/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-安装flash"><a href="#1-安装flash" class="headerlink" title="1.安装flash"></a>1.安装flash</h2><p>从flash官网下载对应的版本的压缩包。(<a href="https://www.adobe.com/support/flashplayer/downloads.html" target="_blank" rel="noopener">https://www.adobe.com/support/flashplayer/downloads.html</a>)<br>解压文件，拷贝文件。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">sudo cp libflashplayer.so /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">mozilla</span>/<span class="title">plugins</span>/</span></span><br><span class="line">sudo cp -r ./usr/* <span class="regexp">/usr/</span></span><br></pre></td></tr></table></figure>

<h2 id="2-安装RVM"><a href="#2-安装RVM" class="headerlink" title="2.安装RVM"></a>2.安装RVM</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">curl -L https:<span class="comment">//get.rvm.io | bash -s stable</span></span><br><span class="line">source ~/.rvm/scripts/rvm</span><br><span class="line">rvm install <span class="number">2.0</span><span class="number">.0</span></span><br><span class="line">rvm use <span class="number">2.0</span><span class="number">.0</span></span><br><span class="line">/bin/bash --login</span><br></pre></td></tr></table></figure>

<h2 id="3-安装sublime-text-3"><a href="#3-安装sublime-text-3" class="headerlink" title="3.安装sublime text 3"></a>3.安装sublime text 3</h2><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:webupd8team/sublime-text-3</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sublime-text-installer</span><br></pre></td></tr></table></figure>

<h2 id="4-安装ubuntu-tweak"><a href="#4-安装ubuntu-tweak" class="headerlink" title="4.安装ubuntu-tweak"></a>4.安装ubuntu-tweak</h2><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:tualatrix/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ubuntu-tweak</span><br></pre></td></tr></table></figure>

<h2 id="5-生成ssh密钥"><a href="#5-生成ssh密钥" class="headerlink" title="5.生成ssh密钥"></a>5.生成ssh密钥</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"chaosky.me@gmail.com"</span></span><br><span class="line">eval <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">ssh-<span class="builtin-name">add</span> ~/.ssh/id_rsa</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install xclip</span><br><span class="line">xclip -sel clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<h2 id="6-配置VPN"><a href="#6-配置VPN" class="headerlink" title="6.配置VPN"></a>6.配置VPN</h2><p>(<a href="http://www.iqlinkus.net/help.action" target="_blank" rel="noopener">http://www.iqlinkus.net/help.action</a>)</p>
<h2 id="7-安装zsh"><a href="#7-安装zsh" class="headerlink" title="7.安装zsh"></a>7.安装zsh</h2><p>具体配置参考池老师的<a href="http://macshuo.com/?p=676" target="_blank" rel="noopener">MacTalk的文章《终极shell》</a></p>
<h2 id="8-安装Ubuntu-Tweak"><a href="#8-安装Ubuntu-Tweak" class="headerlink" title="8.安装Ubuntu Tweak"></a>8.安装Ubuntu Tweak</h2><p>最新版本下载地址：<a href="https://launchpad.net/ubuntu-tweak/+download" target="_blank" rel="noopener">https://launchpad.net/ubuntu-tweak/+download</a>或使用PPA方式进行安装：  </p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:tualatrix/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ubuntu-tweak</span><br></pre></td></tr></table></figure>

<h2 id="9-安装星际译王"><a href="#9-安装星际译王" class="headerlink" title="9.安装星际译王"></a>9.安装星际译王</h2><p>主页：<a href="http://stardict-4.sourceforge.net/" target="_blank" rel="noopener">http://stardict-4.sourceforge.net/</a><br>终端安装：<code>$ sudo apt-get install stardict</code><br>安装词典：<a href="http://abloz.com/huzheng/stardict-dic/" target="_blank" rel="noopener">http://abloz.com/huzheng/stardict-dic/</a><br>下载词典并解压到 ~/.stardict/dic 或 /usr/share/stardict/dic<br>现在以安装文件名为stardict-zh-en.tar.bz2 的词典为例：  </p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">tar -xjvf stardict-<span class="built_in">zh</span>-en.tar.bz2</span><br><span class="line">sudo mv stardict-<span class="built_in">zh</span>-en /usr/share/stardict/dic</span><br></pre></td></tr></table></figure>
<p>注意：stardict-zh-en.tar.bz2是词典文件，stardict-zh-en 是解压出来的词典目录<br>重新启动stardict，新的词典就会被自动加载了。<br>安装真人语音库：<a href="http://sourceforge.net/projects/stardict-4/files/WyabdcRealPeopleTTS/WyabdcRealPeopleTTS.tar.bz2/download" target="_blank" rel="noopener">WyabdcRealPeopleTTS.tar.bz2</a><br><code>sudo tar -xvf WyabdcRealPeopleTTS.tar.bz2 -C /usr/share</code></p>
]]></content>
      <categories>
        <category>Unix/Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>装机</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows程序免杀的分析</title>
    <url>/2014/09/03/Windows-app-antivirus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近公司开发的Windows软件总是被360检出病毒，特别恼火。总结了几种方法。  </p>
<h2 id="1-程序数字签名"><a href="#1-程序数字签名" class="headerlink" title="1. 程序数字签名"></a>1. 程序数字签名</h2><p>基本上在第一轮和杀毒软件的PK中绝大多数是会通过的，但是在程序中包含特征码那另当别论，杀毒软件立即会报毒。  </p>
<h2 id="2-编译器选项"><a href="#2-编译器选项" class="headerlink" title="2. 编译器选项"></a>2. 编译器选项</h2><p>在VC++里有<code>#pragma code_seg(&quot;PAGE&quot;)</code>//其中PAGE是区段的名称。这个是免杀中最有用的一个编译器选项，它可以把cpp文件里的代码放到一个单独的区段里，这样在对付杀毒软件的代码查杀的时候，给我们带来了非常大的方便。</p>
<h2 id="3-VC-源代码中加入汇编语句"><a href="#3-VC-源代码中加入汇编语句" class="headerlink" title="3. VC++ 源代码中加入汇编语句"></a>3. VC++ 源代码中加入汇编语句</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">	nop <span class="comment">//汇编指令</span></span><br><span class="line">	nop</span><br><span class="line">	nop</span><br><span class="line">	nop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-加花指令"><a href="#4-加花指令" class="headerlink" title="4. 加花指令"></a>4. 加花指令</h2><p>花指令：其实是一段垃圾代码，和一些乱跳转，但并不影响程序的正常运行。加了花指令后，使一些杀毒软件无法正确识别木马程序，从而达到免杀的效果。</p>
<h3 id="加花指令制作过程详解"><a href="#加花指令制作过程详解" class="headerlink" title="加花指令制作过程详解"></a>加花指令制作过程详解</h3><ul>
<li>第一步：配置一个不加壳的木马程序。  </li>
<li>第二步：用OD载入这个木马程序，同时记下入口点的内存地址。  </li>
<li>第三步：向下拉滚动条，找到零区域（也就是可以插入代码的都是0的空白地方）。并记下零区域的起始内存地址。  </li>
<li>第四步：从这个零区域的起始地址开始一句一句的写入我们准备好的花指令代码。  </li>
<li>第五步：花指令写完后，在花指令的结束位置加一句：JMP　刚才OD载入时的入口点内存地址。  </li>
<li>第六步：保存修改结果后，最后用PEditor这款工具打开这个改过后的木马程序。在入口点处把原来的入口地址改成刚才记下的零区域的起始内存地址，并按应用更改。使更改生效。  </li>
</ul>
<h3 id="加花指令免杀技术总结"><a href="#加花指令免杀技术总结" class="headerlink" title="加花指令免杀技术总结"></a>加花指令免杀技术总结</h3><p>优点：通用性非常不错，一般一个木马程序加入花指令后，就可以躲大部分的杀毒软件，不像改特征码，只能躲过某一种杀毒软件。</p>
<p>缺点：这种方法还是不能过具有内存查杀的杀毒软件，比如瑞星内存查杀等。</p>
<p>以后将加花指令与改入口点，加壳，改特征码这几种方法结合起来混合使用效果将非常不错。</p>
<h3 id="加花指令免杀要点"><a href="#加花指令免杀要点" class="headerlink" title="加花指令免杀要点"></a>加花指令免杀要点</h3><p>由于黑客网站公布的花指令过不了一段时间就会被杀软辨认出来，所以需要你自己去搜集一些不常用的花指令，另外目前还有几款软件可以自动帮你加花，方便一些不熟悉的朋友，例如花指令添加器等。</p>
<a id="more"></a>

<h3 id="常见花指令代码"><a href="#常见花指令代码" class="headerlink" title="常见花指令代码"></a>常见花指令代码</h3><h4 id="1-VC-5-0"><a href="#1-VC-5-0" class="headerlink" title="1. VC++ 5.0"></a>1. VC++ 5.0</h4><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUSH</span> <span class="built_in">EBP</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">EBP</span>,<span class="built_in">ESP</span></span><br><span class="line"><span class="keyword">PUSH</span> -<span class="number">1</span></span><br><span class="line"><span class="keyword">push</span> <span class="number">515448</span></span><br><span class="line"><span class="keyword">PUSH</span> 6021A8</span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">EAX</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> <span class="built_in">FS</span>:[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">EAX</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">DWORD</span> <span class="built_in">PTR</span> <span class="built_in">FS</span>:[<span class="number">0</span>],<span class="built_in">ESP</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="built_in">ESP</span>,-6C</span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">EBX</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">ESI</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">EDI</span></span><br><span class="line"><span class="keyword">jmp</span> 跳转到程序原来的入口点</span><br></pre></td></tr></table></figure>
<h4 id="2-C"><a href="#2-C" class="headerlink" title="2. C++"></a>2. C++</h4><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line"><span class="keyword">push</span> -<span class="number">1</span></span><br><span class="line"><span class="keyword">push</span> <span class="number">111111</span></span><br><span class="line"><span class="keyword">push</span> <span class="number">222222</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">fs</span>:[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">push</span> <span class="built_in">eax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">fs</span>:[<span class="number">0</span>],<span class="built_in">esp</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">eax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">fs</span>:[<span class="number">0</span>],<span class="built_in">eax</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">eax</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">eax</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">eax</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">eax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="keyword">jmp</span> 跳转到程序原来的入口点</span><br></pre></td></tr></table></figure>
<h4 id="3-跳转"><a href="#3-跳转" class="headerlink" title="3. 跳转"></a>3. 跳转</h4><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">somewhere:</span></span><br><span class="line">      <span class="keyword">nop</span>                    /<span class="string">"胡乱"</span>跳转的开始...</span><br><span class="line">      <span class="keyword">jmp</span> 下一个<span class="keyword">jmp</span>的地址    /在附近随意跳</span><br><span class="line">      <span class="keyword">jmp</span> ...                /...</span><br><span class="line">      <span class="keyword">jmp</span> 原入口的地址      /跳到原始oep</span><br><span class="line">新入口: <span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line">        <span class="keyword">inc</span> <span class="built_in">ecx</span></span><br><span class="line">        <span class="keyword">push</span> <span class="built_in">edx</span></span><br><span class="line">        <span class="keyword">nop</span></span><br><span class="line">        <span class="keyword">pop</span> <span class="built_in">edx</span></span><br><span class="line">        <span class="keyword">dec</span> <span class="built_in">ecx</span></span><br><span class="line">        <span class="keyword">pop</span> <span class="built_in">ebp</span></span><br><span class="line">        <span class="keyword">inc</span> <span class="built_in">ecx</span></span><br><span class="line">        <span class="keyword">loop</span> somewhere        /跳转到上面那段代码地址去！</span><br></pre></td></tr></table></figure>
<h4 id="4-Microsoft-Visual-C-6-0"><a href="#4-Microsoft-Visual-C-6-0" class="headerlink" title="4. Microsoft Visual C++ 6.0"></a>4. Microsoft Visual C++ 6.0</h4><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line"><span class="keyword">PUSH</span> -<span class="number">1</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">EAX</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> <span class="built_in">FS</span>:[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">EAX</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">DWORD</span> <span class="built_in">PTR</span> <span class="built_in">FS</span>:[<span class="number">0</span>],<span class="built_in">ESP</span></span><br><span class="line"><span class="keyword">SUB</span> <span class="built_in">ESP</span>,<span class="number">68</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">EBX</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">ESI</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">EDI</span></span><br><span class="line"><span class="keyword">POP</span> <span class="built_in">EAX</span></span><br><span class="line"><span class="keyword">POP</span> <span class="built_in">EAX</span></span><br><span class="line"><span class="keyword">POP</span> <span class="built_in">EAX</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="built_in">ESP</span>,<span class="number">68</span></span><br><span class="line"><span class="keyword">POP</span> <span class="built_in">EAX</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">DWORD</span> <span class="built_in">PTR</span> <span class="built_in">FS</span>:[<span class="number">0</span>],<span class="built_in">EAX</span></span><br><span class="line"><span class="keyword">POP</span> <span class="built_in">EAX</span></span><br><span class="line"><span class="keyword">POP</span> <span class="built_in">EAX</span></span><br><span class="line"><span class="keyword">POP</span> <span class="built_in">EAX</span></span><br><span class="line"><span class="keyword">POP</span> <span class="built_in">EAX</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">EBP</span>,<span class="built_in">EAX</span></span><br><span class="line"><span class="keyword">JMP</span> 原入口</span><br></pre></td></tr></table></figure>
<h4 id="5-在mov-ebp-eax后面加上PUSH-EAX-POP-EAX"><a href="#5-在mov-ebp-eax后面加上PUSH-EAX-POP-EAX" class="headerlink" title="5.在mov ebp,eax后面加上PUSH EAX POP EAX"></a>5.在<code>mov ebp,eax</code>后面加上<code>PUSH EAX</code> <code>POP EAX</code></h4><h4 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h4><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">esp</span>,-0C</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">esp</span>,0C</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,403D7D</span><br><span class="line"><span class="keyword">push</span> <span class="built_in">eax</span></span><br><span class="line"><span class="keyword">retn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line"><span class="keyword">push</span> -<span class="number">1</span></span><br><span class="line"><span class="keyword">push</span> <span class="number">00411222</span></span><br><span class="line"><span class="keyword">push</span> <span class="number">00411544</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">push</span> <span class="built_in">eax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">fs</span>:[<span class="number">0</span>],<span class="built_in">esp</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">esp</span>,-6C</span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ebx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">esi</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">edi</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span>],<span class="built_in">al</span></span><br><span class="line"><span class="keyword">jo</span> 入口</span><br><span class="line"><span class="keyword">jno</span> 入口</span><br><span class="line"><span class="keyword">call</span> 下一地址</span><br></pre></td></tr></table></figure>
<h4 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h4><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line"><span class="keyword">inc</span> <span class="built_in">ecx</span></span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">edx</span></span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">edx</span></span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ebp</span></span><br><span class="line"><span class="keyword">inc</span> <span class="built_in">ecx</span></span><br><span class="line"><span class="keyword">loop</span> 任意地址</span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">jmp</span> 下一个<span class="keyword">jmp</span>的地址    /在附近随意跳</span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">jmp</span> 下一个<span class="keyword">jmp</span>的地址    /在附近随意跳</span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">jmp</span> 下一个<span class="keyword">jmp</span>的地址    /在附近随意跳</span><br><span class="line"><span class="keyword">jmp</span> 入口</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Antivirus</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>XULRunner桌面应用解决方案</title>
    <url>/2014/09/10/XULRunner-app-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>XULRunner 可以通过运用 Web 开发技术构建桌面应用程序。它提供了丰富的 UI 部件集，使用 XUL，可以直接与 HTML 混合使用并可大量使用 JavaScript。  </p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="XULRunner"><a href="#XULRunner" class="headerlink" title="XULRunner"></a><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/XULRunner" target="_blank" rel="noopener">XULRunner</a></h3><p>XULRunner是Mozilla运行包，可以启动类似Firefox和Tunderbird这样多功能的XUL+XPCOM结合的程序。它为程序提供安装、升级、删除机制。 XULRunner还会提供libxul, 它允许其它项目或产品嵌入使用谋智(Mozilla)技术。</p>
<h3 id="XUL"><a href="#XUL" class="headerlink" title="XUL"></a><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL" target="_blank" rel="noopener">XUL</a></h3><p>XUL是一个Mozilla使用XML来描述用户界面的一种技术，使用XUL你可以快速的创建出跨平台，基于因特网的应用程序。基于XUL技术的应用程序可以很方便的使用好看的字体、图形以及方便的界面布局，而且也更容易部署和定制。如果程序员已经熟悉了Dynamic HTML (DHTML)，那学习XUL将是更容易的事，也可以更快的开发基于XUL的应用程序。</p>
<h3 id="XPCOM"><a href="#XPCOM" class="headerlink" title="XPCOM"></a><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM" target="_blank" rel="noopener">XPCOM</a></h3><p>XPCOM（Cross Platform Component Object Model）是一种跨平台组件对象模型，其原理与微软的COM技术类似，它支持多种语言绑定（Language Bindings）。也就是说，我们可以使用C++、JAVA、JavaScript、Python、Ruby、Perl等语言来编写组件。而XPCOM的接口是用一种叫做XPIDL的IDL（Interface Description Language）来定义的。<br>XPCOM 本身提供了一套核心的组件和类，用于诸如内存管理，线程，基本数据结构（strings, arrays, variants）等 。但是大部分的XPCOM组件并不是这个核心库提供的，而是由很多第三方的平台（例如Gecko或者Necko）提供，或者由一个应用，甚至一个扩展提供。  </p>
<h2 id="应用程序目录结构"><a href="#应用程序目录结构" class="headerlink" title="应用程序目录结构"></a>应用程序目录结构</h2><p>XULRunner应用、扩展和主题都共享相同的目录结构，并且这样的目录结构某些时候还可以用于像可安装应用扩展那样的独立XULRunner应用。<br><img src="http://i.imgur.com/UOhOL86.png" alt=""></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>XULRunner</tag>
        <tag>XUL</tag>
      </tags>
  </entry>
  <entry>
    <title>VC++技巧</title>
    <url>/2014/10/11/VC-tips/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h2><h3 id="FindWindow"><a href="#FindWindow" class="headerlink" title="FindWindow"></a><a href="http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms633499%28v=vs.85%29.aspx" target="_blank" rel="noopener">FindWindow</a></h3><ul>
<li>函数功能：该函数获得一个顶层窗口的句柄，该窗口的类名和窗口名与给定的字符串相匹配。这个函数不查找子窗口。在查找时不区分大小写。  </li>
<li>函数原型：<code>HWND FindWindow（LPCTSTR IpClassName，LPCTSTR IpWindowName）;</code></li>
<li>参数：<code>IpClassName</code>：指向一个指定了类名的空结束字符串，或一个标识类名字符串的成员的指针。如果该参数为一个成员，则它必须为前次调用<code>theGlobafAddAtom</code>函数产生的全局成员。该成员为16位，必须位于<code>IpClassName</code>的低 16位，高位必须为 0。<br><code>IpWindowName</code>：指向一个指定了窗口名（窗口标题）的空结束字符串。如果该参数为空，则为所有窗口全匹配。  </li>
<li>返回值：如果函数成功，返回值为具有指定类名和窗口名的窗口句柄；如果函数失败，返回值为NULL。这个函数有两个参数，第一个是要找的窗口的类，第二个是要找的窗口的标题。在搜索的时候不一定两者都知道，但至少要知道其中的一个。有的窗口的标题是比较容易得到的，如”计算器”，所以搜索时应使用标题进行搜索。但有的软件的标题不是固定的，如”记事本”，如果打开的文件不同，窗口标题也不同，这时使用窗口类搜索就比较方便。如果找到了满足条件的窗口，这个函数返回该窗口的句柄，否则返回0。也可以通过<code>SendMessage(hwnd, WM_CLOSE, NULL, NULL);</code>来关闭窗口。  </li>
</ul>
<h3 id="GetWindowThreadProcessId"><a href="#GetWindowThreadProcessId" class="headerlink" title="GetWindowThreadProcessId"></a><a href="http://msdn.microsoft.com/ZH-CN/library/windows/desktop/ms633522%28v=vs.85%29.aspx" target="_blank" rel="noopener">GetWindowThreadProcessId</a></h3><ul>
<li>函数功能：在得到窗口句柄后我们可以通过GetWindowThreadProcessId这个函数来获得窗口所属进程ID和线程ID，从而判断创建窗口的进程和线程。</li>
<li>函数原型：<code>DWORD GetWindowThreadProcessId(HWND hWnd,LPDWORD lpdwProcessId);</code></li>
<li>参数：<code>hWnd</code>：传入的窗口句柄；<code>lpdwProcessId</code>：返回的进程ID地址。</li>
<li>返回值：函数返回的是窗口所属线程ID。<br>这个函数可以结合<code>FindWindow</code>共同使用。通过<code>FindWindow</code>查找窗口句柄。  </li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt中文乱码</title>
    <url>/2014/10/13/Qt-Chinese-garbled/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    QTextCodec *codec = QTextCodec::codecForName(<span class="string">"UTF-8"</span>);</span><br><span class="line">    QTextCodec::setCodecForLocale(QTextCodec::codecForLocale());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (QT_VERSION &lt;= QT_VERSION_CHECK(5, 0, 0))</span></span><br><span class="line">    QTextCodec::setCodecForCStrings(QTextCodec::codecForLocale());</span><br><span class="line">    QTextCodec::setCodecForTr(codec);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h2 id="乱码出现的原因"><a href="#乱码出现的原因" class="headerlink" title="乱码出现的原因"></a>乱码出现的原因</h2><p>QString内部采用的是 Unicode，它可以同时存放GBK中的字符”我是汉字”,BIG5中的字符”扂岆犖趼” 以及Latin-1中的字符”ÎÒÊÇºº×Ö”。<br>当你需要从窄字符串 char* 转成Unicode的QString字符串的，你需要告诉QString你的这串char* 中究竟是什么编码？GBK、BIG5、Latin-1？<br>在你不告诉它的情况下，它默认选择了Latin-1，于是8个字符”ÎÒÊÇºº×Ö”的unicode码被存进了QString中。最终，8个Latin字符出现在你期盼看到4中文字符的地方，<br>所谓的乱码出现了。<br>网上有很多方法介绍直接在main.cpp里设置：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QTextCodec *codec = QTextCodec::codecForName(<span class="string">"UTF-8"</span>);</span><br><span class="line">QTextCodec::setCodecForTr(codec);</span><br><span class="line">QTextCodec::setCodecForLocale(codec);</span><br><span class="line">QTextCodec::setCodecForCStrings(codec);</span><br></pre></td></tr></table></figure>
<p>其实这在某些情况下也是有问题的，因为程序可能读到系统的中文路径，或者调用中文路径下的外部程序，这时候如果系统是gb2312就有问题了。<br>因为中文路径的编码是采用utf-8存到QString里的，系统读中文路径解码的时候采用的却是系统的gb2312，所以会调不起带中文路径的外部程序。<br>以上问题下面方法可以解决：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QTextCodec *codec = QTextCodec::codecForName(<span class="string">"UTF-8"</span>);</span><br><span class="line">QTextCodec::setCodecForTr(codec);</span><br><span class="line">QTextCodec::setCodecForLocale(QTextCodec::codecForLocale());</span><br><span class="line">QTextCodec::setCodecForCStrings(QTextCodec::codecForLocale());</span><br></pre></td></tr></table></figure>
<p>对于外部字符串编码解码全部采用本地编码。<br>参考链接：<a href="http://blog.csdn.net/brave_heart_lxl/article/details/7186631" target="_blank" rel="noopener">http://blog.csdn.net/brave_heart_lxl/article/details/7186631</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>中文乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt读取MS-Word文档内容</title>
    <url>/2014/10/13/Qt-read-ms-word/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Qt读取MS Word/Excel/Powerpoint等主要通过ActiveQt来实现。实际上是调用MS Word的ActiveX APIs。<br>一下代码是读取word中的所有的文本。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QAxObject <span class="title">wordApplication</span><span class="params">(<span class="string">"Word.Application"</span>)</span></span>;</span><br><span class="line">QAxObject *documents = wordApplication.querySubObject(<span class="string">"Documents"</span>);</span><br><span class="line">QAxObject* document = documents-&gt;querySubObject(<span class="string">"Open(const QString&amp;, bool)"</span>, m_strWordFilePath, <span class="literal">true</span>);</span><br><span class="line">QAxObject* words  = document-&gt;querySubObject(<span class="string">"Words"</span>);</span><br><span class="line">QString textResult;</span><br><span class="line"><span class="keyword">int</span> countWord = words-&gt;dynamicCall(<span class="string">"Count()"</span>).toInt();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= countWord; a++)&#123;</span><br><span class="line">	textResult.append(words-&gt;querySubObject(<span class="string">"Item(int)"</span>, a)-&gt;dynamicCall(<span class="string">"Text()"</span>).toString());</span><br><span class="line">&#125;</span><br><span class="line">wordApplication.dynamicCall(<span class="string">"Quit (void)"</span>);</span><br></pre></td></tr></table></figure>
<p>详细介绍：<br>Word程序初始化：<code>QAxObject wordApplication(&quot;Word.Application&quot;)</code>也可以通过<code>QAxWidget wordApplication(&quot;Word.Application&quot;)</code>，都是初始化com组件对象。<br>word程序的子对象可以通过<code>QAxBase::querySubObject()</code>来获得。<br>e.g:<code>QAxObject *documents = wordApplication.querySubObject(&quot;Documents&quot;);</code><br>任何涉及到word对象的方法调用都可以通过<code>QAxBase::dynamicCall ()</code>来实现。<br>e.g:<code>activeDocument-&gt;dynamicCall(&quot;Close(void)&quot;);</code><br>参考链接：<br><a href="http://qt-project.org/wiki/Using_ActiveX_Object_in_QT" target="_blank" rel="noopener">http://qt-project.org/wiki/Using_ActiveX_Object_in_QT</a><br><a href="http://qt-project.org/wiki/Handling_Document_Formats" target="_blank" rel="noopener">http://qt-project.org/wiki/Handling_Document_Formats</a><br><a href="http://qt-project.org/wiki/Handling_Microsoft_Word_file_format" target="_blank" rel="noopener">http://qt-project.org/wiki/Handling_Microsoft_Word_file_format</a><br><a href="https://qt-project.org/search/tag/ms~word" target="_blank" rel="noopener">https://qt-project.org/search/tag/ms~word</a><br><a href="http://qt-project.org/forums/viewthread/20341" target="_blank" rel="noopener">http://qt-project.org/forums/viewthread/20341</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>ActiveX</tag>
      </tags>
  </entry>
  <entry>
    <title>降低QtWebkit内存使用量</title>
    <url>/2014/11/05/QtWebKit-decrease-memory/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在QtWebkit的QWebView加载网页的时候，会随着每加载一次网页内存就会增加。为解决这个问题可以通过以下代码解决。  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QWebSettings::globalSettings()-&gt;setAttribute(QWebSettings::AutoLoadImages, <span class="literal">false</span>);</span><br><span class="line">QWebSettings::globalSettings()-&gt;setMaximumPagesInCache(<span class="number">0</span>);</span><br><span class="line">QWebSettings::globalSettings()-&gt;setObjectCacheCapacities(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">QWebSettings::globalSettings()-&gt;setOfflineStorageDefaultQuota(<span class="number">0</span>);</span><br><span class="line">QWebSettings::globalSettings()-&gt;setOfflineWebApplicationCacheQuota(<span class="number">0</span>);</span><br><span class="line">QWebSettings::globalSettings()-&gt;clearIconDatabase();</span><br><span class="line">QWebSettings::globalSettings()-&gt;clearMemoryCaches();</span><br></pre></td></tr></table></figure>
<p>其中<br><code>QWebSettings::globalSettings()-&gt;clearIconDatabase();</code>  <code>QWebSettings::globalSettings()-&gt;clearMemoryCaches();</code><br>可以在下一次加载开始前调用，每次调用后会将上一次加载过的页面内存清空。  </p>
<h2 id="详细解析"><a href="#详细解析" class="headerlink" title="详细解析"></a>详细解析</h2><ol>
<li><p><code>void QWebSettings::setMaximumPagesInCache(int pages)</code><br>设置在内存中缓存的最大页数为<code>pages</code>。缓存页可以在浏览历史页面的时候提供更好的用户体验。<br>详细介绍参考：<a href="http://webkit.org/blog/427/webkit-page-cache-i-the-basics/" target="_blank" rel="noopener">http://webkit.org/blog/427/webkit-page-cache-i-the-basics/</a>  </p>
</li>
<li><p><code>void QWebSettings::setObjectCacheCapacities(int cacheMinDeadCapacity, int cacheMaxDead, int totalCapacity)</code><br>指定已死对象的内存容大小。已死包括stylesheets和scripts。<br><code>cacheMinDeadCapacity</code>指定当缓存在压力下，已死对象消耗的最小字节数。<br><code>cacheMaxDead</code> 是当缓存没在压力下，已死对象应该消耗的最大字节数。<br><code>totalCapacity</code> 指定缓存全部消耗的最大字节数。<br>缓存默认是开启的。通过<code>setObjectCacheCapacities(0, 0, 0)</code>来禁用缓存。设置非零来开启。</p>
</li>
<li><p><code>void QWebSettings::setOfflineStorageDefaultQuota(qint64 maximumSize)</code><br>设置新的离线存储数据库的默认最大值为<code>maximumSize</code>。</p>
</li>
<li><p><code>void QWebSettings::setOfflineWebApplicationCacheQuota(qint64 maximumSize)</code><br>设置离线web应用的缓存最大值为<code>maximumSize</code>。</p>
</li>
<li><p><code>void QWebSettings::clearIconDatabase()</code><br>清除图标数据库。</p>
</li>
<li><p><code>void QWebSettings::clearMemoryCaches()</code><br>通过JavaScript垃圾回收器和清空比如页面、对象和字体等缓存，尽可能多地释放内存。  </p>
</li>
</ol>
<h2 id="Webkit-Page-Cache机制"><a href="#Webkit-Page-Cache机制" class="headerlink" title="Webkit Page Cache机制"></a>Webkit Page Cache机制</h2><p><a href="https://www.webkit.org/blog/427/webkit-page-cache-i-the-basics/" target="_blank" rel="noopener">https://www.webkit.org/blog/427/webkit-page-cache-i-the-basics/</a><br><a href="https://trac.webkit.org/wiki/MemoryCache" target="_blank" rel="noopener">https://trac.webkit.org/wiki/MemoryCache</a>  </p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://qt-project.org/forums/viewthread/11105" target="_blank" rel="noopener">http://qt-project.org/forums/viewthread/11105</a><br><a href="http://webkit.sed.hu/content/disabling-cache" target="_blank" rel="noopener">http://webkit.sed.hu/content/disabling-cache</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>WebKit</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS 10.11 Openfire安装</title>
    <url>/2015/11/03/Openfire-install/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mac-OS-10-11-Openfire无法启动问题"><a href="#Mac-OS-10-11-Openfire无法启动问题" class="headerlink" title="Mac OS 10.11 Openfire无法启动问题"></a>Mac OS 10.11 Openfire无法启动问题</h1><p>安装好<a href="http://www.igniterealtime.org/downloads/#" target="_blank" rel="noopener">openfire_3_10_2.dmg</a>后，无法通过【系统偏好设置】中的Openfire图标启动服务器。<br>1、JDK版本：1.8.65。经测试需要JDK 1.7版本以上。<br>2、Openfire版本：3.10.2  </p>
<p>最终解决办法：在终端中执行命令   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/openfire/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=`/usr/libexec/java_home`</span><br><span class="line">sh ./openfire.sh</span><br></pre></td></tr></table></figure>

<h1 id="卸载Openfire"><a href="#卸载Openfire" class="headerlink" title="卸载Openfire"></a>卸载Openfire</h1><p>只需要在openfire关闭的情况下，执行以下的命令即可：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /Library/PreferencePanes/Openfire.prefPane</span><br><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/openfire</span><br><span class="line">sudo rm -rf /Library/LaunchDaemons/org.jivesoftware.openfire.plist</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Openfire</tag>
        <tag>XMPP</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装Openfire搭建XMPP服务器</title>
    <url>/2015/11/22/RaspberryPi-install-openfire/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="树莓派基本配置"><a href="#树莓派基本配置" class="headerlink" title="树莓派基本配置"></a>树莓派基本配置</h3><ol>
<li><p>树莓派设备安装<a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">RASPBIAN</a>系统  </p>
</li>
<li><p>使用raspi-config进行配置  </p>
<p>参考<a href="http://blog.csdn.net/xdw1985829/article/details/38816375" target="_blank" rel="noopener">http://blog.csdn.net/xdw1985829/article/details/38816375</a></p>
</li>
<li><p>更新系统到最新<code>sudo apt-get update &amp; sudo apt-get upgrade</code></p>
</li>
</ol>
<h3 id="安装JRE环境"><a href="#安装JRE环境" class="headerlink" title="安装JRE环境"></a>安装JRE环境</h3><p><code>sudo apt-get install openjdk-7-jre</code></p>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p><code>sudo apt-get install mysql-server</code></p>
<h3 id="安装PHPMyAdmin"><a href="#安装PHPMyAdmin" class="headerlink" title="安装PHPMyAdmin"></a>安装PHPMyAdmin</h3><p><code>sudo apt-get install phpmyadmin</code></p>
<h3 id="安装Openfire服务"><a href="#安装Openfire服务" class="headerlink" title="安装Openfire服务"></a>安装Openfire服务</h3><p>下载：<code>wget http://download.igniterealtime.org/openfire/openfire_3.10.3_all.deb</code></p>
<p>安装：<code>sudo dpkg -i openfire_3.10.3_all.deb</code></p>
<h3 id="打开PHPMyAdmin创建数据库"><a href="#打开PHPMyAdmin创建数据库" class="headerlink" title="打开PHPMyAdmin创建数据库"></a>打开PHPMyAdmin创建数据库</h3><ol>
<li>创建数据库openfire</li>
<li>导入数据库文件openfire_mysql.sql，可以在<code>/usr/share/openfire/resources/database</code>目录中，找到每一个对应数据库类型的SQL文件。这个地方我使用的是MySQL。</li>
</ol>
<h3 id="启动Openfire并进行初始设置"><a href="#启动Openfire并进行初始设置" class="headerlink" title="启动Openfire并进行初始设置"></a>启动Openfire并进行初始设置</h3><p>通过命令可以对Openfire服务进行启动/停止/重启/强制加载 <code>/etc/init.d/openfire {start|stop|restart|force-reload}</code>   </p>
<p>通过启动<code>sudo /etc/init.d/openfire start</code>并访问<code>http://[openfire server ip]:9090</code>进行初始设置</p>
]]></content>
      <categories>
        <category>Unix/Linux</category>
      </categories>
      <tags>
        <tag>Openfire</tag>
        <tag>XMPP</tag>
        <tag>Raspberrypi</tag>
      </tags>
  </entry>
  <entry>
    <title>国际化&amp;本地化</title>
    <url>/2015/12/28/i18n-l10n/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>国际化是指为应用程序提供一个用来支持不同语言的框架的过程，在代码设计上加入能方便的移植到其他国家和地区的特性。<strong>I18n</strong>是Internationalization的简写。</p>
<p>本地化是使你的应用程序支持特定地区的过程，将具有国际化支持的代码翻译成本国或地区的语言，是本地用户更容易使用。<strong>l10n</strong>是Localization的简写。</p>
<p>支持多语言，在英语语言环境设置显示相应的英文，在汉语环境下设置显示相应的中文。</p>
<a id="more"></a>

<h2 id="1-在工程菜单info选项卡下的localizations中添加新语言"><a href="#1-在工程菜单info选项卡下的localizations中添加新语言" class="headerlink" title="1. 在工程菜单info选项卡下的localizations中添加新语言"></a>1. 在工程菜单info选项卡下的localizations中添加新语言</h2><p><img src="http://file.blog.chaosky.tech/QQ20151228-0@2x.png" alt=""></p>
<h2 id="2-创建-strings-文件"><a href="#2-创建-strings-文件" class="headerlink" title="2. 创建 strings 文件"></a>2. 创建 strings 文件</h2><ol>
<li><p>新建文件</p>
<p><img src="http://file.blog.chaosky.tech/QQ20151228-1%402x.png" alt=""></p>
<p>如果要对APP的设置（比如：应用程序包的显示名称）进行本地化，需要对<code>InfoPlist.strings</code>进行本地化处理。Xcode 6 里面没有<code>InfoPlist.strings</code>了，那么需要我们自己创建一个。InfoPlist.strings有了之后系统会自动加载。</p>
</li>
<li><p>选择新建文件,并在右边栏找到Localization属性</p>
<p><img src="http://file.blog.chaosky.tech/QQ20151228-2%402x.png" alt=""></p>
</li>
<li><p>在出现的对话框选择Localize</p>
<p><img src="http://file.blog.chaosky.tech/QQ20151228-3%402x.png" alt=""></p>
</li>
<li><p>将多语言勾上</p>
<p><img src="http://file.blog.chaosky.tech/QQ20151228-4%402x.png" alt=""></p>
</li>
<li><p>在English和Simplified中分别输入应用名</p>
<p><img src="http://file.blog.chaosky.tech/QQ20151228-6%402x.png" alt=""></p>
<p><img src="http://file.blog.chaosky.tech/QQ20151228-5%402x.png" alt=""></p>
</li>
<li><p>运行一下-修改系统语言为中文和英文</p>
<p><img src="http://file.blog.chaosky.tech/QQ20151228-7%402x.png" alt=""></p>
<p><img src="http://file.blog.chaosky.tech/QQ20151228-8%402x.png" alt="">系统是英语环境 那么 会加载英文的文件</p>
<p>系统是汉语环境 那么 会加载支持汉语的文件</p>
</li>
</ol>
<h2 id="3-代码中加载指定文件中的字符串"><a href="#3-代码中加载指定文件中的字符串" class="headerlink" title="3. 代码中加载指定文件中的字符串"></a>3. 代码中加载指定文件中的字符串</h2><ol>
<li><p>自定义文件创建 一个.strings 文件，分别创建支持英语和中文的文件</p>
</li>
<li><p>多语言的设置 格式 key = value</p>
<p>英文</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="string">"firstTitle"</span> = <span class="string">"Limit"</span><span class="comment">;</span></span><br><span class="line"><span class="string">"secondTitle"</span> = <span class="string">"Reduce"</span><span class="comment">;</span></span><br><span class="line"><span class="string">"thirdTitle"</span> = <span class="string">"Free"</span><span class="comment">;</span></span><br><span class="line"><span class="string">"fourthTitle"</span> = <span class="string">"Subject"</span><span class="comment">;</span></span><br><span class="line"><span class="string">"fifthTitle"</span> = <span class="string">"Hot"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>汉语</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="string">"firstTitle"</span> = <span class="string">"限免"</span><span class="comment">;</span></span><br><span class="line"><span class="string">"secondTitle"</span> = <span class="string">"降价"</span><span class="comment">;</span></span><br><span class="line"><span class="string">"thirdTitle"</span> = <span class="string">"免费"</span><span class="comment">;</span></span><br><span class="line"><span class="string">"fourthTitle"</span> = <span class="string">"专题"</span><span class="comment">;</span></span><br><span class="line"><span class="string">"fifthTitle"</span> = <span class="string">"热榜"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>NSLocalizedStringFromTable 通过多语言的文件加载多语言的字符串</p>
</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//key 多语言中要使用的字符串的key，tbl 多语言文件(MyFree)的名称 , comment,预留参数 一般设为nil</span></span><br><span class="line">root.title = <span class="constructor">NSLocalizedStringFromTable([<span class="params">dic</span> <span class="params">objectForKey</span>:@<span class="string">"title"</span>],@<span class="string">"MyFree"</span>,<span class="params">nil</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>label.text = NSLocalizedStringFromTable(@”labelKey”, @”content”, nil);//使用NSLocalizedStringFromTable方法取出设置好的多语言内容,第一个参数为对应的key,第二参数是多语言文件名,第三个参数是对这个内容的注释,可以为nil</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>I18N</tag>
        <tag>l10n</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS项目的目录结构和开发流程</title>
    <url>/2016/01/20/iOS-directory-and-flow/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>一个合理的目录结构首先应该是清晰的，让人一眼看上去就能大概了解目录的职责，且容易应对新的变化。</p>
<h3 id="常规的两种结构："><a href="#常规的两种结构：" class="headerlink" title="常规的两种结构："></a>常规的两种结构：</h3><ol>
<li><p>主目录按照业务分类，内目录按照模块分类(主目录按照MVC架构分类，内部根据项目模块分类)</p>
<blockquote>
<p>优点：相对比较快定位对应的业务。<br>缺点：模块相关类太过分散，需要来回切换寻找文件，不方便开发。</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">├── Application</span><br><span class="line">├── Categories</span><br><span class="line">├── Controllers</span><br><span class="line">│   ├── Blog</span><br><span class="line">│   ├── Comment</span><br><span class="line">│   ├── Login</span><br><span class="line">│   ├── News</span><br><span class="line">|	<span class="built_in">..</span>.</span><br><span class="line">├── Models</span><br><span class="line">│   ├── OSC</span><br><span class="line">│   └── Team</span><br><span class="line">├── Resource</span><br><span class="line">│   ├── CSS</span><br><span class="line">│   ├── html</span><br><span class="line">│   ├── js</span><br><span class="line">├── Utils</span><br><span class="line">├── Vendor</span><br><span class="line">└── Views</span><br></pre></td></tr></table></figure>
</li>
<li><p>主目录按照模块分类，内目录按照业务分类</p>
<blockquote>
<p>优点：对模块的类集中化，方便管理与开发。<br>缺点：当几个模块共用一些类时，不太好归类。</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">├── Application</span><br><span class="line">├── Categories</span><br><span class="line">│├── Blog</span><br><span class="line">|	├── Controller</span><br><span class="line">|	├── View</span><br><span class="line">|	├── Model</span><br><span class="line">├── Login</span><br><span class="line">|	├── Controller</span><br><span class="line">|	├── View</span><br><span class="line">|	├── Model</span><br><span class="line">|	<span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">├── Resource</span><br><span class="line">│   ├── CSS</span><br><span class="line">│   ├── html</span><br><span class="line">│   ├── js</span><br><span class="line">├── Utils</span><br><span class="line">├── Vendor</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<h3 id="常见目录结构"><a href="#常见目录结构" class="headerlink" title="常见目录结构"></a>常见目录结构</h3><h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4><p>这个目录下放的是AppDelegate.h(.m)文件，是整个应用的入口文件，接口文件都可以放在该目录下。</p>
<h4 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h4><p>视图控制器相关类。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Controllers</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">ActivitiesViewController</span>.</span></span>h</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">ActivitiesViewController</span>.</span></span>m</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">ActivityBasicInfoCell</span>.</span></span>h</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">ActivityBasicInfoCell</span>.</span></span>m</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">ActivityCell</span>.</span></span>h</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">ActivityCell</span>.</span></span>m</span><br><span class="line">   	...</span><br></pre></td></tr></table></figure>

<h4 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h4><p>这个目录下放一些与数据相关的Model文件。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">Models</span><br><span class="line">    <span class="string">|- BaseModel.h</span></span><br><span class="line">    <span class="string">|- BaseModel.m</span></span><br><span class="line">    <span class="string">|- CollectionModel.h</span></span><br><span class="line">    <span class="string">|- CollectionModel.m</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h4 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h4><p>视图，自定义视图，被重用的视图。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Views</span><br><span class="line">	├── <span class="module-access"><span class="module"><span class="identifier">EditingBar</span>.</span></span>h</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">EditingBar</span>.</span></span>m</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">GrowingTextView</span>.</span></span>h</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">GrowingTextView</span>.</span></span>m</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h4 id="Macros"><a href="#Macros" class="headerlink" title="Macros"></a>Macros</h4><p>这个目录下放了整个应用会用到的宏定义。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">Macro</span><br><span class="line">	<span class="string">|- Macros.h</span></span><br><span class="line">    <span class="string">|- AppMacro.h</span></span><br><span class="line">    <span class="string">|- NotificationMacro.h</span></span><br><span class="line">    <span class="string">|- VendorMacro.h</span></span><br><span class="line">    <span class="string">|- UtilsMacro.h</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>AppMacro.h 里放app相关的宏定义，如:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表情相关</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EMOTION_CACHE_PATH @<span class="meta-string">"cachedemotions"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EMOTION_RECENT_USED @<span class="meta-string">"recentusedemotions"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EMOTION_CATEGORIES @<span class="meta-string">"categoryemotions"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EMOTION_TOPICS @<span class="meta-string">"emotiontopics"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 收藏相关</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLLECT_CACHE_PATH @<span class="meta-string">"collected"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配图相关</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WATERFALL_ITEM_HEIGHT_MAX 300</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WATERFALL_ITEM_WIDTH 146</span></span><br></pre></td></tr></table></figure>

<p>NotificationMacro.h 里放的是通知相关的宏定义。</p>
<p>UtilsMacro.h 里放的是一些方便使用的工具宏定义。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">#define UIColorFromRGB(r,g,b) [UIColor colorWithRed:r/<span class="number">255.0</span> green:g/<span class="number">255.0</span> blue:b/<span class="number">255.0</span> alpha:<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">#define NSStringFromInt(<span class="built_in">int</span>Value) [NSString <span class="built_in">string</span>WithFormat:@<span class="string">"%d"</span>,<span class="built_in">int</span>Value]</span><br></pre></td></tr></table></figure>

<p>VendorMacro.h 里放一些第三方常量</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UMENG_KEY @<span class="meta-string">"xxxxx"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UMENG_CHANNEL_ID @<span class="meta-string">"xxx"</span></span></span><br></pre></td></tr></table></figure>

<p>如果有新的类型的宏定义，可以再新建一个相关的Macro.h。</p>
<h4 id="Helpers-Utils"><a href="#Helpers-Utils" class="headerlink" title="Helpers/Utils"></a>Helpers/Utils</h4><p>这个目录放一些助手类/工具类。自己实现的一些通用性较好的功能代码，这些代码有比较好的接口且与本项目不存在耦合，可直接复用于其他项目。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">Helpers</span><br><span class="line">    <span class="string">|- TPKShareHelper</span></span><br><span class="line">    <span class="string">|- TPDBHelper</span></span><br><span class="line">    <span class="string">|- TPKEmotionHelper</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h4 id="Vendors"><a href="#Vendors" class="headerlink" title="Vendors"></a>Vendors</h4><p>这个目录放第三方的类库/SDK，如UMeng、WeiboSDK、WeixinSDK等等。</p>
<h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><p>这个目录下放的是app会用到的一些资源文件。</p>
<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>目录结构</tag>
        <tag>开发流程</tag>
      </tags>
  </entry>
  <entry>
    <title>UIScrollView的子视图实现AutoLayout布局</title>
    <url>/2016/02/18/UIScrollView-AutoLayout/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>UIScrollView中子视图建立约束不能实现滚动，要实现子视图的AutoLayout布局需要借助UIView来实现。</p>
<h2 id="具体实现步骤"><a href="#具体实现步骤" class="headerlink" title="具体实现步骤"></a>具体实现步骤</h2><ol>
<li>添加一个UIView作为UIScrollView的ContentView，之后将之前直接添加到UIScrollView中的子视图添加到ContentView中<br><img src="http://file.blog.chaosky.tech/Snip20160218_2.png" alt=""></li>
<li>为ContentView建立6个约束，四条边的约束、高度和宽度的约束。<br><img src="http://file.blog.chaosky.tech/Snip20160218_4.png" alt=""></li>
<li>若要实现UIScrollView垂直滚动修改<code>Equal Height</code>约束的优先级为Low(250)，若要实现UIScrollView水平滚动修改<code>Equal Width</code>约束的优先级为Low(250)<br><img src="http://file.blog.chaosky.tech/Snip20160218_5.png" alt=""></li>
<li>将原本添加到UIScrollView中的子视图添加到ContentView，为子视图建立约束</li>
<li>若是垂直滚动，需要为最下方的子视图添加一个<code>Bottom Space to SuperView</code>约束；若是水平滚动，需要设置最右方的子视图添加一个<code>Trailing space to SuperView</code>约束<br><img src="http://file.blog.chaosky.tech/Snip20160218_6.png" alt=""></li>
<li>最终实现在UIScrollView的子视图通过AutoLayout布局实现滚动效果<br><img src="http://file.blog.chaosky.tech/UIScrollViewAutoLayout.gif" alt=""></li>
</ol>
<h2 id="Demo-下载"><a href="#Demo-下载" class="headerlink" title="Demo 下载"></a>Demo 下载</h2><p><a href="https://github.com/chaoskyx/Demo/tree/master/UIScrollViewAutoLayout" target="_blank" rel="noopener">https://github.com/chaoskyx/Demo/tree/master/UIScrollViewAutoLayout</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>UIScrollView</tag>
        <tag>AutoLayout</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 开发常用网址</title>
    <url>/2016/01/18/iOS-Usage-Website/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="开发社区"><a href="#开发社区" class="headerlink" title="开发社区"></a>开发社区</h2><ol>
<li><strong>iOS 开源代码库</strong> <a href="http://www.code4app.com/" target="_blank" rel="noopener">http://www.code4app.com/</a></li>
<li><strong>苹果开发中文社区</strong> <a href="http://www.cocoachina.com/" target="_blank" rel="noopener">http://www.cocoachina.com/</a></li>
<li><strong>Github</strong> <a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></li>
<li><strong>ObjC 中国</strong> <a href="http://objccn.io/" target="_blank" rel="noopener">http://objccn.io/</a></li>
<li><strong>歪果仁教程：Ray Wenderlich | Tutorials for iPhone / iOS Developers and Gamers</strong> <a href="http://www.raywenderlich.com/" target="_blank" rel="noopener">http://www.raywenderlich.com/</a></li>
<li><strong>开发者头条，各类技术干货</strong> <a href="http://toutiao.io" target="_blank" rel="noopener">http://toutiao.io</a></li>
</ol>
<h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ol>
<li><strong>YY作者常用第三方库整理</strong> <a href="http://github.ibireme.com/github/list/ios/" target="_blank" rel="noopener">http://github.ibireme.com/github/list/ios/</a></li>
<li><strong>最全开源项目和学习资料</strong> <a href="http://codecloud.net/ios-mac-study-5155.html" target="_blank" rel="noopener">http://codecloud.net/ios-mac-study-5155.html</a></li>
<li><strong>常用库整理</strong> <a href="http://www.cocoachina.com/ios/20150713/12503.html" target="_blank" rel="noopener">http://www.cocoachina.com/ios/20150713/12503.html</a></li>
<li><strong>歪果仁整理的关于iOS开发技术</strong> <a href="https://github.com/vsouza/awesome-ios" target="_blank" rel="noopener">https://github.com/vsouza/awesome-ios</a></li>
<li><strong>iOS开发UI</strong> <a href="https://github.com/cjwirth/awesome-ios-ui" target="_blank" rel="noopener">https://github.com/cjwirth/awesome-ios-ui</a></li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>开发者论坛</tag>
      </tags>
  </entry>
  <entry>
    <title>Alcatraz：Xcode 插件管理</title>
    <url>/2016/04/05/Alcatraz/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Alcatraz 是一个帮你管理 Xcode 插件、模版以及颜色配置的工具。</p>
<p>官网：<a href="http://alcatraz.io" target="_blank" rel="noopener">http://alcatraz.io</a></p>
<p>GitHub：<a href="https://github.com/alcatraz/Alcatraz" target="_blank" rel="noopener">https://github.com/alcatraz/Alcatraz</a></p>
<p><img src="http://file.blog.chaosky.tech/2016-12-27-alcatraz-screenshot.png" alt=""></p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在终端中执行如下命令：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">curl -fsSL http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/supermarin/Alcatraz/deploy/Scripts/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p>Alcatraz 只支持 Xcode 7+。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>从<code>Window</code>菜单中选择<code>Package Manager</code>，即可启动插件列表页面。安装完插件或者模板后，需要重启Xcode。</p>
<p><img src="http://file.blog.chaosky.tech/2016-04-05-Snip20160405_2.png" alt="Snip20160405_2"></p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>删除Alcatraz：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rm -rf ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins<span class="regexp">/Alcatraz.xcplugin</span></span><br></pre></td></tr></table></figure>

<p>删除所有缓存数据：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">rm -rf ~<span class="regexp">/Library/</span>Application\ Support/Alcatraz</span><br></pre></td></tr></table></figure>

<h2 id="插件路径"><a href="#插件路径" class="headerlink" title="插件路径"></a>插件路径</h2><p>Xcode 所有的插件都安装在目录：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins<span class="regexp">/</span></span><br></pre></td></tr></table></figure>

<p>你也可以手工切换到这个目录来删除插件。</p>
<h2 id="Xcode-6-x-安装插件"><a href="#Xcode-6-x-安装插件" class="headerlink" title="Xcode 6.x 安装插件"></a>Xcode 6.x 安装插件</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">find ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins -<span class="type">name</span> <span class="keyword">Info</span>.plist -maxdepth <span class="number">3</span> | xargs -I&#123;&#125; defaults <span class="keyword">write</span> &#123;&#125; DVTPlugInCompatibilityUUIDs -<span class="keyword">array</span>-<span class="keyword">add</span> `defaults <span class="keyword">read</span> /Applications/Xcode.app/Contents/<span class="keyword">Info</span> DVTPlugInCompatibilityUUID`</span><br><span class="line"></span><br><span class="line">sudo xcode-<span class="keyword">select</span> <span class="comment">--reset</span></span><br></pre></td></tr></table></figure>

<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><ul>
<li><p><strong>AMMethod2Implement</strong>：可以自动的将.h或者.m .mm里边需要写入的方法自动填充进来。可以选择要导入的方法，然后按 Ctrl+A 或者 Edit &gt; AMMethod2Implement &gt; Implement Method.就会自动填充方法。也可以自行设置快捷键。</p>
<p><img src="https://camo.githubusercontent.com/f22645bb84f9ddbdcca5cf9850eb7dc8f66f1ea3/68747470733a2f2f7261772e6769746875622e636f6d2f4d656c6c6f6e674c61752f414d4d6574686f6432496d706c656d656e742f6d61737465722f53637265656e73686f74732f757361676553637265656e73686f742e676966" alt=""></p>
</li>
<li><p><strong>Auto-Importer</strong>：快速导入头文件，快捷键：<code>⌘ + ctrl + H</code></p>
<p><img src="https://github.com/citrusbyte/Auto-Importer-for-Xcode/raw/master/demo.gif" alt=""></p>
</li>
<li><p><strong>ClangFormat</strong>：自动调整代码风格</p>
<p><img src="https://camo.githubusercontent.com/758d8d2c87f7ec1bb3b6882d6500fe4cf5252759/68747470733a2f2f7261772e6769746875622e636f6d2f7472617669736a6566666572792f436c616e67466f726d61742d58636f64652f6d61737465722f524541444d452f636c616e67666f726d61742d78636f64652d64656d6f2e676966" alt=""></p>
</li>
<li><p><strong>CocoaPods</strong>：在Xcode通过pods安装各种objective-c第三方库，省去以前还要手动去跑pods命令行的麻烦；此外，还支持通过cocoaDocs来安装库文档。</p>
<p><img src="https://github.com/kattrali/cocoadocs-xcode-plugin/raw/master/menu.png" alt=""></p>
</li>
<li><p><strong>ESJsonFormat</strong>：将JSON格式化输出为模型的属性</p>
<p><img src="https://raw.githubusercontent.com/EnjoySR/ESJsonFormat-Xcode/master/ScreenShot/ScreenShot2.gif" alt=""></p>
</li>
<li><p><strong>FuzzyAutocomplete</strong>：代码自动补全</p>
<p><img src="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin/raw/master/demo.gif" alt=""></p>
</li>
<li><p><strong>KSHObjcUML</strong>：类引用关系图的Xcode</p>
<p><img src="https://github.com/kimsungwhee/KSHObjcUML/raw/master/ScreenShot.png" alt=""></p>
</li>
<li><p><strong>KSImageNamed</strong>：为项目中使用的UIImage的imageNamed提供文件名自动补全功能。</p>
<p><img src="https://camo.githubusercontent.com/c354bf04524df86daeabe7a6d2b9926fac790f85/68747470733a2f2f7261772e6769746875622e636f6d2f6b7375746865722f4b53496d6167654e616d65642d58636f64652f6d61737465722f73637265656e73686f742e676966" alt=""></p>
</li>
<li><p><strong>OMColorSense</strong>：颜色显示</p>
<p><img src="http://file.blog.chaosky.tech/2016-04-05-Snip20160405_5.png" alt=""></p>
</li>
<li><p><strong>RTImageAssets</strong>：根据@3x的图片资源自动生成对应的@2x和@1x图片；自动生成App Icons，需要提供1024x1024的大图</p>
<p><img src="https://github.com/rickytan/RTImageAssets/raw/master/ScreenCap/usage.gif" alt=""></p>
<p><img src="https://github.com/rickytan/RTImageAssets/raw/master/ScreenCap/iconset-gen.gif" alt=""></p>
</li>
<li><p><strong>SCXcodeSwitchExpander</strong>：自动在switch的case中填写枚举值</p>
<p><img src="https://camo.githubusercontent.com/d4ab3ba45af70951557adbf17a9d0deab47e519f/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f31323734383230312f534358636f6465537769746368457870616e6465722f534358636f6465537769746368457870616e646572312e676966" alt=""></p>
</li>
<li><p><strong>VVDocumenter-Xcode</strong>：规范化的注释，输入三个斜线“///”。</p>
<p><img src="https://camo.githubusercontent.com/ca5518c9872e15b8a95b9d8c5f44bc331977d710/68747470733a2f2f7261772e6769746875622e636f6d2f6f6e65766361742f5656446f63756d656e7465722d58636f64652f6d61737465722f53637265656e53686f742e676966" alt=""></p>
</li>
<li><p><strong>Lin</strong>：本地化字符串</p>
<p><img src="https://camo.githubusercontent.com/b8bc5293afe5e8f1ccb307710a38ed58923883e7/68747470733a2f2f7261772e6769746875622e636f6d2f7175657374626561742f4c696e2f6d61737465722f73637265656e73686f742e676966" alt=""></p>
</li>
<li><p><strong>XAlign</strong>：对齐常规代码</p>
<p><img src="https://camo.githubusercontent.com/7973c0e352b1f91e3efe5b3550cff5df97f4589a/687474703a2f2f7166692e73682f58416c69676e2f696d616765732f657175616c2e676966" alt=""></p>
</li>
<li><p><strong>XToDo</strong>：查找项目中所有带TODO、???、!!!等标记的地方，防止遗忘掉需要做的事情或者是代码中还存在bug的地方的插件</p>
<p><img src="https://github.com/trawor/XToDo/raw/master/screenshots/1.png" alt=""></p>
</li>
<li><p><strong>XcodeBoost</strong>：包含多个辅助修改代码的小功能</p>
<p><img src="https://github.com/fortinmike/XcodeBoost/raw/master/Images/highlighting.gif" alt=""></p>
</li>
<li><p><strong>HOStringSense</strong>：大段文本利器</p>
<p><img src="https://github.com/holtwick/HOStringSense-for-Xcode/raw/master/StringDemoAnimation.gif" alt=""></p>
</li>
<li><p><strong>Peckham</strong>：自动补全，快捷键<code>⌘ + ctrl + P</code></p>
<p><img src="https://github.com/markohlebar/Peckham/raw/master/Misc/Peckham.gif" alt=""></p>
</li>
<li><p><strong>BBUDebuggerTuckAway</strong>：自动隐藏控制台</p>
<p><img src="https://github.com/neonichu/BBUDebuggerTuckAway/raw/master/plugin.gif" alt=""></p>
</li>
<li><p><strong>InjectionPlugin</strong>：不用重新编译运行项目，可以动态调试App</p>
<p><img src="https://github.com/johnno1962/injectionforxcode/raw/master/documentation/images/injected.gif" alt=""></p>
</li>
<li><p><strong>JSPatchX</strong>：JSPatch XCode 代码自动补全插件。</p>
<p><img src="https://camo.githubusercontent.com/ad17370a5e5ecf1e5196146405f57126eb649390/68747470733a2f2f7261772e6769746875622e636f6d2f62616e673539302f4a535061746368582f6d61737465722f5265736f757263652f53637265656e73686f742e676966" alt=""></p>
</li>
<li><p><strong>AMLocalizedStringBuilder</strong>：AMLocalizedStringBuilder 是可以帮助你将语言本地化文件Localizable.strings生成object-c的类AMLocalizedString的Xcode插件，这样可以直接使用R_String.am_&lt;#你的本地化字符串key#&gt;获取对应key的值，还可以随时点击Alt或Option按键查看当前字符串的值。<br><img src="https://camo.githubusercontent.com/75d5f8f86f8e9173d0e5d2e7a3515150f771ec76/68747470733a2f2f7261772e6769746875622e636f6d2f4d656c6c6f6e674c61752f414d4c6f63616c697a6564537472696e674275696c6465722d58636f64652d506c7567696e2f6d61737465722f53637265656e73686f74732f73637265656e73686f742e676966" alt=""></p>
</li>
<li><p><strong>R.swift</strong>：类似AMLocalizedStringBuilder，不过是swift版本的，功能也更丰富，不仅支持Localized strings映射，还支持其他资源的映射。<br>  <img src="https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/DemoUseImage.gif" alt=""></p>
</li>
<li><p><strong>FKRealGroup</strong>：创建真实目录<br>  <img src="https://raw.githubusercontent.com/Forkong/FKRealGroup/master/ScreenShots/fkrealgroup_1.jpg" alt=""></p>
</li>
<li><p><strong>FastStub-Xcode</strong>：快速生成代码<br>  <img src="https://camo.githubusercontent.com/29d976d6d5991902d307b5afafa82dd8a7525eb9/687474703a2f2f6d727065616b2e636e2f696d616765732f66735f6865616465722e676966" alt=""></p>
</li>
<li><p><strong>SCXcodeMinimap</strong>：这个插件和Sublime Text中的那个看起来像。它能够显示一个编辑器的缩略图，轻松地查看、滚动代码。</p>
</li>
<li><p><strong>RevealPlugin</strong>：如果你使用Reveal的话，这个插件能快速启动Reveal。</p>
</li>
<li><p><strong>RealmPlugin</strong>：Realm的模型对象的模板文件。</p>
</li>
</ul>
<h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><script src="https://gist.github.com/chaoskyx/c0242961dda1650736d7b8780d11fc67.js"></script>

<h2 id="更新-Xcode-插件的-UUIDs"><a href="#更新-Xcode-插件的-UUIDs" class="headerlink" title="更新 Xcode 插件的 UUIDs"></a>更新 Xcode 插件的 UUIDs</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ gem <span class="keyword">install</span> update_xcode_plugins</span><br></pre></td></tr></table></figure>

<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>update_xcode_plugins</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Xcode 插件</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 清单</title>
    <url>/2016/03/18/iOS-Checklist/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="iOS代码签入前检查清单"><a href="#iOS代码签入前检查清单" class="headerlink" title="iOS代码签入前检查清单"></a>iOS代码签入前检查清单</h2><table>
<thead>
<tr>
<th><strong>iOS Pre-Check-in Checklist</strong></th>
<th><strong>Yes/No</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Have I regression tested everything in Instruments for leaks and abandoned memory?</td>
<td></td>
</tr>
<tr>
<td>Have I ran all automated UI tests and verified there are no crash bugs?</td>
<td></td>
</tr>
<tr>
<td>Have I ran all unit tests to insure I haven’t broken anything?</td>
<td></td>
</tr>
<tr>
<td>Did I do a compare of all the code to make sure all code is code review ready?</td>
<td></td>
</tr>
<tr>
<td>Have all new files been added into source control?</td>
<td></td>
</tr>
<tr>
<td>Have all work items been updated and ready to associate with the check-in?</td>
<td></td>
</tr>
<tr>
<td>Have I removed all code I commented out that no longer needs to be there?</td>
<td></td>
</tr>
<tr>
<td>Have I written clean code comments?</td>
<td></td>
</tr>
<tr>
<td>Is there anything I hacked together quickly to get it to work but needs to be cleaned up?</td>
<td></td>
</tr>
<tr>
<td>Is there duplicate code that I could simplify into 1 location?</td>
<td></td>
</tr>
<tr>
<td>Is there debug code that needs to be removed or commented out?</td>
<td></td>
</tr>
<tr>
<td>Is all text localized for all supported languages?</td>
<td></td>
</tr>
<tr>
<td>Are all images provided by the graphic designer checked in?</td>
<td></td>
</tr>
<tr>
<td>Are there any warnings in the checked-out files that can be addressed in this check-in?</td>
<td></td>
</tr>
<tr>
<td>Are there new dev target/environment settings that I forgot to also add to the production target/environment?</td>
<td></td>
</tr>
</tbody></table>
<ol>
<li><p>是否在Instruments中对内存泄露进行了回归测试？</p>
<blockquote>
<p>Have I regression tested everything in Instruments for leaks and abandoned memory?</p>
</blockquote>
</li>
<li><p>是否运行了所有的UI测试同时确认没有crash bugs？</p>
<blockquote>
<p>Have I ran all automated UI tests and verified there are no crash bugs?</p>
</blockquote>
</li>
<li><p>是否运行了所有的单元测试确保没有造成破坏？</p>
<blockquote>
<p>Have I ran all unit tests to insure I haven’t broken anything?</p>
</blockquote>
</li>
<li><p>是否进行了所有代码比较确保所有代码审查准备好了？</p>
<blockquote>
<p>Did I do a compare of all the code to make sure all code is code review ready?</p>
</blockquote>
</li>
<li><p>是否所有新文件都添加到源代码管理中？</p>
<blockquote>
<p>Have all new files been added into source control?</p>
</blockquote>
</li>
<li><p>是否所有工作项已经被更新并准备签入？</p>
<blockquote>
<p>Have all work items been updated and ready to associate with the check-in?</p>
</blockquote>
</li>
<li><p>是否移除了已经注释过不再使用的代码？</p>
<blockquote>
<p>Have I removed all code I commented out that no longer needs to be there?</p>
</blockquote>
</li>
<li><p>是否写了清晰的代码注释？</p>
<blockquote>
<p>Have I written clean code comments?</p>
</blockquote>
</li>
<li><p>是否有某个功能是仅仅为了让程序能迅速运行但是需要清除的(比如某段没有设计过的功能代码)？</p>
<blockquote>
<p>Is there anything I hacked together quickly to get it to work but needs to be cleaned up?</p>
</blockquote>
</li>
<li><p>是否有可以简化的重复代码？</p>
<blockquote>
<p>Is there duplicate code that I could simplify into 1 location?</p>
</blockquote>
</li>
<li><p>是否有需要移除或者注释掉的调试代码？</p>
<blockquote>
<p>Is there debug code that needs to be removed or commented out?</p>
</blockquote>
</li>
<li><p>是否所有支持多语言的文本都已经本地化？</p>
<blockquote>
<p>Is all text localized for all supported languages?</p>
</blockquote>
</li>
<li><p>是否由图形设计师提供的图片都已经签入？</p>
<blockquote>
<p>Are all images provided by the graphic designer checked in?</p>
</blockquote>
</li>
<li><p>是否在本次签入代码之前能够解决检出代码的警告？</p>
<blockquote>
<p>Are there any warnings in the checked-out files that can be addressed in this check-in?​</p>
</blockquote>
</li>
<li><p>是否有新的开发的target/environment设置忘了添加到生产的 target/environment？</p>
<blockquote>
<p>Are there new dev target/environment settings that I forgot to also add to the production target/environment?</p>
</blockquote>
</li>
</ol>
<h2 id="iOS-测试清单"><a href="#iOS-测试清单" class="headerlink" title="iOS 测试清单"></a>iOS 测试清单</h2><table>
<thead>
<tr>
<th><strong>Final Sanity Checks</strong></th>
<th><strong>Appearance</strong></th>
<th><strong>Functionality</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Localized?</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr>
<td>Portrait/Landscape?</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Empty Data Source?</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Large Data Source?</td>
<td></td>
<td></td>
</tr>
<tr>
<td>CRUD?</td>
<td></td>
<td></td>
</tr>
<tr>
<td>All modes/perspectives?</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Different Entry/Exit points?</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Different User Settings?</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Without internet connection?</td>
<td></td>
<td></td>
</tr>
<tr>
<td>iPhone &amp; iPad? (if Universal)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>New Install?</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Different version of iOS?</td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Checklist</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行工具使用技巧</title>
    <url>/2016/04/30/Command-Line-Tools/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="只显示子目录、不显示文件，可以使用下面的命令。"><a href="#只显示子目录、不显示文件，可以使用下面的命令。" class="headerlink" title="只显示子目录、不显示文件，可以使用下面的命令。"></a>只显示子目录、不显示文件，可以使用下面的命令。</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只显示常规目录</span></span><br><span class="line"><span class="variable">$</span> ls <span class="literal">-d</span> */</span><br><span class="line"><span class="variable">$</span> ls <span class="operator">-F</span> | grep /</span><br><span class="line"><span class="variable">$</span> ls <span class="literal">-l</span> | grep ^d</span><br><span class="line"><span class="variable">$</span> tree <span class="literal">-dL</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示隐藏目录</span></span><br><span class="line"><span class="variable">$</span> ls <span class="literal">-d</span> .*/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏目录和非隐藏目录都显示</span></span><br><span class="line"><span class="variable">$</span> find <span class="literal">-maxdepth</span> <span class="number">1</span> <span class="literal">-type</span> d</span><br></pre></td></tr></table></figure>
<blockquote>
<p>来自runyf</p>
</blockquote>
<h2 id="Git常用命令速查表"><a href="#Git常用命令速查表" class="headerlink" title="Git常用命令速查表"></a>Git常用命令速查表</h2><p><img src="https://dn-coding-net-production-pp.qbox.me/100e4dc6-0317-409f-9ff9-935890315137.jpg" alt=""></p>
<blockquote>
<p>来自Coding</p>
</blockquote>
<h2 id="清除DNS缓存命令"><a href="#清除DNS缓存命令" class="headerlink" title="清除DNS缓存命令"></a>清除DNS缓存命令</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">dscacheutil -flushcache</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">killall -HUP mDNSResponder</span></span><br></pre></td></tr></table></figure>

<h2 id="批量重命名文件"><a href="#批量重命名文件" class="headerlink" title="批量重命名文件"></a>批量重命名文件</h2><p>以下命令将文件名中包含<code>~iphone</code>的文字替换为空字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls`; <span class="keyword">do</span> mv -f <span class="variable">$i</span> `<span class="built_in">echo</span> <span class="variable">$i</span> | sed <span class="string">'s/~iphone//g'</span>`; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="Git-删除-一个-submodule"><a href="#Git-删除-一个-submodule" class="headerlink" title="Git 删除 一个 submodule"></a>Git 删除 一个 submodule</h2><ol>
<li>删除 <code>.gitmodules</code> 文件中关联内容；</li>
<li>执行 <code>git add .gitmodules</code></li>
<li>删除 <code>.git/config</code> 文件中关联内容；</li>
<li>执行 <code>git rm --cached path_to_submodule</code>（不包含尾部斜线）</li>
<li>执行 <code>rm -rf .git/modules/path_to_submodule</code></li>
<li>提交 <code>git commit -m &quot;Removed submodule &lt;name&gt;&quot;</code></li>
<li>删除子模块文件 <code>rm -rf path_to_submodule</code></li>
</ol>
<h2 id="Changing-remote-repository-for-a-git-submodule"><a href="#Changing-remote-repository-for-a-git-submodule" class="headerlink" title="Changing remote repository for a git submodule"></a>Changing remote repository for a git submodule</h2><p>You should just be able to edit the <strong>.gitmodules</strong> file to update the URL and then run <strong>git submodule sync</strong> to reflect that change to the superproject and your working copy.</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">git config <span class="params">--file=</span><span class="string">.gitmodules</span> submodule.Submod.url https:<span class="string">//github.com/username/ABC.git</span></span><br><span class="line">git config <span class="params">--file=</span><span class="string">.gitmodules</span> submodule.Submod.branch Development</span><br><span class="line">git submodule sync</span><br><span class="line">git submodule update <span class="params">--init</span> <span class="params">--recursive</span> <span class="params">--remote</span></span><br></pre></td></tr></table></figure>

<p>参考链接：<a href="http://stackoverflow.com/questions/913701/changing-remote-repository-for-a-git-submodule" target="_blank" rel="noopener">http://stackoverflow.com/questions/913701/changing-remote-repository-for-a-git-submodule</a></p>
<h2 id="显示磁盘使用空间"><a href="#显示磁盘使用空间" class="headerlink" title="显示磁盘使用空间"></a>显示磁盘使用空间</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">du -<span class="keyword">sh </span>*</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Unix/Linux</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux RaspberryPi</title>
    <url>/2016/05/28/Linux-RaspberryPi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># Using Ubuntu</span><br><span class="line">curl -sL http<span class="variable">s:</span>//<span class="keyword">deb</span>.nodesource.<span class="keyword">com</span>/setup_6.<span class="keyword">x</span> | sudo -E bash -</span><br><span class="line">sudo apt-<span class="built_in">get</span> install -<span class="keyword">y</span> nodejs</span><br><span class="line"></span><br><span class="line"># Using Debian, <span class="keyword">as</span> root</span><br><span class="line">curl -sL http<span class="variable">s:</span>//<span class="keyword">deb</span>.nodesource.<span class="keyword">com</span>/setup_6.<span class="keyword">x</span> | bash -</span><br><span class="line">apt-<span class="built_in">get</span> install -<span class="keyword">y</span> nodejs</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Unix/Linux</category>
      </categories>
      <tags>
        <tag>RaspberryPi</tag>
      </tags>
  </entry>
  <entry>
    <title>开发平台</title>
    <url>/2016/05/27/Develop-Platform/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BasS-（后端即服务）"><a href="#BasS-（后端即服务）" class="headerlink" title="BasS （后端即服务）"></a>BasS （后端即服务）</h2><table>
<thead>
<tr>
<th>平台</th>
<th>作用</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td>LeanCloud</td>
<td>存储、消息推送、用户分析、扩展模块</td>
<td><a href="https://leancloud.cn/" target="_blank" rel="noopener">https://leancloud.cn/</a></td>
</tr>
<tr>
<td>Bmob</td>
<td>云数据库、文件服务、消息推送、短信验证码</td>
<td><a href="http://www.bmob.cn/" target="_blank" rel="noopener">http://www.bmob.cn/</a></td>
</tr>
<tr>
<td>七牛</td>
<td>云存储</td>
<td><a href="http://www.qiniu.com/" target="_blank" rel="noopener">http://www.qiniu.com/</a></td>
</tr>
<tr>
<td>环信</td>
<td>即时通讯</td>
<td><a href="http://www.easemob.com/" target="_blank" rel="noopener">http://www.easemob.com/</a></td>
</tr>
<tr>
<td>融云</td>
<td>即时通讯</td>
<td><a href="http://www.rongcloud.cn/" target="_blank" rel="noopener">http://www.rongcloud.cn/</a></td>
</tr>
<tr>
<td>CloudKit</td>
<td>iCloud 的 SDK，使用 CloudKit 让开发者的 iOS 应用和 OS X 应用共享数据</td>
<td><a href="https://developer.apple.com/icloud/index.html" target="_blank" rel="noopener">https://developer.apple.com/icloud/index.html</a></td>
</tr>
<tr>
<td>友盟</td>
<td>为中国移动开发者提供免费的统计分析服务及开发者工具</td>
<td><a href="http://www.umeng.com" target="_blank" rel="noopener">http://www.umeng.com</a></td>
</tr>
<tr>
<td>极光推送</td>
<td>专注推送的 BasS 服务提供商</td>
<td><a href="https://www.jpush.cn" target="_blank" rel="noopener">https://www.jpush.cn</a></td>
</tr>
<tr>
<td>Flurry</td>
<td>Yahoo的App分析统计工具集</td>
<td><a href="https://developer.yahoo.com" target="_blank" rel="noopener">https://developer.yahoo.com</a></td>
</tr>
<tr>
<td>Google Analytics</td>
<td>Google的移动分析统计</td>
<td><a href="http://www.google.com/intl/zh-CN_ALL/analytics/index.html" target="_blank" rel="noopener">http://www.google.com/intl/zh-CN_ALL/analytics/index.html</a></td>
</tr>
<tr>
<td>MTA</td>
<td>腾讯云统计</td>
<td><a href="http://mta.qq.com" target="_blank" rel="noopener">http://mta.qq.com</a></td>
</tr>
<tr>
<td>App Annie</td>
<td>数据统计分析</td>
<td><a href="https://www.appannie.com/cn/" target="_blank" rel="noopener">https://www.appannie.com/cn/</a></td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="网络接口"><a href="#网络接口" class="headerlink" title="网络接口"></a>网络接口</h2><table>
<thead>
<tr>
<th>名称</th>
<th>链接</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>百度APIStore</td>
<td><a href="http://apistore.baidu.com" target="_blank" rel="noopener">http://apistore.baidu.com</a></td>
<td>大多数免费但数据很多数据格式非常垃圾不好解析</td>
</tr>
<tr>
<td>天行数据TxAPI</td>
<td><a href="http://api.huceo.com/" target="_blank" rel="noopener">http://api.huceo.com/</a></td>
<td>免费、数据格式规范但每个账号有使用次数的限制</td>
</tr>
<tr>
<td>天狗云</td>
<td><a href="http://www.tngou.net/" target="_blank" rel="noopener">http://www.tngou.net/</a></td>
<td>提供健康医疗类数据的免费API</td>
</tr>
<tr>
<td>聚合数据</td>
<td><a href="https://www.juhe.cn/" target="_blank" rel="noopener">https://www.juhe.cn/</a></td>
<td>部分API免费但需要实名认证</td>
</tr>
<tr>
<td>APiX</td>
<td><a href="http://apix.cn/" target="_blank" rel="noopener">http://apix.cn/</a></td>
<td>专业数据API但都需要付费</td>
</tr>
<tr>
<td>阿凡达数据</td>
<td><a href="http://www.avatardata.cn/" target="_blank" rel="noopener">http://www.avatardata.cn/</a></td>
<td>很多免费的API部分付费的API</td>
</tr>
</tbody></table>
<h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><table>
<thead>
<tr>
<th><strong>第三方平台</strong></th>
<th><strong>注册地址</strong></th>
</tr>
</thead>
<tbody><tr>
<td>新浪微博</td>
<td><a href="http://open.weibo.com" target="_blank" rel="noopener">http://open.weibo.com</a></td>
</tr>
<tr>
<td>腾讯微博</td>
<td><a href="http://dev.t.qq.com" target="_blank" rel="noopener">http://dev.t.qq.com</a></td>
</tr>
<tr>
<td>QQ空间</td>
<td><a href="http://connect.qq.com/intro/login/" target="_blank" rel="noopener">http://connect.qq.com/intro/login/</a></td>
</tr>
<tr>
<td>QQ</td>
<td><a href="http://mobile.qq.com/api/" target="_blank" rel="noopener">http://mobile.qq.com/api/</a></td>
</tr>
<tr>
<td>微信</td>
<td><a href="http://open.weixin.qq.com" target="_blank" rel="noopener">http://open.weixin.qq.com</a></td>
</tr>
<tr>
<td>搜狐微博</td>
<td><a href="http://open.t.sohu.com" target="_blank" rel="noopener">http://open.t.sohu.com</a></td>
</tr>
<tr>
<td>豆瓣</td>
<td><a href="http://developers.douban.com" target="_blank" rel="noopener">http://developers.douban.com</a></td>
</tr>
<tr>
<td>人人网</td>
<td><a href="http://dev.renren.com" target="_blank" rel="noopener">http://dev.renren.com</a></td>
</tr>
<tr>
<td>开心网</td>
<td><a href="http://open.kaixin001.com" target="_blank" rel="noopener">http://open.kaixin001.com</a></td>
</tr>
<tr>
<td>Instapaper</td>
<td><a href="http://www.instapaper.com/main/request_oauth_consumer_token" target="_blank" rel="noopener">http://www.instapaper.com/main/request_oauth_consumer_token</a></td>
</tr>
<tr>
<td>有道云笔记</td>
<td><a href="http://note.youdao.com/open/developguide.html#app" target="_blank" rel="noopener">http://note.youdao.com/open/developguide.html#app</a></td>
</tr>
<tr>
<td>Facebook</td>
<td><a href="https://developers.facebook.com" target="_blank" rel="noopener">https://developers.facebook.com</a></td>
</tr>
<tr>
<td>Twitter</td>
<td><a href="https://dev.twitter.com" target="_blank" rel="noopener">https://dev.twitter.com</a></td>
</tr>
</tbody></table>
<h2 id="崩溃收集"><a href="#崩溃收集" class="headerlink" title="崩溃收集"></a>崩溃收集</h2><h3 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h3><ul>
<li>Bugly <a href="http://bugly.qq.com" target="_blank" rel="noopener">http://bugly.qq.com</a></li>
<li>BugHD <a href="https://bughd.com" target="_blank" rel="noopener">https://bughd.com</a></li>
</ul>
<h3 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h3><ul>
<li>Crashlytics <a href="http://try.crashlytics.com" target="_blank" rel="noopener">http://try.crashlytics.com</a></li>
</ul>
<h2 id="内测分发"><a href="#内测分发" class="headerlink" title="内测分发"></a>内测分发</h2><ul>
<li>蒲公英 <a href="https://www.pgyer.com" target="_blank" rel="noopener">https://www.pgyer.com</a></li>
<li>FIR <a href="http://fir.im" target="_blank" rel="noopener">http://fir.im</a></li>
<li>TestFlight：苹果自家的内测渠道 <a href="https://developer.apple.com/testflight/" target="_blank" rel="noopener">https://developer.apple.com/testflight/</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>开发平台</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 搭建 RTMP 直播服务器</title>
    <url>/2016/07/23/macOS-setup-rtmp-server/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>直播开发流程:<br>数据采集→ 数据编码 → 数据传输(流媒体服务器) → 解码数据 → 播放显示<br>本文主要介绍如何搭建RTMP直播服务器以及测试流媒体服务器是否搭建成功。</p>
<a id="more"></a>

<h2 id="RTMP直播服务器搭建"><a href="#RTMP直播服务器搭建" class="headerlink" title="RTMP直播服务器搭建"></a>RTMP直播服务器搭建</h2><ol>
<li><p>安装Homebrew</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Homebrew添加nginx套件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew tap homebrew/nginx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 nginx 和 rtmp 模块</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$ brew install nginx-full --<span class="keyword">with</span>-rtmp-<span class="class"><span class="keyword">module</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看 nginx 安装信息</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ brew <span class="builtin-name">info</span> nginx-full</span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line">Docroot is: /usr/local/var/www</span><br><span class="line"></span><br><span class="line">  The<span class="built_in"> default port </span>has been <span class="builtin-name">set</span> <span class="keyword">in</span> /usr/local/etc/nginx/nginx.conf <span class="keyword">to</span> 8080 so that</span><br><span class="line">  nginx can <span class="builtin-name">run</span> without sudo.</span><br><span class="line"></span><br><span class="line">  nginx will load all files <span class="keyword">in</span> /usr/local/etc/nginx/servers/.</span><br><span class="line"></span><br><span class="line">- Tips -</span><br><span class="line"><span class="builtin-name">Run</span><span class="built_in"> port </span>80:</span><br><span class="line"> $ sudo chown root:wheel /usr/local/Cellar/nginx-full/1.10.1/bin/nginx</span><br><span class="line"> $ sudo chmod u+s /usr/local/Cellar/nginx-full/1.10.1/bin/nginx</span><br><span class="line">Reload config:</span><br><span class="line"> $ nginx -s reload</span><br><span class="line">Reopen Logfile:</span><br><span class="line"> $ nginx -s reopen</span><br><span class="line">Stop process:</span><br><span class="line"> $ nginx -s stop</span><br><span class="line">Waiting on exit process</span><br><span class="line"> $ nginx -s quit</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> have launchd start homebrew/nginx/nginx-full now <span class="keyword">and</span> restart at login:</span><br><span class="line">  brew services start homebrew/nginx/nginx-full</span><br><span class="line"><span class="keyword">Or</span>, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span><br><span class="line"><span class="string">  nginx</span></span><br></pre></td></tr></table></figure>

<p>从以上信息可以得出</p>
<p>nginx 安装位置：<code>/usr/local/Cellar/nginx-full/1.10.1</code></p>
<p>nginx 配置文件位置：<code>/usr/local/etc/nginx/nginx.conf</code></p>
<p> nginx服务器根目录位置：<code>/usr/local/var/www</code></p>
</li>
<li><p>测试是否能成功启动nginx服务</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>nginx</span><br></pre></td></tr></table></figure>

<p>在浏览器地址栏输入：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>，出现 <strong>Welcome to nginx!</strong> 表示nginx安装成功了！</p>
</li>
<li><p>修改<code>nginx.conf</code>配置文件，配置<code>rtmp</code></p>
<p>在<code>http</code>节点后面添加rtmp配置</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rtmp &#123;</span><br><span class="line">   <span class="built_in"> server </span>&#123;</span><br><span class="line">        listen 1935;</span><br><span class="line"></span><br><span class="line">        application mytv &#123;</span><br><span class="line">            live on;</span><br><span class="line">            record off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新加载nginx的配置文件</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>nginx -s reload</span><br></pre></td></tr></table></figure>
<p>现在我们可以来对推流进行测试了，看看我们的rtmp能不能推流成功。</p>
</li>
</ol>
<h2 id="测试服务器"><a href="#测试服务器" class="headerlink" title="测试服务器"></a>测试服务器</h2><h3 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h3><p>推流可以使用OBS软件和FFmpeg工具。</p>
<h4 id="OBS"><a href="#OBS" class="headerlink" title="OBS"></a>OBS</h4><p>软件下载地址：<a href="https://obsproject.com" target="_blank" rel="noopener">https://obsproject.com</a></p>
<p>软件设置如图：<br><img src="http://file.blog.chaosky.tech/2016-07-23-Snip20160723_1.png" alt="Snip20160723_1"><br><img src="http://file.blog.chaosky.tech/2016-07-23-Snip20160723_2.png" alt="Snip20160723_2"></p>
<h4 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h4><p>安装ffmpeg</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>ffmpeg</span><br></pre></td></tr></table></figure>

<p>使用ffmpeg命令推流桌面</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> ffmpeg <span class="operator">-f</span> avfoundation <span class="literal">-i</span> <span class="string">"1:0"</span> <span class="literal">-vcodec</span> libx264 <span class="literal">-preset</span> ultrafast <span class="literal">-acodec</span> aac <span class="operator">-f</span> flv rtmp://localhost:<span class="number">1935</span>/mytv/room1</span><br></pre></td></tr></table></figure>

<p>以上命令中<code>&quot;1:0&quot;</code>可以通过查看ffmpeg是否支持对应的设备</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ ffmpeg -f avfoundation -list_devices <span class="literal">true</span> -i <span class="string">""</span></span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line">[AVFoundation input device @ 0x7fd3a9500b40] AVFoundation video devices:</span><br><span class="line">[AVFoundation input device @ 0x7fd3a9500b40] [0] FaceTime HD Camera</span><br><span class="line">[AVFoundation input device @ 0x7fd3a9500b40] [1] Capture<span class="built_in"> screen </span>0</span><br><span class="line">[AVFoundation input device @ 0x7fd3a9500b40] AVFoundation audio devices:</span><br><span class="line">[AVFoundation input device @ 0x7fd3a9500b40] [0] Built-in Microphone</span><br></pre></td></tr></table></figure>

<h3 id="拉流"><a href="#拉流" class="headerlink" title="拉流"></a>拉流</h3><p>测试拉流可以使用VLC软件</p>
<p>软件下载地址：<a href="http://www.videolan.org/vlc/index.html" target="_blank" rel="noopener">http://www.videolan.org/vlc/index.html</a></p>
<p>选择File -&gt; Open Network…</p>
<p><img src="http://file.blog.chaosky.tech/2016-07-23-Snip20160723_4.png" alt="Snip20160723_4"></p>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>直播</tag>
        <tag>RTMP</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Reveal分析别人App的UI布局</title>
    <url>/2016/07/27/iOS-Security-Defense-Reveal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="越狱iOS设备"><a href="#越狱iOS设备" class="headerlink" title="越狱iOS设备"></a>越狱iOS设备</h3><ol>
<li>如何越狱可以参考<a href="http://www.pangu.io" target="_blank" rel="noopener">盘古越狱</a>的相关文章，具体详情参见链接：<a href="http://jailbreak.25pp.com/ppjailbreak/?from=25pp_00119" target="_blank" rel="noopener">http://jailbreak.25pp.com/ppjailbreak/?from=25pp_00119</a>，最新iOS越狱可以支持iOS 9.3.3，也可以看我整理的<a href="http://chaosky.me/2016/12/07/Jailbreak-Using-Pangu-and-Cydia-Impactor/" target="_blank" rel="noopener">非官方的越狱文章</a>。</li>
<li>在Cydia源中安装OpenSSH、MobileSubstrate等工具，之后的文章会讲到其他工具</li>
</ol>
<h3 id="macOS-本地安装Reveal"><a href="#macOS-本地安装Reveal" class="headerlink" title="macOS 本地安装Reveal"></a>macOS 本地安装Reveal</h3><p>具体安装及使用可以参见我之前的文章：<a href="http://chaosky.me/2016/07/27/Reveal" target="_blank" rel="noopener">http://chaosky.me/2016/07/27/Reveal</a></p>
<a id="more"></a>

<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="在Cydia中搜索并安装Reveal-Loader"><a href="#在Cydia中搜索并安装Reveal-Loader" class="headerlink" title="在Cydia中搜索并安装Reveal Loader"></a>在Cydia中搜索并安装Reveal Loader</h3><p><img src="http://file.blog.chaosky.tech/2016-07-27-Snip20160727_11.png" alt="Snip20160727_11"></p>
<h3 id="远程连接iPhone设备"><a href="#远程连接iPhone设备" class="headerlink" title="远程连接iPhone设备"></a>远程连接iPhone设备</h3><ol>
<li><p>在Cydia中安装OpenSSH工具</p>
</li>
<li><p>打开Wi-Fi设置，获取IP地址（例如：192.168.2.6）<br><img src="http://file.blog.chaosky.tech/2016-07-27-Snip20160727_1.png" alt="Snip20160727_1"></p>
</li>
<li><p>打开终端，执行命令<code>ssh root@[设备IP地址]</code>（例如：<code>ssh root@192.168.2.6</code>）</p>
</li>
<li><p>等待几分钟后，允许新连接<br><img src="http://file.blog.chaosky.tech/2016-07-27-Snip20160727_3.png" alt="Snip20160727_3"></p>
</li>
<li><p>输入密码<code>alpine</code>登录iPhone设备<br><img src="http://file.blog.chaosky.tech/2016-07-27-Snip20160727_4.png" alt="Snip20160727_4"></p>
</li>
</ol>
<h3 id="检查iOS设备上-Library-目录下是否有一个名为RHRevealLoader的目录"><a href="#检查iOS设备上-Library-目录下是否有一个名为RHRevealLoader的目录" class="headerlink" title="检查iOS设备上/Library/目录下是否有一个名为RHRevealLoader的目录"></a>检查iOS设备上<code>/Library/</code>目录下是否有一个名为<code>RHRevealLoader</code>的目录</h3><p><img src="http://file.blog.chaosky.tech/2016-07-27-Snip20160727_5.png" alt="Snip20160727_5"></p>
<ol>
<li><p>若没有则创建该目录：<code>mkdir /Library/RHRevealLoader</code></p>
</li>
<li><p>启动Reveal并选择Help → Show Reveal Library in Finder，这将会打开Finder窗口，并显示一个名为iOS-Libraries的文件夹。<br> <img src="http://file.blog.chaosky.tech/reveal/show-reveal-library-in-finder.jpg" alt=""><br> 将该目录下的<code>libReveal.dylib</code>通过scp或者iFunBox上传到刚才的手机目录，scp执行的命令如下：</p>
 <figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">scp /Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib root<span class="variable">@192</span>.<span class="number">168.2</span>.<span class="number">6</span><span class="symbol">:/Library/RHRevealLoader</span></span><br></pre></td></tr></table></figure>
<h3 id="重启设备"><a href="#重启设备" class="headerlink" title="重启设备"></a>重启设备</h3></li>
<li><p>可以在设备上执行命令：<code>killall SpringBoard</code></p>
</li>
<li><p>也可以重启设备，不过需要注意的是，最新的越狱为不完美越狱，重启设备需要点击<strong>PP盘古越狱</strong>重新越狱</p>
</li>
</ol>
<h3 id="启动Reveal调试别人的App"><a href="#启动Reveal调试别人的App" class="headerlink" title="启动Reveal调试别人的App"></a>启动Reveal调试别人的App</h3><ol>
<li>打开设置程序，配置Reveal Loader<br> <img src="http://file.blog.chaosky.tech/2016-07-27-Snip20160727_6.png" alt="Snip20160727_6"></li>
<li>在Reveal设置中选择你要查看的App，Enabled Applications<br> <img src="http://file.blog.chaosky.tech/2016-07-27-Snip20160727_8.png" alt="Snip20160727_8"></li>
<li>在Reveal中调试查看<br> 调试时，需要注意越狱设备和Mac需要在同一网路环境中<br> <img src="http://file.blog.chaosky.tech/2016-07-27-Snip20160727_10.png" alt="Snip20160727_10"></li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>最新版 Reveal v4 下载地址：<a href="http://xclient.info/s/reveal.html" target="_blank" rel="noopener">http://xclient.info/s/reveal.html</a> </p>
<p>新版本的 Reveal v4 的 <code>libReveal.dylib</code> 改名为 <code>RevealServer.framework</code> 了，逆向分析的时候手机端只要把 <code>RevealServer.framework</code> 目录下的 <code>RevealServer</code> 改名为 <code>libReveal.dylib</code> 拷贝到手机上的 <code>/Library/RHRevealLoader</code> 目录中即可。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://wiki.jikexueyuan.com/project/ios-security-defense/reveal.html" target="_blank" rel="noopener">http://wiki.jikexueyuan.com/project/ios-security-defense/reveal.html</a></li>
<li><a href="https://www.amazon.cn/iOS应用逆向工程-沙梓社/dp/B00VFDVY7E/ref=sr_1_1?ie=UTF8&qid=1469610259&sr=8-1&keywords=iOS+逆向" target="_blank" rel="noopener">iOS应用逆向工程</a></li>
<li><a href="https://xiuchundao.me/post/integrating-reveal-inspect-app-on-jailbreak-device-with-reveal" target="_blank" rel="noopener">https://xiuchundao.me/post/integrating-reveal-inspect-app-on-jailbreak-device-with-reveal</a>    </li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Reveal</tag>
        <tag>Jailbreak</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 开发配置手册——设置篇</title>
    <url>/2016/07/29/macOS-Setup-Guide-Setting/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>工欲善其事，必先利其器。—— 设置篇</p>
</blockquote>
<a id="more"></a>

<h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><h3 id="将功能键-F1-F12-设置为标准的功能键"><a href="#将功能键-F1-F12-设置为标准的功能键" class="headerlink" title="将功能键(F1-F12)设置为标准的功能键"></a>将功能键(F1-F12)设置为标准的功能键</h3><p>MacBook键盘最上面一排的功能键(F1-F12)默认是系统亮度和声音之类的快捷设置，当MacBook作为你的娱乐电脑时，这样的默认设置是非常方便的，但是对于将MacBook作为工作电脑而且需要频繁使用功能键(F1-F12)的人，最好将功能键(F1-F12)的行为设置为标准的功能键。</p>
<p>打开【系统设置】，点击【键盘】，设置如下：<br><img src="http://file.blog.chaosky.tech/2016-08-03-Snip20160729_1.png" alt="Snip20160729_1"></p>
<h3 id="设置触摸板"><a href="#设置触摸板" class="headerlink" title="设置触摸板"></a>设置触摸板</h3><p>打开【系统设置】，点击【触摸板】，根据需要设置，众享丝滑。<br><img src="http://file.blog.chaosky.tech/2016-08-03-Snip20160729_2.png" alt="Snip20160729_2"><br><img src="http://file.blog.chaosky.tech/2016-08-03-Snip20160729_3.png" alt="Snip20160729_3"><br><img src="http://file.blog.chaosky.tech/2016-08-03-Snip20160729_4.png" alt="Snip20160729_4"></p>
<h3 id="将Dock停靠在屏幕左边"><a href="#将Dock停靠在屏幕左边" class="headerlink" title="将Dock停靠在屏幕左边"></a>将Dock停靠在屏幕左边</h3><p>MacBook的屏幕是一个长方形，如果你将Dock放在下面，那么屏幕的可用宽度就会减少，另外人眼阅读时的顺序是从左往右，因此Dock放在左边更适合将MacBook作为工作电脑的人。</p>
<p>打开【系统设置】，点击【Dock】,</p>
<ul>
<li>将图标的Size调到合适大小</li>
<li>关闭放大特效（即鼠标放到Dock上图标放大的效果，此效果干扰注意力）</li>
<li>在【置于屏幕上的位置】一栏，选择【左边】</li>
<li>勾选【将窗口最小化为应用程序图标】</li>
</ul>
<p><img src="http://file.blog.chaosky.tech/2016-08-03-Snip20160729_5.png" alt="Snip20160729_5"></p>
<h3 id="快速锁定屏幕"><a href="#快速锁定屏幕" class="headerlink" title="快速锁定屏幕"></a>快速锁定屏幕</h3><p>打开【系统设置】，点击【桌面与屏幕保护程序】图标，选择【屏幕保护程序】标签页，点击右下角的【触发角..】，在弹出的界面中右下角选择【将显示器置入睡眠状态】，点击【好】确定。<br><img src="http://file.blog.chaosky.tech/2016-08-03-Snip20160803_1.png" alt="Snip20160803_1"><br><img src="http://file.blog.chaosky.tech/2016-08-03-Snip20160803_3.png" alt="Snip20160803_3"></p>
<h3 id="系统常用快捷键"><a href="#系统常用快捷键" class="headerlink" title="系统常用快捷键"></a>系统常用快捷键</h3><p>学习系统快捷键，适当使用快捷键将会提升你的工作效率。<br><img src="http://file.blog.chaosky.tech/2016-08-03-1280800.png" alt="1280800"></p>
<p>壁纸下载地址：<a href="http://bbs.feng.com/read-htm-tid-4254274.html" target="_blank" rel="noopener">http://bbs.feng.com/read-htm-tid-4254274.html</a><br>Mac 键盘快捷键 官方总览：<a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="noopener">https://support.apple.com/zh-cn/HT201236</a></p>
<h3 id="关闭自动纠正拼写"><a href="#关闭自动纠正拼写" class="headerlink" title="关闭自动纠正拼写"></a>关闭自动纠正拼写</h3><p>有些时候在文本输入框中输入文本时，会出现如下情况。一按空格键或者回车键会填写弹出框的文本，很烦人。</p>
<p><img src="http://7vzrbk.com1.z0.glb.clouddn.com/ghost/content/images/2015/10/QQ20151025-0-2x.png" alt=""></p>
<p>可以通过【关闭自动纠正拼写】解决</p>
<p><img src="http://7vzrbk.com1.z0.glb.clouddn.com/ghost/content/images/2015/10/QQ20151024-0-2x.png" alt=""></p>
<h3 id="tree命令中文文件名显示异常"><a href="#tree命令中文文件名显示异常" class="headerlink" title="tree命令中文文件名显示异常"></a>tree命令中文文件名显示异常</h3><p><img src="http://file.blog.chaosky.tech/QQ20160123-0@2x.png" alt=""></p>
<p>解决办法：追加<code>tree -N</code>参数</p>
<h3 id="Mac-中滚动截屏"><a href="#Mac-中滚动截屏" class="headerlink" title="Mac 中滚动截屏"></a>Mac 中滚动截屏</h3><p>安装腾讯的snip</p>
<p><a href="http://www.snip.qq.com" target="_blank" rel="noopener">官方下载地址</a></p>
<p><a href="http://jingyan.baidu.com/article/fec4bce2458d03f2618d8b8e.html" target="_blank" rel="noopener">详细设置教程</a></p>
<h3 id="How-to-Solve-Missing-Fonts-in-Sketch-App"><a href="#How-to-Solve-Missing-Fonts-in-Sketch-App" class="headerlink" title="How to Solve Missing Fonts in Sketch App"></a>How to Solve Missing Fonts in Sketch App</h3><p>All you have to do is enter the following command in Terminal.</p>
<p><code>$ curl https://raw.githubusercontent.com/qrpike/Web-Font-Load/master/install.sh | sh</code></p>
<h3 id="Lost-permission-for-sudo-in-OSX-El-Captain"><a href="#Lost-permission-for-sudo-in-OSX-El-Captain" class="headerlink" title="Lost permission for sudo in OSX El Captain"></a>Lost permission for sudo in OSX El Captain</h3><p>The easiest way to restore both was starting <code>Script Editor</code> and then typing and running that script:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> shell<span class="built_in"> script </span><span class="string">"/usr/sbin/chown root:wheel /"</span> with administrator privileges</span><br><span class="line"><span class="keyword">do</span> shell<span class="built_in"> script </span><span class="string">"/bin/chmod 755 /"</span> with administrator privileges</span><br></pre></td></tr></table></figure>

<h3 id="找回允许任何来源选项"><a href="#找回允许任何来源选项" class="headerlink" title="找回允许任何来源选项"></a>找回允许任何来源选项</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">sudo spctl <span class="comment">--master-disable</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Setup Guide</tag>
      </tags>
  </entry>
  <entry>
    <title>设计灵感 —— 寻找素材</title>
    <url>/2016/08/05/Design-Inspiration/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>对于设计而言，除了基本的理论，积累大量素材更为重要。</p>
<p>当积累了大量设计语言，以及元素的组合方式后，融合你生活中对美好设计的体验，属于你自己的优秀设计也便会自然诞生。</p>
<a id="more"></a>

<h2 id="Dribbble"><a href="#Dribbble" class="headerlink" title="Dribbble"></a><a href="https://dribbble.com" target="_blank" rel="noopener">Dribbble</a></h2><p>Dribbble是在设计师中非常流行的一个分享设计的社区。<br><img src="http://file.blog.chaosky.tech/2016-08-05-Snip20160805_2.png" alt="Snip20160805_2"></p>
<h2 id="Behance"><a href="#Behance" class="headerlink" title="Behance"></a><a href="https://www.behance.net" target="_blank" rel="noopener">Behance</a></h2><p>Behance这个社区更为专业，里面的作品完成度都非常高，覆盖的范围也更加广泛。<br><img src="http://file.blog.chaosky.tech/2016-08-05-Snip20160805_3.png" alt="Snip20160805_3"></p>
<h2 id="Siiimple"><a href="#Siiimple" class="headerlink" title="Siiimple"></a><a href="http://siiimple.com" target="_blank" rel="noopener">Siiimple</a></h2><p>这是一个专门收集极简主义网站设计的网站，筛选的作品都很独特并且具有启发性。<br><img src="http://file.blog.chaosky.tech/2016-08-05-Snip20160805_4.png" alt="Snip20160805_4"></p>
<h2 id="Reeoo"><a href="#Reeoo" class="headerlink" title="Reeoo"></a><a href="http://reeoo.com" target="_blank" rel="noopener">Reeoo</a></h2><p>Reeoo也是一个专门收集优秀网页设计网站，提供了详细的分类目录，从App，艺术，卡通到摄影，体育一应俱全，还可以根据颜色的主题筛选。<br><img src="http://file.blog.chaosky.tech/2016-08-05-Snip20160805_6.png" alt="Snip20160805_6"></p>
<h2 id="Land-Book"><a href="#Land-Book" class="headerlink" title="Land Book"></a><a href="http://land-book.com" target="_blank" rel="noopener">Land Book</a></h2><p>LandBook 专门收集了优秀的landing page页面，品类齐全，值得时不时地看一看。<br><img src="http://file.blog.chaosky.tech/2016-08-05-Snip20160805_8.png" alt="Snip20160805_8"></p>
<h2 id="Call-to-idea"><a href="#Call-to-idea" class="headerlink" title="Call to idea"></a><a href="http://www.calltoidea.com" target="_blank" rel="noopener">Call to idea</a></h2><p>Call to idea 是一个以类别为线索收集各种设计的网站，专业、精美，是激发灵感的好地方。<br><img src="http://file.blog.chaosky.tech/2016-08-05-Snip20160805_9.png" alt="Snip20160805_9"></p>
<h2 id="Designer-News"><a href="#Designer-News" class="headerlink" title="Designer News"></a><a href="https://www.designernews.co" target="_blank" rel="noopener">Designer News</a></h2><p>Designer News 是全世界最热闹的设计师的资讯社区，新的设计想法，新的产品，都会在这里进行讨论。<br><img src="http://file.blog.chaosky.tech/2016-08-05-Snip20160805_10.png" alt="Snip20160805_10"></p>
<h2 id="NEXT"><a href="#NEXT" class="headerlink" title="NEXT"></a><a href="http://next.36kr.com" target="_blank" rel="noopener">NEXT</a></h2><p>NEXT 是一个快速发现、分享和讨论新产品的社区。在这里，你可以第一时间发现国内外最新、最酷、最好玩的互联网产品，也可分享自己最喜爱的产品，参与圈内人士的讨论。<br><img src="http://file.blog.chaosky.tech/2016-08-05-Snip20160805_11.png" alt="Snip20160805_11"></p>
<h2 id="MindStore"><a href="#MindStore" class="headerlink" title="MindStore"></a><a href="http://mindstore.io" target="_blank" rel="noopener">MindStore</a></h2><p>MindStore 是一个发现、分享、探讨新酷产品的社区，帮助您找到最好的产品和想法。<br><img src="http://file.blog.chaosky.tech/2016-08-05-Snip20160805_12.png" alt="Snip20160805_12"></p>
<h2 id="Product-Hunt"><a href="#Product-Hunt" class="headerlink" title="Product Hunt"></a><a href="https://www.producthunt.com" target="_blank" rel="noopener">Product Hunt</a></h2><p>Product Hunt surfaces the best new products, every day. It’s a place for product-loving enthusiasts to share and geek out about the latest mobile apps, websites, hardware projects, and tech creations.</p>
<p><img src="http://file.blog.chaosky.tech/2016-08-05-Snip20160805_14.png" alt="Snip20160805_14"></p>
]]></content>
      <categories>
        <category>UI设计</category>
      </categories>
      <tags>
        <tag>素材</tag>
      </tags>
  </entry>
  <entry>
    <title>单例类</title>
    <url>/2016/09/24/Singteton-Class/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>单例模式（Singleton Pattern）最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<p>注意：</p>
<p>1、单例类只能有一个实例。</p>
<p>2、单例类必须自己创建自己的唯一实例。</p>
<p>3、单例类必须给所有其他对象提供这一实例。</p>
<a id="more"></a>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个 SingleObject 类。SingleObject 类有它的私有构造函数和本身的一个静态实例。<br>SingleObject 类提供了一个静态方法，供外界获取它的静态实例。SingletonPatternDemo，我们的演示类使用 SingleObject 类来获取 SingleObject 对象。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/singleton_pattern_uml_diagram.jpg" alt=""></p>
<script src="https://gist.github.com/chaoskyx/23a6095423494752f3bee55c114a2a97.js"></script>

]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Singteton</tag>
      </tags>
  </entry>
  <entry>
    <title>第三方登录和分享常见问题集锦</title>
    <url>/2016/09/09/SNS-Platform/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="新浪微博"><a href="#新浪微博" class="headerlink" title="新浪微博"></a>新浪微博</h2><h3 id="iOS-sso-package-or-sign-error"><a href="#iOS-sso-package-or-sign-error" class="headerlink" title="iOS sso package or sign error"></a>iOS sso package or sign error</h3><p>出现这个问题是因为在新浪微博开放平台上申请的应用的<code>Bundle ID</code>和你项目的<code>Bundle ID</code>不一致或者未设置。  </p>
<p>解决方法：更改新浪微博开发平台上应用的<code>Bundle ID</code></p>
<h3 id="error-redirect-uri-mismatch"><a href="#error-redirect-uri-mismatch" class="headerlink" title="error:redirect_uri_mismatch"></a>error:redirect_uri_mismatch</h3><p>在程序中设置的<code>Redirect URL</code>和新浪微博开放平台申请的应用的<code>授权回调页</code>URL不一致。</p>
<p>解决方法：在新浪微博开放平台 ——&gt; 应用信息 ——&gt; 高级信息 ——&gt; OAuth2.0 授权设置 ——&gt; 授权回调页，设置和程序的<code>Redirect URL</code>一致。</p>
<h3 id="新浪微博登录授权失败，responseCode等于5051"><a href="#新浪微博登录授权失败，responseCode等于5051" class="headerlink" title="新浪微博登录授权失败，responseCode等于5051"></a>新浪微博登录授权失败，responseCode等于5051</h3><p>在项目中集成友盟第三方登录，新浪微博登录，登录授权失败，返回状态码为5051（获取账户失败）。</p>
<p>原因：App在测试阶段(未上线)，授权的微博账号和开通开放平台的微博账号不是同一账号。</p>
<p>解决办法：在新浪微博开放平台中，选择我的应用——对应应用——应用信息——测试信息，选择编辑，添加测试账号。</p>
<h2 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h2><h3 id="scope参数错误或没有scope权限"><a href="#scope参数错误或没有scope权限" class="headerlink" title="scope参数错误或没有scope权限"></a>scope参数错误或没有scope权限</h3><ol>
<li>没有相关的权限</li>
<li>账号没有认证，没有相关的权限</li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>SNS</tag>
        <tag>第三方分享</tag>
        <tag>第三方登录</tag>
      </tags>
  </entry>
  <entry>
    <title>越狱检测</title>
    <url>/2016/10/12/Check-Jailbroken/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码详情查看以下</p>
<a id="more"></a>

<script src="https://gist.github.com/chaoskyx/12d9b72b65f55d0faf7d9690fa1a71b1.js"></script>


]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Jailbreak</tag>
      </tags>
  </entry>
  <entry>
    <title>我关注的公众号</title>
    <url>/2016/09/21/Official-Accounts/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><h4 id="iOS开发"><a href="#iOS开发" class="headerlink" title="iOS开发"></a>iOS开发</h4><p>微信号：iOSDevTip</p>
<p>功能介绍：最新iOS、iPhone资讯，万名iOS开发者、swift开发、果粉聚集，参与技术讨论，整理开发技巧，分享创业经验！享受生活、热爱编程！</p>
<h4 id="CocoaChina"><a href="#CocoaChina" class="headerlink" title="CocoaChina"></a>CocoaChina</h4><p>微信号: cocoachinabbs</p>
<p>功能介绍: CocoaChina苹果开发中文社区官方微信，提供教程资源、app推广营销、招聘、外包及培训信息、各类沙龙交流活动以及更多开发者服务。</p>
<h4 id="Crossin的编程教室"><a href="#Crossin的编程教室" class="headerlink" title="Crossin的编程教室"></a>Crossin的编程教室</h4><p>微信号: crossincode</p>
<p>功能介绍: 每天5分钟，学点简单的编程，用新的思维方式看世界。</p>
<h4 id="待字闺中"><a href="#待字闺中" class="headerlink" title="待字闺中"></a>待字闺中</h4><p>微信号: daiziguizhongren</p>
<p>功能介绍: 深度分析大数据、深度学习、人工智能等技术，切中实际应用场景，为大家授业解惑。间或，也会介绍国内外相关领域有趣的面试题。</p>
<h4 id="程序人生"><a href="#程序人生" class="headerlink" title="程序人生"></a>程序人生</h4><p>微信号: programmer_life</p>
<p>功能介绍: 十年漫漫程序人生，打过各种杂，也做过让我骄傲的软件；管理过十多人的团队，还带领一班兄弟姐妹创过业。关注程序人生，了解程序猿，学做程序猿，让我们的人生不再屌丝化。</p>
<h4 id="唐巧——iOS开发"><a href="#唐巧——iOS开发" class="headerlink" title="唐巧——iOS开发"></a>唐巧——iOS开发</h4><p>微信号: iosDevTips</p>
<p>功能介绍: 我叫唐巧，InfoQ 编辑，《iOS开发进阶》作者，现在在猿题库创业。本账号主要分享我精选的 iOS 开发文章和一些创业感悟。</p>
<h4 id="利器"><a href="#利器" class="headerlink" title="利器"></a>利器</h4><p>微信号：liqiio</p>
<p>功能介绍：创造者和他们的工具.</p>
<h4 id="论码农的自我修养"><a href="#论码农的自我修养" class="headerlink" title="论码农的自我修养"></a>论码农的自我修养</h4><p>微信号：bit_tiger</p>
<p>功能介绍：“有趣,有用,有效”.刷项目,做实战,捅破技术的那层纸.</p>
<h4 id="Pinapps"><a href="#Pinapps" class="headerlink" title="Pinapps"></a>Pinapps</h4><p>微信号：Pinapps</p>
<p>功能介绍：我推荐的不仅是apps,更是一种态度!</p>
<h4 id="ThoughtWorks"><a href="#ThoughtWorks" class="headerlink" title="ThoughtWorks"></a>ThoughtWorks</h4><p>微信号：ThoughtWorks</p>
<p>功能介绍：最新技术雷达/各类技术干货/精选职位招聘/精彩活动预告/经典案例故事,就在ThoughtWorks.</p>
<h3 id="人文"><a href="#人文" class="headerlink" title="人文"></a>人文</h3><h4 id="不止读书"><a href="#不止读书" class="headerlink" title="不止读书"></a>不止读书</h4><p>微信号: buzhidushu</p>
<p>功能介绍: 不止读书，读书不止。推荐好书。</p>
<h4 id="伯乐在线"><a href="#伯乐在线" class="headerlink" title="伯乐在线"></a>伯乐在线</h4><p>微信号: jobbole</p>
<p>功能介绍：关注职业资讯；学习各类职业感悟、心得和经验分享，扩大职业视野；体会求职、工作和创业的历程 - 就在JobBole.com 伯乐在线</p>
<h4 id="槽边往事"><a href="#槽边往事" class="headerlink" title="槽边往事"></a>槽边往事</h4><p>微信号: bitsea</p>
<p>功能介绍: 和菜头的微信Blog，用于分享各种新鲜资讯</p>
<h4 id="鬼脚七"><a href="#鬼脚七" class="headerlink" title="鬼脚七"></a>鬼脚七</h4><p>微信号: taobaoguijiaoqi</p>
<p>功能介绍: 鬼脚七，真名文德，自媒体人。做自己，爱生活！</p>
<h4 id="懒人在思考"><a href="#懒人在思考" class="headerlink" title="懒人在思考"></a>懒人在思考</h4><p>微信号：lazy-thought</p>
<p>功能介绍：以黑客那种邪气看待世界.而你,务必保持自己的独立思维. By 余弦</p>
<h4 id="老鹰说"><a href="#老鹰说" class="headerlink" title="老鹰说"></a>老鹰说</h4><p>微信号：joeytalks</p>
<p>功能介绍：创业就是典当灵魂,成功者才能将灵魂赎回.老鹰在这里与你分享赎回灵魂路上的点点滴滴.</p>
<h4 id="连岳"><a href="#连岳" class="headerlink" title="连岳"></a>连岳</h4><p>微信号：ilianyue</p>
<p>功能介绍：连岳文字，当今中国最活跃的专栏作家之一,著名专栏《我爱问连岳》</p>
<h4 id="罗辑思维"><a href="#罗辑思维" class="headerlink" title="罗辑思维"></a>罗辑思维</h4><p>微信号：luojisw</p>
<p>功能介绍：罗胖每天早上60秒语音,用文字回复语音中的关键词可阅读文章.</p>
<h4 id="MacTalk"><a href="#MacTalk" class="headerlink" title="MacTalk"></a>MacTalk</h4><p>微信号：sagacity-mac</p>
<p>功能介绍：MacTalk 开通于2012年末,内容起于 Mac 而不止 Mac,内容覆盖了技术、创业、产品和人文思考.文风有趣,又有一点力量.相关图书《MacTalk·人生元编程》《MacTalk·跨越边界》</p>
<h4 id="厉哥——虚拟机"><a href="#厉哥——虚拟机" class="headerlink" title="厉哥——虚拟机"></a>厉哥——虚拟机</h4><p>微信号：mintshow</p>
<p>功能介绍：毫无悬念最值得关注的账号.世界上牛人有无数,而厉哥只有一个.</p>
<h4 id="三表龙门阵"><a href="#三表龙门阵" class="headerlink" title="三表龙门阵"></a>三表龙门阵</h4><p>微信号：sanbiao1984</p>
<p>功能介绍：负责吐槽一切!互联网大喷壶,大嘴善喷喷天下可喷之事!</p>
<h4 id="神秘的程序员们"><a href="#神秘的程序员们" class="headerlink" title="神秘的程序员们"></a>神秘的程序员们</h4><p>微信号：coderstory</p>
<p>功能介绍：作为一个程序员星人,在地球上工作生活时,你是否会感到孤独呢? 这里有来自程序员母星的亲切问候和地球漫游指南.国内首部以程序员文化、技术主题、项目管理及互联网创业的为主题漫画,诞生于09年.主创:西乔、…</p>
<h4 id="Tiny4Voice"><a href="#Tiny4Voice" class="headerlink" title="Tiny4Voice"></a>Tiny4Voice</h4><p>微信号：tiny4voice</p>
<p>功能介绍：一天一条来自 Tinyfool 的语音鸡汤,暖胃暖心,让我们一起在漫漫长夜里面默默前行,在死之前,没有终点,不会停歇.</p>
<h4 id="图灵访谈"><a href="#图灵访谈" class="headerlink" title="图灵访谈"></a>图灵访谈</h4><p>微信号：ituring_interview</p>
<p>功能介绍：对话国外知名技术作者,讲述国内码农精彩人生.你听得见他们,他们也听得见你.</p>
<h4 id="图灵教育"><a href="#图灵教育" class="headerlink" title="图灵教育"></a>图灵教育</h4><p>微信号：turingbooks</p>
<p>功能介绍：是好书,把我们联系在一起</p>
<h4 id="歪理邪说"><a href="#歪理邪说" class="headerlink" title="歪理邪说"></a>歪理邪说</h4><p>微信号：wxieshuo</p>
<p>功能介绍：一切关于未来的故事在实现之前都是歪理邪说.</p>
<h4 id="我和世界之间"><a href="#我和世界之间" class="headerlink" title="我和世界之间"></a>我和世界之间</h4><p>微信号：between_world_and_me</p>
<p>功能介绍：更有品位 · 更有智慧 Better Taste · Wiser Life</p>
<h4 id="小道消息"><a href="#小道消息" class="headerlink" title="小道消息"></a>小道消息</h4><p>微信号：WebNotes</p>
<p>功能介绍：在这里,我想为你呈现一副中国互联网的清明上河图.冯大辉,丁香园技术产品负责人.</p>
<h4 id="余晟以为"><a href="#余晟以为" class="headerlink" title="余晟以为"></a>余晟以为</h4><p>微信号：yurii-says</p>
<p>功能介绍：我是这么以为的,当然你也可以那么以为</p>
<h3 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h3><h4 id="桂辉最久"><a href="#桂辉最久" class="headerlink" title="桂辉最久"></a>桂辉最久</h4><p>微信号: queendrunk</p>
<p>功能介绍: 原创+精选的科技类账号，干货分享TMT领域的行业热点、产品设计、大数据、市场趋势、商业模式、创业的深度分析和经典案例。第一大自媒体联盟WeMedia成员。</p>
<h4 id="InfoQ"><a href="#InfoQ" class="headerlink" title="InfoQ"></a>InfoQ</h4><p>微信号: infoqchina</p>
<p>功能介绍: 有内容的技术社区媒体</p>
<h4 id="极客公园"><a href="#极客公园" class="headerlink" title="极客公园"></a>极客公园</h4><p>微信号: geekpark</p>
<p>功能介绍: 科技创新者的大本营。汇聚优秀的产品报道、评测视频和高质量的线下活动。</p>
<h4 id="极客邦科技Geekbang"><a href="#极客邦科技Geekbang" class="headerlink" title="极客邦科技Geekbang"></a>极客邦科技Geekbang</h4><p>微信号: geekbang01</p>
<p>功能介绍: 极客邦科技是一家IT技术学习服务综合提供商，使命是帮助技术人和企业成长，旗下运营InfoQ技术媒体、EGO社交网络、StuQ在线教育、GIT企业培训等四大业务品牌，通过帮助技术人成长来推动企业发展。</p>
<h4 id="可能吧"><a href="#可能吧" class="headerlink" title="可能吧"></a>可能吧</h4><p>微信号: knbknb</p>
<p>功能介绍: 「可能吧」是一个诞生于2007年的博客，在2009年获得搜狐 IT 新闻奖、2010年获得德国之声最佳中文博客奖之后，因为众所周知的原因无法在中国访问。现在，它以另一种姿态存在。「可能吧」更新频率不高，文章一般不怎么客观，请谨慎关注。</p>
<h4 id="PingWest中文网"><a href="#PingWest中文网" class="headerlink" title="PingWest中文网"></a>PingWest中文网</h4><p>微信号：wepingwest</p>
<p>功能介绍：有品好玩的科技,一切与你有关。科技博客PingWest中文网(pingwest.com)</p>
<h4 id="商业价值"><a href="#商业价值" class="headerlink" title="商业价值"></a>商业价值</h4><p>微信号：bvmagazine</p>
<p>功能介绍：中国最好的技术商业杂志,关注更创新,更智慧,更可持续的商业,专为变革者打造.</p>
<h4 id="深圳湾"><a href="#深圳湾" class="headerlink" title="深圳湾"></a>深圳湾</h4><p>微信号：shenzhenware</p>
<p>功能介绍：深圳湾(ShenzhenWare)关注软件、硬件、以及软硬结合的生态系统.</p>
<h4 id="100offer说"><a href="#100offer说" class="headerlink" title="100offer说"></a>100offer说</h4><p>微信号：shuo100offer</p>
<p>功能介绍：有关互联网人才流动和发展,我们触摸得到真实客观的跳槽数据,我们感受得到有血有肉的故事.我们在观察,我们也在思考,我们在这里「说」</p>
<h4 id="36氪"><a href="#36氪" class="headerlink" title="36氪"></a>36氪</h4><p>微信号：wow36kr</p>
<p>功能介绍：36氪(36kr.com)是中国最具影响力的互联网创投媒体,提供最新锐最具深度的商业报道.我们强调趋势与价值,我们的slogan是:让一部分人先看到未来.</p>
<a id="more"></a>


]]></content>
      <tags>
        <tag>公众号</tag>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C Method Swizzle</title>
    <url>/2016/10/26/Objective-C-Method-Swizzle/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Method Swizzle（方法调配、方法混合、方法调和、方法混写） 是 Objective-C 运行时的黑魔法之一。我们可以通过 Swizzle 的手段，在运行时对某些方法的实现进行替换，这是 Objective-C 甚至说 Cocoa 开发中最为华丽，同时也是最为危险的技巧之一。Swizzle 使用了 Objective-C 的动态派发，对于 NSObject 的子类是可以直接使用的。</p>
<p>通过此方案，可以为那些『完全不知道其具体实现的』黑盒方法增加日志记录功能，这非常有助于程序调试。然而，次做法只在调试程序时有用。很少有人在调试程序之外的场合用上述『Method Swillze』来永久改动某个类的功能。不能仅仅因为Objective-C 语言里有这个特性就一定要用它。若是滥用，反而会令代码变得不易读懂且难于维护。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><script src="https://gist.github.com/chaoskyx/4758787cda11d473c2abdf3ef5c63d67.js"></script>

<h2 id="示例demo"><a href="#示例demo" class="headerlink" title="示例demo"></a>示例demo</h2><p>demo 中实现了通过 Swizzle 的方式统计应用内所有按钮的点击次数。</p>
<p>代码下载地址：<a href="https://github.com/chaoskyx/Demo/tree/master/SwizzleDemo" target="_blank" rel="noopener">https://github.com/chaoskyx/Demo/tree/master/SwizzleDemo</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Runtime</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 持续集成</title>
    <url>/2016/09/26/Continuous-Integration/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>持续集成主要有两大好处：一是省去手动构建部署的繁琐，二是每一个提交都有自动跑测试保证质量。</p>
<p>本文主要介绍两大持续集成工具：TravisCI 和 Jenkins。</p>
<h2 id="TravisCI"><a href="#TravisCI" class="headerlink" title="TravisCI"></a>TravisCI</h2><p>Travis CI 可以和 Github 无缝集成，每次push都可以触发相应的操作，跑测试、自动部署都能完成。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>TravisCI</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>地下城堡2：黑暗觉醒</title>
    <url>/2016/10/24/dungeon2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="地下城堡2：黑暗觉醒转职一览表"><a href="#地下城堡2：黑暗觉醒转职一览表" class="headerlink" title="地下城堡2：黑暗觉醒转职一览表"></a>地下城堡2：黑暗觉醒转职一览表</h2><p><img src="http://file.blog.chaosky.tech/2016-10-24-%E5%9C%B0%E4%B8%8B%E5%9F%8E%E5%A0%A12%EF%BC%9A%E9%BB%91%E6%9A%97%E8%A7%89%E9%86%92%E8%BD%AC%E8%81%8C%E4%B8%80%E8%A7%88%E8%A1%A8.png" alt="地下城堡2：黑暗觉醒转职一览表"></p>
]]></content>
      <categories>
        <category>玩游戏</category>
      </categories>
      <tags>
        <tag>地下城堡2</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 R 进行数据分析</title>
    <url>/2016/11/07/Data-Analysis-With-R/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="macOS-上搭建-R-开发环境"><a href="#macOS-上搭建-R-开发环境" class="headerlink" title="macOS 上搭建 R 开发环境"></a>macOS 上搭建 R 开发环境</h2><p>R 语言官方网站：<a href="https://www.r-project.org" target="_blank" rel="noopener">https://www.r-project.org</a></p>
<p>RStudio 官方网站：<a href="https://www.rstudio.com" target="_blank" rel="noopener">https://www.rstudio.com</a></p>
<p>RStudio 是 R 语言的IDE。</p>
<h3 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h3><ol>
<li><p>安装 XQuartz</p>
<p>下载地址：<a href="https://www.xquartz.org" target="_blank" rel="noopener">https://www.xquartz.org</a></p>
</li>
<li><p>安装 R</p>
<p>下载地址：<a href="https://cran.r-project.org" target="_blank" rel="noopener">https://cran.r-project.org</a></p>
</li>
<li><p>安装 RStudio</p>
<p>下载地址：<a href="https://www.rstudio.com/products/rstudio/download/" target="_blank" rel="noopener">https://www.rstudio.com/products/rstudio/download/</a></p>
</li>
</ol>
<h3 id="命令行安装"><a href="#命令行安装" class="headerlink" title="命令行安装"></a>命令行安装</h3><ol>
<li><p>安装 Homebrew</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="line">brew tap caskroom/cask</span><br><span class="line">brew install brew-cask</span><br><span class="line">brew update &amp;&amp; brew<span class="built_in"> upgrade </span>brew-cask &amp;&amp; brew cleanup &amp;&amp; brew cask cleanup</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 R 开发工具</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span>cask install xquartz</span><br><span class="line"><span class="keyword">brew </span>tap homebrew/science</span><br><span class="line"><span class="keyword">brew </span>install R</span><br><span class="line"><span class="keyword">brew </span>cask install rstudio</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>Cydia 源 和 插件</title>
    <url>/2016/12/07/Cydia-Sources-and-Tweaks/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Cydia-源"><a href="#Cydia-源" class="headerlink" title="Cydia 源"></a>Cydia 源</h2><ol>
<li>JBnow Repo <a href="http://repo.jbnow.me/" target="_blank" rel="noopener">http://repo.jbnow.me/</a></li>
<li>BigBoss Repo <a href="http://apt.thebigboss.org/repofiles/cydia/" target="_blank" rel="noopener">http://apt.thebigboss.org/repofiles/cydia/</a></li>
<li>ModMyi Repo <a href="http://apt.modmyi.com/" target="_blank" rel="noopener">http://apt.modmyi.com/</a></li>
<li>BiteYourApple Repo <a href="http://repo.biteyourapple.net/" target="_blank" rel="noopener">http://repo.biteyourapple.net/</a></li>
<li>filippoBiga <a href="http://filippobiga.me/repo/" target="_blank" rel="noopener">http://filippobiga.me/repo/</a></li>
<li>SINful iPhone Rep <a href="http://sinfuliphonerepo.com/" target="_blank" rel="noopener">http://sinfuliphonerepo.com/</a> </li>
<li>ihacksrepo <a href="http://ihacksrepo.com/" target="_blank" rel="noopener">http://ihacksrepo.com/</a></li>
<li>iNsanelyi Repo <a href="http://repo.insanelyi.com" target="_blank" rel="noopener">http://repo.insanelyi.com</a></li>
<li>iHackStore Repo <a href="http://ihackstore.com/repo" target="_blank" rel="noopener">http://ihackstore.com/repo</a></li>
<li>SinfuliPhone Repo <a href="http://sinfuliphonerepo.com/" target="_blank" rel="noopener">http://sinfuliphonerepo.com/</a></li>
<li>iPhoneCake Repo <a href="http://cydia.iphonecake.com" target="_blank" rel="noopener">http://cydia.iphonecake.com</a></li>
<li>威锋源 <a href="http://apt.so/" target="_blank" rel="noopener">http://apt.so/</a></li>
<li>PP助手源 <a href="http://apt.25pp.com/" target="_blank" rel="noopener">http://apt.25pp.com/</a></li>
<li>IAPCrazy <a href="http://apt.youyuanapp.com" target="_blank" rel="noopener">http://apt.youyuanapp.com</a></li>
<li>小白源 <a href="http://apt.xbyy.cn" target="_blank" rel="noopener">http://apt.xbyy.cn</a></li>
</ol>
<a id="more"></a>

<h2 id="100-免费的越狱插件"><a href="#100-免费的越狱插件" class="headerlink" title="100 免费的越狱插件"></a>100 免费的越狱插件</h2><ul>
<li>20 Second Lockscreen</li>
<li>3DNoLag</li>
<li>DeleteForever</li>
<li>Alkaline</li>
<li>AlwaysMore For Spotlight</li>
<li>Appendix</li>
<li>Apple File Conduit “2”</li>
<li>Cuttlefish</li>
<li>Bars</li>
<li>BerryC8</li>
<li>BetterFiveColumnHomescreen</li>
<li>BetterFiveIconDock</li>
<li>Bloard</li>
<li>BlurryBadges</li>
<li>Cream</li>
<li>BreadcrumbsAway</li>
<li>Browser Changer</li>
<li>BytaFont 3</li>
<li>CCDeseparator</li>
<li>CCColor</li>
<li>CCloader</li>
<li>CCMeters</li>
<li>CCircle</li>
<li>CircleIcons</li>
<li>CCBackground</li>
<li>Cylinder</li>
<li>DetailedBatteryUsage</li>
<li>Ethos</li>
<li>FaceDown</li>
<li>CCSettings</li>
<li>FlatSafariURL</li>
<li>GlowBadge</li>
<li>Goodges</li>
<li>GrabberApp8</li>
<li>HotDog</li>
<li>IconBounce</li>
<li>Incognito Messages</li>
<li>Instabetter</li>
<li>Activator</li>
<li>LockGlyph</li>
<li>MTerminal</li>
<li>Messages Customiser</li>
<li>MinimalHUD</li>
<li>Mobius</li>
<li>SpotlightBeGone</li>
<li>MultiIconMover</li>
<li>NCReveal9</li>
<li>NCIfNeeded</li>
<li>NoAppStoreRedirect</li>
<li>PM, Really?</li>
<li>PhoneAppNoFav</li>
<li>RePower</li>
<li>PowerTap</li>
<li>PriorityHUB</li>
<li>PullToRespring</li>
<li>SafariTabCount</li>
<li>SafariCloseAllTabs</li>
<li>SmoothCursor</li>
<li>Speed Intensifier</li>
<li>RomanPasscode</li>
<li>SendDelay</li>
<li>StatusBarColor</li>
<li>StatusBarTimer</li>
<li>StatusModifier</li>
<li>ReturnToSender</li>
<li>RoundDock</li>
<li>SwipeSelection</li>
<li>SwipeForMore</li>
<li>Tactful</li>
<li>VintageSwitcher</li>
<li>Zeppelin</li>
<li>Folder6Plus</li>
<li>FullFolder9</li>
<li>IconArt</li>
<li>AppColorClose</li>
<li>Floater</li>
<li>FlashRing</li>
<li>IconRenamer</li>
<li>NCColor</li>
<li>Tintch</li>
<li>Record ‘n Torch</li>
<li>TapTapFlip</li>
<li>Wink</li>
<li>TransparentDock</li>
<li>Unlock Sound</li>
<li>BottomBar</li>
<li>Cask</li>
<li>SwipyFolders</li>
<li>iCleaner</li>
<li>SafariRefresh</li>
<li>SpinSettings</li>
<li>KeyboardVibrate8</li>
<li>Harbor</li>
</ul>
<h2 id="开发必备越狱插件"><a href="#开发必备越狱插件" class="headerlink" title="开发必备越狱插件"></a>开发必备越狱插件</h2><ul>
<li><strong>Apple File Conduit “2”</strong>: allow full file-system access over USB</li>
<li><strong>AppList</strong>: Allow extensions to read the list of installed apps</li>
<li><strong>Appsync</strong>: Appsync 允许安装AppStore 以外的应用到设备的补丁。</li>
<li><strong>Cydia Substrate</strong>: powerful code insertion platform</li>
<li><strong>Flipboard FLEX Loader</strong>: dynamically loads Flipboard Explorer into apps</li>
<li><strong>IAPCrazy</strong>: 内购神器</li>
<li><strong>iFile</strong>: 文件管理器</li>
<li><strong>tsProtector 8+(iOS 9 &amp; 8)</strong>: protect system from subspicious apps</li>
<li><strong>Cycript</strong>: runtime execution server and disassembler</li>
<li><strong>Reveal Loader</strong>: dynamically loads Reveal into applications</li>
<li><strong>OpenSSH</strong>: secure remote access between machines</li>
<li><strong>MTerminal</strong>: 终端</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Jailbreak</tag>
        <tag>Cydia</tag>
      </tags>
  </entry>
  <entry>
    <title>非官方iOS9.2-iOS9.3.3越狱图文教程</title>
    <url>/2016/12/07/Jailbreak-Using-Pangu-and-Cydia-Impactor/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本越狱教程在 Windows 和 Mac 上都可以。</p>
<h2 id="越狱前须知"><a href="#越狱前须知" class="headerlink" title="越狱前须知"></a>越狱前须知</h2><ol>
<li>备份，备份，备份</li>
<li>支持设备: iPhone 5s iPhone 6 iPhone 6+ iPhone 6s iPhone 6s+ iPhone 5E iPod Touch 6G iPad Mini 2 iPad Mini 3 iPad Mini 4 iPad Air iPad Air 2 iPad Pro</li>
<li>支持固件版本：iOS9.2 ~ iOS9.3.3</li>
<li>电脑或者 Mac 安装iTunes，保证设备电量充足</li>
</ol>
<a id="more"></a>

<h2 id="越狱步骤"><a href="#越狱步骤" class="headerlink" title="越狱步骤"></a>越狱步骤</h2><h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><p>下载最新版的盘古越狱 IPA 文件。下载地址：<a href="http://www.iclarified.com/files/pangu/NvwaStone_1.0.ipa" target="_blank" rel="noopener">http://www.iclarified.com/files/pangu/NvwaStone_1.0.ipa</a></p>
<p>下载 Cydia Impactor。下载地址：<a href="http://www.cydiaimpactor.com" target="_blank" rel="noopener">http://www.cydiaimpactor.com</a></p>
<p>Mac</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268035-640.jpg" alt="268035-640"></p>
<p>Windows</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268173.jpg" alt="268173"></p>
<h3 id="安装-Impactor"><a href="#安装-Impactor" class="headerlink" title="安装 Impactor"></a>安装 Impactor</h3><p>Mac：双击 Impactor dmg 安装</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268041.jpg" alt="268041"></p>
<p>Windows: 解压缩 Impactor zip</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268176.jpg" alt="268176"></p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268178.jpg" alt="268178"></p>
<h3 id="运行-Impactor-并-连接-iPhone"><a href="#运行-Impactor-并-连接-iPhone" class="headerlink" title="运行 Impactor 并 连接 iPhone"></a>运行 Impactor 并 连接 iPhone</h3><p><img src="http://file.blog.chaosky.tech/2016-12-07-268050.jpg" alt="268050"></p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268053.jpg" alt="268053"></p>
<h3 id="安装-NvwaStone-IPA"><a href="#安装-NvwaStone-IPA" class="headerlink" title="安装 NvwaStone IPA"></a>安装 NvwaStone IPA</h3><p>拖拽 NvwaStone IPA 文件到 Cydia Impactor 应用中。</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268070.jpg" alt="268070"></p>
<p>拖拽进去以后，将会要求你输入 Apple ID 和 密码，用来对 IPA 文件签名并且能够运行在你的设备上。不幸的是，如果你没有开发者账号，IPA 文件签名只有7天有效，也就是只能运行7天。如果你有开发者账号 IPA 文件签名有1年。</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268059.jpg" alt="268059"></p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268062.jpg" alt="268062"></p>
<p>Cydia Impactor 将会显示一个警告给开发者：这个应用将会撤销和替换该账号已有的开发证书，这可能会影响你现在的开发工作。<br><img src="http://file.blog.chaosky.tech/2016-12-07-268065.jpg" alt="268065"></p>
<p>Cydia Impactor 将会签名 IPA 并 安装盘古越狱 APP 到你的设备上。</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268073.jpg" alt="268073"></p>
<h3 id="信任开发者描述文件"><a href="#信任开发者描述文件" class="headerlink" title="信任开发者描述文件"></a>信任开发者描述文件</h3><p>盘古越狱 APP 安装到设备上后，你需要信任开发者描述文件。</p>
<p>点击【设置】——&gt; 【通用】——&gt; 【描述文件与设备管理】，找到你在 Cydia Impactor 中填写的对应邮箱地址。PS: 开发者账号不用信任即可。</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-QQ20161207-0@2x.png" alt="QQ20161207-0@2x"></p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-QQ20161207-1@2x.png" alt="QQ20161207-1@2x"></p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-QQ20161207-2@2x.png" alt="QQ20161207-2@2x"></p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268088.jpg" alt="268088"></p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268091.jpg" alt="268091"></p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268094.jpg" alt="268094"></p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268097.jpg" alt="268097"></p>
<h3 id="运行-盘古越狱-APP"><a href="#运行-盘古越狱-APP" class="headerlink" title="运行 盘古越狱 APP"></a>运行 盘古越狱 APP</h3><p>回到主界面，运行 盘古越狱 APP。</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268100.jpg" alt="268100"></p>
<p>允许通知</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268103.jpg" alt="268103"></p>
<p>点击开始按钮</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268106.jpg" alt="268106"></p>
<p>锁屏等待6秒钟，你将会收到你的设备已经越狱成功的通知。</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268112.jpg" alt="268112"></p>
<p>解锁设备，重新进入盘古越狱APP，正在准备越狱环境和安装 Cydia。</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268115.jpg" alt="268115"></p>
<p>完成后，屏幕会重启，Cydia出现在主界面上。</p>
<p><img src="http://file.blog.chaosky.tech/2016-12-07-268118.jpg" alt="268118"></p>
<h3 id="重要提示"><a href="#重要提示" class="headerlink" title="重要提示"></a>重要提示</h3><p>每次重启设备后，需要重新运行盘古越狱 APP 来恢复越狱环境。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://onlinejailbreak.com/osx" target="_blank" rel="noopener">http://onlinejailbreak.com/osx</a></li>
<li><a href="http://onlinejailbreak.com/windows" target="_blank" rel="noopener">http://onlinejailbreak.com/windows</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Jailbreak</tag>
        <tag>Cydia</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS vs Android</title>
    <url>/2016/12/30/iOS-vs-Android/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>iOS系统分为可分为四级结构，由上至下分别为可触摸层（Cocoa Touch Layer）、媒体层（Media Layer）、核心服务层（Core Services Layer）、核心系统层（Core OS Layer），每个层级提供不同的服务。低层级结构提供基础服务如文件系统、内存管理、I/O操作等。高层级结构建立在低层级结构之上提供具体服务如UI控件、文件访问等。<br><img src="http://file.blog.chaosky.tech/2016-12-30-797918-71efb73f5f3ab3c6.png" alt="797918-71efb73f5f3ab3"></p>
<h4 id="可触摸层（Cocoa-Touch-Layer）"><a href="#可触摸层（Cocoa-Touch-Layer）" class="headerlink" title="可触摸层（Cocoa Touch Layer）"></a>可触摸层（Cocoa Touch Layer）</h4><p>可触摸层主要提供用户交互相关的服务如界面控件、事件管理、通知中心、地图，包含以下框架：</p>
<ul>
<li>UIKit（界面相关）</li>
<li>EventKit（日历事件提醒等）</li>
<li>Notification Center（通知中心）</li>
<li>MapKit（地图显示）</li>
<li>Address Book（联系人）</li>
<li>iAd（广告）</li>
<li>Message UI（邮件与SMS显示）</li>
<li>PushKit（iOS8新push机制）<br><img src="http://file.blog.chaosky.tech/2016-12-30-797918-486bd1393e7d908a.jpg" alt="797918-486bd1393e7d908a"></li>
</ul>
<h4 id="媒体层（Media-Layer）"><a href="#媒体层（Media-Layer）" class="headerlink" title="媒体层（Media Layer）"></a>媒体层（Media Layer）</h4><p>媒体层主要提供图像引擎、音频引擎、视频引擎框架。</p>
<ul>
<li>图像引擎（Core Graphics、Core Image、Core Animation、OpenGL ES）</li>
<li>音频引擎 （Core Audio、 AV Foundation、OpenAL）</li>
<li>视频引擎（AV Foundation、Core Media）<br><img src="http://file.blog.chaosky.tech/2016-12-30-797918-30e2f3470787b368.jpg" alt="797918-30e2f3470787b368"></li>
</ul>
<h4 id="核心服务层（Core-Services-Layer）"><a href="#核心服务层（Core-Services-Layer）" class="headerlink" title="核心服务层（Core Services Layer）"></a>核心服务层（Core Services Layer）</h4><p>核心服务层为程序提供基础的系统服务例如网络访问、浏览器引擎、定位、文件访问、数据库访问等，主要包含以下框架：</p>
<ul>
<li>CFNetwork（网络访问）</li>
<li>Core Data（数据存储）</li>
<li>Core Location（定位功能）</li>
<li>Core Motion（重力加速度，陀螺仪）</li>
<li>Foundation（基础功能如NSString）</li>
<li>Webkit（浏览器引擎）</li>
<li>JavaScript（JavaScript引擎）<br><img src="http://file.blog.chaosky.tech/2016-12-30-797918-cc0de0f6f45ff252.jpg" alt="797918-cc0de0f6f45ff252"></li>
</ul>
<h4 id="核心系统层（Core-OS-Layer）"><a href="#核心系统层（Core-OS-Layer）" class="headerlink" title="核心系统层（Core OS Layer）"></a>核心系统层（Core OS Layer）</h4><p>核心系统层提供为上层结构提供最基础的服务如操作系统内核服务、本地认证、安全、加速等。</p>
<ul>
<li>操作系统内核服务（BSD sockets、I/O访问、内存申请、文件系统、数学计算等）</li>
<li>本地认证（指纹识别验证等）</li>
<li>安全（提供管理证书、公钥、密钥等的接口）</li>
<li>加速 (执行数学、大数字以及DSP运算,这些接口iOS设备硬件相匹配）<br><img src="http://file.blog.chaosky.tech/2016-12-30-797918-2965748e8e244c2e.jpg" alt="797918-2965748e8e244c2e"></li>
</ul>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>Andorid 大致可以分为四层结构：应用层、应用框架层、系统运行库层、Linux内核层。<br><img src="http://file.blog.chaosky.tech/2016-12-30-20140311140541765.jpeg" alt="20140311140541765"></p>
<h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>所有安装在手机上的应用程序都是属于这一层的，比如系统自带的联系人、短信等程序，或者是你从 Google Play 上下载的小游戏，当然还包括你自己开发的程序。</p>
<h4 id="应用框架层"><a href="#应用框架层" class="headerlink" title="应用框架层"></a>应用框架层</h4><p>这一层主要提供了构建应用程序时可能用到的各种 API，Android 自带的一些核心应用就是使用这些 API 完成的，开发者也可以通过使用这些 API 来构建自己的应用程序。</p>
<h4 id="系统运行库层"><a href="#系统运行库层" class="headerlink" title="系统运行库层"></a>系统运行库层</h4><p>这一层通过一些 C/C++ 库来为 Android 系统提供了主要的特性支持。如 SQLite 库提供了数据库的支持，OpenGL|ES 库提供了 3D 绘图的支持，WebKit 库提供了浏览器内核的支持等。</p>
<h4 id="Linux-内核层"><a href="#Linux-内核层" class="headerlink" title="Linux 内核层"></a>Linux 内核层</h4><p>Android 系统是基于 Linux 内核的，这一层为 Android 设备的各种硬件提供了底层的驱动，如显示驱动、音频驱动、照相机驱动、蓝牙驱动、Wi-Fi 驱动、电源管理等。</p>
]]></content>
  </entry>
  <entry>
    <title>Objective-C Block 分析</title>
    <url>/2017/08/31/Objective-C-Block/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="分析工具：clang"><a href="#分析工具：clang" class="headerlink" title="分析工具：clang"></a>分析工具：clang</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">clang -rewrite-objc test.m</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> UIKit</span><br><span class="line">clang -x objective-c -rewrite-objc -isysroot <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/Platforms/i</span>PhoneSimulator.platform<span class="regexp">/Developer/</span>SDKs<span class="regexp">/iPhoneSimulator.sdk xxxxx.m</span></span><br></pre></td></tr></table></figure>

<h2 id="block-的数据结构定义"><a href="#block-的数据结构定义" class="headerlink" title="block 的数据结构定义"></a>block 的数据结构定义</h2><p><img src="http://blog.devtang.com/images/block-struct.jpg" alt=""></p>
<p>对应的结构体定义如下：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Block_descriptor</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> reserved;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">    <span class="keyword">void</span> (*copy)(<span class="keyword">void</span> *dst, <span class="keyword">void</span> *src);</span><br><span class="line">    <span class="keyword">void</span> (*dispose)(<span class="keyword">void</span> *);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Block_layout</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *isa;</span><br><span class="line">    <span class="keyword">int</span> flags;</span><br><span class="line">    <span class="keyword">int</span> reserved;</span><br><span class="line">    <span class="keyword">void</span> (*invoke)(<span class="keyword">void</span> *, ...);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Block_descriptor</span> *<span class="title">descriptor</span>;</span></span><br><span class="line">    <span class="comment">/* Imported variables. */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="block-的三种类型"><a href="#block-的三种类型" class="headerlink" title="block 的三种类型"></a>block 的三种类型</h2><ol>
<li>_NSConcreteGlobalBlock 全局的静态 block，不会访问任何外部变量。</li>
<li>_NSConcreteStackBlock 保存在栈中的 block，当函数返回时会被销毁。</li>
<li>_NSConcreteMallocBlock 保存在堆中的 block，当引用计数为 0 时会被销毁。</li>
</ol>
<p><img src="http://file.blog.chaosky.tech/1155481-5436194b4c0899b8.png" alt=""></p>
<p>block对变量的捕获规则：</p>
<ol>
<li><p>静态存储区的变量：例如全局变量、方法中的static变量<br> 引用，可修改。</p>
</li>
<li><p>block接受的参数<br> 传值，可修改，和一般函数的参数相同。</p>
</li>
<li><p>栈变量 (被捕获的上下文变量)<br> const，不可修改。 当block被copy后，block会对 id类型的变量产生强引用。<br> 每次执行block时,捕获到的变量都是最初的值。</p>
</li>
<li><p>栈变量 (有__block前缀)<br> 引用，可以修改。如果时id类型则不会被block retain,必须手动处理其内存管理。<br> 如果该类型是C类型变量，block被copy到heap后,该值也会被挪动到heap</p>
</li>
</ol>
<h2 id="变量的复制"><a href="#变量的复制" class="headerlink" title="变量的复制"></a>变量的复制</h2><p>对于 block 外的变量引用，block 默认是将其复制到其数据结构中来实现访问的。</p>
<p><img src="http://blog.devtang.com/images/block-capture-1.jpg" alt=""></p>
<p>对于用 __block 修饰的外部变量引用，block 是复制其引用地址来实现访问的。</p>
<p><img src="http://blog.devtang.com/images/block-capture-2.jpg" alt=""></p>
<h2 id="嵌套block"><a href="#嵌套block" class="headerlink" title="嵌套block"></a>嵌套block</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setUpModel&#123;</span><br><span class="line">    XYModel *model = [XYModel new];</span><br><span class="line"></span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    model.dataChanged = ^(<span class="built_in">NSString</span> *title) &#123;</span><br><span class="line">        __<span class="keyword">strong</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) strongSelf = weakSelf;</span><br><span class="line">        strongSelf.titleLabel.text = title;</span><br><span class="line"></span><br><span class="line">        __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf2 = strongSelf;</span><br><span class="line">        strongSelf.model.dataChanged = ^(<span class="built_in">NSString</span> *title2) &#123;</span><br><span class="line">            __<span class="keyword">strong</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) strongSelf2 = weakSelf2;</span><br><span class="line">            strongSelf2.titleLabel.text = title2;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.model = model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，就避免的引用循环，总结一下，不管都多少个block嵌套，皆按此法</p>
<h2 id="weakify-strongify-使用"><a href="#weakify-strongify-使用" class="headerlink" title="@weakify, @strongify 使用"></a>@weakify, @strongify 使用</h2><script src="https://gist.github.com/chaoskyx/041628148019749e13f49756010eea94.js"></script>

<ol>
<li><p>weakify(self)展开后是: *<em>weak typeof(self) *</em>weak_self = self;</p>
</li>
<li><p>strongify(self)展开后是：*<em>strong typeof(self) self = *</em>weak_self;</p>
</li>
<li><p>在block中使用strongify(self);的目的是确保在block作用域内self不会被其它线程释放掉</p>
</li>
<li><p>以前我们在block中直接使用__weak_self来解除循环引用。这本身没有问题，之所以还要加strongify(self)就是为了避免block中代码执行过程中由于其它线程释放了self导致block内执行的逻辑出现问题。例如：会出现执行前几句代码时访问self还是存在的，但后面的self调用已经变为nil了</p>
</li>
<li><p>如果是在block外部定义strongify(self)虽然在block中的self还是指向(跳转到定义)这个strongify(self)。但因为方法调用结束后strongify(self)定义的局部self变量被释放了，所以这种做法就回退到了[4]</p>
</li>
<li><p>由5可知，如果block中有多个嵌套的block异步调用，那么每一个block中都要再定义一个strongify(self);</p>
</li>
<li><p>虽然在多层嵌套的block中，定义weakify(self)也是可行的。但是不推荐这么做</p>
</li>
<li><p>swift中使用unowned和weak来解决循环引用问题，基本原理同OC。但unowned本质上是__unsafe_unretained即assign，所以使用起来要小心野指针。还是推荐无脑用weak</p>
</li>
<li><p>不过要达到[3]中的效果，就要在当前closure的作用域内retain下self，只不过有个小麻烦是没法像OC中写的那么自然——不能使用self了。例子如下：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">obj.doSomething</span> &#123;[weak <span class="keyword">self] </span>in</span><br><span class="line">  <span class="meta">if</span> let <span class="keyword">strong_self </span>= <span class="keyword">self </span>&#123;</span><br><span class="line">      <span class="keyword">strong_self.Member_XXX</span></span><br><span class="line"><span class="keyword"> </span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>总结：多层嵌套的block，只需要对最外层block传入的<code>self</code>进行weak化即可。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><a href="http://blog.devtang.com/2013/07/28/a-look-inside-blocks/" target="_blank" rel="noopener">谈Objective-C block的实现</a></li>
<li><a href="https://www.zybuluo.com/MicroCai/note/51116" target="_blank" rel="noopener"> block没那么难（一）：block的实现</a></li>
<li><a href="https://www.zybuluo.com/MicroCai/note/57603" target="_blank" rel="noopener"> block没那么难（二）：block和变量的内存管理</a></li>
<li><a href="https://www.zybuluo.com/MicroCai/note/58470" target="_blank" rel="noopener"> block没那么难（三）：block和对象的内存管理</a></li>
<li><a href="http://www.jianshu.com/p/ee9756f3d5f6#" target="_blank" rel="noopener">深入研究Block捕获外部变量和__block实现原理</a></li>
<li><a href="http://www.jianshu.com/p/701da54bd78c" target="_blank" rel="noopener">深入研究Block用weakSelf、strongSelf、@weakify、@strongify解决循环引用</a></li>
<li><a href="http://draveness.me/block-retain-object.html" target="_blank" rel="noopener">iOS 中的 block 是如何持有对象的</a></li>
<li><a href="http://blog.ibireme.com/2013/11/27/objc-block/" target="_blank" rel="noopener">objc 中的 block</a></li>
<li><a href="http://www.90159.com/2015/08/04/ios-block-ultimate/" target="_blank" rel="noopener">iOS开发之block终极篇</a></li>
<li><a href="http://www.wangjiawen.com/ios/ios-block-usage-and-implementation" target="_blank" rel="noopener">iOS Block用法和实现原理</a></li>
<li><a href="http://www.cnblogs.com/iOS-mt/p/4227336.html" target="_blank" rel="noopener">OC高级编程——深入block，如何捕获变量，如何存储在堆上</a></li>
<li><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/" target="_blank" rel="noopener">A look inside blocks: Episode 1</a></li>
<li><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-2/" target="_blank" rel="noopener">A look inside blocks: Episode 2</a></li>
<li><a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/" target="_blank" rel="noopener">A look inside blocks: Episode 3</a></li>
<li><a href="http://www.cnblogs.com/biosli/archive/2013/05/29/iOS_Objective-C_Block.html" target="_blank" rel="noopener">对 Objective-C 中 Block 的追探</a></li>
<li><a href="https://opensource.apple.com/source/libclosure/libclosure-63/" target="_blank" rel="noopener">LLVM 中 block 实现源码</a></li>
<li><a href="http://blog.parse.com/2013/02/05/objective-c-blocks-quiz/" target="_blank" rel="noopener">objective-c-blocks-quiz</a></li>
<li><a href="http://fuckingclangwarnings.com" target="_blank" rel="noopener">Which Clang Warning Is Generating This Message?</a></li>
<li><a href="http://www.jianshu.com/p/bc15591784ce" target="_blank" rel="noopener">iOS 内存泄漏分析</a></li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Block</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 越狱指南</title>
    <url>/2020/05/24/jailbreak-user-guide/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="越狱软件"><a href="#越狱软件" class="headerlink" title="越狱软件"></a>越狱软件</h2><h3 id="越狱软件统计（更新日期：2020-05-24）"><a href="#越狱软件统计（更新日期：2020-05-24）" class="headerlink" title="越狱软件统计（更新日期：2020-05-24）"></a>越狱软件统计（更新日期：2020-05-24）</h3><table>
<thead>
<tr>
<th>越狱软件</th>
<th>最新版本</th>
<th>支持设备</th>
<th>支持版本</th>
<th>源码</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://unc0ver.dev" target="_blank" rel="noopener">unc0ver</a></td>
<td>5.0.0</td>
<td>A7 ~ A13</td>
<td>iOS 11.0 ~ 13.5</td>
<td><a href="https://github.com/pwn20wndstuff/Undecimus/" target="_blank" rel="noopener">https://github.com/pwn20wndstuff/Undecimus/</a></td>
</tr>
<tr>
<td><a href="https://checkra.in" target="_blank" rel="noopener">checkra1n</a></td>
<td>0.10.2 beta</td>
<td>iPhone 5s ~ iPhone X</td>
<td>iOS 12.3 ~</td>
<td>未释放</td>
</tr>
<tr>
<td><a href="https://chimera.sh" target="_blank" rel="noopener">Chimera</a></td>
<td>1.4.0</td>
<td>所有设备</td>
<td>iOS 12 ~ 12.2 and 12.4，tvOS 12 ~ 12.2 and 12.4</td>
<td><a href="https://github.com/coolstar/Chimera13" target="_blank" rel="noopener">https://github.com/coolstar/Chimera13</a></td>
</tr>
<tr>
<td><a href="https://coolstar.org/electra/" target="_blank" rel="noopener">Electra</a></td>
<td>1.3.2</td>
<td>所有设备</td>
<td>iOS 11.0 – 11.4.1</td>
<td><a href="https://github.com/coolstar/electra" target="_blank" rel="noopener">https://github.com/coolstar/electra</a></td>
</tr>
<tr>
<td><a href="https://meridian.sparkes.zone" target="_blank" rel="noopener">Meridian</a></td>
<td>v0.9-007 Pre-Release</td>
<td>所有64位设备</td>
<td>iOS 10 ~ 10.3.3</td>
<td><a href="https://github.com/PsychoTea/MeridianJB" target="_blank" rel="noopener">https://github.com/PsychoTea/MeridianJB</a></td>
</tr>
<tr>
<td><a href="https://doubleh3lix.tihmstar.net" target="_blank" rel="noopener">Doubleh3lix</a></td>
<td>RC8</td>
<td>所有64位A7 ~ A9</td>
<td>iOS 10.x</td>
<td>无</td>
</tr>
<tr>
<td><a href="https://yalu.qwertyoruiop.com" target="_blank" rel="noopener">yalu102</a></td>
<td>beta7</td>
<td>所有64位设备除了iPhone7</td>
<td>iOS 10.x</td>
<td><a href="https://github.com/kpwn/yalu102" target="_blank" rel="noopener">https://github.com/kpwn/yalu102</a></td>
</tr>
</tbody></table>
<h3 id="越狱工具"><a href="#越狱工具" class="headerlink" title="越狱工具"></a>越狱工具</h3><ul>
<li><a href="http://www.cydiaimpactor.com/" target="_blank" rel="noopener">Cydia Impactor</a><ol>
<li>Note: This method requires an Apple developer account.</li>
<li>Download <a href="http://www.cydiaimpactor.com/" target="_blank" rel="noopener">Cydia Impactor</a> for the applicable OS.</li>
<li>Extract the application file, and open it.</li>
<li>Connect your iOS device.</li>
<li>Download the latest version of unc0ver from above.</li>
<li>Drag the IPA file into the Impactor window.</li>
<li>Enter your Apple ID and password (requires developer account). (Note: If you are using two factor authentication, generate an app specific password, and use that here.)</li>
<li>On your iOS device, open Settings → General → Device Management and tap on your Apple ID.</li>
<li>Trust unc0ver.</li>
<li>Open unc0ver and jailbreak!</li>
</ol>
</li>
<li><a href="https://www.altstore.io/" target="_blank" rel="noopener">AltStore</a><ol>
<li>Download <a href="https://www.altstore.io/" target="_blank" rel="noopener">AltStore</a>. Use the link for your operating system.</li>
<li>Unzip and move AltStore to your Applications folder.</li>
<li>Launch the AltStore application.</li>
<li>Click on the AltStore icon in the Menu Bar, and then click on the Install Mail Plug-in option.</li>
<li>Open the Mail app, and click on Mail → Preferences in the menu bar.</li>
<li>Open the General tab in mail preferences, click Manage Plug-ins, check AltPlugin, and apply and restart Mail.</li>
<li>Connect your iOS device via USB.</li>
<li>Click AltStore in the menu bar, then go to Install AltStore → (Your iOS Device)</li>
<li>Login with your Apple ID when prompted and click install.</li>
<li>On your iOS device, open Settings → General → Device Management and tap on your Apple ID.</li>
<li>Trust AltStore.</li>
<li>Tap the “Open in AltStore” button located above.</li>
<li>AltStore will now install the app. Wait until it finishes.</li>
<li>Open unc0ver and jailbreak!</li>
</ol>
</li>
<li><a href="https://dantheman827.github.io/ios-app-signer/" target="_blank" rel="noopener">iOS App Signer</a><ol>
<li>Install Xcode, open it, and agree to the license agreement.</li>
<li>Plug in your iOS device and select it as the build target.</li>
<li>Open Xcode and create a new iOS Application.</li>
<li>Type a name and identifier.</li>
<li>Xcode will complain about the lack of a provisioning profile. Click fix issue.</li>
<li>Sign into an Apple ID when prompted.</li>
<li>Download <a href="https://dantheman827.github.io/ios-app-signer/" target="_blank" rel="noopener">iOS App Signer</a></li>
<li>Download the latest version of unc0ver from above.</li>
<li>Open iOS App Signer.</li>
<li>Select the ipa you just downloaded as an input file.</li>
<li>Click start.</li>
<li>Return to Xcode. Go to the menu bar. Click Window → Devices.</li>
<li>Find your device, click the plus, and select the file created by iOS App Signer.</li>
<li>Open unc0ver on your device and jailbreak!</li>
</ol>
</li>
</ul>
<h2 id="Cydia源-amp-常用软件"><a href="#Cydia源-amp-常用软件" class="headerlink" title="Cydia源&amp;常用软件"></a>Cydia源&amp;常用软件</h2><h3 id="BigBoss"><a href="#BigBoss" class="headerlink" title="BigBoss"></a>BigBoss</h3><p>源：<a href="http://apt.thebigboss.org/repofiles/cydia/" target="_blank" rel="noopener">http://apt.thebigboss.org/repofiles/cydia/</a></p>
<ul>
<li>OpenSSH</li>
<li>FLEXing</li>
<li>LookinLoader</li>
<li>LocationFakerX</li>
<li>AnyWhere!–虚拟定位</li>
</ul>
<h3 id="Binger"><a href="#Binger" class="headerlink" title="Binger"></a>Binger</h3><p>源：<a href="https://apt.bingner.com/" target="_blank" rel="noopener">https://apt.bingner.com/</a></p>
<ul>
<li>Class Dump</li>
</ul>
<h3 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h3><p>源：<a href="https://build.frida.re/" target="_blank" rel="noopener">https://build.frida.re/</a></p>
<ul>
<li>Frida</li>
</ul>
<h3 id="Chariz"><a href="#Chariz" class="headerlink" title="Chariz"></a>Chariz</h3><p>源：<a href="https://repo.chariz.com/" target="_blank" rel="noopener">https://repo.chariz.com/</a></p>
<ul>
<li>Cephei</li>
<li>NewTerm</li>
<li>QuitAll</li>
</ul>
<h3 id="TIGI-Software"><a href="#TIGI-Software" class="headerlink" title="TIGI Software"></a>TIGI Software</h3><p>源：<a href="https://tigisoftware.com/cydia/" target="_blank" rel="noopener">https://tigisoftware.com/cydia/</a></p>
<ul>
<li>Apps Manager</li>
<li>Filza File Manager</li>
</ul>
<h3 id="Matchstic"><a href="#Matchstic" class="headerlink" title="Matchstic"></a>Matchstic</h3><p>源：<a href="https://repo.incendo.ws/" target="_blank" rel="noopener">https://repo.incendo.ws/</a></p>
<ul>
<li>ReProvision</li>
</ul>
<h3 id="雷锋源"><a href="#雷锋源" class="headerlink" title="雷锋源"></a>雷锋源</h3><p>源：<a href="https://apt.abcydia.com/" target="_blank" rel="noopener">https://apt.abcydia.com/</a></p>
<ul>
<li>AppStore++ 应用降级</li>
<li>iCleaner Pro</li>
<li>NetControl 联网控制</li>
<li>Shadow 屏蔽越狱检测</li>
<li>eSim+ 双卡增强</li>
<li>FlyJB 屏蔽越狱检测</li>
<li>NtSpeed 悬浮网速</li>
<li>Filza File 文件管理器</li>
<li>CacheClearerXI 缓存清理</li>
<li>Snapper 2 智能截图</li>
<li>CarBridge 汽车互联</li>
<li>AudioRecorder XS 通话录音</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>jailbreak</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果开发者账号申请或续费</title>
    <url>/2019/12/17/Apple-Developer-Program/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="尝试支付"><a href="#尝试支付" class="headerlink" title="尝试支付"></a>尝试支付</h3><p>使用国际信用卡（Master或Visa）务必保证账单地址正确，否则会导致支付失败。</p>
<p>我使用的是招行的Visa信用卡，账单地址可以从招行的掌上生活 App 搜索账单地址可以找到。</p>
<h3 id="无法支付或支付失败"><a href="#无法支付或支付失败" class="headerlink" title="无法支付或支付失败"></a>无法支付或支付失败</h3><ul>
<li><p>周一到周五，早上9点到下午5点。</p>
</li>
<li><p>登录开发者中心，左侧，Contact Us，选择会员资格与帐户—&gt;计划购买和续订。</p>
</li>
<li><p>填电话号码，苹果客服会打电话给你。</p>
</li>
<li><p>接通10秒左右按1与技术顾问交谈，你就跟客服说，无法支付年费，让他们给解决的方法。</p>
</li>
<li><p>他们一般会让你先多尝试，你要先做一些支付失败的记录。</p>
</li>
<li><p>然后跟他们说，确实无法支付，他们就会给你两种方案其中一种，不一定是哪一种。</p>
</li>
<li><p>第一种是直接信用卡划扣，他们会问你有没有国际信用卡，Master或Visa的。</p>
<p>然后要你给卡号，过期时间，还有账单地址，给你尝试手动划扣99美金，扣成功的话，就直接成功了。</p>
</li>
<li><p>第二种是让你电汇到苹果公司的账号。<br>他们会手动帮你生成一个订单，然后要转账99美金到他们苹果美国的银行账号里。<br>然后转账附言上订单号。<br>可以使用建行，我是用这个解决的，要有U盾。<br>先购汇99美金，大概690+人民币，然后电汇需要手续费20+80，就是100块手续费。<br>大概就是800左右了。<br>电汇成功后回复邮件告诉他们已经电汇了，就行了，一般隔日账号就通过了。</p>
</li>
<li><p>以上。</p>
</li>
</ul>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ol>
<li>苹果开发者中心联系电话：<a href="https://developer.apple.com/contact/phone/cn/" target="_blank" rel="noopener">https://developer.apple.com/contact/phone/cn/</a></li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>开发者账号</tag>
      </tags>
  </entry>
  <entry>
    <title>使用自定义 Module 解决 Objective-C 库的引用</title>
    <url>/2020/08/03/cocoapods-custom-swift-module/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="LLVM-Module"><a href="#LLVM-Module" class="headerlink" title="LLVM Module"></a>LLVM Module</h2><blockquote>
<p>A module is a single unit of code distribution—a framework or application that is built and shipped as a single unit and that can be imported by another module with Swift’s import keyword.</p>
<p>Each build target (such as an app bundle or framework) in Xcode is treated as a separate module in Swift. If you group together aspects of your app’s code as a stand-alone framework—perhaps to encapsulate and reuse that code across multiple applications—then everything you define within that framework will be part of a separate module when it’s imported and used within an app, or when it’s used within another framework.</p>
<p>As the docs indicate, the module is an application or a framework (library). If you create a project with classes A and B, they are part of the same module. Any other class in the same project can inherit from those classes. If you however import that project to another project, classes from that another project won’t be able to subclass A nor B. For that you would have to add open indicator before their declarations.</p>
<p>Basically, if you work on a single app then you are working in one single module and unless declared as private or fileprivate, the classes can subclass each other.</p>
</blockquote>
<h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>Module 是一种集成库的方式，在 Module 出现之前，开发者需要在引入库文件的同时引入需要使用的头文件，以保证编译的正常进行。但是每次引入库的时候都要导入一堆文件，看起来并不优雅。Module 和 Framework 的出现让开发者极大程度上告别了这些不优雅的工作。简单说就是用树形的结构化描述来取代以往的平坦式 <code>#include</code>， 例如传统的 <code>#include &lt;stdio.h&gt;</code> 现在变成了 <code>import std.io</code>。</p>
<p>主要好处有：</p>
<ol>
<li>语义上完整描述了一个框架的作用</li>
<li>提高编译时可扩展性，只编译或 include 一次。避免头文件多次引用，只解析一次头文件甚至不需要解析（类似预编译头文件）</li>
<li>减少碎片化，每个 module 只处理一次，环境的变化不会导致不一致</li>
<li>对工具友好，工具（语言编译器）可以获取更多关于 module 的信息，比如链接库，比如语言是 C++ 还是 C</li>
</ol>
<h3 id="modulemap-文件"><a href="#modulemap-文件" class="headerlink" title="modulemap 文件"></a>modulemap 文件</h3><p>module.map 文件就是对一个框架，一个库的所有头文件的结构化描述。通过这个描述，桥接了新语言特性和老的头文件。默认文件名是 module.modulemap，modulemap 其实是为了兼容老标准，不过现在 Xcode 里的还都是这个文件名，相信以后会改成新名字。</p>
<p>文件的内容以 Module Map Language 描述，大概语法如下：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> MyLib &#123;</span><br><span class="line">  explicit <span class="keyword">module</span> A &#123;</span><br><span class="line">    header <span class="string">"A.h"</span></span><br><span class="line">    export *</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  explicit <span class="keyword">module</span> B &#123;</span><br><span class="line">    header <span class="string">"B.h"</span></span><br><span class="line">    export *</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类似上面的语法，描述了 MyLib、MyLib.A、MyLib.B 这样的模块结构。</p>
<p>官方文档中有更多相关内容，可以描述框架，描述系统头文件，控制导出的范围，描述依赖关系，链接参数等等。这里不多叙述，举个 libcurl 的例子：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> curl [system] [extern_c] &#123;</span><br><span class="line">    header <span class="string">"/usr/include/curl/curl.h"</span></span><br><span class="line">    link <span class="string">"curl"</span>    </span><br><span class="line">    export *</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将此 modulemap 文件放入任意文件夹，通过 Xcode 选项或者命令行参数，添加路径到 import search path （swift 的 -I 参数）。 然后就可以在 Swift 代码里直接通过 import curl 导入所有的接口函数、结构体、常量等。</p>
<p>Xcode 选项位于 Build Settings 下面的 Swift Compiler - Search Paths 。添加路劲即可。</p>
<p>每个Module中必须包涵一个umbrella头文件，这个文件用来import所有这个Module下的文件。</p>
<p>大致关系为：import module -&gt; import umbrella header -&gt; other header</p>
<p>使用 Module 库的调用方式：</p>
<table>
<thead>
<tr>
<th>项目类型</th>
<th>OC库(GDTPackage)</th>
<th>Swift库(GDTPackage)</th>
</tr>
</thead>
<tbody><tr>
<td>OC 项目</td>
<td>#import &lt;GDTPackage/GDTPackage.h&gt;</td>
<td>#import &lt;GDTPackage-Swift.h&gt;</td>
</tr>
<tr>
<td>Swift 项目</td>
<td>import GDTPackage</td>
<td>import GDTPackage</td>
</tr>
</tbody></table>
<p><code>GDTPackage.h</code> 其实就是 <code>umbrella header/master header</code>。</p>
<h2 id="CocoaPods-自定义-Module"><a href="#CocoaPods-自定义-Module" class="headerlink" title="CocoaPods 自定义 Module"></a>CocoaPods 自定义 Module</h2><p>我们以桥接 GDTMobSDK 为例。</p>
<h3 id="创建-GDTPackage-库"><a href="#创建-GDTPackage-库" class="headerlink" title="创建 GDTPackage 库"></a>创建 GDTPackage 库</h3><p>通过 CocoaPods 提供的命令行创建库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pod lib create GDTPackage</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-module-modulemap-和-BridgeHeader-h"><a href="#创建-module-modulemap-和-BridgeHeader-h" class="headerlink" title="创建 module.modulemap 和 BridgeHeader.h"></a>创建 module.modulemap 和 BridgeHeader.h</h3><p>在项目中新建 <code>module.modulemap</code> 和 <code>BridgeHeader.h</code>，将它们放在同一个文件夹下 <code>GDTPackage/Module</code>。</p>
<p><code>module.modulemap</code> 代码如下：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> GDTPackageBridge &#123;</span><br><span class="line">    header <span class="string">"BridgeHeader.h"</span></span><br><span class="line">    export *</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>BridgeHeader.h</code> 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;GDTMobSDK&#x2F;GDTMobBannerView.h&gt;</span><br><span class="line">#import &lt;GDTMobSDK&#x2F;GDTRewardVideoAd.h&gt;</span><br><span class="line">#import &lt;GDTMobSDK&#x2F;GDTNativeExpressAd.h&gt;</span><br><span class="line">#import &lt;GDTMobSDK&#x2F;GDTNativeExpressAdView.h&gt;</span><br><span class="line">#import &lt;GDTMobSDK&#x2F;GDTMobInterstitial.h&gt;</span><br><span class="line">#import &lt;GDTMobSDK&#x2F;GDTSplashAd.h&gt;</span><br></pre></td></tr></table></figure>

<p><code>GDTPackage.podspec</code> 部分代码：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  s.static_framework = <span class="literal">true</span></span><br><span class="line">  s.source_files = <span class="string">'GDTPackage/Classes/**/*'</span></span><br><span class="line">  </span><br><span class="line">  s.preserve_paths = [<span class="string">'GDTPackage/Module/module.modulemap'</span>, <span class="string">'GDTPackage/Module/BridgeHeader.h'</span>]</span><br><span class="line">  s.pod_target_xcconfig = &#123;</span><br><span class="line">    <span class="comment"># 路径根据实际情况进行引用，必须保证路径是正确的</span></span><br><span class="line">    <span class="string">'SWIFT_INCLUDE_PATHS'</span> =&gt; [<span class="string">'$(PODS_ROOT)/GDTPackage/Module'</span>, <span class="string">'$(PODS_TARGET_SRCROOT)/GDTPackage/Module'</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  s.dependency <span class="string">'GDTMobSDK'</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="代码中引用-GDTPackageBridge"><a href="#代码中引用-GDTPackageBridge" class="headerlink" title="代码中引用 GDTPackageBridge"></a>代码中引用 GDTPackageBridge</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> GDTPackageBridge</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GDTPackage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">GDTSplashAd</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li><p>如果已经在 <code>preserve_paths</code> 添加了 <code>modulemap</code> 和 <code>header</code>，可以不用在 <code>source_files</code> 里再加一遍，如果要在 <code>source_files</code> 里加也可以，记得指定 <code>public_header_files</code>。如果没有指定，你自己创建的 <code>modulemap</code> 也会当做 <code>public</code> 处理。这样 <code>lint</code> 的时候会报 <code>Include of non-modular header inside framework module</code>。</p>
</li>
<li><p><code>lint</code> 时遇到 <code>Include of non-modular header inside framework module</code> 错误，可以在后面添加 <code>--use-libraries</code>。虽然能验证和上传通过，但是其他项目引用的时候还是会有问题。</p>
</li>
<li><p><code>user_target_xcconfig</code> 是针对所有 <code>Pod</code> 的，可能和其他 <code>Pod</code> 存在冲突。<code>pod_target_xcconfig</code> 是针对当前 <code>Pod</code> 的。</p>
</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="http://clang.llvm.org/docs/Modules.html" target="_blank" rel="noopener">Modules - Clang 12 documentation</a></li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>Objective-C</tag>
        <tag>CocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 中函数的引用以及导致的循环引用场景</title>
    <url>/2020/05/01/Function-references-in-Swift-and-retain-cycles/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Swift 的函数作为一等公民，可以赋值给变量，柯里化，也可以作为参数传递（如果将函数作为参数传递给闭包，只要类型匹配，就可以将函数引用代替内联闭包）。我们可以将函数当作带有名称的特殊闭包，但是使用的时候需要当心。</p>
<h2 id="0x01-问题"><a href="#0x01-问题" class="headerlink" title="0x01 问题"></a>0x01 问题</h2><p>最近遇到一个在 Swift 中将函数作为参数传递给闭包时，导致循环引用的场景。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> commandHandler: () -&gt; <span class="type">Void</span> = &#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"init ClassA"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"deinit ClassA"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(commandHandler: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.commandHandler = commandHandler</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a: <span class="type">ClassA</span></span><br><span class="line">    <span class="keyword">init</span>(a: <span class="type">ClassA</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"init ClassB"</span>)</span><br><span class="line">        <span class="keyword">self</span>.a = a</span><br><span class="line">        a.handle(commandHandler: <span class="keyword">self</span>.commandAction)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"deinit ClassB"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">commandAction</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例化ClassB，这个时候就会产生循环引用导致内存泄漏。</p>
<h2 id="0x02-实例函数是柯里化类函数"><a href="#0x02-实例函数是柯里化类函数" class="headerlink" title="0x02 实例函数是柯里化类函数"></a>0x02 实例函数是柯里化类函数</h2><p>在Swift中，实例函数只是<a href="https://en.wikipedia.org/wiki/Currying" target="_blank" rel="noopener">柯里化</a>类函数，该类函数将实例作为第一个参数，并隐式地使第一个参数作为<code>self</code>可供函数体使用。 因此，以下两个是等价的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">numbers.<span class="built_in">contains</span>(<span class="number">3</span>) <span class="comment">//true</span></span><br><span class="line"><span class="type">Array</span>.<span class="built_in">contains</span>(numbers)(<span class="number">3</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>而且，这些也是等价的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> handler1 = <span class="keyword">self</span>.commandAction</span><br><span class="line"><span class="keyword">let</span> handler2 = <span class="keyword">self</span>.<span class="keyword">dynamicType</span>.commandAction(<span class="keyword">self</span>)</span><br><span class="line"><span class="keyword">let</span> handler3 = &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span> <span class="keyword">self</span>.commandAction() &#125;</span><br></pre></td></tr></table></figure>

<h2 id="0x03-可以通过泛型函数来管理内存"><a href="#0x03-可以通过泛型函数来管理内存" class="headerlink" title="0x03 可以通过泛型函数来管理内存"></a>0x03 可以通过泛型函数来管理内存</h2><p>如果我们要从上面的 <code>handler2</code> 中获取 <code>self.dynamicType.commandAction</code>，但是没有参数 <code>(self)</code>作为参数传递给了包装函数以便引用 <code>self</code>，我们改怎么办呢？ 我们可以通过<code>unowend</code>来引用，并将 <code>unowned</code> 实例引用传递给类函数获取一个实例函数，而且不会导致循环引用。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unown</span>&lt;T: AnyObject, V&gt;<span class="params">(<span class="number">_</span> instance: T, <span class="number">_</span> classFunction: @escaping <span class="params">(T)</span></span></span> -&gt; (() -&gt; <span class="type">V</span>)) -&gt; () -&gt; <span class="type">V</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; [<span class="keyword">unowned</span> instance] <span class="keyword">in</span> classFunction(instance)() &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unown</span>&lt;T: AnyObject, U, V&gt;<span class="params">(<span class="number">_</span> instance: T, <span class="number">_</span> classFunction: @escaping <span class="params">(T)</span></span></span> -&gt; ((<span class="type">U</span>) -&gt; <span class="type">V</span>)) -&gt; (<span class="type">U</span>) -&gt; <span class="type">V</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; [<span class="keyword">unowned</span> instance] <span class="keyword">in</span> classFunction(instance)($<span class="number">0</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的话，我们就可以通过以下方式来获取实例方法的引用，而且我们不会强引用<code>self</code>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> handler4 = unown(<span class="keyword">self</span>, <span class="keyword">self</span>.<span class="keyword">dynamicType</span>.commandAction)</span><br></pre></td></tr></table></figure>

<p>缺点是，函数每增加一个参数，我们就需要写一个泛型函数来管理内存。而且，由于使用的是<code>unowned</code>管理内存，如果使用不当会导致野指针访问导致崩溃。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://sveinhal.github.io/2016/03/16/retain-cycles-function-references/" target="_blank" rel="noopener">https://sveinhal.github.io/2016/03/16/retain-cycles-function-references/</a></li>
<li><a href="https://xebia.com/blog/function-references-in-swift-and-retain-cycles/" target="_blank" rel="noopener">https://xebia.com/blog/function-references-in-swift-and-retain-cycles/</a></li>
<li><a href="https://forums.swift.org/t/implicit-retain-cycle/15238" target="_blank" rel="noopener">https://forums.swift.org/t/implicit-retain-cycle/15238</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitalk 评论批量初始化</title>
    <url>/2020/08/06/gitalk-comments-batch-initialize/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>第一次使用 Gitalk 时，之前的文章的评论都需要初始化一下，如果文章多的话，挺麻烦的。不过，有些博客有提供接口获取博客上所有文章的相关信息，那其实就可以通过脚本来完成之前文章的评论初始化。下面是一些已经写好的脚本，可以直接使用或参考。</p>
<p><a href="https://github.com/gitalk/gitalk/wiki/评论初始化" target="_blank" rel="noopener">Gitalk 官方的 WiKi</a> 里记录的方法年久失修，已经不能使用，我重新整理了一份。</p>
<h3 id="获得权限"><a href="#获得权限" class="headerlink" title="获得权限"></a>获得权限</h3><p>在使用该脚本之前首先要在 GitHub 创建一个新的 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal access tokens</a>，选择 Generate new token 后，在当前的页面中为 Token 添加所有 Repo 的权限。</p>
<h3 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h3><h4 id="安装脚本依赖库"><a href="#安装脚本依赖库" class="headerlink" title="安装脚本依赖库"></a>安装脚本依赖库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gem install faraday activesupport sitemap-parser nokogiri</span></span><br></pre></td></tr></table></figure>

<h4 id="使用-sitemap-文件"><a href="#使用-sitemap-文件" class="headerlink" title="使用 sitemap 文件"></a>使用 sitemap 文件</h4><p>找到博客对应的 sitemap 文件，例如 <a href="https://chaosky.tech/sitemap.xml。">https://chaosky.tech/sitemap.xml。</a></p>
<h4 id="使用脚本"><a href="#使用脚本" class="headerlink" title="使用脚本"></a>使用脚本</h4><p>在任意目录创建 <strong>comment.rb</strong>，将下面的代码粘贴到文件中：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'open-uri'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'faraday'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'active_support'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'active_support/core_ext'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sitemap-parser'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'digest'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'nokogiri'</span></span><br><span class="line"></span><br><span class="line">username = <span class="string">"chaoskyx"</span> <span class="comment"># GitHub 用户名</span></span><br><span class="line">token = <span class="string">"xxxxxx"</span>  <span class="comment"># GitHub Token</span></span><br><span class="line">repo_name = <span class="string">"chaoskyx.github.io"</span> <span class="comment"># 存放 issues</span></span><br><span class="line">sitemap_url = <span class="string">"https://chaosky.tech/sitemap.xml"</span> <span class="comment"># sitemap</span></span><br><span class="line">kind = <span class="string">"Gitalk"</span></span><br><span class="line"></span><br><span class="line">sitemap = SitemapParser.new sitemap_url</span><br><span class="line">urls = sitemap.to_a</span><br><span class="line"></span><br><span class="line">conn = Faraday.new(<span class="symbol">:url</span> =&gt; <span class="string">"https://api.github.com/repos/<span class="subst">#&#123;username&#125;</span>/<span class="subst">#&#123;repo_name&#125;</span>/issues"</span>) <span class="keyword">do</span> <span class="params">|conn|</span></span><br><span class="line">  conn.basic_auth(username, token)</span><br><span class="line">  conn.adapter Faraday.default_adapter</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">urls.each_with_index <span class="keyword">do</span> <span class="params">|url, index|</span></span><br><span class="line">  id = Digest::MD5.hexdigest URI(url).path</span><br><span class="line">  response = conn.get <span class="keyword">do</span> <span class="params">|req|</span></span><br><span class="line">    req.params[<span class="string">"labels"</span>] = [kind, id].join(<span class="string">','</span>)</span><br><span class="line">    req.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/json'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  response_hash = JSON.load(response.body)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> response_hash.count == <span class="number">0</span></span><br><span class="line">    document = Nokogiri::HTML(open(url))</span><br><span class="line">    title = document.xpath(<span class="string">"//head/title/text()"</span>).to_s</span><br><span class="line">    desc = document.xpath(<span class="string">"//head/meta[@name='description']/@content"</span>).to_s</span><br><span class="line">    body = url + <span class="string">"\n\n"</span> + desc</span><br><span class="line">    puts title</span><br><span class="line">    response = conn.post <span class="keyword">do</span> <span class="params">|req|</span></span><br><span class="line">      req.body = &#123; <span class="symbol">body:</span> body, <span class="symbol">labels:</span> [kind, id], <span class="symbol">title:</span> title &#125;.to_json</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    puts response.body</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  sleep <span class="number">15</span> <span class="keyword">if</span> index % <span class="number">20</span> == <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>在这里有 5 个配置项，分别是 GitHub 用户名、在上一步获得的 Token、存放 issues 的仓库、sitemap 的地址以及最后你在博客中使用了哪个评论插件，不同的插件拥有标签，可以选择 “Gitalk” 或者 “gitment”。</p>
<h4 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ruby comment.rb</span></span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://github.com/gitalk/gitalk/wiki/评论初始化" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/wiki/评论初始化</a></li>
<li><a href="https://draveness.me/git-comments-initialize/" target="_blank" rel="noopener">https://draveness.me/git-comments-initialize/</a></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Mac 上使用 Safari 调试 iOS WebView</title>
    <url>/2020/09/08/Safari-Web-Inspector-For-iOS-WebView/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h3><h4 id="Safari-开启调试模式"><a href="#Safari-开启调试模式" class="headerlink" title="Safari 开启调试模式"></a>Safari 开启调试模式</h4><p>依次选择 <strong>偏好设置 &gt; 高级 &gt; 在菜单栏中显示“开发”菜单</strong>。</p>
<img src="http://file.blog.chaosky.tech/2020/09/08/1599551644-image-20200908154443157.png" alt="image-20200908154443157" style="zoom: 33%;" />

<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><h4 id="Safari-开启调试模式-1"><a href="#Safari-开启调试模式-1" class="headerlink" title="Safari 开启调试模式"></a>Safari 开启调试模式</h4><p>要远程调试 iOS Safari ，必须启用 Web 检查 功能，打开 iPhone 依次进入 <strong>设置 &gt; Safari &gt; 高级 &gt; Web 检查 &gt; 启用</strong>。</p>
<img src="http://file.blog.chaosky.tech/2020/09/08/1599551655-IMG_19800580398B-1.jpeg" alt="IMG_19800580398B-1" style="zoom: 33%;" />

<h2 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h2><h3 id="启动-Web-Inspector"><a href="#启动-Web-Inspector" class="headerlink" title="启动 Web Inspector"></a>启动 Web Inspector</h3><ol>
<li>iPhone 使用 Safari 浏览器打开要调试的页面，或者 App 里打开要调试的页面</li>
<li>Mac 打开 Safari 浏览器调试（菜单栏 &gt; 开发 &gt; iPhone 设备名 -&gt; 选择调试页面）</li>
<li>在弹出的 Safari Developer Tools 中调试</li>
</ol>
<h3 id="调试菜单"><a href="#调试菜单" class="headerlink" title="调试菜单"></a>调试菜单</h3><p><img src="http://file.blog.chaosky.tech/2020/09/08/1599553103-640.jpeg" alt="img"></p>
<h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><p>这个菜单用来显示当前网页中加载的资源，比如 HTML、JS、CSS、图片、字体等资源文件，并且可以对 JS 代码添加断点来调试代码。</p>
<h5 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h5><p>Inspector 中的断点调试和 Xocde 的大同小异。</p>
<h5 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h5><p>web 页面中的 JS、CSS、HTML 文件大多数都经过了压缩处理，以前 inspector 并不支持 HTML，这次可以格式化 HTML 文件了：<br><img src="http://file.blog.chaosky.tech/2020/09/08/1599553124-640-20200908161844693.jpeg" alt="img"></p>
<h5 id="Local-overrides"><a href="#Local-overrides" class="headerlink" title="Local overrides"></a>Local overrides</h5><p>如果你想调试某个文件的时候，通常把改动好的代码推动服务端，然后通过浏览器访问，查看效果，整个过程可能会耗费很长时间。Local overrides 提供了一种能力，可以替换当前页面所加载的文件，这样只需要修改本地文件即可，当页面加载的时候会直接使用本地的文件，达到快速调试的作用。更多内容。<br><img src="http://file.blog.chaosky.tech/2020/09/08/1599553134-640.png" alt="img"></p>
<h5 id="Bootstrap-Script"><a href="#Bootstrap-Script" class="headerlink" title="Bootstrap Script"></a>Bootstrap Script</h5><p>Bootstrap Script 也叫引导程序，通常是程序执行时第一个要执行的文件，在 Inspector 中可以创建一个这样的文件用来作为调试工具使用，比如替换某个函数的实现，给某个函数增加特殊的调试语句。在调试的时候，很多 JS 函数都经过了压缩处理，可通过这种方式把压缩的函数替换成未被压缩的函数，方便调试。<br>更多内容</p>
<h4 id="Timelines"><a href="#Timelines" class="headerlink" title="Timelines"></a>Timelines</h4><p>Timelines 用来分享各种功能的加载时长。</p>
<h4 id="Sotrage"><a href="#Sotrage" class="headerlink" title="Sotrage"></a>Sotrage</h4><p>storage 用来显示缓存的数据，比如 Local Storage、Session Storage、Indexed DataBase。</p>
<h4 id="Layers"><a href="#Layers" class="headerlink" title="Layers"></a>Layers</h4><p>Layers 主要用来显示页面的绘制、布局。<br><img src="http://file.blog.chaosky.tech/2020/09/08/1599553147-640-20200908161907264.jpeg" alt="img"></p>
<h4 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h4><p>console 就是打印日志的地方，也可以执行 JavaScript 代码。Console 的界面如下：</p>
<p><img src="http://file.blog.chaosky.tech/2020/09/08/1599553155-640-20200908161914993.jpeg" alt="img"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Tips</tag>
        <tag>WebView</tag>
        <tag>Inspector</tag>
      </tags>
  </entry>
  <entry>
    <title>CocoaPods 快速使用 Swift 静态库</title>
    <url>/2020/07/28/swift-use-static-framework/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>想在项目中使用静态库功能，需要在 Podspec 显示指定 s.static_framework = true，对于多个 Pod 的项目来说，一个个改起来太麻烦了，也不现实。但是 CocoaPods 是 Ruby 写的，我们可以通过 patch CocoaPods 来实现在只写几行代码的情况下，把所有 pod 变成 Static Framework。</p>
<p>通过分析 CocoaPods 的源代码发现，CocoaPods 会通过  Pod -&gt; Installer -&gt; Analyzer -&gt; determine_build_type 这个方法来决定每个 podspec 的 build type，我们可以通过 patch 这个方法来改写。</p>
<p>在 Podfile 的同级目录创建 <code>patch_static_framework.rb</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Pod</span></span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Installer</span></span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Analyzer</span></span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">determine_build_type</span><span class="params">(spec, target_definition_build_type)</span></span></span><br><span class="line">                <span class="keyword">if</span> target_definition_build_type.framework?</span><br><span class="line">                    <span class="comment"># 过滤掉只能动态库方式的framework，或者不确定的framework</span></span><br><span class="line">                    dynamic_frameworks = [<span class="string">'xxxxx'</span>]</span><br><span class="line">                    <span class="keyword">if</span> !dynamic_frameworks.<span class="keyword">include</span>?(spec.root.name)</span><br><span class="line">                        <span class="keyword">return</span> BuildType.static_framework</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    root_spec = spec.root</span><br><span class="line">                    root_spec.static_framework ? BuildType.static_framework : target_definition_build_type</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    BuildType.static_library</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>在 Podfile 的最上面，引入该文件</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">require_relative <span class="string">'patch_static_framework'</span></span><br></pre></td></tr></table></figure>

<p>这样 patch 就会在 pod install 的时候生效，我们就不需要改每个 Pod 的 Podspec 就可以实现每个 Pod 都是 static_framework。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>CocoaPods</tag>
        <tag>Static Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS Socket</title>
    <url>/2016/01/30/iOS-Socket/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="iOS网络编程层次结构"><a href="#iOS网络编程层次结构" class="headerlink" title="iOS网络编程层次结构"></a>iOS网络编程层次结构</h1><p>iOS网络编程层次结构分为三层，从上往下依次为：</p>
<ul>
<li>Cocoa层：NSURL，Bonjour，Game Kit，WebKit</li>
<li>Core Foundation层：基于 C 的 CFNetwork 和 CFNetServices</li>
<li>OS层：基于 C 的 BSD Socket</li>
</ul>
<p>Cocoa层：是最上层的基于 Objective-C 的 API，比如 URL访问，NSStream，Bonjour，GameKit等，这是大多数情况下我们常用的 API。Cocoa 层是基于 Core Foundation 实现的。</p>
<p>Core Foundation层：因为直接使用 socket 需要更多的编程工作，所以苹果对 OS 层的 socket 进行简单的封装以简化编程任务。该层提供了 CFNetwork 和 CFNetServices，其中 CFNetwork 又是基于 CFStream 和 CFSocket。</p>
<p>OS层：最底层的 BSD Socket 提供了对网络编程最大程度的控制，但是编程工作也是最多的。因此，苹果建议我们使用 Core Foundation 及以上层的 API 进行编程。</p>
<p>本文将介绍如何在 iOS 系统下使用最底层的 Socket 进行编程。</p>
<a id="more"></a>

<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。</p>
<p><img src="http://file.blog.chaosky.tech/Socket%E5%B1%82%E6%AC%A1.jpg" alt=""></p>
<h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><p>TCP：面向连接、传输可靠(保证数据正确性,保证数据顺序)、用于传输大量数据(流模式)、速度慢，建立连接需要开销较多(时间，系统资源)。</p>
<p>UDP：面向非连接、传输不可靠、用于传输少量数据(数据包模式)、速度快。</p>
<p>关于TCP是一种流模式的协议，UDP是一种数据包模式的协议，这里要说明一下，TCP是面向连接的，也就是说，在连接持续的过程中，Socket中收到的数据都是由同一台主机发出的（劫持什么的不考虑），因此，知道保证数据是有序的到达就行了，至于每次读取多少数据自己看着办。</p>
<p>而UDP是无连接的协议，也就是说，只要知道接收端的IP和端口，且网络是可达的，任何主机都可以向接收端发送数据。这时候，如果一次能读取超过一个报文的数据，则会乱套。比如，主机A向发送了报文P1，主机B发送了报文P2，如果能够读取超过一个报文的数据，那么就会将P1和P2的数据合并在了一起，这样的数据是没有意义的。</p>
<h2 id="常用的Socket类型"><a href="#常用的Socket类型" class="headerlink" title="常用的Socket类型"></a>常用的Socket类型</h2><p>有两种：流式Socket（SOCK_STREAM）和数据报式Socket（SOCK_DGRAM）。流式是一种面向连接的Socket，针对于面向连接的TCP服务应用；数据报式Socket是一种无连接的Socket，对应于无连接的UDP服务应用。</p>
<h3 id="TCP-C-S架构程序设计基本框架"><a href="#TCP-C-S架构程序设计基本框架" class="headerlink" title="TCP C/S架构程序设计基本框架"></a>TCP C/S架构程序设计基本框架</h3><p><img src="http://file.blog.chaosky.tech/5269612b25e6df1b3ee5ab8352b2c3b6.jpg" alt=""></p>
<h4 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h4><p><img src="http://file.blog.chaosky.tech/543019bab569d5cce5143f7a0c25b872.png" alt=""></p>
<p>最形象理解：</p>
<blockquote>
<p>「你瞅啥？」</p>
<p>「瞅你咋地？」</p>
<p>「来咱俩唠唠。」</p>
<p>然后就唠上了。</p>
</blockquote>
<h4 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h4><p><img src="http://file.blog.chaosky.tech/cbb39ed0e10f4a9e8cdeaeb38ebc3695.png" alt=""></p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h5><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ifaddrs.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="服务端实现代码"><a href="#服务端实现代码" class="headerlink" title="服务端实现代码"></a>服务端实现代码</h5><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)socketServer</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line">    <span class="comment">// 1. 创建socket套接字</span></span><br><span class="line">    <span class="comment">// 原型：int socket(int domain, int type, int protocol);</span></span><br><span class="line">    <span class="comment">// domain：协议族 type：socket类型 protocol：协议</span></span><br><span class="line">    <span class="keyword">int</span> fd = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);</span><br><span class="line">    <span class="built_in">BOOL</span> success = (fd != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Socket 创建成功"</span>);</span><br><span class="line">        <span class="comment">// 地址结构体</span></span><br><span class="line">        <span class="keyword">struct</span> sockaddr_in addr;</span><br><span class="line">        <span class="comment">// 内存清空</span></span><br><span class="line">        memset(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">        <span class="comment">// 内存大小</span></span><br><span class="line">        addr.sin_len=<span class="keyword">sizeof</span>(addr);</span><br><span class="line">        <span class="comment">// 地址族，在socket编程中只能是AF_INET</span></span><br><span class="line">        addr.sin_family=AF_INET;</span><br><span class="line">        <span class="comment">// 端口号</span></span><br><span class="line">        addr.sin_port=htons(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 按照网络字节顺序存储IP地址</span></span><br><span class="line">        addr.sin_addr.s_addr=INADDR_ANY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 建立地址和套接字的联系（绑定）</span></span><br><span class="line">        <span class="comment">// 原型：bind(sockid, local addr, addrlen)</span></span><br><span class="line">        err=bind(fd, (<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">        success=(err==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 服务器端侦听客户端的请求</span></span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"绑定成功"</span>);</span><br><span class="line">        <span class="comment">// listen( Sockid ,quenlen) quenlen 并发队列</span></span><br><span class="line">        err=listen(fd, <span class="number">5</span>);<span class="comment">//开始监听</span></span><br><span class="line">        success=(err==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"监听成功"</span>);</span><br><span class="line">        <span class="comment">// 4. 一直阻塞等到客户端的连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">struct</span> sockaddr_in peeraddr;</span><br><span class="line">            <span class="keyword">int</span> peerfd;</span><br><span class="line">            socklen_t addrLen;</span><br><span class="line">            addrLen = <span class="keyword">sizeof</span>(peeraddr);</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"等待客户端的连接请求"</span>);</span><br><span class="line">            <span class="comment">// 5. 服务器端等待从编号为Sockid的Socket上接收客户端连接请求</span></span><br><span class="line">            <span class="comment">// 原型：newsockid=accept(Sockid，Clientaddr, paddrlen)</span></span><br><span class="line">            peerfd = accept(fd, (<span class="keyword">struct</span> sockaddr *)&amp;peeraddr, &amp;addrLen);</span><br><span class="line">            success=(peerfd!=<span class="number">-1</span>);</span><br><span class="line">            <span class="comment">// 接收客户端请求成功</span></span><br><span class="line">            <span class="keyword">if</span> (success) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"接收客户端请求成功，客户端地址：%s, 端口号：%d"</span>,inet_ntoa(peeraddr.sin_addr), ntohs(peeraddr.sin_port));</span><br><span class="line">                send(peerfd, <span class="string">"欢迎进入Socket聊天室"</span>, <span class="number">1024</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 6. 创建新线程接收客户端发送的消息</span></span><br><span class="line">                [<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(reciveMessage:) toTarget:<span class="keyword">self</span> withObject:@(peerfd)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)reciveMessage:(<span class="keyword">id</span>) peerfd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = [peerfd intValue];</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    ssize_t bufLen;</span><br><span class="line">    size_t len=<span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环阻塞接收客户端发送的消息</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        bufLen = recv(fd, buf, len, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 当返回值小于等于零时，表示socket异常或者socket关闭，退出循环阻塞接收消息</span></span><br><span class="line">        <span class="keyword">if</span> (bufLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接收到的信息</span></span><br><span class="line">        <span class="built_in">NSString</span>* msg = [<span class="built_in">NSString</span> stringWithCString:buf encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"来自客户端，消息内容：%@"</span>, msg);</span><br><span class="line">        memset(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 7. 关闭</span></span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h5><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)createSocketClient</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line">    <span class="comment">// 创建socket套接字</span></span><br><span class="line">    <span class="keyword">int</span> fd =socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">BOOL</span> success=(fd!=<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">struct</span> sockaddr_in addr;</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Socket创建成功"</span>);</span><br><span class="line">        memset(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">        addr.sin_len = <span class="keyword">sizeof</span>(addr);</span><br><span class="line">        addr.sin_family = AF_INET;</span><br><span class="line">        addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立地址和套接字的联系</span></span><br><span class="line">        err = bind(fd, (<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">        success = (err==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">        <span class="keyword">struct</span> sockaddr_in serveraddr;</span><br><span class="line">        memset(&amp;serveraddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serveraddr));</span><br><span class="line">        serveraddr.sin_len=<span class="keyword">sizeof</span>(serveraddr);</span><br><span class="line">        serveraddr.sin_family=AF_INET;</span><br><span class="line">        <span class="comment">// 服务器端口</span></span><br><span class="line">        serveraddr.sin_port=htons(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 服务器的地址</span></span><br><span class="line">        serveraddr.sin_addr.s_addr=inet_addr(<span class="string">"192.168.2.5"</span>);</span><br><span class="line">        socklen_t addrLen;</span><br><span class="line">        addrLen =<span class="keyword">sizeof</span>(serveraddr);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"连接服务器中..."</span>);</span><br><span class="line">        err=connect(fd, (<span class="keyword">struct</span> sockaddr *)&amp;serveraddr, addrLen);</span><br><span class="line">        success=(err==<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="comment">// getsockname 是对tcp连接而言。套接字socket必须是已连接套接字描述符。</span></span><br><span class="line">            err =getsockname(fd, (<span class="keyword">struct</span> sockaddr *)&amp;addr, &amp;addrLen);</span><br><span class="line">            success=(err==<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (success) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"连接服务器成功，本地地址：%s，端口：%d"</span>,inet_ntoa(addr.sin_addr),ntohs(addr.sin_port));</span><br><span class="line">                [<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(reciveMessage:) toTarget:<span class="keyword">self</span> withObject:@(fd)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"connect failed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)reciveMessage:(<span class="keyword">id</span>) peerfd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = [peerfd intValue];</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    ssize_t bufLen;</span><br><span class="line">    size_t len=<span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环阻塞接收消息</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        bufLen = recv(fd, buf, len, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 当返回值小于等于零时，表示socket异常或者socket关闭，退出循环阻塞接收消息</span></span><br><span class="line">        <span class="keyword">if</span> (bufLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接收到的信息</span></span><br><span class="line">        <span class="built_in">NSString</span>* msg = [<span class="built_in">NSString</span> stringWithCString:buf encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"来自服务端，消息内容：%@"</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 7. 关闭</span></span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="UDP-C-S架构程序设计基本框架"><a href="#UDP-C-S架构程序设计基本框架" class="headerlink" title="UDP C/S架构程序设计基本框架"></a>UDP C/S架构程序设计基本框架</h4><p><img src="http://file.blog.chaosky.tech/cd6d1690d3d6eefd300987e590c1483f.jpg" alt=""></p>
<h3 id="字节顺序"><a href="#字节顺序" class="headerlink" title="字节顺序"></a>字节顺序</h3><p>计算机数据表示存在两种字节顺序：NBO与HBO</p>
<p>网络字节顺序NBO（Network Byte Order）：</p>
<blockquote>
<p>  按从高到低的顺序存储，在网络上使用统一的网络字节顺序，可以避免兼容性问题。</p>
</blockquote>
<p>主机字节顺序（HBO，Host Byte Order）：</p>
<blockquote>
<p>不同的机器HBO不相同，与CPU设计有关，数据的顺序是由cpu决定的，而与操作系统无关。</p>
<p>不同的CPU有不同的字节顺序类型，这些字节顺序类型指的是整数在内存中保存的顺序，即主机字节顺序。常见的有两种：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>英文名</th>
<th>中文名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>big-endian</td>
<td>大尾顺序</td>
<td>地址的低位存储值的高位</td>
</tr>
<tr>
<td>2</td>
<td>little-endian</td>
<td>小尾顺序</td>
<td>地址的低位存储值的低位</td>
</tr>
</tbody></table>
<p>如 Intelx86结构下,short型数0x1234表示为34 12, int型数0x12345678表示为78 56 34 12如IBM power PC结构下,short型数0x1234表示为12 34, int型数0x12345678表示为12   34 56 78</p>
</blockquote>
<p>网络字节顺序与本地字节顺序之间的转换函数：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">htonl</span><span class="params">()</span></span>--<span class="string">"Host to Network Long"</span></span><br><span class="line"><span class="function"><span class="title">ntohl</span><span class="params">()</span></span>--<span class="string">"Network to Host Long"</span></span><br><span class="line"><span class="function"><span class="title">htons</span><span class="params">()</span></span>--<span class="string">"Host to Network Short"</span></span><br><span class="line"><span class="function"><span class="title">ntohs</span><span class="params">()</span></span>--<span class="string">"Network to Host Short"</span></span><br></pre></td></tr></table></figure>

<h3 id="地址转换方法"><a href="#地址转换方法" class="headerlink" title="地址转换方法"></a>地址转换方法</h3><h4 id="in-addr-t-inet-addr-const-char"><a href="#in-addr-t-inet-addr-const-char" class="headerlink" title="in_addr_t inet_addr(const char *)"></a>in_addr_t inet_addr(const char *)</h4><p>将一个点间隔地址转换成一个in_addr</p>
<h4 id="char-inet-ntoa-struct-in-addr"><a href="#char-inet-ntoa-struct-in-addr" class="headerlink" title="char *inet_ntoa(struct in_addr)"></a>char *inet_ntoa(struct in_addr)</h4><p>将网络地址转换成“.”点隔的字符串格式。</p>
<h4 id="int-inet-aton-const-char-struct-in-addr"><a href="#int-inet-aton-const-char-struct-in-addr" class="headerlink" title="int inet_aton(const char *, struct in_addr *)"></a>int inet_aton(const char *, struct in_addr *)</h4><p>将一个字符串IP地址转换为一个32位的网络序列IP地址。</p>
<h3 id="获取地址"><a href="#获取地址" class="headerlink" title="获取地址"></a>获取地址</h3><h4 id="用getsockname获得本地ip和port"><a href="#用getsockname获得本地ip和port" class="headerlink" title="用getsockname获得本地ip和port"></a>用getsockname获得本地ip和port</h4><h4 id="用getpeername获得对端ip和port"><a href="#用getpeername获得对端ip和port" class="headerlink" title="用getpeername获得对端ip和port"></a>用getpeername获得对端ip和port</h4><p>套接字socket必须是已连接套接字描述符。</p>
<h3 id="获取本地IP地址"><a href="#获取本地IP地址" class="headerlink" title="获取本地IP地址"></a>获取本地IP地址</h3><p>参考stackoverflow链接：<a href="http://stackoverflow.com/questions/7072989/iphone-ipad-osx-how-to-get-my-ip-address-programmatically" target="_blank" rel="noopener">http://stackoverflow.com/questions/7072989/iphone-ipad-osx-how-to-get-my-ip-address-programmatically</a></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ifaddrs.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现代码</span></span><br><span class="line">- (NSString *)getIPAddress &#123;</span><br><span class="line"></span><br><span class="line">    NSString *address = @<span class="string">"error"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifaddrs</span></span> *interfaces = NULL;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifaddrs</span></span> *temp_addr = NULL;</span><br><span class="line">    int success = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// retrieve the current interfaces - returns 0 on success</span></span><br><span class="line">    success = getifaddrs(&amp;interfaces);</span><br><span class="line">    <span class="keyword">if</span> (success == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Loop through linked list of interfaces</span></span><br><span class="line">        temp_addr = interfaces;</span><br><span class="line">        <span class="keyword">while</span>(temp_addr != NULL) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp_addr-&gt;ifa_addr-&gt;sa_family == AF_INET) &#123;</span><br><span class="line">                <span class="comment">// Check if interface is en0 which is the wifi connection on the iPhone</span></span><br><span class="line">                <span class="keyword">if</span>([[NSString stringWithUTF8String:temp_addr-&gt;ifa_name] isEqualToString:@<span class="string">"en0"</span>]) &#123;</span><br><span class="line">                    <span class="comment">// Get NSString from C String</span></span><br><span class="line">                    address = [NSString stringWithUTF8String:inet_ntoa(((<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span></span> *)temp_addr-&gt;ifa_addr)-&gt;sin_addr)];</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            temp_addr = temp_addr-&gt;ifa_next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Free memory</span></span><br><span class="line">    freeifaddrs(interfaces);</span><br><span class="line">    <span class="keyword">return</span> address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h1><p>CocoaAsyncSocket：<a href="https://github.com/robbiehanson/CocoaAsyncSocket" target="_blank" rel="noopener">https://github.com/robbiehanson/CocoaAsyncSocket</a></p>
<p>CocoaAsyncSocket provides easy-to-use and powerful asynchronous socket libraries for Mac and iOS. The classes are described below.</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="http://www.coderyi.com/archives/429" target="_blank" rel="noopener">http://www.coderyi.com/archives/429</a></li>
<li><a href="http://www.cnblogs.com/kesalin/archive/2013/04/13/cocoa_socket.html" target="_blank" rel="noopener">http://www.cnblogs.com/kesalin/archive/2013/04/13/cocoa_socket.html</a></li>
<li><a href="http://my.oschina.net/joanfen/blog/287238" target="_blank" rel="noopener">http://my.oschina.net/joanfen/blog/287238</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Socket</tag>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 推送通知</title>
    <url>/2016/01/21/iOS-Notification/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>推送通知是当程序没有启动或不在前台运行时，告诉用户有新消息的一种途径。</p>
<p>有远程推送和本地推送之分。</p>
<a id="more"></a>

<h2 id="本地推送"><a href="#本地推送" class="headerlink" title="本地推送"></a>本地推送</h2><p>本地推送就是由应用程序发起的推送通知，不经过服务器。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>一般用于不需要网络的提醒类情况</p>
<ul>
<li>事件提醒类：到了我们自定义的时间，就会弹出一些信息告诉我们该干什么了，例如闹钟</li>
<li>游戏类：每日任务提醒，一到八点双倍经验时刻开启，就准时提醒用户登陆</li>
<li>书籍类：你有多少天没有看书了，需要学习哦</li>
<li>健康类：亲~你好多天没吃药了，不要放弃治疗</li>
<li>恶搞类：在你分手女朋友手机里安装一个软件，3个月后，自动开启xxx约你开房</li>
<li>硬件类：蓝牙连接，当程序在后台时候与蓝牙断开，需要有一个提示告诉用户蓝牙连接断开</li>
<li>记账类软件，会提醒我们的一些花销等等，比如超出额度。</li>
</ul>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><h4 id="创建本地推送通知"><a href="#创建本地推送通知" class="headerlink" title="创建本地推送通知"></a>创建本地推送通知</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ios8本地推送通知，添加一个授权方法</span></span><br><span class="line"><span class="keyword">if</span> ([<span class="built_in">UIApplication</span> instancesRespondToSelector:<span class="keyword">@selector</span>(registerUserNotificationSettings:)])&#123;</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerUserNotificationSettings:[<span class="built_in">UIUserNotificationSettings</span> settingsForTypes:<span class="built_in">UIUserNotificationTypeAlert</span>|<span class="built_in">UIUserNotificationTypeBadge</span>|<span class="built_in">UIUserNotificationTypeSound</span> categories:<span class="literal">nil</span>]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UILocalNotification</span> *localNotification = [[<span class="built_in">UILocalNotification</span> alloc] init];<span class="comment">//初始化本地通知</span></span><br><span class="line">    <span class="keyword">if</span> (localNotification != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="built_in">NSDate</span> *now = [<span class="built_in">NSDate</span> new];</span><br><span class="line">        localNotification.fireDate = [now dateByAddingTimeInterval:<span class="number">15</span>];<span class="comment">//15秒后通知</span></span><br><span class="line">        localNotification.repeatInterval = <span class="built_in">NSCalendarUnitMinute</span>;<span class="comment">//循环次数，NSCalendarUnitMinute一分一次</span></span><br><span class="line">        localNotification.timeZone = [<span class="built_in">NSTimeZone</span> defaultTimeZone];<span class="comment">//UILocalNotification激发时间是否根据时区改变而改变</span></span><br><span class="line">        localNotification.applicationIconBadgeNumber += <span class="number">1</span>;<span class="comment">//应用的红色数字</span></span><br><span class="line">        localNotification.soundName = <span class="built_in">UILocalNotificationDefaultSoundName</span>;<span class="comment">//声音，可以换成自己的，如：alarm.soundName = @"myMusic.caf"，自定义的声音文件播放时长必须在 30 秒以内。如果一个自定义的声音文件播放 超过 30 秒的限制，那将会被系统的声音替换</span></span><br><span class="line">        localNotification.alertBody = <span class="string">@"我是通知内容"</span>;<span class="comment">//提示信息 弹出提示框</span></span><br><span class="line">        localNotification.alertAction = <span class="string">@"打开"</span>;<span class="comment">//解锁按钮文字，就是在锁屏情况下有一个‘滑动来XXX’,这儿的XXX就是这里所设置的alertAction。如果不设置就是@“查看”</span></span><br><span class="line">        localNotification.hasAction = <span class="literal">YES</span>;<span class="comment">//是否显示额外的按钮，为no时alertAction的设置不起作用，hasAction默认是YES</span></span><br><span class="line">        <span class="comment">//通知的额外信息，不会展示出来，是用来判断通知是哪一条的额外信息</span></span><br><span class="line">        <span class="built_in">NSDictionary</span> *infoDict = [<span class="built_in">NSDictionary</span> dictionaryWithObject:<span class="string">@"xiaofei"</span> forKey:<span class="string">@"birthday"</span>];</span><br><span class="line">        localNotification.userInfo = infoDict;<span class="comment">//添加额外的信息</span></span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] scheduleLocalNotification:localNotification];<span class="comment">//添加本地通知到推送队列中</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>本地推送通知加入以后，程序被杀掉，推送通知依然可以运行</p>
<p>当程序在前台时候我的推送通知虽然不会显示，但是依然会运行</p>
<p>如果要弹出推送通知，需要你程序退出后台才可以显示，快捷键command+shift+h</p>
<h4 id="接收本地推送通知"><a href="#接收本地推送通知" class="headerlink" title="接收本地推送通知"></a>接收本地推送通知</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">application:</span>(UIApplication *)application <span class="string">didReceiveLocalNotification:</span>(UILocalNotification *)notification &#123;</span><br><span class="line">    <span class="comment">//处理收到的通知...</span></span><br><span class="line">    application.applicationIconBadgeNumber = <span class="number">0</span>;<span class="comment">//应用程序角标清零</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="取消本地推送通知"><a href="#取消本地推送通知" class="headerlink" title="取消本地推送通知"></a>取消本地推送通知</h4><ul>
<li><h5 id="取消指定通知"><a href="#取消指定通知" class="headerlink" title="取消指定通知"></a>取消指定通知</h5></li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIApplication</span> *app = [<span class="built_in">UIApplication</span> sharedApplication];</span><br><span class="line">    <span class="built_in">NSArray</span>* localNotifications = [app scheduledLocalNotifications];<span class="comment">//获取当前应用所有的通知</span></span><br><span class="line">    <span class="keyword">if</span> (localNotifications) &#123;</span><br><span class="line">      <span class="comment">// 遍历通知，找到对应的通知</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">UILocalNotification</span>* notification <span class="keyword">in</span> localNotifications) &#123;</span><br><span class="line">            <span class="built_in">NSDictionary</span> *dic = notification.userInfo;</span><br><span class="line">            <span class="keyword">if</span> (dic) &#123;</span><br><span class="line">                <span class="built_in">NSString</span>* key = [dic objectForKey:<span class="string">@"key"</span>];</span><br><span class="line">                <span class="keyword">if</span> ([key isEqualToString:<span class="string">@"name"</span>]) &#123;</span><br><span class="line">                    <span class="comment">//取消推送 （指定一个取消）</span></span><br><span class="line">                    [app cancelLocalNotification:notification];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="取消当前应用所有的推送"><a href="#取消当前应用所有的推送" class="headerlink" title="取消当前应用所有的推送"></a>取消当前应用所有的推送</h5></li>
</ul>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">UIApplication *app = [UIApplication sharedApplication]<span class="comment">;</span></span><br><span class="line">[app cancelAllLocalNotifications]<span class="comment">;</span></span><br></pre></td></tr></table></figure>



<h2 id="远程推送通知"><a href="#远程推送通知" class="headerlink" title="远程推送通知"></a>远程推送通知</h2><p>远程推送通知是由服务器发送的消息经过苹果的APNS（Apple Push Notification Service）服务远程推送给设备。由于iOS操作系统限制，我们APP在后台不能做操作，也不能接收任何数据，所以需要用推送来接收消息。</p>
<p><strong>注意：</strong></p>
<p><strong>1. 模拟器无法接收远程推送消息，只有真机可以</strong></p>
<p><strong>2. 远程推送通知只能拥有付费的开发者账号才能创建</strong></p>
<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>聊天消息推送</li>
<li>新闻推送</li>
<li>影视剧推送</li>
<li>小说更新推送</li>
<li>游戏活动推送</li>
<li>健康天气推送</li>
<li>提醒业务：比如一些秀场应用，女主播上线了，可以发送通知给所有关注她的土豪们，来赶紧撒钱</li>
</ul>
<h3 id="远程推送原理"><a href="#远程推送原理" class="headerlink" title="远程推送原理"></a>远程推送原理</h3><p><img src="http://file.blog.chaosky.tech/Push-Overview.jpg" alt=""></p>
<ol>
<li>注册：为应用程序申请消息推送服务。此时你的设备会向APNs服务器发送注册请求。</li>
<li>APNs服务器接收请求，并将deviceToken返给你设备上的应用程序</li>
<li>客户端应用程序将deviceToken发送给后台服务器程序，后台接收并储存</li>
<li>后台服务器向APNs服务器发送推送消息</li>
<li>APNs服务器将消息发给deviceToken对应设备上的应用程序</li>
</ol>
<h3 id="远程推送具体步骤"><a href="#远程推送具体步骤" class="headerlink" title="远程推送具体步骤"></a>远程推送具体步骤</h3><p>应用程序的App ID添加Push Notifications服务—&gt;配置对应的证书—&gt;配置对应Provisioning Profiles文件—&gt;获取Device Token—&gt;服务器端通过deviceToken和APNS建立SSL连接—&gt;服务器端给APNS服务器发送推送消息</p>
<ol>
<li><p>创建App ID添加Push Notifications服务</p>
<p>请参考<a href="http://www.jianshu.com/p/074bc6fffd0e" target="_blank" rel="noopener">教你一步一步获取App ID</a></p>
</li>
<li><p>配置Push Notifications服务和相应证书，配置文件Provisioning Profiles文件</p>
<p>参考：<a href="http://www.jianshu.com/p/6aa72b177daf" target="_blank" rel="noopener">教你一步一步获取Provisioning Profiles</a></p>
</li>
<li><p>获取deviceToken，需要在代码中实现</p>
<ol>
<li><p>注册远程推送通知</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ([[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">8.0</span>) &#123;</span><br><span class="line">  <span class="built_in">UIUserNotificationType</span> myTypes = <span class="built_in">UIRemoteNotificationTypeBadge</span> | <span class="built_in">UIRemoteNotificationTypeAlert</span> | <span class="built_in">UIRemoteNotificationTypeSound</span>;</span><br><span class="line">  <span class="built_in">UIUserNotificationSettings</span> *settings = [<span class="built_in">UIUserNotificationSettings</span> settingsForTypes:myTypes categories:<span class="literal">nil</span>];</span><br><span class="line">  [[<span class="built_in">UIApplication</span> sharedApplication] registerUserNotificationSettings:settings];</span><br><span class="line">  [[<span class="built_in">UIApplication</span> sharedApplication] registerForRemoteNotifications];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">UIRemoteNotificationType</span> myTypes = <span class="built_in">UIRemoteNotificationTypeBadge</span>|<span class="built_in">UIRemoteNotificationTypeAlert</span>|<span class="built_in">UIRemoteNotificationTypeSound</span>;</span><br><span class="line">  [[<span class="built_in">UIApplication</span> sharedApplication] registerForRemoteNotificationTypes:myTypes];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册远程通知成功回调，获取deviceToken</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(void)</span>application:<span class="params">(UIApplication *)</span>application didRegisterForRemoteNotificationsWithDeviceToken:<span class="params">(NSData *)</span>deviceToken&#123;</span><br><span class="line">  NSLog<span class="params">(@<span class="string">"deviceToken:%@"</span>,deviceToken)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册远程通知失败回调</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">- (void)<span class="built_in">application</span>:(UIApplication *)<span class="built_in">application</span> didFailToRegisterForRemoteNotificationsWithError:(NSError *)<span class="keyword">error</span>&#123;</span><br><span class="line">  NSLog(@<span class="string">"注册失败，错误是：%@"</span>,<span class="keyword">error</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>想要收到推送消息，就必须要有后台服务器向APNs服务器发请求。</p>
<p>1、公司自己开发后台服务器程序</p>
<p>2、采用第三方的后台服务程序，比如：百度云推送</p>
</li>
<li><p>程序正在使用或者退出的状态下，收到远程推送通知回调</p>
</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveRemoteNotification:(<span class="built_in">NSDictionary</span> *)userInfo&#123;</span><br><span class="line">	<span class="comment">//处理通知...</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Receive remote notification : %@"</span>,userInfo);</span><br><span class="line">    application.applicationIconBadgeNumber = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="集成第三方推送服务"><a href="#集成第三方推送服务" class="headerlink" title="集成第三方推送服务"></a>集成第三方推送服务</h3><h4 id="第三方推送"><a href="#第三方推送" class="headerlink" title="第三方推送"></a>第三方推送</h4><ul>
<li>极光推送</li>
<li>蝴蝶推送</li>
<li>个推</li>
<li>信鸽推送</li>
<li>百度云推送</li>
<li>友盟推送</li>
</ul>
<h3 id="集成极光推送"><a href="#集成极光推送" class="headerlink" title="集成极光推送"></a>集成极光推送</h3><h4 id="极光推送基本信息"><a href="#极光推送基本信息" class="headerlink" title="极光推送基本信息"></a>极光推送基本信息</h4><p><strong>极光推送网站</strong>：<a href="https://www.jpush.cn" target="_blank" rel="noopener">https://www.jpush.cn</a></p>
<h4 id="配置JPush的环境"><a href="#配置JPush的环境" class="headerlink" title="配置JPush的环境"></a>配置JPush的环境</h4><p>参考官方极光推送文档或者下载的SDK：</p>
<p><a href="http://docs.jpush.io/guideline/ios_guide/" target="_blank" rel="noopener">JPush iOS集成指南</a></p>
<p><a href="http://docs.jpush.io/client/ios_tutorials/" target="_blank" rel="noopener">iOS SDK 开发教程</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>推送通知</tag>
        <tag>远程推送</tag>
        <tag>本地推送</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS完整项目示例仓库</title>
    <url>/2016/04/12/iOS-Project-List/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>程序员要提高自己的编程能力，有两个捷径：一、多写代码不断做个人项目；二、多看多学习别人的代码，看代码要比写代码难很多倍。</p>
<a id="more"></a>

<h1 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h1><h2 id="开源中国"><a href="#开源中国" class="headerlink" title="开源中国"></a>开源中国</h2><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="http://git.oschina.net/oschina/iphone-app" target="_blank" rel="noopener">http://git.oschina.net/oschina/iphone-app</a></p>
<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>OSCHINA 的 iPhone 客户端源码，可直接在 App Store上搜索“开源中国”来安装此app</p>
<p><img src="http://file.blog.chaosky.tech/2016-04-08-OSCHINA-iPhone.png" alt=""></p>
<h2 id="Git-OSC客户端"><a href="#Git-OSC客户端" class="headerlink" title="Git@OSC客户端"></a>Git@OSC客户端</h2><h3 id="项目地址-1"><a href="#项目地址-1" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="http://git.oschina.net/oschina/git-osc-iphone" target="_blank" rel="noopener">http://git.oschina.net/oschina/git-osc-iphone</a></p>
<h3 id="项目简介-1"><a href="#项目简介-1" class="headerlink" title="项目简介"></a>项目简介</h3><p>Git@OSC iPhone 客户端，方便用户查看Git@OSC的项目以及简单的操作issue等。</p>
<p><img src="http://file.blog.chaosky.tech/2016-04-08-Git@OSC-App-1.png" alt=""></p>
<p><img src="http://file.blog.chaosky.tech/2016-04-08-Git@OSC-App-2.png" alt=""></p>
<h2 id="Coding客户端"><a href="#Coding客户端" class="headerlink" title="Coding客户端"></a>Coding客户端</h2><h3 id="项目地址-2"><a href="#项目地址-2" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://coding.net/u/coding/p/Coding-iOS/git" target="_blank" rel="noopener">https://coding.net/u/coding/p/Coding-iOS/git</a></p>
<h3 id="项目简介-2"><a href="#项目简介-2" class="headerlink" title="项目简介"></a>项目简介</h3><p>Coding iOS 客户端源代码。</p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/2927a0ce-52d3-4956-8b3c-9d4804e910e6.png" alt=""></p>
<h2 id="房主儿"><a href="#房主儿" class="headerlink" title="房主儿"></a>房主儿</h2><h3 id="项目地址-3"><a href="#项目地址-3" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://coding.net/u/chaosky/p/Fangzhur/git" target="_blank" rel="noopener">https://coding.net/u/chaosky/p/Fangzhur/git</a></p>
<h3 id="项目简介-3"><a href="#项目简介-3" class="headerlink" title="项目简介"></a>项目简介</h3><p>找房、租房App。</p>
<p><img src="http://file.blog.chaosky.tech/2016-04-08-Fangzhur-App.png" alt=""></p>
<h2 id="LeagueofLegends"><a href="#LeagueofLegends" class="headerlink" title="LeagueofLegends"></a>LeagueofLegends</h2><h3 id="项目地址-4"><a href="#项目地址-4" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://coding.net/u/chaosky/p/LeagueofLegends/git" target="_blank" rel="noopener">https://coding.net/u/chaosky/p/LeagueofLegends/git</a></p>
<h3 id="项目简介-4"><a href="#项目简介-4" class="headerlink" title="项目简介"></a>项目简介</h3><p>an iOS App for LeagueofLegends。</p>
<p><img src="http://file.blog.chaosky.tech/2016-04-08-LOL-App.png" alt=""></p>
<h2 id="phphub"><a href="#phphub" class="headerlink" title="phphub"></a>phphub</h2><h3 id="项目地址-5"><a href="#项目地址-5" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/Aufree/phphub-ios" target="_blank" rel="noopener">https://github.com/Aufree/phphub-ios</a></p>
<h3 id="项目简介-5"><a href="#项目简介-5" class="headerlink" title="项目简介"></a>项目简介</h3><p>PHPHub for iOS 是 PHPHub 的官方 iOS 客户端, 同时兼容 iPhone 和 iPad, 使用了最新的 PHPHub API, 目前该 API 仍在完善中, 待完全稳定之后会开放给所有开发者使用, 敬请期待. 若您在使用此应用的过程中有发现任何问题, 请到 GitHub 上给我提 issue 或 PR, 我将会不定期抽出时间来对一些 Bug 进行修复或更新。</p>
<p><img src="https://camo.githubusercontent.com/76ad093c86a75c560387cd6018d422bae095a143/687474703a2f2f3766766866352e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f7068706875622d6970686f6e652e706e67" alt=""></p>
<h2 id="懒人笔记"><a href="#懒人笔记" class="headerlink" title="懒人笔记"></a>懒人笔记</h2><h3 id="项目地址-6"><a href="#项目地址-6" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/liaojinxing/Voice2Note" target="_blank" rel="noopener">https://github.com/liaojinxing/Voice2Note</a></p>
<h3 id="项目简介-6"><a href="#项目简介-6" class="headerlink" title="项目简介"></a>项目简介</h3><p>懒人笔记是一款为懒人设计的笔记本，你只需要通过语音输入，即可完成笔记的书写。<br>同时支持发邮件，分享到朋友圈等附加功能。<br>大部分情况下你无需动笔，只需要靠说，就可以轻松记笔记、发邮件，是提高效率的好工具。</p>
<p><img src="https://github.com/liaojinxing/Voice2Note/raw/master/ScreenShot/home1_40.png" alt=""></p>
<h2 id="豆瓣妹子"><a href="#豆瓣妹子" class="headerlink" title="豆瓣妹子"></a>豆瓣妹子</h2><h3 id="项目地址-7"><a href="#项目地址-7" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/Sunnyyoung/Meizi" target="_blank" rel="noopener">https://github.com/Sunnyyoung/Meizi</a></p>
<h3 id="项目简介-7"><a href="#项目简介-7" class="headerlink" title="项目简介"></a>项目简介</h3><p>豆瓣妹子图iOS客户端。</p>
<p><img src="https://raw.githubusercontent.com/Sunnyyoung/Meizi/master/ScreenShot/One.png" alt=""></p>
<h2 id="ChatSecure"><a href="#ChatSecure" class="headerlink" title="ChatSecure"></a>ChatSecure</h2><h3 id="项目地址-8"><a href="#项目地址-8" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/ChatSecure/ChatSecure-iOS" target="_blank" rel="noopener">https://github.com/ChatSecure/ChatSecure-iOS</a></p>
<h3 id="项目简介-8"><a href="#项目简介-8" class="headerlink" title="项目简介"></a>项目简介</h3><p>ChatSecure is a free and open source instant messaging client for iOS and Android that integrates encrypted OTR (“Off the Record”) messaging support from the libotr library and the XMPPFramework to handle Jabber/GTalk (XMPP).</p>
<h2 id="高仿知乎日报"><a href="#高仿知乎日报" class="headerlink" title="高仿知乎日报"></a>高仿知乎日报</h2><h3 id="项目地址-9"><a href="#项目地址-9" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/zpz1237/NirZhihuDaily2.0" target="_blank" rel="noopener">https://github.com/zpz1237/NirZhihuDaily2.0</a></p>
<h3 id="项目简介-9"><a href="#项目简介-9" class="headerlink" title="项目简介"></a>项目简介</h3><p>精仿知乎日报iOS端.</p>
<p><img src="https://github.com/zpz1237/NirZhihuDaily2.0/raw/master/effect1.gif" alt=""></p>
<h2 id="维基百科官方App"><a href="#维基百科官方App" class="headerlink" title="维基百科官方App"></a>维基百科官方App</h2><h3 id="项目地址-10"><a href="#项目地址-10" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/wikimedia/wikipedia-ios" target="_blank" rel="noopener">https://github.com/wikimedia/wikipedia-ios</a></p>
<h3 id="项目简介-10"><a href="#项目简介-10" class="headerlink" title="项目简介"></a>项目简介</h3><p>The official Wikipedia iOS app.</p>
<h2 id="高仿美团"><a href="#高仿美团" class="headerlink" title="高仿美团"></a>高仿美团</h2><h3 id="项目地址-11"><a href="#项目地址-11" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/lookingstars/meituan" target="_blank" rel="noopener">https://github.com/lookingstars/meituan</a></p>
<h3 id="项目简介-11"><a href="#项目简介-11" class="headerlink" title="项目简介"></a>项目简介</h3><p>高仿美团iOS版。</p>
<h2 id="高仿糯米"><a href="#高仿糯米" class="headerlink" title="高仿糯米"></a>高仿糯米</h2><h3 id="项目地址-12"><a href="#项目地址-12" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/lookingstars/nuomi" target="_blank" rel="noopener">https://github.com/lookingstars/nuomi</a></p>
<h3 id="项目简介-12"><a href="#项目简介-12" class="headerlink" title="项目简介"></a>项目简介</h3><p>高仿百度糯米iOS版</p>
<h2 id="Open-Source-iOS-Apps列表"><a href="#Open-Source-iOS-Apps列表" class="headerlink" title="Open-Source iOS Apps列表"></a>Open-Source iOS Apps列表</h2><h3 id="项目地址-13"><a href="#项目地址-13" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/dkhamsing/open-source-ios-apps" target="_blank" rel="noopener">https://github.com/dkhamsing/open-source-ios-apps</a></p>
<h2 id="动画练习项目"><a href="#动画练习项目" class="headerlink" title="动画练习项目"></a>动画练习项目</h2><h3 id="项目地址-14"><a href="#项目地址-14" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/MartinRGB/LearnCube-iOS" target="_blank" rel="noopener">https://github.com/MartinRGB/LearnCube-iOS</a></p>
<h2 id="GitBucket-iOS-App"><a href="#GitBucket-iOS-App" class="headerlink" title="GitBucket iOS App"></a>GitBucket iOS App</h2><h3 id="项目地址-15"><a href="#项目地址-15" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/leichunfeng/MVVMReactiveCocoa" target="_blank" rel="noopener">https://github.com/leichunfeng/MVVMReactiveCocoa</a></p>
<h2 id="Monkey：Github第三方客户端"><a href="#Monkey：Github第三方客户端" class="headerlink" title="Monkey：Github第三方客户端"></a>Monkey：Github第三方客户端</h2><h3 id="项目地址-16"><a href="#项目地址-16" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/coderyi/Monkey" target="_blank" rel="noopener">https://github.com/coderyi/Monkey</a></p>
<h3 id="项目简介-13"><a href="#项目简介-13" class="headerlink" title="项目简介"></a>项目简介</h3><p>Monkey is a GitHub third party client for iOS,to show the rank of coders and repositories.</p>
<p><img src="https://raw.githubusercontent.com/coderyi/Monkey/master/Documents/images/6p-1.png" alt=""></p>
<h2 id="DesignerNews"><a href="#DesignerNews" class="headerlink" title="DesignerNews"></a>DesignerNews</h2><h3 id="项目地址-17"><a href="#项目地址-17" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/MengTo/DesignerNewsApp" target="_blank" rel="noopener">https://github.com/MengTo/DesignerNewsApp</a></p>
<h3 id="项目简介-14"><a href="#项目简介-14" class="headerlink" title="项目简介"></a>项目简介</h3><p>Simple iOS client for Designer News, by the creator of Design+Code and the team, written in Swift.</p>
<p><img src="https://github.com/MengTo/DesignerNewsApp/raw/master/Screenshots/designer-news-app.jpg" alt=""></p>
<h2 id="V2EX"><a href="#V2EX" class="headerlink" title="V2EX"></a>V2EX</h2><h3 id="项目地址-18"><a href="#项目地址-18" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/singro/v2ex" target="_blank" rel="noopener">https://github.com/singro/v2ex</a></p>
<h3 id="项目简介-15"><a href="#项目简介-15" class="headerlink" title="项目简介"></a>项目简介</h3><p>An iOS client for v2ex.com</p>
<p><img src="https://camo.githubusercontent.com/c6a771baece16d68042289306522f14da7f2a65c/687474703a2f2f692e763265782e636f2f45776e75433775662e706e67" alt=""></p>
<h1 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h1><h2 id="高仿堆糖"><a href="#高仿堆糖" class="headerlink" title="高仿堆糖"></a>高仿堆糖</h2><h3 id="项目地址-19"><a href="#项目地址-19" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/cornerAnt/PilesSugar" target="_blank" rel="noopener">https://github.com/cornerAnt/PilesSugar</a></p>
<h3 id="项目简介-16"><a href="#项目简介-16" class="headerlink" title="项目简介"></a>项目简介</h3><p><img src="https://github.com/cornerAnt/PilesSugar/raw/master/PilesSugar/demo/1.gif" alt=""></p>
<h2 id="Symphony"><a href="#Symphony" class="headerlink" title="Symphony"></a>Symphony</h2><h3 id="项目地址-20"><a href="#项目地址-20" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/b3log/symphony-ios" target="_blank" rel="noopener">https://github.com/b3log/symphony-ios</a></p>
<h3 id="项目简介-17"><a href="#项目简介-17" class="headerlink" title="项目简介"></a>项目简介</h3><p><img src="https://github.com/b3log/symphony-ios/raw/master/Screenshots/designer-news-app.jpg" alt=""></p>
<h2 id="UberGuide"><a href="#UberGuide" class="headerlink" title="UberGuide"></a>UberGuide</h2><h3 id="项目地址-21"><a href="#项目地址-21" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/hACKbUSTER/UberGuide-iOS" target="_blank" rel="noopener">https://github.com/hACKbUSTER/UberGuide-iOS</a></p>
<h3 id="项目简介-18"><a href="#项目简介-18" class="headerlink" title="项目简介"></a>项目简介</h3><p>It’s the project we did for Uber Hackathon China 2016. This is the repo for iOS client. Using swift and Objective-C.</p>
<p>The project code is ‘UberGuide’, but since the product name can not contain anything related with Uber, so we name it ‘Smart Traveller’.</p>
<p><img src="https://raw.githubusercontent.com/hACKbUSTER/UberGuide-iOS/master/ScreenShots/IMG_0458.PNG" alt=""></p>
<h2 id="V2EX-1"><a href="#V2EX-1" class="headerlink" title="V2EX"></a>V2EX</h2><h3 id="项目地址-22"><a href="#项目地址-22" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/liaojinxing/V2EXClient" target="_blank" rel="noopener">https://github.com/liaojinxing/V2EXClient</a></p>
<h3 id="项目简介-19"><a href="#项目简介-19" class="headerlink" title="项目简介"></a>项目简介</h3><p>Swift实现的V2EX iOS客户端。</p>
<p><img src="https://github.com/liaojinxing/V2EXClient/raw/master/ScreenShot/hot_4.7.png" alt=""></p>
<h2 id="iOS-Swift-Demos"><a href="#iOS-Swift-Demos" class="headerlink" title="iOS Swift Demos"></a>iOS Swift Demos</h2><h3 id="项目地址-23"><a href="#项目地址-23" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/Lax/iOS-Swift-Demos" target="_blank" rel="noopener">https://github.com/Lax/iOS-Swift-Demos</a></p>
<h3 id="项目简介-20"><a href="#项目简介-20" class="headerlink" title="项目简介"></a>项目简介</h3><p>精心收集并分类整理的Swift开发学习资源，包括Apple官方提供的示例代码和文档，以及github上的项目和国内外开发者的技术博客。</p>
<h2 id="try-Swift-Conference-App"><a href="#try-Swift-Conference-App" class="headerlink" title="try! Swift Conference App"></a>try! Swift Conference App</h2><h3 id="项目地址-24"><a href="#项目地址-24" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/tryswift/trySwiftApp" target="_blank" rel="noopener">https://github.com/tryswift/trySwiftApp</a></p>
<h3 id="项目简介-21"><a href="#项目简介-21" class="headerlink" title="项目简介"></a>项目简介</h3><p>try! Swift Conference App。</p>
<h2 id="逗视"><a href="#逗视" class="headerlink" title="逗视"></a>逗视</h2><h3 id="项目地址-25"><a href="#项目地址-25" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/doushiDev/ds_ios" target="_blank" rel="noopener">https://github.com/doushiDev/ds_ios</a></p>
<h3 id="项目简介-22"><a href="#项目简介-22" class="headerlink" title="项目简介"></a>项目简介</h3><p>在这一个高速运转的社会中,大家真的太忙了,没有了欢笑,没有了生活！<br>但是我们生活中不能缺少欢乐，搞笑！那么，逗视来了！！ 你可以在逗视中看到海量的搞笑，恶搞的精彩视频，秒拍，美拍等热门视频。<br>逗视首页分类包括推荐，精华，热门等满足更多人的需求！<br>逗视在发现页面有排行榜功能，看看哪些视频大家都在看！<br>逗视中的视频可以分享到QQ，微信，微博等社交平台，与你的朋友一起欢乐！ 逗视可以说是搞笑视频全聚合！！！一定会让你爱不离手的！！<br>让我们回到以前的自己，天天高高兴兴，让我们开怀大笑吧！！！<br>支持3DTouch 手势，快捷菜单：我的收藏，排行榜</p>
<p><img src="https://camo.githubusercontent.com/872b2fd8f15194e33d04ff800bbed99811610b72/687474703a2f2f3778727868642e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f30783073732e6a7067" alt=""></p>
<h2 id="V2ex-Swift"><a href="#V2ex-Swift" class="headerlink" title="V2ex-Swift"></a>V2ex-Swift</h2><h3 id="项目地址-26"><a href="#项目地址-26" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/Finb/V2ex-Swift" target="_blank" rel="noopener">https://github.com/Finb/V2ex-Swift</a></p>
<h3 id="项目简介-23"><a href="#项目简介-23" class="headerlink" title="项目简介"></a>项目简介</h3><p>An iOS client written in Swift for V2EX.</p>
<p><img src="https://camo.githubusercontent.com/edab88d533027324d39c57630e81bfb2e5e981dc/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f303036306c6d3754677731663164746231327634676a3330616630696a7461612e6a7067" alt=""></p>
<h2 id="Yep"><a href="#Yep" class="headerlink" title="Yep"></a>Yep</h2><h3 id="项目地址-27"><a href="#项目地址-27" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/CatchChat/Yep" target="_blank" rel="noopener">https://github.com/CatchChat/Yep</a></p>
<h3 id="项目简介-24"><a href="#项目简介-24" class="headerlink" title="项目简介"></a>项目简介</h3><p>A community where geniuses meet</p>
<p><img src="https://cloud.githubusercontent.com/assets/1941540/12776320/05da093e-ca90-11e5-8b6f-a50ec826cf9e.jpg" alt=""></p>
<h2 id="Flappy-Bird"><a href="#Flappy-Bird" class="headerlink" title="Flappy Bird"></a>Flappy Bird</h2><h3 id="项目地址-28"><a href="#项目地址-28" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/fullstackio/FlappySwift" target="_blank" rel="noopener">https://github.com/fullstackio/FlappySwift</a></p>
<h3 id="项目简介-25"><a href="#项目简介-25" class="headerlink" title="项目简介"></a>项目简介</h3><p>An implementation of Flappy Bird in Swift for iOS 8.</p>
<p><img src="https://camo.githubusercontent.com/867dfad61329bd77258f00d586b16476c7bc405a/687474703a2f2f692e696d6775722e636f6d2f314e4c6f546f552e676966" alt=""></p>
<h2 id="Swift-Weather"><a href="#Swift-Weather" class="headerlink" title="Swift Weather"></a>Swift Weather</h2><h3 id="项目地址-29"><a href="#项目地址-29" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/JakeLin/SwiftWeather" target="_blank" rel="noopener">https://github.com/JakeLin/SwiftWeather</a></p>
<h3 id="项目简介-26"><a href="#项目简介-26" class="headerlink" title="项目简介"></a>项目简介</h3><p>SwiftWeather is an iOS weather app developed in Swift 2. The app has been actively upgrading to adopt the latest features of iOS and Swift language.</p>
<p><img src="https://raw.githubusercontent.com/JakeLin/SwiftWeather/master/screenshots/SketchDesign.png" alt=""></p>
<h2 id="Hacker-News"><a href="#Hacker-News" class="headerlink" title="Hacker News"></a>Hacker News</h2><h3 id="项目地址-30"><a href="#项目地址-30" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/amitburst/HackerNews" target="_blank" rel="noopener">https://github.com/amitburst/HackerNews</a></p>
<h3 id="项目简介-27"><a href="#项目简介-27" class="headerlink" title="项目简介"></a>项目简介</h3><p>A Hacker News reader iOS app written in Swift.</p>
<p><img src="https://github.com/amitburst/HackerNews/raw/master/Resources/screenshot1.png" alt=""></p>
<h2 id="2048"><a href="#2048" class="headerlink" title="2048"></a>2048</h2><h3 id="项目地址-31"><a href="#项目地址-31" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/austinzheng/swift-2048" target="_blank" rel="noopener">https://github.com/austinzheng/swift-2048</a></p>
<h2 id="Stick-Hero"><a href="#Stick-Hero" class="headerlink" title="Stick Hero"></a>Stick Hero</h2><h3 id="项目地址-32"><a href="#项目地址-32" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/phpmaple/Stick-Hero-Swift" target="_blank" rel="noopener">https://github.com/phpmaple/Stick-Hero-Swift</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>Objective-C</tag>
        <tag>完整项目</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Reveal调试和分析iOS应用UI</title>
    <url>/2016/07/27/Reveal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Reveal是分析、调试iOS应用UI的利器。</p>
<p>Reveal能够在运行时调试和修改iOS应用程序。它能连接到应用程序，并允许开发者编辑各种用户界面参数，这反过来会立即反应在程序的UI上。就像用FireBug调试HTML页面一样，在不需要重写代码、重新构建和重新部署应用程序的情况下就能够调试和修改iOS用户界面。</p>
<a id="more"></a>

<h2 id="安装Reveal"><a href="#安装Reveal" class="headerlink" title="安装Reveal"></a>安装Reveal</h2><p>Reveal 下载地址：<a href="http://revealapp.com/download/" target="_blank" rel="noopener">http://revealapp.com/download/</a></p>
<h2 id="集成指南"><a href="#集成指南" class="headerlink" title="集成指南"></a>集成指南</h2><p>集成Reveal无需添加任何代码，无需引入任何头文件。库将会在应用启动时自动加载，并在您的应用内部启动必要的Reveal服务。</p>
<h3 id="三种集成方式"><a href="#三种集成方式" class="headerlink" title="三种集成方式"></a>三种集成方式</h3><h3 id="静态连接"><a href="#静态连接" class="headerlink" title="静态连接"></a>静态连接</h3><p>将Reveal的静态库文件连接入应用，是最简单快捷地启用Reveal检视的方式。</p>
<blockquote>
<p>警告: 不要将Reveal库文件随着正式应用一起发布。 下面的步骤将会展示如何通过构建配置，而把Reveal静态库文件，仅连接到调试构建的流程中。</p>
</blockquote>
<ol>
<li><p>在Xcode中打开您的iOS工程。</p>
</li>
<li><p>启动Reveal并选择<strong>Help → Show Reveal Library in Finder</strong>，这将会打开Finder窗口，并显示一个名为<strong>iOS-Libraries</strong>的文件夹。</p>
<p><img src="http://file.blog.chaosky.tech/reveal/show-reveal-library-in-finder.jpg" alt=""></p>
</li>
<li><p>将 <strong>Reveal.framework</strong> 文件拖入Xcode中的Project Navigator面板。</p>
<p><img src="http://file.blog.chaosky.tech/reveal/drag-in-reveal-framework.jpg" alt=""></p>
</li>
<li><p>在下图所显示的<strong>Add to targets</strong>对话框中，选择所有您希望与Reveal集成的target。可选步骤：选中<strong>Copy items if needed</strong>，将会把 <strong>Reveal.framework</strong> 拷贝到工程中——如果您这么做了， 请记住，当更新Reveal至新版本时，也依照上述步骤再次更新此库文件。</p>
<p><img src="http://file.blog.chaosky.tech/reveal/add-resource-to-project.jpg" alt=""></p>
</li>
<li><p>点击Finish。</p>
<p><img src="http://file.blog.chaosky.tech/reveal/remove-framework-from-project.jpg" alt=""></p>
</li>
<li><p>选择Build Settings标签，在Other Linker Flags的Debug配置项中加入如下配置。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-ObjC -lz -framework Reveal</span></span><br></pre></td></tr></table></figure>

<p><img src="http://file.blog.chaosky.tech/reveal/add-linker-flags.jpg" alt=""></p>
</li>
<li><p>如果您使用的是Xcode 7, 请确认 Reveal.framework 所在的目录在您的工程配置项 “<strong>Framework Search Paths</strong>” 中。具体的内容看起来会像这样。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">FRAMEWORK_SEARCH_PATHS = <span class="variable">$(inherited)</span> <span class="string">"<span class="variable">$(SYSTEM_APPS_DIR)</span>/Reveal.app/Contents/SharedSupport/iOS-Libraries"</span></span><br></pre></td></tr></table></figure>

<p><img src="http://file.blog.chaosky.tech/reveal/add_framework_search_paths.jpg" alt=""></p>
</li>
<li><p>在Xcode中，构建并运行您的应用。如果应用运行于真实设备之上，请确保此设备与正在运行Reveal的Mac机器，处于同一Wi-Fi网络中。</p>
<p>如果一切正常运行，请切换到Reveal应用，此时您的应用应会出现在应用选择器的下拉列表当中。选中您的应用，确认可以看到此时正在模拟器（或设备）中运行的应用界面截图。</p>
<p><img src="http://file.blog.chaosky.tech/reveal/reveal-app-chooser.jpg" alt=""></p>
</li>
</ol>
<h3 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h3><p>动态加载允许iOS应用在运行时，可以按需地加载第三方库。采用这种方式，库文件无需连接入应用的可执行文件，而是被加入到了应用Bundle中去，从而在运行时能按需加载。这种方式使得开发者可以在个人应用中，完全自由地控制Reveal库的加载，以及其服务的启动与停止。</p>
<p>将Reveal加入您的Xcode工程，使得您团队中的其他成员无需任何额外的配置，就可以使用Reveal。</p>
<blockquote>
<p>警告: 永远不要将包含Reveal动态库文件的应用正式发布。Apple不允许将含有动态加载库文件的iOS应用发布到Apple商店中。</p>
</blockquote>
<ol>
<li><p>在Xcode中打开您的iOS工程。</p>
</li>
<li><p>启动Reveal并选择<strong>Help → Show Reveal Library in Finder</strong>，这将会打开Finder窗口，并显示一个名为iOS-Libraries的文件夹。</p>
<p><img src="http://file.blog.chaosky.tech/reveal/show-reveal-library-in-finder.jpg" alt=""></p>
</li>
<li><p>将 <strong>libReveal.dylib</strong> 文件拖入Xcode中的Project Navigator面板。</p>
<p><img src="http://file.blog.chaosky.tech/reveal/drag-in-reveal-dylib.jpg" alt=""></p>
</li>
<li><p>在下图所显示的<strong>Add to targets</strong>对话框中，<strong>反选所有的target</strong>。这确保了Xcode不会在编译时连接动态库文件。可选步骤：选中<strong>Copy items if needed</strong>，将会把 <strong>libReveal.dylib</strong> 拷贝到工程中——如果您这么做了， 请记住，当更新Reveal至新版本时，也依照上述步骤再次更新此库文件。</p>
<p><img src="http://file.blog.chaosky.tech/reveal/add-resource-to-project-no-targets.jpg" alt=""></p>
</li>
<li><p>点击Finish。</p>
<p><img src="http://file.blog.chaosky.tech/reveal/copy-library-bundle-resources.jpg" alt=""></p>
</li>
<li><p>在<strong>Copy Bundle Resources</strong>配置区域中，加入<strong>libReveal.dylib</strong>。</p>
</li>
<li><p>在<strong>Link Binary With Libraries</strong>配置项中：</p>
<ul>
<li>​如果已有libReveal.dylib，请将其移除——不应在编译时连接dylib文件。</li>
<li>如果下列系统框架与库文件还不存在，请将他们加入：<ul>
<li>libz.tdb</li>
<li>CFNetwork.framework</li>
<li>QuartzCore.framework</li>
<li>CoreGraphics.framework - Xcode一般默认会在工程中包含此框架文件。</li>
</ul>
</li>
</ul>
</li>
<li><p>为了能在debugger之外，将库文件动态地载入设备上的应用，您需要在构建过程中加入对libReveal.dylib文件的code sign。</p>
<p><img src="http://file.blog.chaosky.tech/reveal/add-run-script-phase.jpg" alt=""></p>
<p>进入target的<strong>Build Phases</strong>标签页，选择<strong>Editor → Add Build Phase → Add Run Script</strong>菜单。在Run Script阶段中加入以下内容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$&#123;CODE_SIGN_IDENTITY&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">     codesign -fs <span class="string">"<span class="variable">$&#123;CODE_SIGN_IDENTITY&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;BUILT_PRODUCTS_DIR&#125;</span>/<span class="variable">$&#123;FULL_PRODUCT_NAME&#125;</span>/libReveal.dylib"</span></span><br><span class="line"> <span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将下面的代码加入到项目中合适的类文件中(例如您的<strong>UIApplicationDelegate</strong>)，适当修改使之满足您的需要：</p>
<p><strong>Swift:</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MARK: - Reveal</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">loadReveal</span><span class="params">()</span></span> &#123;</span><br><span class="line">     <span class="keyword">if</span> <span class="type">NSClassFromString</span>(<span class="string">"IBARevealLoader"</span>) == <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="keyword">let</span> revealLibName = <span class="string">"libReveal"</span> <span class="comment">// or "libReveal-tvOS" for tvOS targets</span></span><br><span class="line">         <span class="keyword">let</span> revealLibExtension = <span class="string">"dylib"</span></span><br><span class="line">         <span class="keyword">var</span> error: <span class="type">String?</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> <span class="keyword">let</span> dylibPath = <span class="type">NSBundle</span>.mainBundle().pathForResource(revealLibName, ofType: revealLibExtension) &#123;</span><br><span class="line">             <span class="built_in">print</span>(<span class="string">"Loading dynamic library \(dylibPath)"</span>)</span><br><span class="line"></span><br><span class="line">             <span class="keyword">let</span> revealLib = dlopen(dylibPath, <span class="type">RTLD_NOW</span>)</span><br><span class="line">             <span class="keyword">if</span> revealLib == <span class="literal">nil</span> &#123;</span><br><span class="line">                 error = <span class="type">String</span>(<span class="type">UTF8String</span>: dlerror())</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             error = <span class="string">"File not found."</span></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</span><br><span class="line">             <span class="keyword">let</span> alert = <span class="type">UIAlertController</span>(title: <span class="string">"Reveal library could not be loaded"</span>,</span><br><span class="line">                                         message: <span class="string">"\(revealLibName).\(revealLibExtension) failed to load with error: \(error!)"</span>,</span><br><span class="line">                                  preferredStyle: .<span class="type">Alert</span>)</span><br><span class="line">             alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"OK"</span>, style: .<span class="type">Default</span>, handler: <span class="literal">nil</span>))</span><br><span class="line">             <span class="type">UIApplication</span>.sharedApplication().windows.first?.rootViewController?.presentViewController(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>Objective-C:</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Reveal</span></span><br><span class="line"></span><br><span class="line"> - (<span class="keyword">void</span>)loadReveal</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">NSClassFromString</span>(<span class="string">@"IBARevealLoader"</span>) == <span class="literal">nil</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">NSString</span> *revealLibName = <span class="string">@"libReveal"</span>; <span class="comment">// or @"libReveal-tvOS" for tvOS targets</span></span><br><span class="line">         <span class="built_in">NSString</span> *revealLibExtension = <span class="string">@"dylib"</span>;</span><br><span class="line">         <span class="built_in">NSString</span> *error;</span><br><span class="line">         <span class="built_in">NSString</span> *dyLibPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:revealLibName ofType:revealLibExtension];</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (dyLibPath != <span class="literal">nil</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">NSLog</span>(<span class="string">@"Loading dynamic library: %@"</span>, dyLibPath);</span><br><span class="line">             <span class="keyword">void</span> *revealLib = dlopen([dyLibPath cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>], RTLD_NOW);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (revealLib == <span class="literal">NULL</span>)</span><br><span class="line">             &#123;</span><br><span class="line">                 error = [<span class="built_in">NSString</span> stringWithUTF8String:dlerror()];</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             error = <span class="string">@"File not found."</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (error != <span class="literal">nil</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">NSString</span> *message = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@.%@ failed to load with error: %@"</span>, revealLibName, revealLibExtension, error];</span><br><span class="line">             <span class="built_in">UIAlertController</span> *alert = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"Reveal library could not be loaded"</span></span><br><span class="line">                                                                            message:message</span><br><span class="line">                                                                     preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br><span class="line">             [alert addAction:[<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"OK"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:<span class="literal">nil</span>]];</span><br><span class="line">             [[[[[<span class="built_in">UIApplication</span> sharedApplication] windows] firstObject] rootViewController] presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>警告: 不要在发布（release）构建中调用此方法，确保仅是在应用的调试（debug）构建中加载libReveal.dylib。</p>
</blockquote>
</li>
<li><p>一个简单的集成方式是，在<strong>-[UIApplicationDelegate applicationDidBecomeActive:]</strong>方法中调用上面声明的<strong>- (void)loadReveal</strong>方法，以确保Reveal库尽早地被加载进来。<br><strong>Swift:</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="function"><span class="keyword">func</span> <span class="title">applicationDidBecomeActive</span>:<span class="params">(application: UIApplication)</span></span> &#123;</span><br><span class="line"> <span class="keyword">self</span>.loadReveal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Objective-C:</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">void</span>)applicationDidBecomeActive:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">&#123;</span><br><span class="line">[<span class="keyword">self</span> loadReveal];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>提示</strong>: 在<code>-[UIApplicationDelegate applicationDidBecomeActive:]</code>方法返回之前加载库的一个好处是，将会让Reveal服务在应用启动的同时也自动启动。</p>
</blockquote>
<p>如果您不希望如上述步骤自动启动Reveal服务，也可以以手动的方式来启动，例如通过一个Debug按钮。在应用启动后，自己调用loadReveal方法，然后再分发一个名为IBARevealRequestStart的NSNotification:<br><strong>Swift:</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">func start<span class="constructor">Reveal()</span> &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">NSNotificationCenter</span>.</span></span>default<span class="constructor">Center()</span>.post<span class="constructor">NotificationName(<span class="string">"IBARevealRequestStart"</span>, <span class="params">object</span>: <span class="params">nil</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Objective-C:</strong></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)startReveal</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">[NSNotificationCenter defaultCenter</span>] postNotificationName:<span class="string">@"IBARevealRequestStart"</span> <span class="keyword">object</span>:nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在Xcode中，构建并运行您的应用。如果一切正常运行，请切换到Reveal应用，此时您的应用应会出现在应用选择器的下拉列表当中。选中您的应用，确认可以看到此时正在模拟器（或设备）中运行的应用界面截图。</p>
<p><img src="http://file.blog.chaosky.tech/reveal/reveal-app-chooser.jpg" alt=""></p>
</li>
</ol>
<h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><p>CocoaPods 是一款针对iOS与OSX项目的依赖管理系统。它大大简化了以往Xcode工程里，对第三方库的依赖管理与配置工作。</p>
<p>CocoaPods提供了Podspec用于将Reveal集成入您的项目。</p>
<blockquote>
<p>警告: 不要将连接了Reveal库文件的应用用于正式发布。下面的指南描述了一种使用构建配置来使Reveal静态库文件仅在调试构建中连接的方式。</p>
<p>此说明要求您在之前已经在项目中配置好了CocoaPods，若不然，请先行配置Cocoapods。</p>
</blockquote>
<ol>
<li><p>将下面内容加入你的Podfile中：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">pod <span class="string">'Reveal-iOS-SDK'</span>, :<span class="function"><span class="params">configurations</span> =&gt;</span> [<span class="string">'Debug'</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>在项目的根目录下执行 <strong>pod install</strong> 命令（如果之前已经在项目中使用了Cocoapods，请执行 <strong>pod update</strong> 命令）。</p>
</li>
</ol>
<h2 id="从您的Xcode项目中移除Reveal"><a href="#从您的Xcode项目中移除Reveal" class="headerlink" title="从您的Xcode项目中移除Reveal"></a>从您的Xcode项目中移除Reveal</h2><p>根据您实际所选择的Reveal集成方式，请根据下述相关步骤来移除Reveal。</p>
<p>一旦库文件成功的移除后，下面的内容将不再会在您的应用启动时出现在Xcode控制台:</p>
<p>INFO: Reveal Server started (Protocol Version X).</p>
<h3 id="静态连接-1"><a href="#静态连接-1" class="headerlink" title="静态连接"></a>静态连接</h3><ol>
<li>打开您的Xcode工程。</li>
<li>从 <strong>Project Navigator</strong> 中<strong>删除 Reveal.framework</strong> 的引用。</li>
<li>在Xcode的 <strong>Project Navigator</strong>中选中您的工程，对于每一个集成了Reveal得target，请选择 <strong>Build Settings</strong> 标签页，将下面内容从 Debug 配置中的 Other <strong>Linked Flags</strong> 设置中移除：<ul>
<li>-framework Reveal</li>
<li>-ObjC and -lz (删除前请确认此配置内容仅是用于Reveal)。</li>
</ul>
</li>
<li>搞定 - 运行应用，确认Reveal没有和应用连接上。</li>
</ol>
<h3 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h3><ol>
<li>打开您的Xcode工程。</li>
<li>从 Project Navigator 中<strong>删除 libReveal.dylib</strong> 的引用。</li>
<li>在Xcode的 Project Navigator中选中您的工程，对于每一个集成了Reveal得target，选择 Build Phases 标签页，如果下列库文件仅供Reveal使用的话，请将它们从 Link Binary With Libraries 配置中移除：<ul>
<li>libz.dylib</li>
<li>CFNetwork.framework</li>
<li>QuartzCore.framework</li>
<li>CoreGraphics.framework</li>
</ul>
</li>
<li>将自定义的codesign内容从 Build Phases 下的 Run Script 中删除。</li>
<li>将 <code>loadReveal / startReveal</code> 方法从您的代码中删除。</li>
<li>搞定 - 运行应用，确认Reveal没有和应用连接上。</li>
</ol>
<h3 id="CocoaPods-1"><a href="#CocoaPods-1" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><ol>
<li><p>在您的Podfile文件中删除下面这行内容：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">pod <span class="string">'Reveal-iOS-SDK'</span>, :<span class="function"><span class="params">configurations</span> =&gt;</span> [<span class="string">'Debug'</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目的根目录下执行 pod update 命令。</p>
</li>
<li><p>如果您的 Podfile 中只有 Reveal-iOS-SDK 一个pod依赖，请根据此说明，将CocoaPods从项目中完全移除。</p>
</li>
<li><p>搞定 - 运行应用，确认Reveal没有和应用连接上。</p>
</li>
</ol>
<h2 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h2><p><img src="http://file.blog.chaosky.tech/reveal/reveal_show.png" alt=""></p>
<p>上图是Reveal的运行界面，其界面主要分成3部分：</p>
<ul>
<li><p>左边部分是整个界面的层级关系，在这里可以以树形级层的方式来查看整个界面元素。</p>
</li>
<li><p>中间部分是一个可视化的查看区域，用户可以在这里切换2D或3D的查看方式，这里看到的也是程序运行的实时界面。</p>
</li>
<li><p>右边部边是控件的详细参数查看区域，当我们选中某一个具体的控件时，右边就可以显示出该控件的具体的参数列表。我们除了可以查看这些参数值是否正确外，还可以尝试修改这些值。所有的修改都可以实时反应到中间的实时预览区域。</p>
</li>
</ul>
<h2 id="重要提示"><a href="#重要提示" class="headerlink" title="重要提示"></a>重要提示</h2><ol>
<li><strong>不要将连接了Reveal库文件的应用正式发布</strong>。 Reveal的检视机制，会将您应用的许多内部信息暴露出来，而这将很可能导致您的应用被Apple审查团队拒绝发布。Reveal的目的仅用于内部开发与应用调试。</li>
<li><strong>当iOS应用进入后台后，Reveal服务将会自动停止</strong>。 当应用重新打开时，它又会自动启动。</li>
<li><strong>Reveal支持基于iOS 7及更新版本而编译的应用</strong>。 构建配置中的iOS Deployment Target也必须是’iOS 7.0’或更新版本。 如果iOS版本太旧，您有可能会在构建应用过程中遇到连接错误。</li>
<li><strong>Reveal使用Bonjour协议来连接运行时的iOS应用</strong>。 如果您的iOS应用是运行在真实的设备之上，那么此设备也需要处在同一个网络之内，以便电脑上的Reveal应用能够与之连接。如果您在连接应用时仍遇到问题，请先检查防火墙和代理设置，以确保它们没有阻碍通讯。</li>
</ol>
<h2 id="用Reveal调试其它应用界面"><a href="#用Reveal调试其它应用界面" class="headerlink" title="用Reveal调试其它应用界面"></a>用Reveal调试其它应用界面</h2><p>如果你的设备越狱了，那么还可以用Reveal来”调试“其它应用界面，什么时候会有这种奇怪的需求呢？——当我们想学习别人是如何实现界面效果的时候。iOS设备的目录<strong>/Library/MobileSubstrate/DynamicLibraries</strong> 下存放着所有在系统启动时就需要加载的动态链接库，所以我们只需要将Reveal的动态链接库上传到该目录即可。</p>
<p>对于越狱的设备，我们可以在安装OpenSSH之后，用scp来上传该文件。具体步骤如下：</p>
<p>将libReveal.dylib 上传到 /Library/MobileSubstrate/DynamicLibraries<br>如果libReveal.dylib没有执行权限，用chmod +x libReveal.dylib命令，给其增加执行权限<br>执行 killall SpringBoard 重启桌面</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Reveal</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 开发配置手册——工具篇</title>
    <url>/2016/07/29/macOS-Setup-Guide-Tools/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>工欲善其事，必先利其器。—— 工具篇</p>
</blockquote>
<a id="more"></a>

<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><h3 id="Xcode-Command-Line-Tools"><a href="#Xcode-Command-Line-Tools" class="headerlink" title="Xcode Command Line Tools"></a>Xcode Command Line Tools</h3><p>从 App store 或苹果开发者网站安装 <a href="https://developer.apple.com/xcode/" target="_blank" rel="noopener">Xcode</a> 。  </p>
<p>紧接着，在终端中运行安装 <strong>Xcode Command Line Tools</strong>，执行命令：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure>

<h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p>zsh的介绍可以查看池老师的文章<a href="http://macshuo.com/?p=676" target="_blank" rel="noopener">终极 Shell</a></p>
<h4 id="切换zsh"><a href="#切换zsh" class="headerlink" title="切换zsh"></a>切换zsh</h4><p>切换当前用户的shell，执行命令：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ chsh -s <span class="regexp">/bin/</span>zsh</span><br></pre></td></tr></table></figure>

<p>执行时会要求输入密码</p>
<h4 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h4><p>通过curl安装：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sh <span class="literal">-c</span> <span class="string">"<span class="variable">$</span>(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span></span><br></pre></td></tr></table></figure>

<h4 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h4><p>zsh 的配置主要集中在用户当前目录的.zshrc里，用 vim 或你喜欢的其他编辑器打开.zshrc，具体配置参见官方文档：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a></p>
<h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p>包管理工具可以让你安装和更新程序变得更方便，目前在 macOS 系统中最受欢迎的包管理工具是 Homebrew 。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在安装 Homebrew 之前，需要将 <strong>Xcode Command Line Tools</strong> 安装完成，这样你就可以使用基于 <strong>Xcode Command Line Tools</strong> 编译的 Homebrew。</p>
<p>在<strong>终端</strong>中执行以下命令，跟随指引，将完成 Hombrew 安装。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ <span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></span><br></pre></td></tr></table></figure>

<p>检查brew是否运行正常：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>doctor</span><br></pre></td></tr></table></figure>

<h4 id="Homebrew-基本使用"><a href="#Homebrew-基本使用" class="headerlink" title="Homebrew 基本使用"></a>Homebrew 基本使用</h4><p>安装程序包：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>&lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<p>更新本地Homebrew和程序包缓存：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>update</span><br></pre></td></tr></table></figure>

<p>更新程序包：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ brew<span class="built_in"> upgrade </span>&lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<p>清除旧版程序包：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>cleanup</span><br></pre></td></tr></table></figure>

<p>查看已安装过的程序包列表：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ brew <span class="built_in">list</span> <span class="comment">--versions</span></span><br></pre></td></tr></table></figure>

<h4 id="常用程序包"><a href="#常用程序包" class="headerlink" title="常用程序包"></a>常用程序包</h4><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> brew install carthage</span><br><span class="line"><span class="symbol">$</span> brew install cmake</span><br><span class="line"><span class="symbol">$</span> brew install ffmpeg</span><br><span class="line"><span class="symbol">$</span> brew install gdb			<span class="comment">// GNU debugger</span></span><br><span class="line"><span class="symbol">$</span> brew install git-flow	<span class="comment">//</span></span><br><span class="line"><span class="symbol">$</span> brew install jenkins</span><br><span class="line"><span class="symbol">$</span> brew install llvm			<span class="comment">// Next-gen compiler infrastructure</span></span><br><span class="line"><span class="symbol">$</span> brew install node</span><br><span class="line"><span class="symbol">$</span> brew install nvm</span><br><span class="line"><span class="symbol">$</span> brew install rmtrash		<span class="comment">// Move files to OS X's Trash</span></span><br><span class="line"><span class="symbol">$</span> brew install rename		<span class="comment">// Perl-powered file rename script with many helpful built-ins</span></span><br><span class="line"><span class="symbol">$</span> brew install subversion</span><br><span class="line"><span class="symbol">$</span> brew install swiftenv	<span class="comment">// Swift version manager</span></span><br><span class="line"><span class="symbol">$</span> brew install tldr			<span class="comment">// </span></span><br><span class="line"><span class="symbol">$</span> brew install tree			<span class="comment">//</span></span><br><span class="line"><span class="symbol">$</span> brew install wget</span><br><span class="line"><span class="symbol">$</span> brew install xctool</span><br><span class="line"><span class="symbol">$</span> brew install binutils <span class="comment">// FSF/GNU ld, ar, readelf, etc. for native development</span></span><br></pre></td></tr></table></figure>

<h4 id="安装Homebrew-Cask"><a href="#安装Homebrew-Cask" class="headerlink" title="安装Homebrew Cask"></a>安装Homebrew Cask</h4><p>通过 Homebrew Cask 优雅、简单、快速的安装和管理 OS X 图形界面程序，比如 Google Chrome 和 Dropbox。</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>tap caskroom/cask  // 添加 Github 上的 caskroom/cask 库</span><br><span class="line">$ <span class="keyword">brew </span>install <span class="keyword">brew-cask </span> // 安装 <span class="keyword">brew-cask</span></span><br><span class="line"><span class="keyword">$ </span><span class="keyword">brew </span>cask install google-chrome // 安装 Google 浏览器</span><br><span class="line">$ <span class="keyword">brew </span>update &amp;&amp; <span class="keyword">brew </span>upgrade <span class="keyword">brew-cask </span>&amp;&amp; <span class="keyword">brew </span>cleanup // 更新</span><br></pre></td></tr></table></figure>

<h5 id="文件预览插件"><a href="#文件预览插件" class="headerlink" title="文件预览插件"></a>文件预览插件</h5><p><a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="noopener">https://github.com/sindresorhus/quick-look-plugins</a></p>
<p>有些 插件 可以让 Mac 上的文件预览更有效，比如语法高亮、markdown 渲染、json 预览等等。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>qlcolorcode qlstephen qlmarkdown quicklook-<span class="keyword">json </span>qlimagesize webpquicklook suspicious-package quicklookase qlvideo</span><br><span class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>provisionql</span><br></pre></td></tr></table></figure>

<h5 id="launchrocket"><a href="#launchrocket" class="headerlink" title="launchrocket"></a>launchrocket</h5><p>brew cask 安装 launchrocket，来管理通过 brew 安装的 service</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>launchrocket</span><br></pre></td></tr></table></figure>

<p><img src="http://file.blog.chaosky.tech/2016-08-01-Snip20160729_9.png" alt="Snip20160729_9"></p>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="RVM"><a href="#RVM" class="headerlink" title="RVM"></a>RVM</h4><p>RVM 是一个命令行工具，可以提供一个便捷的多版本 Ruby 环境的管理和切换。</p>
<p><a href="https://rvm.io/" target="_blank" rel="noopener">https://rvm.io/</a></p>
<h5 id="RVM-安装"><a href="#RVM-安装" class="headerlink" title="RVM 安装"></a>RVM 安装</h5><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> curl -sSL https:<span class="comment">//get.rvm.io | bash -s stable --auto-dotfiles</span></span><br><span class="line"><span class="symbol">$</span> source ~/.rvm/scripts/rvm</span><br></pre></td></tr></table></figure>

<p>修改 RVM 的 Ruby 安装源到 Ruby China 的 Ruby 镜像服务器，这样能提高安装速度。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>echo <span class="string">"ruby_url=https://cache.ruby-china.org/pub/ruby"</span> &gt; ~<span class="regexp">/.rvm/user</span><span class="regexp">/db</span></span><br></pre></td></tr></table></figure>

<h5 id="Ruby-的安装与切换"><a href="#Ruby-的安装与切换" class="headerlink" title="Ruby 的安装与切换"></a>Ruby 的安装与切换</h5><p>列出已知的 Ruby 版本</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ rvm <span class="built_in">list</span> known</span><br></pre></td></tr></table></figure>

<p>安装一个 Ruby 版本</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ rvm install <span class="number">2.3</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<p>切换 Ruby 版本</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ rvm use <span class="number">2.3</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">rvm use <span class="number">2.3</span><span class="number">.0</span> --<span class="section">default</span></span><br></pre></td></tr></table></figure>

<p>查询已经安装的ruby</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">rvm <span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<p>卸载一个已安装版本</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">rvm remove <span class="number">2.3</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<h4 id="RubyGems"><a href="#RubyGems" class="headerlink" title="RubyGems"></a>RubyGems</h4><p>RubyGems 是 Ruby 的一个包管理器，提供了分发 Ruby 程序和函式庫的标准格式“gem”，旨在方便地管理gem安装的工具，以及用于分发gem的服务器。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ gem <span class="keyword">install</span> cocoapods</span><br><span class="line">$ gem <span class="keyword">install</span> fastlane</span><br><span class="line">$ gem <span class="keyword">install</span> tty</span><br><span class="line">$ gem <span class="keyword">install</span> leancloud</span><br></pre></td></tr></table></figure>

<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><h4 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h4><p>Python 多版本管理器，可以用来管理和切换不同的 Python 版本。</p>
<h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>pyenv</span><br></pre></td></tr></table></figure>

<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>如果使用的是bash</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">echo</span> 'export PYENV_ROOT=<span class="string">"$HOME/.pyenv"</span>' &gt;&gt; ~<span class="string">/.bashrc</span></span><br><span class="line">$ <span class="keyword">echo</span> 'export PATH=<span class="string">"$PYENV_ROOT/bin:$PATH"</span>' &gt;&gt; ~<span class="string">/.bashrc</span></span><br><span class="line">$ <span class="keyword">echo</span> 'eval <span class="string">"$(pyenv init -)"</span>' &gt;&gt; ~<span class="string">/.bashrc</span></span><br></pre></td></tr></table></figure>

<p>如果使用的是zsh</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">echo</span> 'export PYENV_ROOT=<span class="string">"$HOME/.pyenv"</span>' &gt;&gt; ~<span class="string">/.zshrc</span></span><br><span class="line">$ <span class="keyword">echo</span> 'export PATH=<span class="string">"$PYENV_ROOT/bin:$PATH"</span>' &gt;&gt; ~<span class="string">/.zshrc</span></span><br><span class="line">$ <span class="keyword">echo</span> 'eval <span class="string">"$(pyenv init -)"</span>' &gt;&gt; ~<span class="string">/.zshrc</span></span><br></pre></td></tr></table></figure>

<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>查看现在使用的 Python 版本</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ pyenv <span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<p>查看可供 pyenv 使用的 Python 版本</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>pyenv versions</span><br></pre></td></tr></table></figure>

<p>安装 Python 版本</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ pyenv install <span class="number">3.5</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<p>安装的版本会在~/.pyenv/versions目录下。</p>
<p>此外，可以用 <code>--list</code> 参数查看所有可安装版本</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ pyenv <span class="keyword">install</span> --<span class="keyword">list</span></span><br></pre></td></tr></table></figure>

<p>卸载 Python 版本</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ pyenv uninstall <span class="number">3.5</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<p>设置全局 Python 版本，一般不建议改变全局设置</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ pyenv global <span class="number">3.5</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<p>设置局部 Python 版本</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ pyenv local <span class="number">3.5</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<p>设置之后可以在目录内外分别试下 <code>which python</code>或 <code>python --version</code> 看看效果, 如果没变化的话可以 <code>python rehash</code> 之后再试试</p>
<h4 id="pip-amp-setuptools"><a href="#pip-amp-setuptools" class="headerlink" title="pip &amp; setuptools"></a>pip &amp; setuptools</h4><p>pip 和 setuptools 是 Python 的包管理器。</p>
<p>更新 pip 和 setuptools 包管理器：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> <span class="comment">--upgrade pip setuptools</span></span><br></pre></td></tr></table></figure>

<p>安装程序包</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> &lt;<span class="keyword">package</span>&gt;</span><br></pre></td></tr></table></figure>

<p>通过依赖文件安装程序包</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>卸载程序包</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ pip <span class="keyword">uninstall</span> &lt;<span class="keyword">package</span>&gt;</span><br></pre></td></tr></table></figure>

<p>查看所有已安装程序包</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ pip <span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<p>搜索程序包</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>pip search <span class="string">"query"</span></span><br></pre></td></tr></table></figure>

<p>升级程序包</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ pip <span class="keyword">install</span> <span class="comment">--upgrade SomePackage</span></span><br></pre></td></tr></table></figure>


<p>常用 Python 程序包</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> pip install beautifulsoup4 <span class="comment">// HTML解析</span></span><br><span class="line"><span class="symbol">$</span> pip install NetEase-MusicBox <span class="comment">// 网易云音乐命令行版</span></span><br><span class="line"><span class="symbol">$</span> pip install starred	<span class="comment">// 利用GitHub上stars项目生成类 awesome 列表的汇总页面。</span></span><br></pre></td></tr></table></figure>

<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><h4 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h4><p>node 的版本管理工具。</p>
<h5 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h5><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>nvm</span><br></pre></td></tr></table></figure>

<h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><p>添加一下代码到 .zshrc 配置文件中：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">NVM_DIR</span>=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">. <span class="string">"/usr/local/opt/nvm/nvm.sh"</span></span><br></pre></td></tr></table></figure>

<h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  nvm <span class="comment">--help                                Show this message</span></span><br><span class="line">  nvm <span class="comment">--version                             Print out the latest released version of nvm</span></span><br><span class="line">  nvm <span class="keyword">install</span> [-s] &lt;<span class="keyword">version</span>&gt;                Download <span class="keyword">and</span> <span class="keyword">install</span> a &lt;<span class="keyword">version</span>&gt;, [-s] <span class="keyword">from</span> source. Uses .nvmrc <span class="keyword">if</span> available</span><br><span class="line">    <span class="comment">--reinstall-packages-from=&lt;version&gt;     When installing, reinstall packages installed in &lt;node|iojs|node version number&gt;</span></span><br><span class="line">    <span class="comment">--lts                                   When installing, only select from LTS (long-term support) versions</span></span><br><span class="line">    <span class="comment">--lts=&lt;LTS name&gt;                        When installing, only select from versions for a specific LTS line</span></span><br><span class="line">  nvm <span class="keyword">uninstall</span> &lt;<span class="keyword">version</span>&gt;                   <span class="keyword">Uninstall</span> a <span class="keyword">version</span></span><br><span class="line">  nvm <span class="keyword">uninstall</span> <span class="comment">--lts                       Uninstall using automatic LTS (long-term support) alias `lts/*`, if available.</span></span><br><span class="line">  nvm <span class="keyword">uninstall</span> <span class="comment">--lts=&lt;LTS name&gt;            Uninstall using automatic alias for provided LTS line, if available.</span></span><br><span class="line">  nvm <span class="keyword">use</span> [<span class="comment">--silent] &lt;version&gt;              Modify PATH to use &lt;version&gt;. Uses .nvmrc if available</span></span><br><span class="line">    <span class="comment">--lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.</span></span><br><span class="line">    <span class="comment">--lts=&lt;LTS name&gt;                        Uses automatic alias for provided LTS line, if available.</span></span><br><span class="line">  nvm exec [<span class="comment">--silent] &lt;version&gt; [&lt;command&gt;] Run &lt;command&gt; on &lt;version&gt;. Uses .nvmrc if available</span></span><br><span class="line">    <span class="comment">--lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.</span></span><br><span class="line">    <span class="comment">--lts=&lt;LTS name&gt;                        Uses automatic alias for provided LTS line, if available.</span></span><br><span class="line">  nvm run [<span class="comment">--silent] &lt;version&gt; [&lt;args&gt;]     Run `node` on &lt;version&gt; with &lt;args&gt; as arguments. Uses .nvmrc if available</span></span><br><span class="line">    <span class="comment">--lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.</span></span><br><span class="line">    <span class="comment">--lts=&lt;LTS name&gt;                        Uses automatic alias for provided LTS line, if available.</span></span><br><span class="line">  nvm <span class="keyword">current</span>                               Display currently activated <span class="keyword">version</span></span><br><span class="line">  nvm ls                                    <span class="keyword">List</span> installed <span class="keyword">versions</span></span><br><span class="line">  nvm ls &lt;<span class="keyword">version</span>&gt;                          <span class="keyword">List</span> <span class="keyword">versions</span> matching a given &lt;<span class="keyword">version</span>&gt;</span><br><span class="line">  nvm ls-remote                             <span class="keyword">List</span> remote <span class="keyword">versions</span> available <span class="keyword">for</span> <span class="keyword">install</span></span><br><span class="line">    <span class="comment">--lts                                   When listing, only show LTS (long-term support) versions</span></span><br><span class="line">  nvm ls-remote &lt;<span class="keyword">version</span>&gt;                   <span class="keyword">List</span> remote <span class="keyword">versions</span> available <span class="keyword">for</span> <span class="keyword">install</span>, matching a given &lt;<span class="keyword">version</span>&gt;</span><br><span class="line">    <span class="comment">--lts                                   When listing, only show LTS (long-term support) versions</span></span><br><span class="line">    <span class="comment">--lts=&lt;LTS name&gt;                        When listing, only show versions for a specific LTS line</span></span><br><span class="line">  nvm <span class="keyword">version</span> &lt;<span class="keyword">version</span>&gt;                     Resolve the given description <span class="keyword">to</span> a single <span class="keyword">local</span> <span class="keyword">version</span></span><br><span class="line">  nvm <span class="keyword">version</span>-remote &lt;<span class="keyword">version</span>&gt;              Resolve the given description <span class="keyword">to</span> a single remote <span class="keyword">version</span></span><br><span class="line">    <span class="comment">--lts                                   When listing, only select from LTS (long-term support) versions</span></span><br><span class="line">    <span class="comment">--lts=&lt;LTS name&gt;                        When listing, only select from versions for a specific LTS line</span></span><br><span class="line">  nvm deactivate                            <span class="keyword">Undo</span> effects <span class="keyword">of</span> <span class="string">`nvm`</span> <span class="keyword">on</span> <span class="keyword">current</span> shell</span><br><span class="line">  nvm <span class="keyword">alias</span> [&lt;pattern&gt;]                     <span class="keyword">Show</span> <span class="keyword">all</span> aliases <span class="keyword">beginning</span> <span class="keyword">with</span> &lt;pattern&gt;</span><br><span class="line">  nvm <span class="keyword">alias</span> &lt;<span class="keyword">name</span>&gt; &lt;<span class="keyword">version</span>&gt;                <span class="keyword">Set</span> an <span class="keyword">alias</span> named &lt;<span class="keyword">name</span>&gt; pointing <span class="keyword">to</span> &lt;<span class="keyword">version</span>&gt;</span><br><span class="line">  nvm unalias &lt;<span class="keyword">name</span>&gt;                        Deletes the <span class="keyword">alias</span> named &lt;<span class="keyword">name</span>&gt;</span><br><span class="line">  nvm reinstall-packages &lt;<span class="keyword">version</span>&gt;          Reinstall <span class="keyword">global</span> <span class="string">`npm`</span> packages contained <span class="keyword">in</span> &lt;<span class="keyword">version</span>&gt; <span class="keyword">to</span> <span class="keyword">current</span> <span class="keyword">version</span></span><br><span class="line">  nvm unload                                Unload <span class="string">`nvm`</span> <span class="keyword">from</span> shell</span><br><span class="line">  nvm which [&lt;<span class="keyword">version</span>&gt;]                     Display <span class="keyword">path</span> <span class="keyword">to</span> installed node version. Uses .nvmrc <span class="keyword">if</span> available</span><br><span class="line">  nvm <span class="keyword">cache</span> dir                             Display <span class="keyword">path</span> <span class="keyword">to</span> the <span class="keyword">cache</span> <span class="keyword">directory</span> <span class="keyword">for</span> nvm</span><br><span class="line">  nvm <span class="keyword">cache</span> <span class="keyword">clear</span>                           <span class="keyword">Empty</span> <span class="keyword">cache</span> <span class="keyword">directory</span> <span class="keyword">for</span> nvm</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">  nvm <span class="keyword">install</span> v0<span class="number">.10</span><span class="number">.32</span>                  <span class="keyword">Install</span> a specific <span class="keyword">version</span> <span class="built_in">number</span></span><br><span class="line">  nvm <span class="keyword">use</span> <span class="number">0.10</span>                          <span class="keyword">Use</span> the latest available <span class="number">0.10</span>.x <span class="keyword">release</span></span><br><span class="line">  nvm run <span class="number">0.10</span><span class="number">.32</span> app.js                Run app.js <span class="keyword">using</span> node v0<span class="number">.10</span><span class="number">.32</span></span><br><span class="line">  nvm exec <span class="number">0.10</span><span class="number">.32</span> node app.js          Run <span class="string">`node app.js`</span> <span class="keyword">with</span> the <span class="keyword">PATH</span> pointing <span class="keyword">to</span> node v0<span class="number">.10</span><span class="number">.32</span></span><br><span class="line">  nvm <span class="keyword">alias</span> <span class="keyword">default</span> <span class="number">0.10</span><span class="number">.32</span>             <span class="keyword">Set</span> <span class="keyword">default</span> node <span class="keyword">version</span> <span class="keyword">on</span> a shell</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">  <span class="keyword">to</span> remove, <span class="keyword">delete</span>, <span class="keyword">or</span> <span class="keyword">uninstall</span> nvm - just remove the <span class="string">`$NVM_DIR`</span> folder (usually <span class="string">`~/.nvm`</span>)</span><br></pre></td></tr></table></figure>

<h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><p>node 的包管理器。</p>
<p>安装 node 程序包有两种方式：</p>
<ol>
<li>安装在本地工程项目中，只能本地项目使用，安装命令如下：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> &lt;<span class="keyword">package</span>&gt; <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装为全局程序包，安装命令如下：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> -g &lt;<span class="keyword">package</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="常用全局-npm-程序包"><a href="#常用全局-npm-程序包" class="headerlink" title="常用全局 npm 程序包"></a>常用全局 npm 程序包</h4><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> npm install -g hexo-cli	<span class="comment">// 静态博客</span></span><br><span class="line"><span class="symbol">$</span> npm install -g ionic		<span class="comment">// Hybird 开发</span></span><br><span class="line"><span class="symbol">$</span> npm install -g react-native-cli <span class="comment">// React Native 开发</span></span><br></pre></td></tr></table></figure>

<h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。</p>
<p>find的使用格式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ find <span class="tag">&lt;<span class="name">指定目录</span>&gt;</span> <span class="tag">&lt;<span class="name">指定条件</span>&gt;</span> <span class="tag">&lt;<span class="name">指定动作</span>&gt;</span></span><br><span class="line">- <span class="tag">&lt;<span class="name">指定目录</span>&gt;</span>： 所要搜索的目录及其所有子目录。默认为当前目录。</span><br><span class="line">- <span class="tag">&lt;<span class="name">指定条件</span>&gt;</span>： 所要搜索的文件的特征。</span><br><span class="line">- <span class="tag">&lt;<span class="name">指定动作</span>&gt;</span>： 对搜索结果进行特定的处理。</span><br></pre></td></tr></table></figure>

<h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><p>locate命令其实是”find -name”的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库（/var/lib/locatedb），这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">locate</span>命令的使用实例：</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">locate</span> /etc/sh</span><br><span class="line">搜索etc目录下所有以sh开头的文件。</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">locate</span> ~/m</span><br><span class="line">搜索用户主目录下，所有以m开头的文件。</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">locate</span> -i ~/m</span><br><span class="line">搜索用户主目录下，所有以m开头的文件，并且忽略大小写。</span><br></pre></td></tr></table></figure>

<h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><p>whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">whereis命令的使用实例：</span><br><span class="line"><span class="variable">$ </span>whereis grep</span><br></pre></td></tr></table></figure>

<h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><p>which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span>命令的使用实例：</span><br><span class="line">$ <span class="built_in">which</span> grep</span><br></pre></td></tr></table></figure>

<h3 id="生成-SSH-Keys"><a href="#生成-SSH-Keys" class="headerlink" title="生成 SSH Keys"></a>生成 SSH Keys</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure>

<h2 id="GUI工具"><a href="#GUI工具" class="headerlink" title="GUI工具"></a>GUI工具</h2><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><h4 id="替换系统默认终端-iTerm-2"><a href="#替换系统默认终端-iTerm-2" class="headerlink" title="替换系统默认终端 - iTerm 2"></a>替换系统默认终端 - iTerm 2</h4><h4 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h4><p>推荐安装搜狗输入法。</p>
<h4 id="窗口管理软件-SizeUp"><a href="#窗口管理软件-SizeUp" class="headerlink" title="窗口管理软件 - SizeUp"></a>窗口管理软件 - SizeUp</h4><h4 id="查找文件和应用程序-Alfred"><a href="#查找文件和应用程序-Alfred" class="headerlink" title="查找文件和应用程序 - Alfred"></a>查找文件和应用程序 - Alfred</h4><p>Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac.</p>
<h4 id="来杯免费咖啡-Caffeine"><a href="#来杯免费咖啡-Caffeine" class="headerlink" title="来杯免费咖啡 - Caffeine"></a>来杯免费咖啡 - Caffeine</h4><p>你应该立刻安装这款免费的良心软件—Caffeine，设置开机启动，点一下状态栏的咖啡杯图标，当咖啡是满的时候，MacBook将不会进入休眠模式，再点一下咖啡杯空了就正常休眠，我默认设置开机启动，咖啡杯保持满满的状态。</p>
<h4 id="快速切换和打开应用程序-Manico"><a href="#快速切换和打开应用程序-Manico" class="headerlink" title="快速切换和打开应用程序 - Manico"></a>快速切换和打开应用程序 - Manico</h4><p>MacBook系统默认设置了一个快捷键来显示当前运行中的应用程序，同时按下tab + command，将看到如下图的样式：</p>
<h4 id="随心所欲的复制粘贴-PopClip"><a href="#随心所欲的复制粘贴-PopClip" class="headerlink" title="随心所欲的复制粘贴 - PopClip"></a>随心所欲的复制粘贴 - PopClip</h4><h4 id="增强资源管理器-XtraFinder"><a href="#增强资源管理器-XtraFinder" class="headerlink" title="增强资源管理器 - XtraFinder"></a>增强资源管理器 - XtraFinder</h4><h4 id="管理状态栏图标-Bartender"><a href="#管理状态栏图标-Bartender" class="headerlink" title="管理状态栏图标 - Bartender"></a>管理状态栏图标 - Bartender</h4><h4 id="音乐播放器-网易云音乐"><a href="#音乐播放器-网易云音乐" class="headerlink" title="音乐播放器 - 网易云音乐"></a>音乐播放器 - 网易云音乐</h4><h4 id="词典-有道词典"><a href="#词典-有道词典" class="headerlink" title="词典 - 有道词典"></a>词典 - 有道词典</h4><h4 id="文本编辑-Atom，Visual-Studio-Code"><a href="#文本编辑-Atom，Visual-Studio-Code" class="headerlink" title="文本编辑 - Atom，Visual Studio Code"></a>文本编辑 - Atom，Visual Studio Code</h4><h4 id="文本比较-Beyond-Compare"><a href="#文本比较-Beyond-Compare" class="headerlink" title="文本比较 - Beyond Compare"></a>文本比较 - Beyond Compare</h4><h4 id="垃圾清理-CleanMyMac-3"><a href="#垃圾清理-CleanMyMac-3" class="headerlink" title="垃圾清理 - CleanMyMac 3"></a>垃圾清理 - CleanMyMac 3</h4><h4 id="U盘启动制作-DiskMaker-X-5"><a href="#U盘启动制作-DiskMaker-X-5" class="headerlink" title="U盘启动制作 - DiskMaker X 5"></a>U盘启动制作 - DiskMaker X 5</h4><h4 id="笔记-Evernote"><a href="#笔记-Evernote" class="headerlink" title="笔记 - Evernote"></a>笔记 - Evernote</h4><h4 id="屏幕颜色调整（保护眼睛）-Flux"><a href="#屏幕颜色调整（保护眼睛）-Flux" class="headerlink" title="屏幕颜色调整（保护眼睛）- Flux"></a>屏幕颜色调整（保护眼睛）- Flux</h4><h4 id="图床-iPic"><a href="#图床-iPic" class="headerlink" title="图床 - iPic"></a>图床 - iPic</h4><h4 id="系统监测-iStat-Menus"><a href="#系统监测-iStat-Menus" class="headerlink" title="系统监测 - iStat Menus"></a>系统监测 - iStat Menus</h4><h4 id="gif-录制-licecap"><a href="#gif-录制-licecap" class="headerlink" title="gif 录制 - licecap"></a>gif 录制 - licecap</h4><h4 id="Markdown-MacDown，MWeb，Typora"><a href="#Markdown-MacDown，MWeb，Typora" class="headerlink" title="Markdown - MacDown，MWeb，Typora"></a>Markdown - MacDown，MWeb，Typora</h4><h4 id="思维导图-MindNode，XMind"><a href="#思维导图-MindNode，XMind" class="headerlink" title="思维导图 - MindNode，XMind"></a>思维导图 - MindNode，XMind</h4><h4 id="视频播放-MPlayerX"><a href="#视频播放-MPlayerX" class="headerlink" title="视频播放 - MPlayerX"></a>视频播放 - MPlayerX</h4><h4 id="流程图制作-OmniGraffle"><a href="#流程图制作-OmniGraffle" class="headerlink" title="流程图制作 - OmniGraffle"></a>流程图制作 - OmniGraffle</h4><h4 id="绘图-Paintbrush"><a href="#绘图-Paintbrush" class="headerlink" title="绘图 - Paintbrush"></a>绘图 - Paintbrush</h4><h4 id="虚拟机-Parallels-Desktop，VirtualBox"><a href="#虚拟机-Parallels-Desktop，VirtualBox" class="headerlink" title="虚拟机 - Parallels Desktop，VirtualBox"></a>虚拟机 - Parallels Desktop，VirtualBox</h4><h4 id="壁纸-Pimp-Your-Screen"><a href="#壁纸-Pimp-Your-Screen" class="headerlink" title="壁纸 - Pimp Your Screen"></a>壁纸 - Pimp Your Screen</h4><h4 id="Mac版PhotoShop-Pixelmator"><a href="#Mac版PhotoShop-Pixelmator" class="headerlink" title="Mac版PhotoShop - Pixelmator"></a>Mac版PhotoShop - Pixelmator</h4><h4 id="稍候阅读-Pocket"><a href="#稍候阅读-Pocket" class="headerlink" title="稍候阅读 - Pocket"></a>稍候阅读 - Pocket</h4><h4 id="番茄钟-Pomodoro-Time"><a href="#番茄钟-Pomodoro-Time" class="headerlink" title="番茄钟 - Pomodoro Time"></a>番茄钟 - Pomodoro Time</h4><h4 id="录屏-ScreenFlow"><a href="#录屏-ScreenFlow" class="headerlink" title="录屏 - ScreenFlow"></a>录屏 - ScreenFlow</h4><h4 id="翻墙-Lantern，ShadowsocksX，Surge"><a href="#翻墙-Lantern，ShadowsocksX，Surge" class="headerlink" title="翻墙 - Lantern，ShadowsocksX，Surge"></a>翻墙 - Lantern，ShadowsocksX，Surge</h4><h4 id="屏幕截图-Snip"><a href="#屏幕截图-Snip" class="headerlink" title="屏幕截图 - Snip"></a>屏幕截图 - Snip</h4><h4 id="解压缩-The-Unarchiver"><a href="#解压缩-The-Unarchiver" class="headerlink" title="解压缩 - The Unarchiver"></a>解压缩 - The Unarchiver</h4><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="文档查看-Dash"><a href="#文档查看-Dash" class="headerlink" title="文档查看 - Dash"></a>文档查看 - Dash</h4><h4 id="Andorid-开发-Android-Studio"><a href="#Andorid-开发-Android-Studio" class="headerlink" title="Andorid 开发 - Android Studio"></a>Andorid 开发 - Android Studio</h4><h4 id="原型设计-Axure-RP"><a href="#原型设计-Axure-RP" class="headerlink" title="原型设计 - Axure RP"></a>原型设计 - Axure RP</h4><h4 id="网络抓包-Charles"><a href="#网络抓包-Charles" class="headerlink" title="网络抓包 - Charles"></a>网络抓包 - Charles</h4><h4 id="iOS-动画制作-Core-Animator"><a href="#iOS-动画制作-Core-Animator" class="headerlink" title="iOS 动画制作 - Core Animator"></a>iOS 动画制作 - Core Animator</h4><h4 id="SVN版本控制管理-Cornerstone"><a href="#SVN版本控制管理-Cornerstone" class="headerlink" title="SVN版本控制管理 - Cornerstone"></a>SVN版本控制管理 - Cornerstone</h4><h4 id="Git版本控制管理-SourceTree"><a href="#Git版本控制管理-SourceTree" class="headerlink" title="Git版本控制管理 - SourceTree"></a>Git版本控制管理 - SourceTree</h4><h4 id="HTML-5-制作-Hype-3"><a href="#HTML-5-制作-Hype-3" class="headerlink" title="HTML 5 制作 - Hype 3"></a>HTML 5 制作 - Hype 3</h4><h4 id="应用程序图标制作-IconKit"><a href="#应用程序图标制作-IconKit" class="headerlink" title="应用程序图标制作 - IconKit"></a>应用程序图标制作 - IconKit</h4><h4 id="Objective-C-转换为Swift代码-iSwift"><a href="#Objective-C-转换为Swift代码-iSwift" class="headerlink" title="Objective-C 转换为Swift代码 - iSwift"></a>Objective-C 转换为Swift代码 - iSwift</h4><h4 id="json数据解析-Jason，JSON-Wizard"><a href="#json数据解析-Jason，JSON-Wizard" class="headerlink" title="json数据解析 - Jason，JSON Wizard"></a>json数据解析 - Jason，JSON Wizard</h4><h4 id="数据库-Navicat-Premium"><a href="#数据库-Navicat-Premium" class="headerlink" title="数据库 - Navicat Premium"></a>数据库 - Navicat Premium</h4><h4 id="SQLite数据库-sqlitebrowser"><a href="#SQLite数据库-sqlitebrowser" class="headerlink" title="SQLite数据库 - sqlitebrowser"></a>SQLite数据库 - sqlitebrowser</h4><h4 id="查看Github-Star-OhMyStar"><a href="#查看Github-Star-OhMyStar" class="headerlink" title="查看Github Star - OhMyStar"></a>查看Github Star - OhMyStar</h4><h4 id="Turn-drawings-into-code-PaintCode"><a href="#Turn-drawings-into-code-PaintCode" class="headerlink" title="Turn drawings into code - PaintCode"></a>Turn drawings into code - PaintCode</h4><h4 id="HTTP-API-测试-Paw"><a href="#HTTP-API-测试-Paw" class="headerlink" title="HTTP API 测试 - Paw"></a>HTTP API 测试 - Paw</h4><h4 id="iOS-UI-调试-Reveal"><a href="#iOS-UI-调试-Reveal" class="headerlink" title="iOS UI 调试 - Reveal"></a>iOS UI 调试 - Reveal</h4><h4 id="屏幕取色-Sip"><a href="#屏幕取色-Sip" class="headerlink" title="屏幕取色 - Sip"></a>屏幕取色 - Sip</h4><h4 id="移动应用原型设计-Sketch"><a href="#移动应用原型设计-Sketch" class="headerlink" title="移动应用原型设计 - Sketch"></a>移动应用原型设计 - Sketch</h4><h4 id="UML绘图-StarUML"><a href="#UML绘图-StarUML" class="headerlink" title="UML绘图 - StarUML"></a>UML绘图 - StarUML</h4>]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Setup Guide</tag>
      </tags>
  </entry>
  <entry>
    <title>Unix 编程艺术</title>
    <url>/2016/09/05/Unix-Art/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>《Unix 编程艺术》：这本书在模块化、文本化、配置、接口、复杂度、优化、可移植性等方面，都提供了Unix/Linux世界所积累的宝贵经验。好的程序可以经受时间、平台与用户的考验，好的编程思想可以经受实践的检验。</p>
<blockquote>
<p>读书笔记摘录自 《Unix 编程艺术》</p>
</blockquote>
<h2 id="Unix-设计原则"><a href="#Unix-设计原则" class="headerlink" title="Unix 设计原则"></a>Unix 设计原则</h2><p>所有的 Unix 哲学浓缩为一条铁律，『KISS』原则：Keep It Simple, Stupid!</p>
<a id="more"></a>

<h3 id="Unix-管道的发明人、Unix-传统的奠基人之一-Doug-Mcllroy"><a href="#Unix-管道的发明人、Unix-传统的奠基人之一-Doug-Mcllroy" class="headerlink" title="Unix 管道的发明人、Unix 传统的奠基人之一 Doug Mcllroy"></a>Unix 管道的发明人、Unix 传统的奠基人之一 Doug Mcllroy</h3><ol>
<li>让每个程序就做好一件事。如果有新任务，就重新开始，不要往原程序中加入新功能而搞得复杂。</li>
<li>假定每个程序的输出都会成为另一个程序的输入，哪怕那个程序还是未知的。输出中不要有无关的信息干扰。避免使用严格的分栏格式和二进制格式输入。不要坚持使用交互式输入。</li>
<li>尽可能早地将设计和编译的软件投入试用，哪怕是操作系统也不例外，理想情况下，应该是在几星期内。对拙劣的代码别犹豫，扔掉重写。</li>
<li>优先使用工具而不是拙劣的帮助来减轻编程任务的负担。工欲善其事必先利其器。</li>
</ol>
<p>一个程序只做一件事，并做好。程序要能协作。程序要能处理文本流，因为这是最通用的接口。</p>
<h3 id="最伟大的C语言大师之一-Rob-Pike"><a href="#最伟大的C语言大师之一-Rob-Pike" class="headerlink" title="最伟大的C语言大师之一 Rob Pike"></a>最伟大的C语言大师之一 Rob Pike</h3><ol>
<li><p>你无法断定程序会在什么地方耗费运行时间。瓶颈经常出现在想不到的地方，所以别急于胡乱找个地方改代码，除非你已经证实那儿就是瓶颈所在。</p>
</li>
<li><p>估量。在你没对代码进行估量，特别是没找到最耗时的那部分之前，别去优化速度。</p>
</li>
<li><p>花哨的算法在 n 很小时通常很慢，而 n 通常很小。花哨算法的常数复杂度很大。除非你确定 n 总是很大，否则不要用花哨算法（即使 n 很大，也优先考虑原则2）。</p>
</li>
<li><p>花哨的算法比简单算法更容易出 bug，更难实现。尽量使用简单的算法配合简单的数据结构。</p>
<blockquote>
<p>拿不准就穷举。</p>
</blockquote>
</li>
<li><p>数据压倒一切。如果已经选择了正确的数据结构并且把一切都组织得井井有条，正确的算法也就不言自明。编程的核心是数据结构，而不是算法。</p>
<blockquote>
<p>给我看流程图而不让我看数据表，我仍会迷茫不解；如果给我看数据表，通常就不需要流程图了；数据表是够说明问题了。</p>
</blockquote>
</li>
</ol>
<h3 id="Unix-哲学"><a href="#Unix-哲学" class="headerlink" title="Unix 哲学"></a>Unix 哲学</h3><h4 id="模块原则：使用简洁的接口拼合简单的部件"><a href="#模块原则：使用简洁的接口拼合简单的部件" class="headerlink" title="模块原则：使用简洁的接口拼合简单的部件"></a>模块原则：使用简洁的接口拼合简单的部件</h4><p>计算机编程的本质就是控制复杂度。</p>
<p>要编制复杂软件而又不至于一败涂地的唯一方法就是降低其整体复杂度——用清晰的接口把若干简单的模块组合成一个复杂软件。如此一来，多数问题只会局限于某个局部，那么就还有希望对局部进行改进而不至牵动全身。</p>
<h4 id="清晰原则：清晰胜于机巧"><a href="#清晰原则：清晰胜于机巧" class="headerlink" title="清晰原则：清晰胜于机巧"></a>清晰原则：清晰胜于机巧</h4><p>在写程序时，要想到你不是写给执行代码的计算机看的，而是给人——将来阅读维护源码的人，包括你自己——看的。</p>
<p>在选择算法和实现时就应该考虑到将来的可扩展性。而为了取得程序一丁点的性能提升就大幅度增加技术的复杂度和晦涩性，这个买卖做不得——这不仅仅是因为复杂的代码容易滋生 bug，也因为它会使日后的阅读和维护工作更加艰难。</p>
<p>相反，优雅而清晰的代码不仅不容易崩溃——而且更易于让后来的修改者立刻理解。</p>
<p>永远不要去吃力地解读语段晦涩的代码三次。</p>
<h4 id="组合原则：设计时考虑拼接组合"><a href="#组合原则：设计时考虑拼接组合" class="headerlink" title="组合原则：设计时考虑拼接组合"></a>组合原则：设计时考虑拼接组合</h4><p>如果程序彼此之间不能有效通信，那么软件就难免会陷入复杂度的泥淖。</p>
<p>在输入输出方面，Unix 传统极力提倡采用简单、文本化、面向流、设备无关的格式。文本刘界面的简洁性加强了工具的封装性。</p>
<p>要想让程序具有组合性，就要使程序彼此独立。在文本流这一端的程序应该尽可能不要考虑文本流另一端的程序。将一端的程序替换为另一个截然不同的程序，而完全不惊扰另一端应该很容易做到。</p>
<p>当程序无法自然地使用序列化、协议形式的接口时，正确的 Unix 设计至少是，把尽可能多的编程元素组织为一套定义良好的 API。这样，至少你可以通过链接调用应用程序，或者可以根据不同任务的需求粘合使用不同的接口。</p>
<h4 id="分离原则：策略同机制分离，接口同引擎分离"><a href="#分离原则：策略同机制分离，接口同引擎分离" class="headerlink" title="分离原则：策略同机制分离，接口同引擎分离"></a>分离原则：策略同机制分离，接口同引擎分离</h4><p>实行机制，而不是策略。因为策略和机制是按照不同的时间尺度变化的，策略的变化要远远快于机制。GUI 工具包的观感时尚来去匆匆，而光栅操作和组合却是永恒的。</p>
<h4 id="简洁原则：设计要简洁，复杂度能低则低"><a href="#简洁原则：设计要简洁，复杂度能低则低" class="headerlink" title="简洁原则：设计要简洁，复杂度能低则低"></a>简洁原则：设计要简洁，复杂度能低则低</h4><p>简洁而漂亮。总是设法将程序系统分解为几个能够协作的小部分，并本能地抵制任何用过多噱头来粉饰程序的企图。</p>
<h4 id="吝啬原则：除非确无他法，不要编写庞大的程序"><a href="#吝啬原则：除非确无他法，不要编写庞大的程序" class="headerlink" title="吝啬原则：除非确无他法，不要编写庞大的程序"></a>吝啬原则：除非确无他法，不要编写庞大的程序</h4><p>『大』有两重含义：体积大，复杂程度高。程序大了，维护起来就困难。</p>
<h4 id="透明性原则：设计要可见，以便审查和调试"><a href="#透明性原则：设计要可见，以便审查和调试" class="headerlink" title="透明性原则：设计要可见，以便审查和调试"></a>透明性原则：设计要可见，以便审查和调试</h4><p>因为调试通常会占用四分之三甚至更多的开发时间，所有一开始就多做点工作以减少日后调试的工作量会很划算。一个特别有效的减少调试工作量的方法就是设计时充分考虑透明性和显见性。</p>
<p>软件系统的透明性是指你一眼就能看出软件是在做什么以及怎么做的。显见性指程序带有监视和显示内部状态的功能，这样程序不仅能够运行良好，而且还可以看得出它以何种方式运行。</p>
<p>程序如果要展示其正确性，应该使用足够简单的输入输出格式，这样才能保证很容易地检验有效输入和正确输出之间的关系是否正确。</p>
<p>出于充分考虑透明性和显见性的目的，还应该提倡接口简洁，以方便其他程序对其进行操作——尤其是测试监视工具和调试脚本。</p>
<h4 id="健壮原则：健壮源于透明与简洁"><a href="#健壮原则：健壮源于透明与简洁" class="headerlink" title="健壮原则：健壮源于透明与简洁"></a>健壮原则：健壮源于透明与简洁</h4><p>软件的健壮性指软件不仅能在正常情况下运行良好，而且在超出设计者设想的意外条件下也能够运行良好。</p>
<p>让程序健壮的方法，就是让程序的内部逻辑更易于理解。要做到这一点主要两种方法：透明化和简洁化。</p>
<p>在有异常输入的情况下，保证软件健壮性的一个相当重要的策略就是避免在代码中出现特例。bug 通常隐藏在处理特例的代码以及处理不同特殊情况的交互操作部分的代码中。</p>
<p>模块性（代码简朴，接口简洁）是组织程序以达到更简洁目的的一个方法。</p>
<h4 id="表示原则：把知识叠入数据以求逻辑质朴而健壮"><a href="#表示原则：把知识叠入数据以求逻辑质朴而健壮" class="headerlink" title="表示原则：把知识叠入数据以求逻辑质朴而健壮"></a>表示原则：把知识叠入数据以求逻辑质朴而健壮</h4><p>即使最简单的程序逻辑让人类来验证也很困难，但是就算是很复杂的数据，对人类来说，还是相对容易地就能够推导和建模的。</p>
<p>数据要比编程逻辑更容易驾驭。所以接下来，如果要在复杂数据和复杂代码中选择一个，宁愿选择前者。更进一步：在设计中，你应该主动将代码的复杂度转移到数据之中去。</p>
<p>特别是 C 语言对指针使用控制的功能，促进了在内核以上各个编码层面上对动态修改引用结构。在结构中用非常简单的指针操作就能够完成的任务，在其他语言中，往往不得不用更复杂的过程才能完成。</p>
<h4 id="通俗原则：接口设计避免标新立异"><a href="#通俗原则：接口设计避免标新立异" class="headerlink" title="通俗原则：接口设计避免标新立异"></a>通俗原则：接口设计避免标新立异</h4><p>也就是众所周知的『最少惊奇原则』。</p>
<p>最易用的程序就是用户需要学习新东西最少的程序——或者，换句话说，最易用的程序就是最切合用户已有知识的程序。</p>
<p>接口设计应该避免毫无来由的标新立异和自作聪明；关注目标受众，对于不同的人群，最少惊奇的意义也不同；关注传统惯例，Unix 世界形成了一套系统的惯例，这些惯例的存在有个极好的理由：缓和学习曲线。</p>
<h4 id="缄默原则：如果一个程序没什么好说的，就保持沉默"><a href="#缄默原则：如果一个程序没什么好说的，就保持沉默" class="headerlink" title="缄默原则：如果一个程序没什么好说的，就保持沉默"></a>缄默原则：如果一个程序没什么好说的，就保持沉默</h4><p>Unix 中最古老最持久的设计原则之一就是：若程序没有什么特别之处可讲，就保持沉默。行为良好的程序应该默默工作，决不唠唠叨叨，碍手碍脚。沉默是金。</p>
<p>设计良好的程序将用户的注意力视为有限的宝贵资源，只有在必要时才要求使用。</p>
<h4 id="补救原则：出现异常时，马上退出并给出足量错误信息"><a href="#补救原则：出现异常时，马上退出并给出足量错误信息" class="headerlink" title="补救原则：出现异常时，马上退出并给出足量错误信息"></a>补救原则：出现异常时，马上退出并给出足量错误信息</h4><p>软件在发生错误的时候也应该与在正常操作的情况下一样，有透明的逻辑。最理想的情况当然是软件能够适应和应付非正常操作；而如果补救措施明明没有成功，却悄无声息地埋下崩溃的隐患，直到很久以后才显现出来，这就是最坏的一种情况。</p>
<p>因此，软件要尽可能从容地应付各种错误输入和自身的运行错误。但是，如果做不到这一点，就让程序尽可能以一种容易诊断错误的方式终止。</p>
<h4 id="经济原则：宁花机器一分，不花程序员一秒"><a href="#经济原则：宁花机器一分，不花程序员一秒" class="headerlink" title="经济原则：宁花机器一分，不花程序员一秒"></a>经济原则：宁花机器一分，不花程序员一秒</h4><h4 id="生成原则：避免手工-hack，尽量编写程序去生成程序"><a href="#生成原则：避免手工-hack，尽量编写程序去生成程序" class="headerlink" title="生成原则：避免手工 hack，尽量编写程序去生成程序"></a>生成原则：避免手工 hack，尽量编写程序去生成程序</h4><p>程序中的任何手工 hacking 都是滋生错误和延误的温床。程序规格越简单抽象，设计者就越容易做对。有程序生成代码几乎（在各个层次）总是比手写代码廉价并且更值得信赖。</p>
<h4 id="优化原则：雕琢前先得有原型，跑之前先学会走"><a href="#优化原则：雕琢前先得有原型，跑之前先学会走" class="headerlink" title="优化原则：雕琢前先得有原型，跑之前先学会走"></a>优化原则：雕琢前先得有原型，跑之前先学会走</h4><p>原型设计最基本的原则：『90%的功能现在能实现，比100%的功能永远实现不了强』。做好原型设计可以帮助你避免为蝇头小利而投入过多的时间。</p>
<p>过早的优化是万恶之源。</p>
<p>还不知道瓶颈所在就匆忙进行优化，这可能是唯一一个比乱加功能更损害设计的错误。从畸形的代码到杂乱无章的数据布局，牺牲透明性和简洁性而片面追求速度、内存或者磁盘使用的后果随处可见。滋生无数 bug，耗费以百万计的人时——这点芝麻大的好处，远不能抵消后续排错所付出的代价。</p>
<p>先制作原型，在精雕细琢。优化之前先确保能用。</p>
<p>先求运行，再求正确，最后求快。</p>
<p>先给你的设计做个未优化的、运行缓慢、很耗内存但是正确的实现，然后进行系统地调整，寻找那些可以通过牺牲最小的局部简洁性而获得较大性能提升的地方。</p>
<p>制作原型对于系统设计和优化同样重要——比起阅读一个冗长的规格说明，判断一个原型究竟是不是符合设想要容易得多。借助原型化找出哪些功能不必实现，有助于对性能进行优化；那些不用写的代码显然无需优化。</p>
<h4 id="多样原则：绝不相信所谓『不二法门』的断言"><a href="#多样原则：绝不相信所谓『不二法门』的断言" class="headerlink" title="多样原则：绝不相信所谓『不二法门』的断言"></a>多样原则：绝不相信所谓『不二法门』的断言</h4><p>即使最出色的软件也常常会受限于设计者的想象力。没有人能聪明到把所有东西都最优化，也不可能预想到软件所有可能的用途。设计一个僵化、封闭、不愿与外界沟通的软件，简直就是一种病态的傲慢。</p>
<p>Unix 奉行的是广泛采用多种语言、开放的可扩展系统和用户定制机制。</p>
<h4 id="扩展原则：设计着眼未来，未来总比预想快"><a href="#扩展原则：设计着眼未来，未来总比预想快" class="headerlink" title="扩展原则：设计着眼未来，未来总比预想快"></a>扩展原则：设计着眼未来，未来总比预想快</h4><p>为数据格式和代码留下扩展的空间，否则，就会发现自己常常被原先的不明智选择捆住了手脚，因为你无法既要改变他们又要维持对原来的兼容性。</p>
<p>设计协议或者文件格式时，应使其具有充分的自描述性以便可以扩展。</p>
<p>设计代码时，要有很好的组织，让将来的开发者增加新功能时无需拆毁或者重建整个架构。</p>
<h3 id="运用-Unix-哲学"><a href="#运用-Unix-哲学" class="headerlink" title="运用 Unix 哲学"></a>运用 Unix 哲学</h3><p>要良好的运用 Unix 哲学，你就应该不断追求卓越。你必须相信，软件设计时一门技艺，值得你付出所有的智慧、创造力和激情。否则，你的视线就不会超越哪些简单、老套的设计和实现：你就会在应该思考的时候急急忙忙跑去编程。你就会在该无情删繁就简的时候反而把问题复杂化——然后你还会反过来奇怪你的代码怎么会那么臃肿、那么难以调试，</p>
<p>要良好地运用 Unix 哲学，你应该珍惜你的时间绝不浪费。一旦某人已经解决了某个问题，就直接拿来利用，不要让骄傲或偏见拽住你又去重做一遍。永远不要蛮干：要多用巧劲，省下力气到需要的时候在用，好钢用在刀刃上。善用工具，尽可能将一切都自动化。</p>
]]></content>
      <categories>
        <category>软件设计</category>
      </categories>
      <tags>
        <tag>Unix 编程艺术</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】ARC 最佳实践</title>
    <url>/2016/11/04/ARC-Best-Practices/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>英文原文出处：<a href="http://amattn.com/p/arc_best_practices.html" target="_blank" rel="noopener">http://amattn.com/p/arc_best_practices.html</a></p>
<h2 id="一些可选背景故事："><a href="#一些可选背景故事：" class="headerlink" title="一些可选背景故事："></a>一些可选背景故事：</h2><ul>
<li>相关文档：<a href="https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html" target="_blank" rel="noopener">迁移至ARC版本说明</a></li>
<li>Mike Ash 在他的 <a href="http://www.mikeash.com/pyblog/friday-qa-2011-09-30-automatic-reference-counting.html" target="_blank" rel="noopener">Friday Q&amp;As</a> 也有一篇关于ARC的文章。</li>
<li>深入的技术文档在 LLVM 项目的 <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html" target="_blank" rel="noopener">CLANG 网站</a>上。</li>
</ul>
<p>假设你正在使用 iOS 5 或者更高版本，而不是 4。实际上，弱指针是 ARC 中的一个重要工具，所以我不建议在 iOS 4 中使用 ARC。</p>
<h2 id="更新注意事项"><a href="#更新注意事项" class="headerlink" title="更新注意事项"></a>更新注意事项</h2><p>这份文件自从2011年发布以来，一直在不断更新。最后一次微小的修订是在 2013年发布 iOS 7。</p>
<a id="more"></a>

<h2 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h2><ul>
<li><p>纯量类型属性应该使用 <strong>assign</strong>。</p>
  <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">int</span> scalarInt;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> scalarFloat;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGPoint</span> scalarStruct;</span><br></pre></td></tr></table></figure></li>
<li><p>需要保留或者引用向下对象层次结构的对象属性应该使用 <strong>strong</strong>。</p>
  <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> childObject;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用向上对象层次结构的对象属性应该使用 <strong>weak</strong>。此外，当引用委托对象时，<strong>weak</strong> 是最安全的。</p>
  <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> parentObject;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">NSObject</span> &lt;SomeDelegate&gt; *delegate;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Blocks</strong> 仍然应该使用 <strong>copy</strong>。</p>
  <figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"> </span>(nonatomic, copy) SomeBlockType someBlock;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <strong>dealloc</strong> 中：</p>
<ul>
<li>移除观察者</li>
<li>注销通知</li>
<li>设置所有不是 <strong>weak</strong> 的委托为 <strong>nil</strong></li>
<li>使所有定时器失效（译注：如果定时器是strong的属性，dealloc可能永远都不会被调用，所以定时器失效应该在ViewWillDisappear中完成）</li>
</ul>
</li>
<li><p><strong>IBOutlets</strong> 应该是 <strong>weak</strong>，除了顶层 <strong>IBOutlets</strong>是 <strong>strong</strong>。（译注：使用storyboard（xib不行）创建的vc，会有一个叫_topLevelObjectsToKeepAliveFromStoryboard的私有数组强引用所有top level的对象，所以这时即便outlet声明成weak也没关系）</p>
</li>
</ul>
<h2 id="桥接"><a href="#桥接" class="headerlink" title="桥接"></a>桥接</h2><p>官方文档：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> my_id;</span><br><span class="line"><span class="built_in">CFStringRef</span> my_cfref;</span><br><span class="line"><span class="built_in">NSString</span>   *a = (__bridge <span class="built_in">NSString</span>*)my_cfref;     <span class="comment">// Noop cast.</span></span><br><span class="line"><span class="built_in">CFStringRef</span> b = (__bridge <span class="built_in">CFStringRef</span>)my_id;      <span class="comment">// Noop cast.</span></span><br><span class="line"><span class="built_in">NSString</span>   *c = (__bridge_transfer <span class="built_in">NSString</span>*)my_cfref; <span class="comment">// -1 on the CFRef</span></span><br><span class="line"><span class="built_in">CFStringRef</span> d = (__bridge_retained <span class="built_in">CFStringRef</span>)my_id;  <span class="comment">// returned CFRef +1</span></span><br></pre></td></tr></table></figure>

<p>详细解释：</p>
<ul>
<li><strong>__bridge</strong> 对于内存管理是无操作的</li>
<li><strong>__bridge_transfer</strong> 用于转换 CFRef 为 Objective-C 对象。ARC 将减少 CFRef 的retain count，因此请确保 CFRef 具有+1 retain count。</li>
<li><strong>__bridge_retained</strong> 用于转换 Objective-C 对象为 CFRef。这将有效地给你返回一个 retain count +1的CFRef。 您有责任在未来某个时候调用 CFRef 的 CFRelease。</li>
</ul>
<h2 id="NSError"><a href="#NSError" class="headerlink" title="NSError"></a>NSError</h2><p>无处不在的 <strong>NSError</strong> 是有点棘手。典型的 Cocoa 约定是它们通过输出参数（也称为间接指针）实现。</p>
<p>在ARC中，输出参数默认是 <strong>__autoreleasing</strong>，应该这样实现:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)performWithError:(__autoreleasing <span class="built_in">NSError</span> **)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ... some error occurs ...</span></span><br><span class="line">    <span class="keyword">if</span> (error)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// write to the out-parameter, ARC will autorelease it</span></span><br><span class="line">        *error = [[<span class="built_in">NSError</span> alloc] initWithDomain:<span class="string">@""</span> </span><br><span class="line">                                            code:<span class="number">-1</span> </span><br><span class="line">                                        userInfo:<span class="literal">nil</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当使用输出参数时，你应该在 <strong>*error</strong> 对象使用 <strong>__autoreleasing</strong>。</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">NSError __autoreleasing *error = <span class="built_in">error</span>;</span><br><span class="line"><span class="keyword">BOOL</span> OK = [myObject performOperationWithError:&amp;<span class="built_in">error</span>];</span><br><span class="line"><span class="keyword">if</span> (!OK)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// handle the error.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你忘记 <strong>__autoreleasing</strong>，编译器将会简单地为你插入一个临时的中间自动释放对象。 这是在向后兼容性的压迫性制度下作出的妥协。我看到一些编译器配置不会自动使它们<strong>__autoreleasing</strong>。 对所有新代码包含 <strong>__autoreleasing</strong> 更安全的。</p>
<h2 id="autoreleasepool"><a href="#autoreleasepool" class="headerlink" title="@autoreleasepool"></a>@autoreleasepool</h2><p>使用 <strong>@autoreleasepool</strong> 内部循环：</p>
<ul>
<li>迭代很多，很多次</li>
<li>创建大量的临时对象</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// If someArray is huge</span></span><br><span class="line"><span class="selector-tag">for</span> (id obj in someArray)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">@autoreleasepool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// or you are creating lots </span></span><br><span class="line">        <span class="comment">// of temporary objects here...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <strong>@autoreleasepool</strong> 指令创建和销毁自动释放池比蓝灯特价(译注：blue light special是沃尔玛的一个购物区域)还便宜。不要担心在循环中这样做。如果你超偏执，至少先检查profiler。</p>
<h2 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h2><p>一般来说，<strong>blocks</strong> 都能使用。但是有一些例外。</p>
<p>当将 <strong>block</strong> 指针添加到集合时，你首先得复制它们。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">someBlockType someBlock = ^&#123;NSLog(@<span class="string">"hi"</span>);&#125;;</span><br><span class="line">[someArray addObject:[someBlock <span class="keyword">copy</span><span class="bash">]];</span></span><br></pre></td></tr></table></figure>

<p><strong>blocks</strong> 的循环引用有些危险。你可能看到过这个警告：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">warning</span>: capturing <span class="string">'self'</span> strongly <span class="keyword">in</span> this </span><br><span class="line">block <span class="keyword">is</span> likely <span class="keyword">to</span> lead <span class="keyword">to</span> a retain <span class="keyword">cycle</span> </span><br><span class="line">[-Warc-retain-cycles,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">SomeBlockType someBlock = ^&#123;</span><br><span class="line">    [self someMethod];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>原因是 <strong>someBlock</strong> 被 self 强引用，并且当 <strong>block</strong> 拷贝到堆中时将捕获并且 retain  <strong>self</strong>。</p>
<p>使用任何实例变量也将捕获父对象，同样有不太明显的潜在循环引用：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The following block will retain "self"</span></span><br><span class="line">SomeBlockType someBlock = ^&#123;</span><br><span class="line">    <span class="keyword">BOOL</span> isDone = _isDone;  <span class="comment">// _isDone is an ivar of self</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>更安全，但令人愉快的解决办法是使用 <strong>weakSelf</strong>：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> SomeObjectClass *weakSelf = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">SomeBlockType someBlock = ^&#123;</span><br><span class="line">    SomeObjectClass *strongSelf = weakSelf;</span><br><span class="line">    <span class="keyword">if</span> (strongSelf == <span class="literal">nil</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The original self doesn't exist anymore.</span></span><br><span class="line">        <span class="comment">// Ignore, notify or otherwise handle this case.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        [strongSelf someMethod];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>有时，你需要注意避免使用任意对象的循环引用：如果 <strong>someObject</strong> 强引用 <strong>someObject</strong> 的 <strong>block</strong>，你需要使用 <strong>weakSomeObject</strong> 打破循环引用。</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">SomeObjectClass *someObject = ...</span><br><span class="line"><span class="variable">__weak</span> SomeObjectClass *weakSomeObject = someObject;</span><br><span class="line"></span><br><span class="line">someObject.completionHandler = ^&#123;</span><br><span class="line">    SomeObjectClass *strongSomeObject = weakSomeObject;</span><br><span class="line">    <span class="keyword">if</span> (strongSomeObject == <span class="literal">nil</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The original someObject doesn't exist anymore.</span></span><br><span class="line">        <span class="comment">// Ignore, notify or otherwise handle this case.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// okay, NOW we can do something with someObject</span></span><br><span class="line">        [strongSomeObject someMethod];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="从NS对象或者UI对象访问CGRef"><a href="#从NS对象或者UI对象访问CGRef" class="headerlink" title="从NS对象或者UI对象访问CGRef"></a>从NS对象或者UI对象访问CGRef</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIColor</span> *redColor = [<span class="built_in">UIColor</span> redColor]; </span><br><span class="line"><span class="built_in">CGColorRef</span> redRef = redColor.CGColor;</span><br><span class="line"><span class="comment">// do some stuff with redRef.</span></span><br></pre></td></tr></table></figure>

<p>上面的例子有一些非常微妙的问题。当你创建 <strong>redRef</strong>，如果 <strong>redColor</strong> 不再使用，那么<strong>redColor</strong> 就在注释代码之后被销毁。</p>
<p>问题是 <strong>redColor</strong> 持有 <strong>redRef</strong>，并且当访问 <strong>redRef</strong>，它可能或者可能不再是 <strong>colorRef</strong>。更糟的是，这种类型的错误很少出现在模拟器上。当在较低工作内存的设备（比如：早期的iPad）上使用时，更有可能发生。</p>
<p>有几个解决办法。基本上都是当你在使用 <strong>redRef</strong> 时，保证 <strong>redColor</strong> 不会被释放。</p>
<p>一种非常简单的实现就是使用 <strong>__autoreleasing</strong>。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIColor</span> * __autoreleasing redColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line"><span class="built_in">CGColorRef</span> redRef = redColor.CGColor;</span><br></pre></td></tr></table></figure>

<p>现在，<strong>redColor</strong> 不会被销毁，直到方法返回后某个不确定的时间，都能很好地使用。 我们可以安全地在方法的作用域使用 <strong>redRef</strong>。</p>
<p>另一个方法是 retain <strong>redRef</strong>：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIColor</span> *redColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line"><span class="built_in">CGColorRef</span> redRef = <span class="built_in">CFRetain</span>(redColor.CGColor);</span><br><span class="line"><span class="comment">// use redRef and when done release it:</span></span><br><span class="line"><span class="built_in">CFRelease</span>(redRef);</span><br></pre></td></tr></table></figure>

<p>重要提示：你需要 在使用<strong>redColor.CGColor</strong> 的同一行使用 <strong>CFRetain()</strong>。<strong>redColor</strong> 在上次使用之后有效地被破坏。以下方式不会有用：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIColor</span> *redColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line"><span class="built_in">CGColorRef</span> redRef = redColor.CGColor; <span class="comment">// redColor is released right after this...</span></span><br><span class="line"><span class="built_in">CFRetain</span>(redRef);  <span class="comment">// This may crash...</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>上面标有“This may crash”一行是一个有趣的注释。再次，我的经验里在模拟器上它不会经常崩溃，但在实际的iOS设备上100%崩溃。开发者请注意。</p>
<p>The Big Nerd Ranch 对这个问题有非常深入的探讨: <a href="http://weblog.bignerdranch.com/?p=296" target="_blank" rel="noopener">http://weblog.bignerdranch.com/?p=296</a></p>
<h2 id="Singletons"><a href="#Singletons" class="headerlink" title="Singletons"></a>Singletons</h2><p>仅仅偶然地与ARC有关。本地生成的单例实现是一种激增。（许多不必要的重写 retain 和 release）</p>
<p>这些都应该被替换为以下代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (MyClass *)singleton</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> MyClass *sharedMyClass = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> once = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;once, ^&#123;sharedMyClass = [[<span class="keyword">self</span> alloc] init];&#125;);</span><br><span class="line">    <span class="keyword">return</span> sharedMyClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每一次你需要销毁单例的能力。如果你使用这个除了 UnitTests，你可能不再使用单例。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// declare the static variable outside of the singleton method</span></span><br><span class="line"><span class="keyword">static</span> MyClass *__sharedMyClass = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">+ (MyClass *)singleton</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> once = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;once, ^&#123;__sharedMyClass = [[<span class="keyword">self</span> alloc] init];&#125;);</span><br><span class="line">    <span class="keyword">return</span> __sharedMyClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// For use by test frameworks only!</span></span><br><span class="line">- (<span class="keyword">void</span>)destroyAndRecreateSingleton</span><br><span class="line">&#123;</span><br><span class="line">    __sharedMyClass = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="译者后记"><a href="#译者后记" class="headerlink" title="译者后记"></a>译者后记</h2><p>第一次翻译，请大家多多指教。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>ARC</tag>
        <tag>译文</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 依赖库管理工具</title>
    <url>/2016/11/13/Cocoa-Dependency-Manager/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h2><h3 id="CocoaPods-简介"><a href="#CocoaPods-简介" class="headerlink" title="CocoaPods 简介"></a>CocoaPods 简介</h3><p>CocoaPods是一个用来帮助我们管理第三方依赖库的工具。它可以解决库与库之间的依赖关系，下载库的源代码，同时通过创建一个Xcode的workspace来将这些第三方库和我们的工程连接起来，供我们开发使用。</p>
<p>使用CocoaPods的目的是让我们能自动化的、集中的、直观的管理第三方开源库。</p>
<a id="more"></a>

<h3 id="检查Mac是否安装Ruby和gem"><a href="#检查Mac是否安装Ruby和gem" class="headerlink" title="检查Mac是否安装Ruby和gem"></a>检查Mac是否安装Ruby和gem</h3><p>在终端中输入命令：<code>ruby --version</code> 和<code>gem --version</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ ruby --version</span><br><span class="line">ruby <span class="number">2.0</span><span class="number">.0</span>p643 (<span class="number">2015</span><span class="number">-02</span><span class="number">-25</span> revision <span class="number">49749</span>) [x86_64-darwin14<span class="number">.3</span><span class="number">.0</span>]</span><br><span class="line">$ gem --version</span><br><span class="line"><span class="number">2.4</span><span class="number">.8</span></span><br></pre></td></tr></table></figure>

<p>Ruby 是一门开发语言，gem 为 Ruby 第三方库管理工具，CocoaPods 是用 Ruby 写的一个第三方工具。</p>
<p><strong>Ruby的版本需要大于 2.2.2版本。如果小于该版本，通过以下方式安装更高版本的 Ruby。</strong></p>
<h3 id="安装-Ruby-环境"><a href="#安装-Ruby-环境" class="headerlink" title="安装 Ruby 环境"></a>安装 Ruby 环境</h3><ol>
<li><p>安装 Xcode 及 Command Line Tools。安装 Command Line Tools 命令：<code>xcode-select --install</code></p>
</li>
<li><p>安装 RVM，Ruby 的多版本管理工具。并通过 RVM 安装更高版本的 Ruby。</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> curl -L https:<span class="comment">//get.rvm.io | bash -s stable</span></span><br><span class="line"><span class="symbol">$</span> source ~/.rvm/scripts/rvm</span><br><span class="line"><span class="symbol">$</span> rvm install <span class="number">2.3</span><span class="number">.0</span></span><br><span class="line"><span class="symbol">$</span> rvm use <span class="number">2.3</span><span class="number">.0</span></span><br><span class="line"><span class="symbol">$</span> /bin/bash --login</span><br></pre></td></tr></table></figure></li>
<li><p>修改 gem 镜像</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ gem sources --<span class="built_in">add</span> http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.org/ --<span class="built_in">remove</span> http<span class="variable">s:</span>//rubygems.org/</span><br><span class="line">$ gem sources -<span class="keyword">l</span></span><br><span class="line">http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.org</span><br><span class="line"># 确保只有 gems.<span class="keyword">ruby</span>-china.org</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="安装-CocoaPods"><a href="#安装-CocoaPods" class="headerlink" title="安装 CocoaPods"></a>安装 CocoaPods</h3><p>安装</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ gem <span class="keyword">install</span> cocoapods</span><br></pre></td></tr></table></figure>

<p>初始化 CocoaPods 环境</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">$ pod <span class="built_in">setup</span></span><br></pre></td></tr></table></figure>

<p>初始化环境需要更新下载 CocoaPods 仓库，该步骤花费很长时间。更简便的方式是：从其他已初始化好的电脑上，拷贝目录 <code>~/.cocoapods/repos/</code> 到本机的相同目录中。</p>
<h3 id="使用-CocoaPods"><a href="#使用-CocoaPods" class="headerlink" title="使用 CocoaPods"></a>使用 CocoaPods</h3><ol>
<li><p>创建 Xcode 工程并切换到该工程路径</p>
</li>
<li><p>使用命令 <code>pod init</code> 在当前文件夹下生成一个 <strong>Podfile</strong> 文件</p>
</li>
<li><p>编辑 Podfile，输入如下类似信息：</p>
 <figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>vim Podfile</span><br><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'8.0'</span></span><br><span class="line"><span class="comment"># 屏蔽 CocoaPods 库里面的所有警告</span></span><br><span class="line">inhibit_all_warnings!</span><br><span class="line">	</span><br><span class="line">target <span class="string">'CocoaPodsDemo'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 可以用framework的pod替代静态库</span></span><br><span class="line">  <span class="comment"># use_frameworks!</span></span><br><span class="line">	</span><br><span class="line">  <span class="comment"># Pods for CocoaPodsDemo</span></span><br><span class="line">  pod <span class="string">"AFNetworking"</span>, <span class="string">"~&gt; 2.5.4"</span></span><br><span class="line">  pod <span class="string">'SDWebImage'</span></span><br><span class="line">  pod <span class="string">'KVNProgress'</span></span><br><span class="line">	</span><br><span class="line">  target <span class="string">'CocoaPodsDemoTests'</span> <span class="keyword">do</span></span><br><span class="line">    inherit! <span class="symbol">:search_paths</span></span><br><span class="line">    <span class="comment"># Pods for testing</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">  target <span class="string">'CocoaPodsDemoUITests'</span> <span class="keyword">do</span></span><br><span class="line">    inherit! <span class="symbol">:search_paths</span></span><br><span class="line">    <span class="comment"># Pods for testing</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>Pod 语法格式为：<code>pod &#39;第三库名称&#39;, &#39;版本号&#39;</code>，一个依赖项通过pod名和可选的版本号来声明。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pod</span> <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 2.5.4'</span></span><br></pre></td></tr></table></figure>
<p>最新版本的依赖，可以忽略版本号，这样写：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pod</span> <span class="string">'AFNetworking'</span></span><br></pre></td></tr></table></figure>
<p>指定Pod固定版本，可以写上具体的版本号来指定：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pod</span> <span class="string">'AFNetworking'</span>, <span class="string">'2.5.4'</span></span><br></pre></td></tr></table></figure>
<p>版本号标识区别：</p>
<blockquote>
<p><strong>&gt;1.0</strong>        高于1.0的任何版本<br><strong>&gt;= 1.0</strong>    至少版本为1.0<br><strong>&lt;1.0</strong>        低于1.0的任何版本<br><strong>&lt;=1.0</strong>        版本1.0和任何低于1.0的版本<br><strong>~&gt; 1.0</strong>     兼容1.0版本的最新版<br><strong>== 1.0或1.0</strong>    都表示指定版本</p>
</blockquote>
<p><strong>inhibit_all_warnings!</strong>：屏蔽 CocoaPods 库里面的所有警告<br><strong>use_frameworks!</strong>：可以用framework的pod替代静态库</p>
</li>
<li><p>安装工程依赖的第三方库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ pod <span class="keyword">install</span></span><br><span class="line">Updating <span class="keyword">local</span> specs repositories</span><br><span class="line">Analyzing dependencies</span><br><span class="line">Downloading dependencies</span><br><span class="line">Installing AFNetworking (<span class="number">2.5</span><span class="number">.4</span>)</span><br><span class="line">Installing KVNProgress (<span class="number">2.2</span><span class="number">.2</span>)</span><br><span class="line">Installing SDWebImage (<span class="number">3.7</span><span class="number">.3</span>)</span><br><span class="line">Generating Pods <span class="keyword">project</span></span><br><span class="line">Integrating <span class="keyword">client</span> <span class="keyword">project</span></span><br><span class="line">[!] Please <span class="keyword">close</span> <span class="keyword">any</span> <span class="keyword">current</span> Xcode sessions <span class="keyword">and</span> <span class="keyword">use</span> <span class="string">`CocoaPodsDemo.xcworkspace`</span> <span class="keyword">for</span> this <span class="keyword">project</span> <span class="keyword">from</span> <span class="keyword">now</span> on.</span><br><span class="line">Sending stats</span><br><span class="line">Pod installation <span class="keyword">complete</span>! There <span class="keyword">are</span> <span class="number">3</span> dependencies <span class="keyword">from</span> the Podfile <span class="keyword">and</span> <span class="number">3</span> total</span><br><span class="line">pods installed.</span><br></pre></td></tr></table></figure>

<p>若出现<code>pods installed</code>字样表示安装成功。</p>
</li>
<li><p>关闭Xcode工程，打开.xcworkspace文件。</p>
</li>
<li><p>在工程中导入第三库文件，只需要<code>#import &lt;AFNetworking.h&gt;</code>类似的即可，开启CocoaPods之旅。</p>
</li>
</ol>
<p>更多用法参考本文提供的参考链接。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://code4app.com/article/cocoapods-install-usage" target="_blank" rel="noopener">http://code4app.com/article/cocoapods-install-usage</a></li>
<li><a href="http://blog.csdn.net/wzzvictory/article/details/18737437" target="_blank" rel="noopener">http://blog.csdn.net/wzzvictory/article/details/18737437</a></li>
<li><a href="http://blog.csdn.net/wzzvictory/article/details/19178709" target="_blank" rel="noopener">http://blog.csdn.net/wzzvictory/article/details/19178709</a></li>
</ol>
<h2 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h2><h3 id="Carthage-简介"><a href="#Carthage-简介" class="headerlink" title="Carthage 简介"></a>Carthage 简介</h3><p>Carthage的目标是用最简单的方式来管理Cocoa第三方框架。</p>
<p>Carthage编译你的依赖，并提供框架的二进制文件，但你仍然保留对项目的结构和设置的完整控制。Carthage不会自动的修改你的项目文件或编译设置。</p>
<p><strong>Carthage只正式支持动态框架，动态框架能够在任何版本的OS X上使用，但只能在iOS 8及以上版本使用。</strong></p>
<h3 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h3><p>OS X 不可或缺的套件管理器，用于安装命令工具。</p>
<p>终端中执行如下命令：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></span><br></pre></td></tr></table></figure>

<h3 id="安装-Carthage"><a href="#安装-Carthage" class="headerlink" title="安装 Carthage"></a>安装 Carthage</h3><p>终端执行命令安装Carthage</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span>update</span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>carthage</span><br></pre></td></tr></table></figure>

<h3 id="使用Carthage"><a href="#使用Carthage" class="headerlink" title="使用Carthage"></a>使用Carthage</h3><ol>
<li><p>创建Xcode工程并切换到该工程路径</p>
</li>
<li><p>创建一个<code>Cartfile</code>，将你想要使用的框架列在里面</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">github <span class="string">"AFNetworking/AFNetworking"</span><span class="function"> ~&gt;</span> <span class="number">3.0</span></span><br><span class="line">github <span class="string">"rs/SDWebImage"</span></span><br></pre></td></tr></table></figure></li>
<li><p>运行<code>carthage update</code>，将获取依赖文件到一个<code>Carthage.checkout</code>文件夹，然后编译每个依赖</p>
</li>
<li><p>在你的应用程序target的<code>General</code>设置标签中的<code>Embedded Binaries</code>区域，将框架从<code>Carthage.build</code>文件夹拖拽进去。</p>
</li>
</ol>
<h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://www.cocoachina.com/ios/20141204/10528.html" target="_blank" rel="noopener">http://www.cocoachina.com/ios/20141204/10528.html</a></li>
<li><a href="https://github.com/Carthage/Carthage" target="_blank" rel="noopener">官方文档</a></li>
</ol>
<h2 id="Carthage与CocoaPods的不同"><a href="#Carthage与CocoaPods的不同" class="headerlink" title="Carthage与CocoaPods的不同"></a>Carthage与CocoaPods的不同</h2><ol>
<li><p>Carthage只支持iOS 8及以上版本使用。</p>
</li>
<li><p>首先，CocoaPods默认会自动创建并更新你的应用程序和所有依赖的Xcode workspace。Carthage使用xcodebuild来编译框架的二进制文件，但如何集成它们将交由用户自己判断。CocoaPods的方法更易于使用，但Carthage更灵活并且是非侵入性的。</p>
</li>
<li><p>CocoaPods的目标在它的README文件描述如下：</p>
<blockquote>
<p>…为提高第三方开源库的可见性和参与度，创建一个更中心化的生态系统。</p>
</blockquote>
<p>与之对照，Carthage创建的是去中心化的依赖管理器。它没有总项目的列表，这能够减少维护工作并且避免任何中心化带来的问题（如中央服务器宕机）。不过，这样也有一些缺点，就是项目的发现将更困难，用户将依赖于Github的趋势页面或者类似的代码库来寻找项目。</p>
</li>
<li><p>CocoaPods项目同时还必须包含一个podspec文件，里面是项目的一些元数据，以及确定项目的编译方式。Carthage使用xcodebuild来编译依赖，而不是将他们集成进一个workspace，因此无需类似的设定文件。不过依赖需要包含自己的Xcode工程文件来描述如何编译。</p>
</li>
<li><p>最后，我们创建Carthage的原因是想要一种尽可能简单的工具——一个只关心本职工作的依赖管理器，而不是取代部分Xcode的功能，或者需要让框架作者做一些额外的工作。CocoaPods提供的一些特性很棒，但由于附加的复杂性，它们将不会被包含在Carthage当中。</p>
</li>
</ol>
<h2 id="Swift-Package-Manager"><a href="#Swift-Package-Manager" class="headerlink" title="Swift Package Manager"></a>Swift Package Manager</h2><p>Swift包管理器是一个用于管理Swift代码分发的工具。它与Swift构建系统集成，自动化处理下载、编译和链接依赖关系。</p>
<p>软件包管理器包含在Swift 3.0及更高版本中。</p>
<h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><p>下载安装 <a href="https://developer.apple.com/download/" target="_blank" rel="noopener">Xcode 8.1</a>。</p>
<h4 id="Ubuntu-Linux"><a href="#Ubuntu-Linux" class="headerlink" title="Ubuntu Linux"></a>Ubuntu Linux</h4><ol>
<li><p>安装以下Linux 系统包：</p>
 <figure class="highlight q"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">$ sudo apt-<span class="built_in">get</span> install clang libicu-<span class="built_in">dev</span> libcurl4-openssl-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></li>
<li><p>从 <a href="https://swift.org/download/" target="_blank" rel="noopener">swift.org</a> 下载 Swift 工具链。</p>
</li>
<li><p>解压缩 <strong>.tar.gz</strong> 文件，更新 <strong>PATH</strong> 环境变量，包含以下工具：</p>
 <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ <span class="builtin-name">export</span> <span class="attribute">PATH</span>=&lt;path <span class="keyword">to</span> uncompressed tar contents&gt;/usr/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><ol>
<li><p>创建工程路径</p>
 <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> myFirstProject</span><br></pre></td></tr></table></figure></li>
<li><p>使用 Swift 包管理器创建 Swift 工程</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> myFirstProject</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> swift package init --<span class="built_in">type</span> executable</span></span><br></pre></td></tr></table></figure></li>
<li><p>在 <strong>myFirstProject</strong> 目录下的目录结构如下</p>
 <figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">myFirstProject</span></span><br><span class="line">├── Package.<span class="keyword">swift</span></span><br><span class="line"><span class="keyword">├── </span>Sources</span><br><span class="line">│   └── main.<span class="keyword">swift</span></span><br><span class="line"><span class="keyword">└── </span>Tests</span><br></pre></td></tr></table></figure></li>
<li><p>在 <strong>Package.swift</strong> 中添加依赖项</p>
 <figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line">let <span class="keyword">package</span> = <span class="keyword">Package</span>(</span><br><span class="line">    name: <span class="string">"myFirstProject"</span>,</span><br><span class="line">    <span class="keyword">dependencies</span>: [</span><br><span class="line">        .<span class="keyword">Package</span>(url: <span class="string">"https://github.com/IBM-Swift/Kitura.git"</span>, majorVersion: <span class="number">1</span>, minor: <span class="number">1</span>)</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure></li>
<li><p>编译程序</p>
 <figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">swift </span><span class="keyword">build</span></span><br></pre></td></tr></table></figure></li>
<li><p>在代码中就可以通过 <code>import Kitura</code> 导入模块。<br> 在 <strong>Sources/main.swift</strong> 添加如下代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">  import Kitura</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new router</span></span><br><span class="line"><span class="keyword">let</span> router = <span class="constructor">Router()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle HTTP GET requests to /</span></span><br><span class="line">router.get(<span class="string">"/"</span>) &#123;</span><br><span class="line">    request, response, next <span class="keyword">in</span></span><br><span class="line">    response.send(<span class="string">"Hello, World!"</span>)</span><br><span class="line">    next<span class="literal">()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add an HTTP server and connect it to the router</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Kitura</span>.</span></span>add<span class="constructor">HTTPServer(<span class="params">onPort</span>: 8090, <span class="params">with</span>: <span class="params">router</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the Kitura runloop (this call never returns)</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Kitura</span>.</span></span>run<span class="literal">()</span></span><br></pre></td></tr></table></figure></li>
<li><p>运行</p>
 <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ .build<span class="regexp">/debug/my</span>FirstProject</span><br></pre></td></tr></table></figure></li>
<li><p>在 macOS 上可以生成 Xcode 工程</p>
 <figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">$ swift <span class="keyword">package</span> <span class="keyword">generate</span>-xcodeproj</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>CocoaPods</tag>
        <tag>Carthage</tag>
      </tags>
  </entry>
  <entry>
    <title>OS X Cocos2d-x 环境搭建</title>
    <url>/2017/02/23/Cocos2d-x-Install/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Cocos2d-x-引擎"><a href="#Cocos2d-x-引擎" class="headerlink" title="Cocos2d-x 引擎"></a>Cocos2d-x 引擎</h2><p>Cocos2d-x引擎可在 Cocos官网下载，其下载地址为：<a href="http://www.cocos.com/download/" target="_blank" rel="noopener">http://www.cocos.com/download/</a>。当然，亦可从Cocos2d-x的 GitHub 仓库拉取，仓库地址：<a href="https://github.com/cocos2d/cocos2d-x" target="_blank" rel="noopener">https://github.com/cocos2d/cocos2d-x</a>。下载完成后，引擎包的主要内容下。<br><img src="http://file.blog.chaosky.tech/2017-03-06-framework_architecture.jpg" alt="framework_architecture"></p>
<ul>
<li>AUTHORS：作者目录，包含所有给Cocos2d-x引擎贡献代码的开发者</li>
<li>build：包含测试例子、cocos2d_lib的Xcode以及Visual Studio工程</li>
<li>CHANGELOG：所有历史版本详细改动列表</li>
<li>CMakeLists.txt：cmake配置文件</li>
<li>cocos：Cocos2d-x引擎源代码</li>
<li>CONTRIBUTING.md：贡献代码指南</li>
<li>docs：包含JavaScript代码风格规范、当前发布说明和当前版本升级指南</li>
<li>download-deps.py：下载第三方库的脚本</li>
<li>extensions：第三方扩展</li>
<li>external：存放第三方库的文件夹</li>
<li>licenses：所有许可协议</li>
<li>plugin：插件</li>
<li>README.cmake：针对cmake用法的说明文件</li>
<li>README.md：Cocos2d-x引擎简介</li>
<li>setup.py：Cocos Console的安装脚本</li>
<li>templates：Cocos Console创建项目时使用的模板</li>
<li>tests：各分支的测试项目</li>
<li>tools：工具文件夹</li>
<li>—bindings-generator：脚本绑定工具</li>
<li>—cocos2d-console：Cocos Console工具</li>
<li>—tojs：JSB自动绑定配置文件以及生成脚本</li>
<li>—tolua：Lua绑定配置文件以及生成脚本</li>
<li>web：Cocos2d-JS游戏引擎</li>
</ul>
<a id="more"></a>

<h2 id="Cocos-Console"><a href="#Cocos-Console" class="headerlink" title="Cocos Console"></a>Cocos Console</h2><p>Cocos Console 是 Cocos2d-x 引擎下的一个命令行工具，它用来管理 Cocos 工程，其中包含创建、运行、编译、调试以及打包项目等。</p>
<p>Cocos Console 位于引擎包 cocos2d-x/tools/cocos2d-console 目录下，通过运行引擎包目录下的 setup.py 脚本即可安装。在安装的过程中，Cocos Console 需要开发者提供 Android NDK、Android SDK 和 Apache ANT 的文件路径。另外，Cocos Console 是一个采用 Python 语言编写的跨平台脚本工具，所以在安装Cocos Console 之前，需要先安装好Python。</p>
<h3 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h3><p>在 Mac OS X 中，操作系统本身自带了 Python，而在 Windows 操作系统中，Python 则需要我们自行下载并安装，其下载地址为：<a href="https://www.python.org/downloads/index.html" target="_blank" rel="noopener">https://www.python.org/downloads/index.html</a>。若你的Mac OS X系统中没有Python，也可通过此地址下载安装。下载至Mac OS X和Windows上的安装包分别是一个.pkg或者.msi文件。</p>
<p>打开终端，输入 <code>python --version</code>。若提示 Python 版本号，则说明 Python 安装成功。</p>
<h3 id="Android-环境配置"><a href="#Android-环境配置" class="headerlink" title="Android 环境配置"></a>Android 环境配置</h3><p>当安装好 Python 之后，你便可以开始准备 Android 相关的软件包了。当然，若你不需要支持 Android，除了 Apache Ant 之外，其余步骤可以跳过，不必配置。</p>
<ul>
<li><strong>Apache Ant</strong>：将软件编译、测试、部署等步骤联系在一起加以自动化的一个工具，大多用于Java环境中的软件开发。下载地址：<a href="http://ant.apache.org/bindownload.cgi" target="_blank" rel="noopener">http://ant.apache.org/bindownload.cgi</a>。</li>
<li><strong>Android SDK</strong>：即Software Development Kit的简称，中文译为软件开发工具包。在Android 中，它为开发者提供了库文件以及其他开发所用到的工具。下载地址：&lt;<a href="http://developer.android.com/" target="_blank" rel="noopener">http://developer.android.com/</a> tools/sdk/ndk/index.html&gt;。</li>
<li><strong>Android NDK</strong>：即Native Development Kit的简称，它是一系列工具的集合，可以帮助开发 者快速开发C/C++的动态库。另外，它还能自动将.so文件和Java应用一起打包成.apk。下 载地址：<a href="https://developer.android.com/sdk/index.html?hl=sk" target="_blank" rel="noopener">https://developer.android.com/sdk/index.html?hl=sk</a>。</li>
<li><strong>JDK</strong>：Java的开发工具包，包括Java运行环境、Java工具和Java基础类库。下载地址：<a href="https://www.oracle.com/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/downloads/index.html</a>。</li>
</ul>
<h3 id="安装-Cocos-Console"><a href="#安装-Cocos-Console" class="headerlink" title="安装 Cocos Console"></a>安装 Cocos Console</h3><p>打开终端，进入 Cocos2d-x 引擎目录下，然后再运行setup.py脚本，相关命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /Users/Chaosky/Cocos/cocos2d-x-3.14.1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python setup.py</span></span><br></pre></td></tr></table></figure>

<p>然后根据提示，将Cocos Console所需的文件路径拖曳进去，最后根据末尾行提示进行对应的操作。<br>![Jietu20170306-170411]<a href="http://file.blog.chaosky.tech/2017-03-06-Jietu20170306-170411.png" target="_blank" rel="noopener">http://file.blog.chaosky.tech/2017-03-06-Jietu20170306-170411.png</a>)</p>
<p>此时，Cocos Console安装成功。若要卸载Cocos Console，则Mac OS X用户可删除 <code>/Users/用户名/下.bash_profile或者.zshrc</code> 文件中对应的值，而Windows用户只需删除对应的系统环境变量值即可。</p>
<h2 id="创建、编译和运行工程"><a href="#创建、编译和运行工程" class="headerlink" title="创建、编译和运行工程"></a>创建、编译和运行工程</h2><p>在终端中执行 <code>cocos --help</code>，查看 cocos 命令行工具集的功能。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ cocos --<span class="keyword">help</span></span><br><span class="line"></span><br><span class="line">可用的命令：</span><br><span class="line">	run              在设备或者模拟器上编译，部署和运行工程。</span><br><span class="line">	gen-libs         生成引擎的预编译库。生成的库文件会保存在引擎根目录的 <span class="string">'prebuilt'</span> 文件夹。</span><br><span class="line">	luacompile       对 <span class="keyword">lua</span> 文件进行加密和编译为字节码的处理。</span><br><span class="line">	deploy           编译并在设备或模拟器上部署工程。</span><br><span class="line">	package          管理 cocos 中的 package。</span><br><span class="line">	compile          编译并打包工程。</span><br><span class="line">	gen-simulator    生成 Cocos 模拟器。</span><br><span class="line">	<span class="keyword">new</span>              创建一个新的工程。</span><br><span class="line">	jscompile        对 js 文件进行加密和压缩处理。</span><br><span class="line">	gen-templates    生成用于 Cocos Framework 环境的模板。</span><br><span class="line"></span><br><span class="line">可用的参数：</span><br><span class="line">	-h, --<span class="keyword">help</span>			显示帮助信息。</span><br><span class="line">	-v, --<span class="keyword">version</span>			显示命令行工具的版本号。</span><br><span class="line">	--<span class="keyword">ol</span> [<span class="string">'en'</span>, <span class="string">'zh'</span>, <span class="string">'zh_tr'</span>]	指定输出信息的语言。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">	cocos <span class="keyword">new</span> --<span class="keyword">help</span></span><br><span class="line">	cocos run --<span class="keyword">help</span></span><br></pre></td></tr></table></figure>

<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>终端中输入<code>cocos new --help</code>查看功能。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ cocos <span class="keyword">new</span> --<span class="keyword">help</span></span><br><span class="line"></span><br><span class="line">usage: cocos <span class="keyword">new</span> [-h] [-<span class="keyword">p</span> PACKAGE_NAME] [-d DIRECTORY] [-t TEMPLATE_NAME]</span><br><span class="line">                 [--ios-bundleid IOS_BUNDLEID] [--mac-bundleid MAC_BUNDLEID]</span><br><span class="line">                 [-<span class="keyword">e</span> ENGINE_PATH] [--portrait] [--<span class="keyword">no</span>-native] -<span class="keyword">l</span> &#123;cpp,<span class="keyword">lua</span>,js&#125;</span><br><span class="line">                 [PROJECT_NAME]</span><br><span class="line"></span><br><span class="line">创建一个新的工程。</span><br><span class="line"></span><br><span class="line">positional <span class="keyword">argument</span><span class="variable">s:</span></span><br><span class="line">  PROJECT_NAME          设置工程名称。</span><br><span class="line"></span><br><span class="line">optional <span class="keyword">argument</span><span class="variable">s:</span></span><br><span class="line">  -h, --<span class="keyword">help</span>            show this <span class="keyword">help</span> message <span class="built_in">and</span> <span class="keyword">exit</span></span><br><span class="line">  -<span class="keyword">p</span> PACKAGE_NAME, --package PACKAGE_NAME</span><br><span class="line">                        设置工程的包名。</span><br><span class="line">  -d DIRECTORY, --directory DIRECTORY</span><br><span class="line">                        设置工程存放路径。</span><br><span class="line">  -t TEMPLATE_NAME, --template TEMPLATE_NAME</span><br><span class="line">                        设置使用的模板名称。</span><br><span class="line">  --ios-bundleid IOS_BUNDLEID</span><br><span class="line">                        设置工程的 iOS Bundle ID。</span><br><span class="line">  --mac-bundleid MAC_BUNDLEID</span><br><span class="line">                        设置工程的 Mac Bundle ID。</span><br><span class="line">  -<span class="keyword">e</span> ENGINE_PATH, --engine-path ENGINE_PATH</span><br><span class="line">                        设置引擎路径。</span><br><span class="line">  --portrait            设置工程为竖屏。</span><br><span class="line">  -<span class="keyword">l</span> &#123;cpp,<span class="keyword">lua</span>,js&#125;, --<span class="keyword">language</span> &#123;cpp,<span class="keyword">lua</span>,js&#125;</span><br><span class="line">                        设置工程使用的编程语言，可选值：[cpp |</span><br><span class="line">                        <span class="keyword">lua</span> | js]</span><br><span class="line"></span><br><span class="line"><span class="keyword">lua</span>/js 工程可用参数:</span><br><span class="line">  --<span class="keyword">no</span>-native           设置新建的工程不包含 C++</span><br><span class="line">                        代码与各平台工程。</span><br></pre></td></tr></table></figure>

<p>具体有几种方式：</p>
<ol>
<li><p>创建一个名为projectName，并同时包含Cocos2d-HTML5和Cocos2d-x JSB项目</p>
 <figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">cocos <span class="keyword">new</span> <span class="type">projectName</span> -l js</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个名为projectName，且仅含Cocos2d-HTML5的项目， –no-native表示不需要支持Native平 台（iOS、Android、Mac、Windows等），仅支持浏览器即可</p>
 <figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">cocos <span class="keyword">new</span> projectName -l js --<span class="literal">no</span>-<span class="keyword">native</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在桌面上创建一个名为projectName的项目</p>
 <figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">cocos <span class="keyword">new</span> <span class="type">projectName</span> -l js -d ./Desktop</span><br></pre></td></tr></table></figure>
</li>
<li><p>在桌面上创建一个名为projectName的项目，并设置为竖屏</p>
 <figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">cocos <span class="keyword">new</span> projectName -l js -d ./Desktop <span class="comment">--portrait</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>-l</code> 表示采用的语言，可选值为 cpp、lua以及js。</p>
</li>
</ol>
<h3 id="编译、部署、运行"><a href="#编译、部署、运行" class="headerlink" title="编译、部署、运行"></a>编译、部署、运行</h3><p>当项目创建完毕后，可以通过下列命令将项目运行在浏览器中：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">cd ./Desktop/HelloWorld cocos <span class="keyword">run</span><span class="bash"> -p web</span></span><br></pre></td></tr></table></figure>

<p>除创建命令外，Cocos Console还为工程提供了运行、编译等命令，具体如下：</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">// 运行在指定的平台上</span><br><span class="line">cocos run -p web|<span class="type">ios</span>|<span class="type">android</span>|<span class="type">mac</span>|<span class="type">win32</span></span><br><span class="line">// 将项目工程打包到指定的平台上</span><br><span class="line">cocos compile -p web|<span class="type">ios</span>|<span class="type">android</span>|<span class="type">mac</span>|<span class="type">win32</span> -m release</span><br></pre></td></tr></table></figure>

<p>Cocos Console提供了相关的help指令，方便开发者查询Cocos Console相关的指令。下面举几个 help指令的例子，其中help可用字母h替代：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">cocos <span class="keyword">new</span> <span class="comment">--help</span></span><br><span class="line">cocos run <span class="comment">--help</span></span><br><span class="line">cocos compile <span class="comment">--help</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Cocos2d-x</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次优化 Xcode 编译的过程</title>
    <url>/2020/04/20/optimize-xcode-build-time/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>接触新项目后，发现没有改代码的情况下，每次编译基本上编译时间都在一分钟左右。就有了一个想法去解决这个问题，断断续续花了三天时间解决，解决过程中，学习到很多，记录下来。</p>
<h2 id="0x01-发现问题"><a href="#0x01-发现问题" class="headerlink" title="0x01 发现问题"></a>0x01 发现问题</h2><h3 id="开启编译耗时显示"><a href="#开启编译耗时显示" class="headerlink" title="开启编译耗时显示"></a>开启编译耗时显示</h3><p>打开终端执行以下命令并重启Xcode：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> defaults write com.apple.dt.Xcode ShowBuildOperationDuration -bool YES</span></span><br></pre></td></tr></table></figure>

<h3 id="编译-Build"><a href="#编译-Build" class="headerlink" title="编译 Build"></a>编译 Build</h3><p><img src="http://file.blog.chaosky.tech/2020/04/18/1587205361-WX20200418-182140@2x.png" alt="WX20200418-182140@2x"></p>
<p>编译时长 56.3 s，其中耗时比较长的过程为以下：</p>
<ul>
<li><strong>Compile asset catalogs</strong>：23.5 s</li>
<li><strong>[CP]Embed Pods Frameworks</strong>：7.4 s</li>
<li><strong>[CP] Copy Pods Resources</strong>：17.6 s</li>
</ul>
<h2 id="0x02-分析-amp-解决问题"><a href="#0x02-分析-amp-解决问题" class="headerlink" title="0x02 分析&amp;解决问题"></a>0x02 分析&amp;解决问题</h2><h3 id="开始尝试优化-Xcode-编译速度"><a href="#开始尝试优化-Xcode-编译速度" class="headerlink" title="开始尝试优化 Xcode 编译速度"></a>开始尝试优化 Xcode 编译速度</h3><p>发现编译耗时集中在上面三个过程中，一开始主要关注于 Xcode 本身编译提升，看了很多关于提升 Xcode 编译速度的文章，比如这篇文章：<a href="https://elliotsomething.github.io/2018/05/23/XCodeBuild/" target="_blank" rel="noopener">https://elliotsomething.github.io/2018/05/23/XCodeBuild/</a></p>
<h4 id="编译时长优化-Find-Implicit-Dependencies"><a href="#编译时长优化-Find-Implicit-Dependencies" class="headerlink" title="编译时长优化 Find Implicit Dependencies"></a>编译时长优化 Find Implicit Dependencies</h4><p>对所编译项目的Scheme进行配置 Product &gt; Scheme &gt; Edit Scheme &gt; Build Build Opitions选项中，去掉Find Implicit Dependencies。</p>
<h4 id="编译线程数优化"><a href="#编译线程数优化" class="headerlink" title="编译线程数优化"></a>编译线程数优化</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> defaults write com.apple.dt.xcodebuild PBXNumberOfParallelBuildSubtasks `sysctl -n hw.ncpu`</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> defaults write com.apple.dt.xcodebuild IDEBuildOperationMaxNumberOfConcurrentCompileTasks `sysctl -n hw.ncpu`</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> defaults write com.apple.dt.Xcode PBXNumberOfParallelBuildSubtasks `sysctl -n hw.ncpu`</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> defaults write com.apple.dt.Xcode IDEBuildOperationMaxNumberOfConcurrentCompileTasks `sysctl -n hw.ncpu`</span></span><br></pre></td></tr></table></figure>

<p>其后的数字为指定的编译线程数。Xcode默认使用与CPU核数相同的线程来进行编译，但由于编译过程中的IO操作往往比CPU运算要多，因此适当的提升线程数可以在一定程度上加快编译速度。</p>
<p>然后做完以上尝试后，优化了4s。😭</p>
<p>远远没有达到优化的目的。</p>
<h3 id="寻找另外的解决方向"><a href="#寻找另外的解决方向" class="headerlink" title="寻找另外的解决方向"></a>寻找另外的解决方向</h3><p>从 Xcode 的本身优化不能有任何的提升后，那问题只能出在工程本身，再次分析编译过程的时长发现和 Assets.xcassets 和 Pods 关系很大。先从 CocoaPods 开始分析 Podfile，发现工程的 Podfile 有如下代码：</p>
<blockquote>
<p>install! ‘cocoapods’, disable_input_output_paths: true</p>
</blockquote>
<p>去掉以后运行 <code>pod install</code>，出现编译出现错误：</p>
<blockquote>
<p>error: Multiple commands produce ‘/xxxxx/xxxxx/Assets.car’:</p>
<p>1) Target ‘xxxx’ (project ‘xxx’) has compile command with input ‘/xxxx/xxxx/Assets.xcassets’</p>
<p>2) That command depends on command in Target ‘xxx’ (project ‘xxx’): script phase “[CP] Copy Pods Resources”</p>
</blockquote>
<p>在 CocoaPods 上找到了这样一个 issue  <a href="https://github.com/CocoaPods/CocoaPods/issues/8122" target="_blank" rel="noopener">https://github.com/CocoaPods/CocoaPods/issues/8122</a>，里面提到主工程里 Assets.xcassets 和 Pods 里有同名的  Assets.xcassets，在 Xcode 10 之前进行编译是不会有问题的，Xcode 只是生成 Warning，但是在 Xcode 10 之后使用了 New Build System 会生成 Errror，提示重复生成 Assets.car。</p>
<p>issue 里提到了4种解决方案：</p>
<p>方案1：<a href="https://github.com/CocoaPods/CocoaPods/issues/8122#issuecomment-424169508" target="_blank" rel="noopener">https://github.com/CocoaPods/CocoaPods/issues/8122#issuecomment-424169508</a></p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">install! <span class="string">'cocoapods'</span>, :<span class="function"><span class="params">disable_input_output_paths</span> =&gt;</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>这个方案会导致每次编译时长增加3x倍多。这也刚好是我们工程采用的方式。</p>
<p>方案2：<a href="https://github.com/CocoaPods/CocoaPods/issues/8122#issuecomment-424265887" target="_blank" rel="noopener">https://github.com/CocoaPods/CocoaPods/issues/8122#issuecomment-424265887</a></p>
<p> 使用  <code>Legacy Build System</code>  而不是 Xcode 11 的 <code>New Build System</code>。</p>
<p>方案3：在 Podfile 中添加如下代码</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">project_path = <span class="string">'[YOUR_PROJ_NAME].xcodeproj'</span></span><br><span class="line">project = Xcodeproj::Project.open(project_path)</span><br><span class="line">project.targets.each <span class="keyword">do</span> <span class="params">|target|</span></span><br><span class="line">  build_phase = target.build_phases.find &#123; <span class="params">|bp|</span> bp.display_name == <span class="string">'[CP] Copy Pods Resources'</span> &#125;</span><br><span class="line"></span><br><span class="line">  assets_path = <span class="string">'$&#123;TARGET_BUILD_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;/Assets.car'</span></span><br><span class="line">  <span class="keyword">if</span> build_phase.present? &amp;&amp; build_phase.input_paths.<span class="keyword">include</span>?(assets_path) == <span class="literal">false</span></span><br><span class="line">    build_phase.input_paths.push(assets_path)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>这种方案在 CocoaPods 1.8.0 之前可以的，但是在 1.8.0 之后 Input Files 变成了 xcfilelist，就无法直接使用了。</p>
<p>方案4：<a href="https://github.com/CocoaPods/CocoaPods/issues/8122#issuecomment-531726302" target="_blank" rel="noopener">https://github.com/CocoaPods/CocoaPods/issues/8122#issuecomment-531726302</a></p>
<p>主要代码是在 <code>[CP] Copy Pods Resources</code>的 <code>Input Files</code> 或者 <code>Input File Lists</code> 中添加。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">$ </span><span class="template-variable">&#123;TARGET_BUILD_DIR&#125;</span><span class="xml">/$</span><span class="template-variable">&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;</span><span class="xml">/Assets.car</span></span><br></pre></td></tr></table></figure>

<p>尝试了以上4种解决方案，只有方案4 符合预期。</p>
<h2 id="0x03-解决方案"><a href="#0x03-解决方案" class="headerlink" title="0x03 解决方案"></a>0x03 解决方案</h2><p>使用这个 cocoapods 插件：<a href="https://github.com/dreampiggy/cocoapods-xcode-patch" target="_blank" rel="noopener">https://github.com/dreampiggy/cocoapods-xcode-patch</a></p>
<p>使用 <a href="https://bundler.io/" target="_blank" rel="noopener">Bundler</a> 和 <a href="https://bundler.io/gemfile.html" target="_blank" rel="noopener">Gemfile</a> 添加这个插件：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">source <span class="string">"https://rubygems.org"</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'cocoapods'</span></span><br><span class="line">gem <span class="string">'cocoapods-xcode-patch'</span>, :<span class="function"><span class="params">git</span> =&gt;</span> <span class="string">'https://github.com/dreampiggy/cocoapods-xcode-patch.git'</span></span><br></pre></td></tr></table></figure>

<p>使用  <code>bundle exec pod install</code> 替代 <code>pod install</code> 来加载这个插件。</p>
<h2 id="0x04-原因分析"><a href="#0x04-原因分析" class="headerlink" title="0x04 原因分析"></a>0x04 原因分析</h2><p>出现这个问题根本原因是因为 CocoaPods 有两种资源管理方式 <code>resource_bundles</code>  和 <code>resources</code> 。</p>
<p>以下简单介绍下这两种资源管理方式：</p>
<h3 id="resource-bundles（官方推荐）"><a href="#resource-bundles（官方推荐）" class="headerlink" title="resource_bundles（官方推荐）"></a>resource_bundles（官方推荐）</h3><blockquote>
<p>This attribute allows to define the name and the file of the resource bundles which should be built for the Pod. They are specified as a hash where the keys represent the name of the bundles and the values the file patterns that they should include.</p>
<p>For building the Pod as a static library, we strongly <strong>recommend</strong> library developers to adopt resource bundles as there can be name collisions using the resources attribute.</p>
<p>The names of the bundles should at least include the name of the Pod to minimise the chance of name collisions.</p>
<p>To provide different resources per platform namespaced bundles <em>must</em> be used.</p>
</blockquote>
<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec.ios.resource_bundle</span> = &#123; <span class="string">'MapBox'</span> =&gt; <span class="string">'MapView/Map/Resources/*.png'</span> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">spec.resource_bundles = &#123;</span><br><span class="line">    <span class="symbol">'MapBox'</span> =&gt; [<span class="symbol">'MapView</span>/<span class="type">Map</span>/<span class="type">Resources</span>/*.png'],</span><br><span class="line">    <span class="symbol">'MapBoxOtherResources'</span> =&gt; [<span class="symbol">'MapView</span>/<span class="type">Map</span>/<span class="type">OtherResources</span>/*.png']</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h3><blockquote>
<p>A list of resources that should be copied into the target bundle.</p>
<p>For building the Pod as a static library, we strongly <strong>recommend</strong> library developers to adopt <a href="https://guides.cocoapods.org/syntax/podspec.html#resource_bundles" target="_blank" rel="noopener">resource bundles</a> as there can be name collisions using the resources attribute. Moreover, resources specified with this attribute are copied directly to the client target and therefore they are not optimised by Xcode.</p>
</blockquote>
<h4 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples:"></a>Examples:</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec.resource</span> = <span class="string">'Resources/HockeySDK.bundle'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec.resources</span> = [<span class="string">'Images/*.png'</span>, <span class="string">'Sounds/*'</span>]</span><br></pre></td></tr></table></figure>

<p>由于组件化的原因，我们的某个组件采用了<code>Assets.xcassets</code> 和 Storyboard 需要拷贝到主工程中进行引用，Pod 库只能以 <code>resources</code> 的方式引用资源。经过这次优化编译速度有了很大提升。</p>
<h2 id="0x05-后续：Pods-文件更改没有更新"><a href="#0x05-后续：Pods-文件更改没有更新" class="headerlink" title="0x05 后续：Pods 文件更改没有更新"></a>0x05 后续：Pods 文件更改没有更新</h2><p>优化了 Xcode 编译后，出现另外一个问题：更改 Pods 库后，Pods 库已编译但主工程没有使用最新的frameworks，导致动态链接的时候找不到对应的符号而产生崩溃。</p>
<p>导致这个问题的原因是 <code>Build Phases</code> 中的 <code>[CP] Embed Pods Frameworks</code> 不是每次都执行，猜测可能是 Xcode 11 的 <code>New Build System</code> 做了优化，导致脚本没有执行。最终想了个办法来解决这个问题，追加命令来执行脚本 <code>find &quot;${PODS_ROOT}&quot; -type f -name *frameworks.sh -exec bash -c &quot;touch \&quot;{}\&quot;&quot; \;</code>，使得脚本每次能执行更新frameworks。</p>
<p>因为 <code>[CP] Embed Pods Frameworks</code>的脚本是由 CocoaPods 进行修改的，所有我将上面的命令通过hook的方式来追加，具体使用方法可以查看 <a href="https://github.com/chaoskyx/cocoapods-xcode-patch" target="_blank" rel="noopener">https://github.com/chaoskyx/cocoapods-xcode-patch</a>。</p>
<p>编译时间也有所增加，在工程中测试大概增加了20s左右，还有优化的空间，后续如果想到更好的解决办法再更新。</p>
<h2 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h2><ul>
<li><p><a href="https://elliotsomething.github.io/2018/05/23/XCodeBuild/" target="_blank" rel="noopener">https://elliotsomething.github.io/2018/05/23/XCodeBuild/</a></p>
</li>
<li><p><a href="https://github.com/CocoaPods/CocoaPods/issues/8122" target="_blank" rel="noopener">https://github.com/CocoaPods/CocoaPods/issues/8122</a></p>
</li>
<li><p><a href="https://guides.cocoapods.org/syntax/podspec.html#resource_bundles" target="_blank" rel="noopener">https://guides.cocoapods.org/syntax/podspec.html#resource_bundles</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN&amp;Git</title>
    <url>/2015/12/24/SVN-Git/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>PS：本文所有<code>$</code>符号之后为在终端中执行的命令。</p>
<h2 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h2><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>版本控制（Version Control）的作用是追踪文件的变化。为什么需要版本控制？简单说，就是当你出错了，可以很容易地回到没出错时的状态。</p>
<p>你可能已经在不知不觉中，布置了自己的版本控制系统。比如，创建了类似下面这样的文件名：</p>
<ul>
<li>论文_0510.doc</li>
<li>论文_0514.doc</li>
<li>论文_0521.doc</li>
<li>论文_修改版.doc</li>
<li>论文_最终不修改版.doc</li>
</ul>
<p>这就是软件中为什么有”Save As”命令的原因。它使得你可以在不破坏源文件的基础上，得到一个类似的新文件。文件的多版本保存是一个常见问题，通常的解决办法是这样的：</p>
<ul>
<li>做一个文件备份（比如Document.old.txt）。</li>
<li>在文件名中加入版本号或日期（比如Document_V1.txt，DocumentMarch2007.txt）。</li>
<li>在多人编辑的环境下，共享一个文件目录，并且要求每个人编辑完以后，在文件上做出标识。</li>
</ul>
<h3 id="什么是版本控制系统（VCS）？"><a href="#什么是版本控制系统（VCS）？" class="headerlink" title="什么是版本控制系统（VCS）？"></a>什么是版本控制系统（VCS）？</h3><p>大型的、频繁修改的、多人编写的软件项目，需要一个版本控制系统（简称VCS，行话叫做”文件数据库”），追踪文件的变化，避免出现混乱。</p>
<p>一次典型的使用过程是这样的：</p>
<p> 爱丽丝add一个文件（list.txt）进入repo。然后，她又把这个文件check out，做了一次编辑（在文件中加入milk这个单词）。接着，她将修改后的文件check in，并附有一条checking message（”加入了新的条目”）。第二天早上，鲍勃update了他本地的working set，看到了list.txt的最新修订版，其中包含了单词”milk”。如果他使用changelog或diff，都可以发现前一天爱丽丝加入”milk”这个词。</p>
<p>网上有许多VCS软件可供选择，并且都有详细的教程或手册，比如SVN、CVS、RCS、Git、Perforce等等。</p>
<h3 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h3><p>版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被版本控制系统管理起来，每个文件的修改、删除，都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
<a id="more"></a>


<h2 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h2><p>在Mac环境下，由于Mac自带了SVN的服务器端和客户端功能，所以我们可以在不装任何第三方软件的前提下使用SVN功能，不过还需做一下简单的配置。</p>
<h3 id="为什么使用SVN"><a href="#为什么使用SVN" class="headerlink" title="为什么使用SVN"></a>为什么使用SVN</h3><ol>
<li>** 进行权限管理，针对不同的人，开放不同的权限。 ** 比如Alex是进行A项目的，Bob进行B项目的，那么SVN可以有效的管理每个人看到的项目，Alex不可能获得Bob的项目，同样Bob也不可能获得Alex的项目。</li>
<li>** 对于代码进行追踪，代码不会遗失。** 不如今天代码修改乱了，需要恢复到某一天的，那么我们只需要选择一下恢复的日期即可进行恢复。</li>
</ol>
<h3 id="搭建SVN服务器"><a href="#搭建SVN服务器" class="headerlink" title="搭建SVN服务器"></a>搭建SVN服务器</h3><h4 id="1-创建代码仓库，存储客户端上传的代码"><a href="#1-创建代码仓库，存储客户端上传的代码" class="headerlink" title="1. 创建代码仓库，存储客户端上传的代码"></a>1. 创建代码仓库，存储客户端上传的代码</h4><p>先在<code>~/Desktop</code>目录（这个目录可以是任意非中文路径）新建一个svn目录，以后可以在svn目录下创建多个仓库目录。</p>
<p>打开终端，切换到该目录<code>cd ~/Desktop/svn</code>，创建一个<code>learnsvn</code>仓库，输入命令：<code>svnadmin create ./learnsvn</code>，执行成功后，会发现在该目录下多了一个LimitFree目录。</p>
<h4 id="2-配置SVN的用户权限"><a href="#2-配置SVN的用户权限" class="headerlink" title="2. 配置SVN的用户权限"></a>2. 配置SVN的用户权限</h4><p>主要是修改./learnsvn/conf目录下的三个文件</p>
<ul>
<li><p>打开svnserve.conf，将下列配置项前面的#和空格都去掉</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># anon-access = read  </span></span><br><span class="line"><span class="meta"># auth-access = write  </span></span><br><span class="line"><span class="meta"># password-db = passwd</span></span><br><span class="line"><span class="meta"># authz-db = authz</span></span><br></pre></td></tr></table></figure>

<p>anon-access = read代表匿名访问的时候是只读的，若改为anon-access = none代表禁止匿名访问，需要帐号密码才能访问</p>
</li>
<li><p>打开passwd，在[users]下面添加帐号和密码</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment"># harry = harryssecret</span></span><br><span class="line"><span class="comment"># sally = sallyssecret</span></span><br><span class="line"><span class="attr">chaosky</span> = <span class="number">123</span></span><br><span class="line"><span class="attr">student</span> = <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>帐号是chaosky，密码是123</p>
</li>
<li><p>打开authz，配置用户组和权限</p>
<p>我们可以将在passwd里添加的用户分配到不同的用户组里，以后的话，就可以对不同用户组设置不同的权限，没有必要对每个用户进行单独设置权限。</p>
<p>在[groups]下面添加组名和用户名，多个用户之间用逗号(,)隔开</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[groups]</span>  </span><br><span class="line"><span class="attr">topgroup</span>=chaosky,student</span><br></pre></td></tr></table></figure>

<p>说明chaosky和student都是属于topgroup这个组的，接下来再进行权限配置。</p>
<p>使用[/]代表svn服务器中的所有资源库</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[/]</span>  </span><br><span class="line"><span class="keyword">@topgroup</span> = rw</span><br></pre></td></tr></table></figure>

<p>上面的配置说明topgroup这个组中的所有用户对所有资源库都有读写(rw)权限，组名前面要用@</p>
<p>如果是用户名，不用加@，比如chaosky这个用户有读写权限</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[/]</span>  </span><br><span class="line"><span class="attr">chaosky</span> = rw</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-启动SVN服务器"><a href="#3-启动SVN服务器" class="headerlink" title="3. 启动SVN服务器"></a>3. 启动SVN服务器</h4><p>在终端输入命令：<code>svnserve -d -r ~/Desktop/svn</code>或<code>svnserve -d -r ~/Desktop/svn/learnsvn</code></p>
<p>没有任何提示就说明启动成功了</p>
<h4 id="4-关闭SVN服务器"><a href="#4-关闭SVN服务器" class="headerlink" title="4. 关闭SVN服务器"></a>4. 关闭SVN服务器</h4><p>打开活动监视器，输入svnserve，强制退出进程。</p>
<h3 id="使用SVN客户端功能"><a href="#使用SVN客户端功能" class="headerlink" title="使用SVN客户端功能"></a>使用SVN客户端功能</h3><p>SVN客户端有两种使用方式，命令行和GUI界面软件（CornerStone）</p>
<h4 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">usage: svn <span class="symbol">&lt;subcommand&gt;</span> [<span class="keyword">options</span>] [<span class="keyword">args</span>]</span><br><span class="line">Subversion <span class="keyword">command</span>-<span class="built_in">line</span> client.</span><br><span class="line">Type <span class="string">'svn help &lt;subcommand&gt;'</span> <span class="keyword">for</span> <span class="keyword">help</span> <span class="keyword">on</span> <span class="keyword">a</span> specific subcommand.</span><br><span class="line">Type <span class="string">'svn --version'</span> <span class="keyword">to</span> see the program <span class="keyword">version</span> <span class="built_in">and</span> RA modules</span><br><span class="line">  <span class="built_in">or</span> <span class="string">'svn --version --quiet'</span> <span class="keyword">to</span> see just the <span class="keyword">version</span> <span class="keyword">number</span>.</span><br><span class="line"></span><br><span class="line">Most subcommands take <span class="keyword">file</span> <span class="built_in">and</span>/<span class="built_in">or</span> directory arguments, recursing</span><br><span class="line"><span class="keyword">on</span> the directories.  If <span class="keyword">no</span> arguments are supplied <span class="keyword">to</span> such <span class="keyword">a</span></span><br><span class="line"><span class="keyword">command</span>, it recurses <span class="keyword">on</span> the current directory (inclusive) by default.</span><br><span class="line"></span><br><span class="line">Available subcommand<span class="variable">s:</span></span><br><span class="line">   <span class="built_in">add</span></span><br><span class="line">   auth</span><br><span class="line">   blame (praise, annotate, ann)</span><br><span class="line">   <span class="keyword">cat</span></span><br><span class="line">   changelist (<span class="keyword">cl</span>)</span><br><span class="line">   checkout (<span class="keyword">co</span>)</span><br><span class="line">   cleanup</span><br><span class="line">   commit (ci)</span><br><span class="line">   <span class="keyword">copy</span> (<span class="keyword">cp</span>)</span><br><span class="line">   <span class="keyword">delete</span> (del, <span class="built_in">remove</span>, rm)</span><br><span class="line">   diff (<span class="keyword">di</span>)</span><br><span class="line">   export</span><br><span class="line">   <span class="keyword">help</span> (?, h)</span><br><span class="line">   import</span><br><span class="line">   info</span><br><span class="line">   <span class="keyword">list</span> (<span class="keyword">ls</span>)</span><br><span class="line">   lock</span><br><span class="line">   <span class="built_in">log</span></span><br><span class="line">   merge</span><br><span class="line">   mergeinfo</span><br><span class="line">   <span class="built_in">mkdir</span></span><br><span class="line">   <span class="keyword">move</span> (mv, <span class="built_in">rename</span>, ren)</span><br><span class="line">   patch</span><br><span class="line">   propdel (pdel, pd)</span><br><span class="line">   propedit (<span class="keyword">pedit</span>, <span class="keyword">pe</span>)</span><br><span class="line">   propget (pget, pg)</span><br><span class="line">   proplist (plist, pl)</span><br><span class="line">   propset (pset, <span class="keyword">ps</span>)</span><br><span class="line">   relocate</span><br><span class="line">   <span class="built_in">resolve</span></span><br><span class="line">   resolved</span><br><span class="line">   revert</span><br><span class="line">   status (stat, <span class="keyword">st</span>)</span><br><span class="line">   switch (<span class="keyword">sw</span>)</span><br><span class="line">   unlock</span><br><span class="line">   <span class="keyword">update</span> (<span class="keyword">up</span>)</span><br><span class="line">   upgrade</span><br><span class="line"></span><br><span class="line">Subversion <span class="keyword">is</span> <span class="keyword">a</span> tool <span class="keyword">for</span> <span class="keyword">version</span> control.</span><br><span class="line">For additional information, see http://subversion.apache.org/</span><br></pre></td></tr></table></figure>

<h4 id="CornerStone"><a href="#CornerStone" class="headerlink" title="CornerStone"></a>CornerStone</h4><h3 id="添加代码仓库"><a href="#添加代码仓库" class="headerlink" title="添加代码仓库"></a>添加代码仓库</h3><h3 id="填写SVN仓库信息"><a href="#填写SVN仓库信息" class="headerlink" title="填写SVN仓库信息"></a>填写SVN仓库信息</h3><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="checkout（检出）"><a href="#checkout（检出）" class="headerlink" title="checkout（检出）"></a>checkout（检出）</h4><h4 id="add（添加文件）"><a href="#add（添加文件）" class="headerlink" title="add（添加文件）"></a>add（添加文件）</h4><h4 id="delete（删除文件）"><a href="#delete（删除文件）" class="headerlink" title="delete（删除文件）"></a>delete（删除文件）</h4><h4 id="modify-（修改文件）"><a href="#modify-（修改文件）" class="headerlink" title="modify （修改文件）"></a>modify （修改文件）</h4><h4 id="commit（提交）"><a href="#commit（提交）" class="headerlink" title="commit（提交）"></a>commit（提交）</h4><h4 id="update（更新）"><a href="#update（更新）" class="headerlink" title="update（更新）"></a>update（更新）</h4><h4 id="resolve-conflict（解决冲突）"><a href="#resolve-conflict（解决冲突）" class="headerlink" title="resolve conflict（解决冲突）"></a>resolve conflict（解决冲突）</h4><h4 id="revert（恢复初始状态）"><a href="#revert（恢复初始状态）" class="headerlink" title="revert（恢复初始状态）"></a>revert（恢复初始状态）</h4><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行命令<code>xcode-select --install</code>安装“Command Line Tools”，点“Install”就可以完成安装了。</p>
<h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><ol>
<li><p>选择一个合适的地方，创建一个空目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir learngit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> learngit</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> <span class="regexp">/Users/</span>Chaosky<span class="regexp">/Desktop/</span>learngit<span class="regexp">/.git/</span></span><br></pre></td></tr></table></figure>

<p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p>
</li>
</ol>
<h3 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h3><ol>
<li><p>编写一个README.md文件，内容如下：</p>
<figure class="highlight mercury"><table><tr><td class="code"><pre><span class="line">Git <span class="keyword">is</span> a version control system.</span><br><span class="line">Git <span class="keyword">is</span> free software.</span><br></pre></td></tr></table></figure>

<p>一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p>
</li>
<li><p>用命令<code>git add</code>告诉Git，把文件添加到仓库：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">add</span><span class="bash"> readme.txt</span></span><br></pre></td></tr></table></figure>

<p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p>
</li>
<li><p>用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">commit</span> -m <span class="string">"wrote a readme file"</span></span><br><span class="line">[<span class="keyword">master</span> (root-<span class="keyword">commit</span>) cb926e7] wrote a readme <span class="keyword">file</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">2</span> insertions(+)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> readme.txt</span><br></pre></td></tr></table></figure>

<p>简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>
<p>git commit命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），插入了两行内容（readme.txt有两行内容）。</p>
<p>为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">add</span><span class="bash"> file1.txt</span></span><br><span class="line">$ git <span class="keyword">add</span><span class="bash"> file2.txt file3.txt</span></span><br><span class="line">$ git commit -m <span class="string">"add 3 files."</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h3><ul>
<li><h4 id="工作区（Working-Directory）"><a href="#工作区（Working-Directory）" class="headerlink" title="工作区（Working Directory）"></a>工作区（Working Directory）</h4><p>就是你在电脑里能看到的目录。</p>
</li>
</ul>
<ul>
<li><h4 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a>版本库（Repository）</h4><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</p>
<p><img src="http://www.liaoxuefeng.com/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0" alt=""></p>
<p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p>
<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p><img src="http://www.liaoxuefeng.com/files/attachments/001384907720458e56751df1c474485b697575073c40ae9000/0" alt="版本库状态"></p>
<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<p><img src="http://www.liaoxuefeng.com/files/attachments/0013849077337835a877df2d26742b88dd7f56a6ace3ecf000/0" alt="版本库状态"></p>
<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>
<p>​</p>
</li>
</ul>
<h3 id="版本库管理"><a href="#版本库管理" class="headerlink" title="版本库管理"></a>版本库管理</h3><ul>
<li><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>查看仓库当前的状态，要随时掌握工作区的状态，使用git status命令。</p>
</li>
<li><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><p>如果git status告诉你有文件被修改过，用git diff可以查看修改内容。</p>
</li>
<li><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p>显示从最近到最远的提交日志。在Git中，用HEAD表示当前版本，也就是最新的提交，上一个版本就是HEAD^ ，上上一个版本就是HEAD^^ ，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p>
</li>
<li><h4 id="git-reset-–hard-commit-id"><a href="#git-reset-–hard-commit-id" class="headerlink" title="git reset –hard commit_id"></a>git reset –hard commit_id</h4><p>在版本的历史之间进行切换，<code>commit_id</code>为提交版本的id。</p>
</li>
<li><h4 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h4><p>用来记录你的每一次命令</p>
</li>
<li><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- README.md</code>。</p>
<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD README.md</code>，就回到了场景1，第二步按场景1操作。</p>
</li>
<li><h4 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h4><p>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p>
</li>
</ul>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>分布式版本控制系统通常也有一台充当“中央服务器”的电脑，而充当”中央服务器”角色的仓库就是远程仓库，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p>
<p>如果有自己的私有仓库地址，则无需执行下面几个操作。</p>
<ul>
<li><h4 id="注册远程仓库账号"><a href="#注册远程仓库账号" class="headerlink" title="注册远程仓库账号"></a>注册远程仓库账号</h4><ul>
<li><p>Git@OSC：开源中国Git托管平台</p>
<p>地址：<a href="http://git.oschina.net" target="_blank" rel="noopener">http://git.oschina.net</a></p>
</li>
<li><p>Github：世界最大的Git项目托管平台</p>
<p>地址：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></p>
</li>
<li><p>Coding：国内新兴的Git托管平台</p>
<p>地址：<a href="https://coding.net" target="_blank" rel="noopener">https://coding.net</a></p>
</li>
</ul>
</li>
<li><h4 id="添加公钥到Git托管平台"><a href="#添加公钥到Git托管平台" class="headerlink" title="添加公钥到Git托管平台"></a>添加公钥到Git托管平台</h4><ol>
<li><h5 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h5><p>SSH Keys：SSH key 可以让你在你的电脑和 Git托管平台之间建立安全的加密连接。</p>
<p>你可以按如下命令来生成sshkey：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa -C <span class="string">"xxxxx@xxxxx.com"</span></span><br></pre></td></tr></table></figure>

<p>其中<code>xxxxx@xxxxx.com</code>需要填写邮箱信息</p>
<p>生成SSH key时，如果不清楚需要输入的信息，可以全部输入Enter键。</p>
</li>
<li><h5 id="查看你的public-key，并把他添加到Git托管平台"><a href="#查看你的public-key，并把他添加到Git托管平台" class="headerlink" title="查看你的public key，并把他添加到Git托管平台"></a>查看你的public key，并把他添加到Git托管平台</h5><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>cat ~<span class="regexp">/.ssh/id</span>_rsa.pub</span><br></pre></td></tr></table></figure>

<p>具体添加的位置，查看具体的托管平台。一般来说，在个人资料中可以找到<code>SSH-KEYS</code>类似的字样就是添加公钥的地方。</p>
</li>
<li><h5 id="测试是否添加成功"><a href="#测试是否添加成功" class="headerlink" title="测试是否添加成功"></a>测试是否添加成功</h5><p>测试Git@OSC输入命令：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">$ ssh -T git<span class="symbol">@git</span>.oschina.net</span><br><span class="line">Welcome <span class="keyword">to</span> Git<span class="symbol">@OSC</span>, yourname!</span><br></pre></td></tr></table></figure>

<p>测试Github输入命令：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi chaoskyx! Youve successfully authenticated, <span class="keyword">but</span> GitHub <span class="keyword">does</span> <span class="keyword">not</span> provide shell access.</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>生成SSH key只需要生成一次，不同的网站再将公钥拷贝到网站上即可。</p>
</li>
<li><h4 id="在Git托管平台上创建项目"><a href="#在Git托管平台上创建项目" class="headerlink" title="在Git托管平台上创建项目"></a>在Git托管平台上创建项目</h4></li>
</ul>
<ul>
<li><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><p>关联一个远程仓库命令：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git remote <span class="keyword">add</span> origin git@<span class="keyword">server</span>-<span class="type">name</span>:<span class="type">path</span>/repo-<span class="type">name</span>.git</span><br></pre></td></tr></table></figure>

<p>其中<code>origin</code>表示远程仓库的别名，默认为<code>origin</code></p>
<p><code>git@server-name:path/repo-name.git</code>表示项目在Git托管平台上的ssh 地址。</p>
<p>关联远程仓库只需要执行上面的命令<strong>一次</strong>即可。</p>
<p>关联后，第一次推送master分支的所有内容命令：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<p>此后，每次本地提交后，只要有必要，推送最新修改就可以使用命令：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>
</li>
<li><h4 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git clone git@<span class="keyword">server</span>-<span class="type">name</span>:<span class="type">path</span>/repo-<span class="type">name</span>.git &lt;repo-<span class="type">name</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="从远程分支获取最新版本到本地，有2个命令"><a href="#从远程分支获取最新版本到本地，有2个命令" class="headerlink" title="从远程分支获取最新版本到本地，有2个命令"></a>从远程分支获取最新版本到本地，有2个命令</h4><ul>
<li><p><strong>git fetch</strong>：相当于是从远程获取最新版本到本地，不会自动merge</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">$ git fetch origin <span class="literal">master</span></span><br><span class="line">$ git log -p <span class="literal">master</span>..origin/<span class="literal">master</span></span><br><span class="line">$ git merge origin/<span class="literal">master</span></span><br></pre></td></tr></table></figure>

<p>以上命令的含义：</p>
<p>首先从远程的origin的master主分支下载最新的版本到origin/master分支上;</p>
<p>然后比较本地的master分支和origin/master分支的差别;</p>
<p>最后进行合并。</p>
</li>
<li><p><strong>git pull</strong>：相当于是从远程获取最新版本并merge到本地</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">$ git pull origin <span class="literal">master</span></span><br></pre></td></tr></table></figure>

<p>上述命令其实相当于git fetch 和 git merge</p>
</li>
</ul>
<p>在实际使用中，git fetch更安全一些</p>
<p>因为在merge前，我们可以查看更新情况，然后再决定是否合并</p>
</li>
</ul>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>Git鼓励大量使用分支：</p>
<p>查看分支：<code>git branch</code></p>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
<p>切换分支：<code>git checkout &lt;name&gt;</code></p>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>
<p>用<code>git log --graph</code>命令可以看到分支合并图。</p>
<p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>



<h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><p><code>git tag &lt;name&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；</p>
<p><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</p>
<p><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签；</p>
<p><code>git tag</code>可以查看所有标签</p>
<p><code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</p>
<p><code>git push origin -—tags</code>可以推送全部未推送过的本地标签；</p>
<p><code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</p>
<p><code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</p>
<h3 id="Git常用命令速查表"><a href="#Git常用命令速查表" class="headerlink" title="Git常用命令速查表"></a>Git常用命令速查表</h3><p><img src="https://dn-coding-net-production-pp.qbox.me/100e4dc6-0317-409f-9ff9-935890315137.jpg" alt=""></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li>
<li>参考书籍：《Git权威指南》</li>
</ol>
<h2 id="SVN-vs-Git-（集中式-vs-分布式）"><a href="#SVN-vs-Git-（集中式-vs-分布式）" class="headerlink" title="SVN vs Git （集中式 vs 分布式）"></a>SVN vs Git （集中式 vs 分布式）</h2><p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p>
<p><img src="http://www.liaoxuefeng.com/files/attachments/001384860735706fd4c70aa2ce24b45a8ade85109b0222b000/0" alt="central-repo"></p>
<p>集中式版本控制系统最大的毛病就是必须联网才能工作。</p>
<p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p>
<p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p>
<p><img src="http://www.liaoxuefeng.com/files/attachments/0013848607465969378d7e6d5e6452d8161cf472f835523000/0" alt="distributed-repo"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>SVN</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 硬件（二维码、传感器、3D-Touch、蓝牙）</title>
    <url>/2016/02/18/iOS-Hardware/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><h3 id="扫描识别"><a href="#扫描识别" class="headerlink" title="扫描识别"></a>扫描识别</h3><p>iOS中实现二维码和条形码扫描，两大开源组件 ZBarSDK 与 ZXing以及AVFoundation。AVFoundation.framework（iOS 7 ）之后才添加了二维码扫描的功能。</p>
<h3 id="二维码生成"><a href="#二维码生成" class="headerlink" title="二维码生成"></a>二维码生成</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIImage</span> *)qrCodeGenerator:(<span class="built_in">NSString</span> *)msg size:(<span class="built_in">CGSize</span>)size &#123;</span><br><span class="line">    <span class="built_in">NSData</span> * data = [msg dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSDictionary</span> * params = @&#123;<span class="string">@"inputMessage"</span>: data, <span class="string">@"inputCorrectionLevel"</span>: <span class="string">@"H"</span>&#125;;</span><br><span class="line">    <span class="built_in">CIFilter</span> * qrEncoder = [<span class="built_in">CIFilter</span> filterWithName:<span class="string">@"CIQRCodeGenerator"</span> withInputParameters:params];</span><br><span class="line">    <span class="built_in">CIImage</span> * ciImage = qrEncoder.outputImage;</span><br><span class="line">    <span class="built_in">UIImage</span> * qrImage = [<span class="built_in">UIImage</span> imageWithCIImage:ciImage];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(size);</span><br><span class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="built_in">CGContextSetInterpolationQuality</span>(context, kCGInterpolationNone);</span><br><span class="line">    [qrImage drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, size.width, size.height)];</span><br><span class="line">    qrImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    <span class="keyword">return</span> qrImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Demo下载</strong>：<a href="https://github.com/chaoskyx/Demo/tree/master/QRCodeScanner" target="_blank" rel="noopener">QRCodeScanner</a></p>
<a id="more"></a>
<h2 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h2><h3 id="距离传感器（Proximity-Sensor）"><a href="#距离传感器（Proximity-Sensor）" class="headerlink" title="距离传感器（Proximity Sensor）"></a>距离传感器（Proximity Sensor）</h3><p>用于检测是否有其他物体靠近设备屏幕</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启距离感应功能</span></span><br><span class="line">[<span class="built_in">UIDevice</span> currentDevice].proximityMonitoringEnabled = <span class="literal">YES</span>;</span><br><span class="line"><span class="comment">// 监听距离感应的通知</span></span><br><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">selector:<span class="keyword">@selector</span>(proximityChange:)</span><br><span class="line">name:<span class="built_in">UIDeviceProximityStateDidChangeNotification</span></span><br><span class="line">object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)proximityChange:(<span class="built_in">NSNotification</span> *)notification &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="built_in">UIDevice</span> currentDevice].proximityState == <span class="literal">YES</span>) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"某个物体靠近了设备屏幕"</span>); <span class="comment">// 屏幕会自动锁住</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"某个物体远离了设备屏幕"</span>); <span class="comment">// 屏幕会自动解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="磁力计传感器（Magnetometer-Sensor）"><a href="#磁力计传感器（Magnetometer-Sensor）" class="headerlink" title="磁力计传感器（Magnetometer Sensor）"></a>磁力计传感器（Magnetometer Sensor）</h3><p>可以感应地球磁场， 获得方向信息， 使位置服务数据更精准。</p>
<p>可以用于电子罗盘和导航应用。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">调用CLLocationManager的startUpdatingHeading方法获取方向信息。获取方向结束时，可调用stopUpdatingHeading方法结束获取方向信息。</span><br><span class="line"></span><br><span class="line">当设备的方向改变时，iOS系统将会自动激发CLLocationManager的delegate对象的<span class="string">locationManager:</span><span class="string">didUpdateHeading:</span>方法，而程序可通过重写该方法来获取设备方向。</span><br></pre></td></tr></table></figure>

<h3 id="环境光传感器（Ambient-Light-Sensor）"><a href="#环境光传感器（Ambient-Light-Sensor）" class="headerlink" title="环境光传感器（Ambient Light Sensor）"></a>环境光传感器（Ambient Light Sensor）</h3><p>是iPhone和Mac设备中最为古老的传感器成员</p>
<p>它能够让你在使用 Mac、iPhone、iPad时，眼睛更为舒适。</p>
<p>从一个明亮的室外走入相对黑暗的室内后，iOS设备会自动调低亮度，让屏幕显得不再那么光亮刺眼。</p>
<p>当你使用iPhone拍照时，闪光灯会在一定条件下自动开启</p>
<p>几乎所有的Mac 都带有背光键盘，当周围光线弱到一定条件时，会自动开启键盘背光</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前环境下屏幕亮度</span></span><br><span class="line"><span class="constructor">NSLog(@<span class="string">"Screen Brightness: %f"</span>,[UIScreen <span class="params">mainScreen</span>].<span class="params">brightness</span>)</span>;</span><br><span class="line"><span class="comment">// 可以监听屏幕亮度改变的通知 UIScreenBrightnessDidChangeNotification</span></span><br></pre></td></tr></table></figure>

<h2 id="CoreMotion"><a href="#CoreMotion" class="headerlink" title="CoreMotion"></a>CoreMotion</h2><p>CoreMotion是一个专门处理Motion的框架，其中包含了两个部分加速度计和陀螺仪。加速计由三个坐标轴决定，用户最常见的操作设备的动作移动，晃动手机(摇一摇)，倾斜手机都可以被设备检测到，加速计可以检测到线性的变化，陀螺仪可以更好的检测到偏转的动作，可以根据用户的动作做出相应的动作，iOS模拟器无法模拟以上动作，真机调试需要开发者账号。</p>
<p>处理Motion事件有三种方式，开始(motionBegan)，结束(motionEnded)，取消(motionCancelled)：</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(void)</span>motionBegan:<span class="params">(UIEventSubtype)</span>motion withEvent:<span class="params">(UIEvent *)</span>event NS_AVAILABLE_IOS<span class="params">(<span class="number">3</span>_0)</span>;</span><br><span class="line">- <span class="params">(void)</span>motionEnded:<span class="params">(UIEventSubtype)</span>motion withEvent:<span class="params">(UIEvent *)</span>event NS_AVAILABLE_IOS<span class="params">(<span class="number">3</span>_0)</span>;</span><br><span class="line">- <span class="params">(void)</span>motionCancelled:<span class="params">(UIEventSubtype)</span>motion withEvent:<span class="params">(UIEvent *)</span>event NS_AVAILABLE_IOS<span class="params">(<span class="number">3</span>_0)</span>;</span><br></pre></td></tr></table></figure>

<p>CMMotionManager类能够使用到设备的所有移动数据(motion data)，Core Motion框架提供了两种对motion数据的操作方式：</p>
<p>pull方式：能够以CoreMotionManager的只读方式获取当前任何传感器状态或是组合数据，在有需要的时候，再主动去采集数据；</p>
<p>push方式：是以块或者闭包的形式收集到想要得到的数据并且在特定周期内得到实时的更新，实时采集所有数据（采集频率高)；</p>
<h3 id="加速计传感器（Motion-Accelerometer-Sensor）"><a href="#加速计传感器（Motion-Accelerometer-Sensor）" class="headerlink" title="加速计传感器（Motion/Accelerometer Sensor）"></a>加速计传感器（Motion/Accelerometer Sensor）</h3><p>加速计用于检测设备在X、Y、Z轴上的加速度 （哪个方向有力的作用）</p>
<p>加速计可以用于检测设备的摇晃，经典应用场景</p>
<p>摇一摇、计步器</p>
<p><img src="http://file.blog.chaosky.tech/070034106495370.png" alt=""></p>
<p>如果只需要知道设备的方向，不需要知道具体方向矢量角度，那么可以使用UIDevice进行操作，还可以根据方向就行判断,具体可以参考一下苹果官网代码:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>) viewDidLoad &#123;</span><br><span class="line">     <span class="comment">// Request to turn on accelerometer and begin receiving accelerometer events</span></span><br><span class="line">     [[<span class="built_in">UIDevice</span> currentDevice] beginGeneratingDeviceOrientationNotifications];</span><br><span class="line">     [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(orientationChanged:) name:<span class="built_in">UIDeviceOrientationDidChangeNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)orientationChanged:(<span class="built_in">NSNotification</span> *)notification &#123;</span><br><span class="line">     <span class="comment">// Respond to changes in device orientation</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) viewDidDisappear &#123;</span><br><span class="line">     <span class="comment">// Request to stop receiving accelerometer events and turn off accelerometer</span></span><br><span class="line">     [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span>];</span><br><span class="line">     [[<span class="built_in">UIDevice</span> currentDevice] endGeneratingDeviceOrientationNotifications];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)canBecomeFirstResponder &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    [<span class="keyword">self</span> becomeFirstResponder];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Push 方式：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建运动管理者对象</span></span><br><span class="line">_motionMgr = <span class="literal">[[CMM<span class="identifier">otionManager</span> <span class="identifier">alloc</span>]</span> init];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断加速计是否可用（最好判断）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">_motionMgr</span>.</span></span>isAccelerometerAvailable) &#123;</span><br><span class="line">    <span class="comment">// 加速计可用</span></span><br><span class="line">    <span class="comment">// 设置采样间隔</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">_motionMgr</span>.</span></span>accelerometerUpdateInterval = <span class="number">1.0</span>/<span class="number">30.0</span>; <span class="comment">// 1秒钟采样30次</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始采样（采样到数据就会调用handler，handler会在queue中执行）</span></span><br><span class="line">    <span class="literal">[<span class="identifier">_motionMgr</span> <span class="identifier">startAccelerometerUpdatesToQueue</span>:[[NSO<span class="identifier">perationQueue</span> <span class="identifier">alloc</span>]</span> init] withHandler:^(CMAccelerometerData<span class="operator"> * </span>accelerometerData, NSError<span class="operator"> * </span>error) &#123;</span><br><span class="line">        CMAcceleration acceleration = accelerometerData.acceleration;</span><br><span class="line">        <span class="constructor">NSLog(@<span class="string">"CMAcceleration: %f--%f--%f"</span>, <span class="params">acceleration</span>.<span class="params">x</span>, <span class="params">acceleration</span>.<span class="params">y</span>, <span class="params">acceleration</span>.<span class="params">z</span>)</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 加速度计不能用</span></span><br><span class="line">    <span class="constructor">NSLog(@<span class="string">"加速度计不能用"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Pull 方式：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建运动管理者对象</span></span><br><span class="line">_motionManager = <span class="literal">[[CMM<span class="identifier">otionManager</span> <span class="identifier">alloc</span>]</span> init];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断加速计是否可用（最好判断）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">_motionManager</span>.</span></span>isAccelerometerAvailable) &#123;</span><br><span class="line">    <span class="comment">// 加速计可用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置加速计采样频率</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">_motionManager</span>.</span></span>accelerometerUpdateInterval = <span class="number">1.0</span>/<span class="number">30.0</span>; <span class="comment">// 1秒钟采样30次</span></span><br><span class="line">    <span class="comment">// 开始采样</span></span><br><span class="line">    <span class="literal">[<span class="identifier">_motionManager</span> <span class="identifier">startAccelerometerUpdates</span>]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在需要的时候采集加速度数据</span></span><br><span class="line">CMAcceleration acceleration = <span class="module-access"><span class="module"><span class="identifier">_motionManager</span>.</span></span>accelerometerData.acceleration;</span><br><span class="line"><span class="constructor">NSLog(@<span class="string">"%f, %f, %f"</span>, <span class="params">acceleration</span>.<span class="params">x</span>, <span class="params">acceleration</span>.<span class="params">y</span>, <span class="params">acceleration</span>.<span class="params">z</span>)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="陀螺仪（Gyroscope）"><a href="#陀螺仪（Gyroscope）" class="headerlink" title="陀螺仪（Gyroscope）"></a>陀螺仪（Gyroscope）</h3><p>陀螺仪的原理是检测设备在X、Y、Z轴上所旋转的角速度</p>
<p>陀螺仪在赛车类游戏中有重大作用：</p>
<p>模拟汽车驾驶时方向盘旋转的动作，使得这类游戏的操控体验更为真实</p>
<p><img src="http://file.blog.chaosky.tech/070035576334022.png" alt=""></p>
<p>Push 方式：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建运动管理者对象</span></span><br><span class="line"><span class="keyword">if</span> (!_motionManager) &#123;</span><br><span class="line">    _motionManager = <span class="literal">[[CMM<span class="identifier">otionManager</span> <span class="identifier">alloc</span>]</span> init];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断陀螺仪是否可用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">_motionManager</span>.</span></span>gyroAvailable) &#123;</span><br><span class="line">    <span class="comment">// 设置采样频率</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">_motionManager</span>.</span></span>gyroUpdateInterval = <span class="number">1</span><span class="operator"> / </span><span class="number">10.0</span>; <span class="comment">// 1秒钟采样10次</span></span><br><span class="line">    <span class="comment">// 开始采样</span></span><br><span class="line">    <span class="literal">[<span class="identifier">_motionManager</span> <span class="identifier">startGyroUpdatesToQueue</span>:[[NSO<span class="identifier">perationQueue</span> <span class="identifier">alloc</span>]</span> init] withHandler:^(CMGyroData<span class="operator"> * </span>gyroData, NSError<span class="operator"> * </span>error) &#123;</span><br><span class="line">        <span class="comment">// 获取陀螺仪的信息</span></span><br><span class="line">        CMRotationRate rotationRate = gyroData.rotationRate;</span><br><span class="line">        <span class="constructor">NSLog(@<span class="string">"x:%f y:%f z:%f"</span>, <span class="params">rotationRate</span>.<span class="params">x</span>, <span class="params">rotationRate</span>.<span class="params">y</span>, <span class="params">rotationRate</span>.<span class="params">z</span>)</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 陀螺仪不能用</span></span><br><span class="line">    <span class="constructor">NSLog(@<span class="string">"陀螺仪不能用"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Pull 方式：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建运动管理者对象</span></span><br><span class="line"><span class="keyword">if</span> (!_motionManager) &#123;</span><br><span class="line">    _motionManager = <span class="literal">[[CMM<span class="identifier">otionManager</span> <span class="identifier">alloc</span>]</span> init];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断陀螺仪是否可用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">_motionManager</span>.</span></span>gyroAvailable) &#123;</span><br><span class="line">    <span class="comment">// 设置采样频率</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">_motionManager</span>.</span></span>gyroUpdateInterval = <span class="number">1</span><span class="operator"> / </span><span class="number">10.0</span>; <span class="comment">// 1秒钟采样10次</span></span><br><span class="line">    <span class="comment">// 开始采样</span></span><br><span class="line">    <span class="literal">[<span class="identifier">_motionManager</span> <span class="identifier">startGyroUpdates</span>]</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 陀螺仪不能用</span></span><br><span class="line">    <span class="constructor">NSLog(@<span class="string">"陀螺仪不能用"</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在需要的时候采集加速度数据</span></span><br><span class="line">CMRotationRate rotationRate = <span class="module-access"><span class="module"><span class="identifier">_motionManager</span>.</span></span>gyroData.rotationRate;</span><br><span class="line"><span class="constructor">NSLog(@<span class="string">"x:%f y:%f z:%f"</span>, <span class="params">rotationRate</span>.<span class="params">x</span>, <span class="params">rotationRate</span>.<span class="params">y</span>, <span class="params">rotationRate</span>.<span class="params">z</span>)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="计步器（CMStepCounter）"><a href="#计步器（CMStepCounter）" class="headerlink" title="计步器（CMStepCounter）"></a>计步器（CMStepCounter）</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断当前系统版本，iOS 8 之后CMStepCounter废弃了</span></span><br><span class="line"><span class="keyword">if</span> ([[<span class="built_in">UIDevice</span> currentDevice].systemVersion floatValue] &lt; <span class="number">8.0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1.判断计步器是否可用</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="built_in">CMStepCounter</span> isStepCountingAvailable]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"计步器不可用"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建计步器</span></span><br><span class="line">    <span class="keyword">if</span> (!_stepCounter) &#123;</span><br><span class="line">        _stepCounter = [[<span class="built_in">CMStepCounter</span> alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始计步</span></span><br><span class="line">    <span class="comment">// updateOn : 用户走了多少步之后, 更新block</span></span><br><span class="line">    <span class="built_in">NSOperationQueue</span> *queue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</span><br><span class="line">    [_stepCounter startStepCountingUpdatesToQueue:queue updateOn:<span class="number">5</span> withHandler:^(<span class="built_in">NSInteger</span> numberOfSteps, <span class="built_in">NSDate</span> * timestamp, <span class="built_in">NSError</span> * error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"一共走了%ld步"</span>, numberOfSteps);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 判断计步器是否可用</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="built_in">CMPedometer</span> isStepCountingAvailable]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建计步器</span></span><br><span class="line">    <span class="keyword">if</span> (!_pedometer) &#123;</span><br><span class="line">        _pedometer = [[<span class="built_in">CMPedometer</span> alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始计步</span></span><br><span class="line">    <span class="comment">// FromDate : 从什么时间开始计步</span></span><br><span class="line">    <span class="built_in">NSDate</span> *date = [<span class="built_in">NSDate</span> date];</span><br><span class="line">    [_pedometer startPedometerUpdatesFromDate:date withHandler:^(<span class="built_in">CMPedometerData</span> * pedometerData, <span class="built_in">NSError</span> * error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"您一共走了%@步"</span>, pedometerData.numberOfSteps);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算两个时间间隔走了多少步</span></span><br><span class="line">    <span class="built_in">NSDateFormatter</span> *fmt = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">    fmt.dateFormat = <span class="string">@"yyyy-MM-dd"</span>;</span><br><span class="line">    <span class="built_in">NSDate</span> *fromDate = [fmt dateFromString:<span class="string">@"2015-9-26"</span>];</span><br><span class="line">    <span class="built_in">NSDate</span> *toDate = [fmt dateFromString:<span class="string">@"2016-1-28"</span>];</span><br><span class="line">    [_pedometer queryPedometerDataFromDate:fromDate toDate:toDate withHandler:^(<span class="built_in">CMPedometerData</span> * pedometerData, <span class="built_in">NSError</span> * error) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"从%@到%@期间，总共走了%@步，总长%@米，上楼%@层，下楼%@层"</span>, pedometerData.startDate, pedometerData.endDate, pedometerData.numberOfSteps, pedometerData.distance, pedometerData.floorsAscended, pedometerData.floorsDescended);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Demo-下载：SensorDemo"><a href="#Demo-下载：SensorDemo" class="headerlink" title="Demo 下载：SensorDemo"></a>Demo 下载：<a href="https://github.com/chaoskyx/Demo/tree/master/SensorDemo" target="_blank" rel="noopener">SensorDemo</a></h3><h2 id="3D-Touch"><a href="#3D-Touch" class="headerlink" title="3D Touch"></a>3D Touch</h2><p>3D Touch 仅支持iPhone 6S/ 6S Plus，支持的iOS 系统版本为iOS 9。</p>
<p>使用3D Touch功能，主要分为以下三个模块：Home Screen Quick Actions、Peek and Pop、UITouch Force Properties。</p>
<h3 id="Home-Screen-Quick-Actions"><a href="#Home-Screen-Quick-Actions" class="headerlink" title="Home Screen Quick Actions"></a>Home Screen Quick Actions</h3><p>通过主屏幕的应用Icon，我们可以用3D Touch呼出一个菜单，进行快速定位应用功能模块相关功能的开发。</p>
<p><img src="http://file.blog.chaosky.tech/Snip20160128_1.png" alt=""></p>
<p>iOS9为我们提供了两种屏幕标签，分别是静态标签和动态标签。</p>
<h4 id="静态标签"><a href="#静态标签" class="headerlink" title="静态标签"></a>静态标签</h4><p>静态标签是我们在项目的配置plist文件中配置的标签，在用户安装程序后就可以使用，并且排序会在动态标签的前面。</p>
<p>在info.plist文件中添加如下键值（系统没有提示，只能手动输入）：</p>
<p><img src="http://file.blog.chaosky.tech/171313_aywB_2340880.png" alt=""></p>
<p>显示效果</p>
<p><img src="http://file.blog.chaosky.tech/172431_lbhm_2340880.png" alt=""></p>
<p>添加步骤：</p>
<ol>
<li><p>先添加了一个UIApplicationShortcutItems的数组</p>
</li>
<li><p>数组中添加的元素就是对应的静态标签，在每个标签中我们需要添加一些设置的键值：</p>
<p>必填项：</p>
<p><code>UIApplicationShortcutItemType</code> 这个键值设置一个快捷通道类型的字符串</p>
<p><code>UIApplicationShortcutItemTitle</code> 这个键值设置标签的标题</p>
<p>选填项：</p>
<p><code>UIApplicationShortcutItemSubtitle</code> 设置标签的副标题</p>
<p><code>UIApplicationShortcutItemIconType</code> 设置标签Icon类型</p>
<p><code>UIApplicationShortcutItemIconFile</code>  设置标签的Icon文件</p>
<p><code>UIApplicationShortcutItemUserInfo</code> 设置信息字典(用于传值)</p>
</li>
</ol>
<h4 id="动态标签"><a href="#动态标签" class="headerlink" title="动态标签"></a>动态标签</h4><p>动态标签是我们在程序中，通过代码添加的。</p>
<p>与之相关的类，主要有三个：</p>
<p><code>UIApplicationShortcutItem</code> 创建3DTouch标签的类</p>
<p><code>UIMutableApplicationShortcutItem</code> 创建可变的3DTouch标签的类</p>
<p><code>UIApplicationShortcutIcon</code> 创建标签中图片Icon的类</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建</span></span><br><span class="line">UIApplicationShortcutItem * item = [[UIApplicationShortcutItem alloc]<span class="string">initWithType:</span>@<span class="string">"two"</span> <span class="string">localizedTitle:</span>@<span class="string">"第二个标签"</span> <span class="string">localizedSubtitle:</span>@<span class="string">"看我哦"</span> <span class="string">icon:</span>[UIApplicationShortcutIcon <span class="string">iconWithType:</span>UIApplicationShortcutIconTypePlay] <span class="string">userInfo:</span>nil];</span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line">[UIApplication sharedApplication].shortcutItems = @[item];</span><br></pre></td></tr></table></figure>

<h4 id="响应标签的行为"><a href="#响应标签的行为" class="headerlink" title="响应标签的行为"></a>响应标签的行为</h4><p>当我们点击标签进入应用程序时，有这样一个方法可以进行一些操作：</p>
<p><code>- (void)application:(UIApplication *)application performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem completionHandler:(void (^)(BOOL))completionHandler</code></p>
<p>当我们通过标签进入app时，就会在<code>AppDelegate</code>中调用这样一个回调，我们可以获取shortcutItem的信息进行相关逻辑操作。</p>
<p>这里有一点需要注意：</p>
<p>我们在app的入口函数：</p>
<p><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code></p>
<p>也需要进行一下判断，在launchOptions中有UIApplicationLaunchOptionsShortcutItemKey这样一个键，通过它，我们可以区别是否是从标签进入的app，如果是则处理结束逻辑后，返回NO，防止处理逻辑被反复回调。</p>
<h4 id="几点注意："><a href="#几点注意：" class="headerlink" title="几点注意："></a>几点注意：</h4><ol>
<li>快捷标签最多可以创建四个，包括静态的和动态的。</li>
<li>每个标签的题目和icon最多两行，多出的会用…省略</li>
</ol>
<h3 id="Peek-and-Pop"><a href="#Peek-and-Pop" class="headerlink" title="Peek and Pop"></a>Peek and Pop</h3><p>peek (预览)和 pop (详阅)。</p>
<p>现在你可以授权应用的视图控制器来响应用户不同的按压力量。随着用户按压力量的增加，交互会出现三个阶段:</p>
<h4 id="1-暗示内容预览是可使用的"><a href="#1-暗示内容预览是可使用的" class="headerlink" title="1.暗示内容预览是可使用的"></a>1.暗示内容预览是可使用的</h4><p>轻按后，周围内容会变得模糊，这告诉用户预览更多内容( peek )是可以使用的。</p>
<p><img src="http://cc.cocimg.com/api/uploads/20151021/1445415797442101.png" alt=""></p>
<h4 id="2-展示预览-peek-，和快捷选项菜单（peek-quick-actions）"><a href="#2-展示预览-peek-，和快捷选项菜单（peek-quick-actions）" class="headerlink" title="2.展示预览(peek)，和快捷选项菜单（peek quick actions）"></a>2.展示预览(peek)，和快捷选项菜单（peek quick actions）</h4><p>轻按，屏幕视图就会过渡到 peek，一个你设置的用来展示更多内容的视图－就像Mail app做的一样。如果用户这时结束了触碰，peek就会消失并且应用回到交互开始之前的状态。</p>
<p>或者这个时候，用户可以在peek界面上更用力按下来跳转到使用peek呈现的视图,这个过渡动画会使用系统提供的pop过渡。pop出来的视图会填满你应用的根视图并显示一个返航按钮可以回到交互开始的地方。(图中没有显示最后展示pop视图的阶段)</p>
<p><img src="http://cc.cocimg.com/api/uploads/20151021/1445416998255315.png" alt=""></p>
<p><strong>Peek快速选项</strong></p>
<p>如果用户一直保持触摸，可以向上滑动Peek视图，系统会展示出你预先设置和peek关联的peek快速选项。</p>
<p>每一项peek快速选项都是你应用中的深度链接。当peek快速选项出现后，用户可以停止触摸而且peek会停留在屏幕中。用户可点击一个快速选项，唤出相关链接。</p>
<p><img src="http://cc.cocimg.com/api/uploads/20151021/1445417062907362.png" alt=""></p>
<h4 id="3-可选的跳转到预览中的视图-pop"><a href="#3-可选的跳转到预览中的视图-pop" class="headerlink" title="3.可选的跳转到预览中的视图(pop)"></a>3.可选的跳转到预览中的视图(pop)</h4><p>当你使用 peek 和 pop 时,系统通过压力决定从哪个阶段过度至下一个。用户可以在设置&gt;通用&gt;辅助功能&gt;3D Touch中进行修改。</p>
<h3 id="UITouch-Force-Properties"><a href="#UITouch-Force-Properties" class="headerlink" title="UITouch Force Properties"></a>UITouch Force Properties</h3><p>In iOS 9, the UITouch class has two new properties to support custom implementation of 3D Touch in your app: <strong>force</strong> and <strong>maximumPossibleForce</strong>. For the first time on iOS devices, these properties let you detect and respond to touch pressure in the UIEvent objects your app receives.</p>
<p>The force of a touch has a high dynamic range, available as a floating point value to your app.</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol>
<li>官方文档：<a href="https://developer.apple.com/ios/3d-touch/" target="_blank" rel="noopener">https://developer.apple.com/ios/3d-touch/</a></li>
<li><a href="http://my.oschina.net/u/2340880/blog/511509" target="_blank" rel="noopener">http://my.oschina.net/u/2340880/blog/511509</a></li>
<li><a href="http://www.cocoachina.com/ios/20151028/13849.html" target="_blank" rel="noopener">http://www.cocoachina.com/ios/20151028/13849.html</a></li>
</ol>
<h3 id="Demo-下载：3D-Touch"><a href="#Demo-下载：3D-Touch" class="headerlink" title="Demo 下载：3D-Touch"></a>Demo 下载：<a href="https://github.com/chaoskyx/Demo/tree/master/3D-Touch" target="_blank" rel="noopener">3D-Touch</a></h3><h2 id="蓝牙（BlueTooth）"><a href="#蓝牙（BlueTooth）" class="headerlink" title="蓝牙（BlueTooth）"></a>蓝牙（BlueTooth）</h2><p>参考PO主另外一篇文章：<a href="http://chaosky.me/2016/03/18/Bluetooth-Communication/" target="_blank" rel="noopener">http://chaosky.me/2016/03/18/Bluetooth-Communication/</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>QRCode</tag>
        <tag>Sensor</tag>
        <tag>3D Touch</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS Tips</title>
    <url>/2016/05/26/iOS-Tips/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="提取assets-car中的图片"><a href="#提取assets-car中的图片" class="headerlink" title="提取assets.car中的图片"></a>提取assets.car中的图片</h3><p><strong>ThemeEngine</strong>：Mac下的Assets.car文件查看工具，能够将图片导入到PhotoShop中进行编辑，提供了导出图片的功能。ThemeEngine拥有命令行版和图形界面版。使用私有APICoreUI开发。 下载地址：<a href="https://github.com/alexzielenski/ThemeEngine" target="_blank" rel="noopener">https://github.com/alexzielenski/ThemeEngine</a></p>
<p><strong>cartool</strong>：Mac下的命令行小工具，能够将Assets.car文件解包到指定文件夹。目标文件夹需要事先创建好。该工具使用私有API中的CoreUI进行开发。 下载地址：<a href="https://github.com/steventroughtonsmith/cartool" target="_blank" rel="noopener">https://github.com/steventroughtonsmith/cartool</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./cartool Assets.car outputDir</span><br></pre></td></tr></table></figure>

<p><strong>acextract</strong>：Mac下的命令行工具，Swift版。 下载地址：<a href="https://github.com/bartoszj/acextract" target="_blank" rel="noopener">https://github.com/bartoszj/acextract</a></p>
<h3 id="iPhone-6-屏幕揭秘"><a href="#iPhone-6-屏幕揭秘" class="headerlink" title="iPhone 6 屏幕揭秘"></a><a href="http://file.blog.chaosky.tech/iPhone%206屏幕揭秘.pdf" target="_blank" rel="noopener">iPhone 6 屏幕揭秘</a></h3><h3 id="iOS-通过获取iTunes上的APP信息，判断是否提醒升级APP"><a href="#iOS-通过获取iTunes上的APP信息，判断是否提醒升级APP" class="headerlink" title="iOS 通过获取iTunes上的APP信息，判断是否提醒升级APP"></a>iOS 通过获取iTunes上的APP信息，判断是否提醒升级APP</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">POST https:<span class="regexp">//i</span>tunes.apple.com<span class="regexp">/CN/</span>lookup?id=<span class="number">978591579</span></span><br></pre></td></tr></table></figure>

<p>使用POST方法，id 是iTunes connect里APP信息的Apple ID：为APP自动生成的id</p>
<h3 id="Charles-请求-HTTPS-出现-“You-may-need-to-configure-your-browser-or-application-to-trust-the-Charles-Root-Certificate-See-SSL-Proxying-in-the-Help-menu”"><a href="#Charles-请求-HTTPS-出现-“You-may-need-to-configure-your-browser-or-application-to-trust-the-Charles-Root-Certificate-See-SSL-Proxying-in-the-Help-menu”" class="headerlink" title="Charles 请求 HTTPS 出现 “You may need to configure your browser or application to trust the Charles Root Certificate. See SSL Proxying in the Help menu”"></a>Charles 请求 HTTPS 出现 “You may need to configure your browser or application to trust the Charles Root Certificate. See SSL Proxying in the Help menu”</h3><p>首先确认是否安装了 Charles 的证书，该证书在菜单 Help -&gt; SSL Proxying 下，需要同时安装在 Mac 和 模拟器或者设备上，具体使用方法参见子菜单。其次因为 10.3 以上系统需要你在“证书信任设置”中信任 Charles 的证书。在设备上点击设置 -&gt; 通用 -&gt; 关于本机 -&gt; 证书信任设置 -&gt; 选择 Charles 的证书打开。</p>
<a id="more"></a>

<h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><h3 id="iOS开发证书显示“此证书的签发者无效”解决方法"><a href="#iOS开发证书显示“此证书的签发者无效”解决方法" class="headerlink" title="iOS开发证书显示“此证书的签发者无效”解决方法"></a>iOS开发证书显示“此证书的签发者无效”解决方法</h3><p>原因：<strong>Apple Worldwide Developer Relations Certification Authority Intermediate Certificate</strong> 证书过期。</p>
<p>解决办法：</p>
<ol>
<li>在『钥匙串访问』的菜单项中选择显示已过期证书，删除已过期证书。</li>
<li>在Apple PKI网页下载最新的证书：<a href="https://developer.apple.com/certificationauthority/AppleWWDRCA.cer" target="_blank" rel="noopener">https://developer.apple.com/certificationauthority/AppleWWDRCA.cer</a> ，双击导入即可。</li>
</ol>
<h3 id="Xcode常见报错锦囊"><a href="#Xcode常见报错锦囊" class="headerlink" title="Xcode常见报错锦囊"></a><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&mid=2652546100&idx=1&sn=4ddcd710eb3d93910e58067f2ec797c9&scene=1&srcid=0626DTqmwlU53fE6bc0mL8pw#rd" target="_blank" rel="noopener">Xcode常见报错锦囊</a></h3><h3 id="Xcode只显示iOS-Simulator的identifier，没有显示device-version"><a href="#Xcode只显示iOS-Simulator的identifier，没有显示device-version" class="headerlink" title="Xcode只显示iOS Simulator的identifier，没有显示device version"></a>Xcode只显示iOS Simulator的identifier，没有显示device version</h3><p>当安装多个版本的Xcode时，有可能会在某个Xcode中出现相同机型相同版本的多个模拟器  </p>
<p>解决办法：</p>
<ol>
<li>退出Xcode.app, iOS Simulator.app等</li>
<li>执行命令关闭模拟器服务：<code>sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService</code></li>
<li>执行命令删除所有已经存在的模拟器：<code>rm -rf ~/Library/Developer/CoreSimulator/Devices</code></li>
<li>重启Xcode，就可以看到在<code>~/Library/Developer/CoreSimulator/Devices</code>目录，新生成的模拟器设备。</li>
<li>这样就不会有重复的模拟器设备了。  </li>
</ol>
<h3 id="如何删除Xcode-Downloads中的Components"><a href="#如何删除Xcode-Downloads中的Components" class="headerlink" title="如何删除Xcode Downloads中的Components"></a>如何删除Xcode Downloads中的Components</h3><p>解决办法：</p>
<ol>
<li>退出Xcode.app, iOS Simulator.app等  </li>
<li><code>cd /Library/Developer/CoreSimulator/Profiles/Runtimes</code>，如果已下载，可以在该目录中找到simruntime文件</li>
<li>删除对应模拟器版本</li>
<li>清空目录：<code>rm -rf ~/Library/Developer/CoreSimulator/Devices</code></li>
<li>重启Xcode，让Xcode重新生成模拟器设备.  </li>
</ol>
<h3 id="完全卸载-Xcode"><a href="#完全卸载-Xcode" class="headerlink" title="完全卸载 Xcode"></a>完全卸载 Xcode</h3><p>终端输入以下命令：<code>sudo /Developer/Library/uninstall-devtools —mode=all</code></p>
<h3 id="Xcode-6-x的Scheme选项在-OS-X-El-Capitan-10-11-中消失"><a href="#Xcode-6-x的Scheme选项在-OS-X-El-Capitan-10-11-中消失" class="headerlink" title="Xcode 6.x的Scheme选项在 OS X El Capitan(10.11)中消失"></a>Xcode 6.x的Scheme选项在 OS X El Capitan(10.11)中消失</h3><p>解决办法：将Xcode的窗口拉长或者全屏就会出现</p>
<h3 id="Xcode-7-1-无法安装Alcatraz插件"><a href="#Xcode-7-1-无法安装Alcatraz插件" class="headerlink" title="Xcode 7.1 无法安装Alcatraz插件"></a>Xcode 7.1 无法安装Alcatraz插件</h3><ol>
<li>关闭Xcode</li>
<li>移除之前安装的Xcode默认项  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">defaults</span> <span class="selector-tag">delete</span> <span class="selector-tag">com</span><span class="selector-class">.apple</span><span class="selector-class">.dt</span><span class="selector-class">.Xcode</span> <span class="selector-tag">DVTPlugInManagerNonApplePlugIns-Xcode-7</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure></li>
<li>卸载Alcatraz  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rm -rf ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins<span class="regexp">/Alcatraz.xcplugin</span></span><br></pre></td></tr></table></figure></li>
<li>移除所有通过Alcatraz安装的包  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rm -rf ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Alcatraz/</span></span><br></pre></td></tr></table></figure></li>
<li>更新已安装插件的DVTPlugInCompatibilityUUID到7.1<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find</span> ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins -name Info.plist -maxdepth <span class="number">3</span> | xargs -I&#123;&#125; defaults <span class="keyword">write</span> &#123;&#125; DVTPlugInCompatibilityUUIDs -array-add `defaults <span class="keyword">read</span> <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/I</span>nfo DVTPlugInCompatibilityUUID`</span><br></pre></td></tr></table></figure></li>
<li>重置Xcode Select<br><code>sudo xcode-select --reset</code></li>
<li>打开Xcode</li>
<li>安装 Alcatraz<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">curl -fsSL http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/supermarin/Alcatraz/master/Scripts/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure></li>
<li>重启Xcode</li>
<li>选择”Load Bundles”启动Xcode</li>
</ol>
<h3 id="Xcode-安装编译后的-app文件"><a href="#Xcode-安装编译后的-app文件" class="headerlink" title="Xcode 安装编译后的.app文件"></a>Xcode 安装编译后的.app文件</h3><p><strong>安装之前需要启动iOS模拟器。</strong>  </p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">$ [Xcode安装路径]/Contents/Developer/usr/<span class="keyword">bin/simctl </span>install <span class="keyword">booted </span>[要安装的APP路径]</span><br></pre></td></tr></table></figure>

<p><strong>示例命令：</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/usr/</span>bin<span class="regexp">/simctl install booted ~/</span>Desktop<span class="regexp">/Examine.app</span></span><br></pre></td></tr></table></figure>

<h3 id="关闭-Xcode-8-终端打印一大堆日志"><a href="#关闭-Xcode-8-终端打印一大堆日志" class="headerlink" title="关闭 Xcode 8 终端打印一大堆日志"></a>关闭 Xcode 8 终端打印一大堆日志</h3><p>终端中打印的日志格式类似如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">subsystem:</span> <span class="string">com.apple.UIKit,</span> <span class="attr">category:</span> <span class="string">HIDEventFiltered,</span> <span class="attr">enable_level:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">persist_level:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">default_ttl:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">info_ttl:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">debug_ttl:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">generate_symptoms:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">enable_oversize:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">privacy_setting:</span> <span class="number">2</span><span class="string">,</span> <span class="attr">enable_private_data:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>解决办法：Edit Scheme -&gt; Run -&gt; Arguments，在<code>Environment Variables</code>里边添加<br><code>OS_ACTIVITY_MODE ＝ Disable</code></p>
<p><img src="http://file.blog.chaosky.tech/2016-09-20-Snip20160920_4.png" alt="Snip20160920_4"><br><img src="http://file.blog.chaosky.tech/2016-09-20-Snip20160920_6.png" alt="Snip20160920_6"></p>
<h3 id="Xcode-7-x-中使用-Xcode-8-的新字体-SF-Mono"><a href="#Xcode-7-x-中使用-Xcode-8-的新字体-SF-Mono" class="headerlink" title="Xcode 7.x 中使用 Xcode 8 的新字体 SF Mono"></a>Xcode 7.x 中使用 Xcode 8 的新字体 SF Mono</h3><p>从安装有 Xcode 8 的路径 <code>/Application/Xcode.app/Contents/SharedFrameworks/DVTKit.framework/Versions/A/Resources/Fonts</code> 下能找到这些字体。</p>
<p>选中所有字体拖拽到 <code>Font Book.app</code>（字体册）中，这样在 Xcode 7 中就可以选择了。</p>
<p>我自己将字体压缩了下，可以从这个地址下载： <a href="/assets/SFMonoFont.zip">SF Mono 字体</a></p>
<h3 id="Xcode-Tips-Tricks"><a href="#Xcode-Tips-Tricks" class="headerlink" title="Xcode Tips Tricks"></a>Xcode Tips Tricks</h3><video src="http://file.blog.chaosky.tech/XcodeTipsTricks.mp4" width=600 height=400 controls="controls">
Your browser does not support the video tag.
</video>

<h3 id="Xcode-Snippets"><a href="#Xcode-Snippets" class="headerlink" title="Xcode Snippets"></a>Xcode Snippets</h3><p>关于 <strong>Xcode Snippets</strong> 的介绍，可以通过<a href="http://nshipster.cn/xcode-snippets/" target="_blank" rel="noopener">这篇文章</a>了解，以及如何生成自定义的代码片段。</p>
<h4 id="安装-NShipster-提供的代码片段"><a href="#安装-NShipster-提供的代码片段" class="headerlink" title="安装 NShipster 提供的代码片段"></a>安装 NShipster 提供的代码片段</h4><p>仓库地址：<a href="https://github.com/Xcode-Snippets" target="_blank" rel="noopener">https://github.com/Xcode-Snippets</a></p>
<ol>
<li>安装命令行工具：<code>gem install xcodesnippet</code></li>
<li>下载代码仓库：<code>git clone https://github.com/Xcode-Snippets/Objective-C.git</code></li>
<li>进入该目录添加单条代码片段：<code>xcodesnippet install path/to/source.m</code></li>
<li>该目录下有很多代码片段，可以通过命令批量添加：<code>ls -1 | xargs -L1 xcodesnippet install</code></li>
</ol>
<h4 id="安装唐巧提供的代码片段"><a href="#安装唐巧提供的代码片段" class="headerlink" title="安装唐巧提供的代码片段"></a>安装唐巧提供的代码片段</h4><p>仓库地址：<a href="https://github.com/tangqiaoboy/xcode_tool" target="_blank" rel="noopener">https://github.com/tangqiaoboy/xcode_tool</a></p>
<ol>
<li>下载项目仓库：<code>git clone https://github.com/tangqiaoboy/xcode_tool</code></li>
<li><code>cd xcode_tool</code></li>
<li><code>./setup_snippets.sh</code></li>
</ol>
<p>需要注意的是唐巧提供的代码片段，以后需要更新时可以直接仓库即可。</p>
<h3 id="Understanding-and-Analyzing-Application-Crash-Reports"><a href="#Understanding-and-Analyzing-Application-Crash-Reports" class="headerlink" title="Understanding and Analyzing Application Crash Reports"></a>Understanding and Analyzing Application Crash Reports</h3><p>详情链接：<a href="https://developer.apple.com/library/content/technotes/tn2151/_index.html" target="_blank" rel="noopener">https://developer.apple.com/library/content/technotes/tn2151/_index.html</a></p>
<h2 id="Foundation"><a href="#Foundation" class="headerlink" title="Foundation"></a>Foundation</h2><h3 id="获取程序沙盒Document目录"><a href="#获取程序沙盒Document目录" class="headerlink" title="获取程序沙盒Document目录"></a>获取程序沙盒<code>Document</code>目录</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *paths = <span class="built_in">NSSearchPathForDictionariesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</span><br><span class="line"><span class="built_in">NSString</span> *documentsDirectory = [paths objectAtIndex:<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<h3 id="Objective-C-关键字"><a href="#Objective-C-关键字" class="headerlink" title="Objective-C 关键字"></a>Objective-C 关键字</h3><p><img src="http://file.blog.chaosky.tech/2017-01-18-cheatsheetobjccd.png" alt="cheatsheetobjccd"></p>
<h3 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h3><p>![消息传递-how choose](<a href="http://file.blog.chaosky.tech/2017-01-18-消息传递-how" target="_blank" rel="noopener">http://file.blog.chaosky.tech/2017-01-18-消息传递-how</a> choose.png)</p>
<h3 id="队列组"><a href="#队列组" class="headerlink" title="队列组"></a>队列组</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建队列组</span></span><br><span class="line">dispatch_group_t group =  dispatch<span class="constructor">_group_create()</span>;</span><br><span class="line"><span class="comment">// 2.1第一个队列组异步</span></span><br><span class="line">dispatch<span class="constructor">_group_async(<span class="params">group</span>, <span class="params">dispatch_get_global_queue</span>(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)</span>, ^&#123;</span><br><span class="line">    <span class="comment">// 执行1个耗时的异步操作</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.2第二个队列组异步</span></span><br><span class="line">dispatch<span class="constructor">_group_async(<span class="params">group</span>, <span class="params">dispatch_get_global_queue</span>(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)</span>, ^&#123;</span><br><span class="line">    <span class="comment">// 执行1个耗时的异步操作</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.所有队列组异步线程结束后</span></span><br><span class="line">dispatch<span class="constructor">_group_notify(<span class="params">group</span>, <span class="params">dispatch_get_main_queue</span>()</span>, ^&#123;</span><br><span class="line">    <span class="comment">// 等前面的异步操作都执行完毕后，回到主线程...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Swift-命令行程序接收用户输入"><a href="#Swift-命令行程序接收用户输入" class="headerlink" title="Swift 命令行程序接收用户输入"></a>Swift 命令行程序接收用户输入</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Swift <span class="number">2.3</span></span><br><span class="line"><span class="comment">// 标准输入设备</span></span><br><span class="line"><span class="keyword">let</span> stdin = <span class="module-access"><span class="module"><span class="identifier">NSFileHandle</span>.</span></span>file<span class="constructor">HandleWithStandardInput()</span></span><br><span class="line"><span class="keyword">let</span> inputData = keyboard.availableData</span><br><span class="line">var inputStr = <span class="constructor">NSString(<span class="params">data</span>: <span class="params">inputData</span>, <span class="params">encoding</span>: NSUTF8StringEncoding)</span></span><br><span class="line"><span class="comment">// 处理换行符</span></span><br><span class="line">inputStr = inputStr?.<span class="built_in">string</span><span class="constructor">ByReplacingOccurrencesOfString(<span class="string">"\n"</span>, <span class="params">withString</span>: <span class="string">""</span>)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Swift 3.0</span></span><br><span class="line"><span class="function"><span class="title">readLine</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h3 id="获取变量内存地址"><a href="#获取变量内存地址" class="headerlink" title="获取变量内存地址"></a>获取变量内存地址</h3><p><strong>unsafeAddressOf(_:)</strong></p>
<p>返回类对象的指针，类型为<code>UnsafePointer</code></p>
<blockquote>
<p>函数原型<br>func unsafeAddressOf(_ object: AnyObject) -&gt; UnsafePointer<Void></p>
</blockquote>
<p>示例代码</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">var</span> str = <span class="string">"Hello, playground"</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(unsafeAddressOf(str)</span></span>)</span><br><span class="line"><span class="comment">// 0x00007f859a404ca0</span></span><br></pre></td></tr></table></figure>

<p><strong>func withUnsafePointer&lt;T, Result&gt;(_: inout T, _: @noescape (UnsafePointer<T>) throws -&gt; Result)</strong><br>Invokes body with an UnsafePointer to arg and returns the result. Useful for calling Objective-C APIs that take “in/out” parameters (and default-constructible “out” parameters) by pointer.</p>
<blockquote>
<p>函数原型<br>func withUnsafePointer&lt;T, Result&gt;(_ arg: inout T, _ body: @noescape (UnsafePointer<T>) throws -&gt; Result) rethrows -&gt; Result</p>
</blockquote>
<p>示例代码</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Point &#123;</span><br><span class="line">    var x: CGFloat, y: CGFloat</span><br><span class="line">&#125;</span><br><span class="line">var point = <span class="constructor">Point(<span class="params">x</span>: 10, <span class="params">y</span>: 10)</span></span><br><span class="line">print(<span class="keyword">with</span><span class="constructor">UnsafePointer(&amp;<span class="params">point</span>)</span> &#123;UnsafePointer&lt;Point&gt;($<span class="number">0</span>)&#125;)</span><br><span class="line"><span class="comment">// 0x0000000115e3f8d8</span></span><br></pre></td></tr></table></figure>

<h3 id="Quick-Swift-Tips-and-Tricks"><a href="#Quick-Swift-Tips-and-Tricks" class="headerlink" title="Quick Swift Tips and Tricks"></a>Quick Swift Tips and Tricks</h3><p>![Swift Quick Tips](<a href="http://file.blog.chaosky.tech/2016-12-26-Swift" target="_blank" rel="noopener">http://file.blog.chaosky.tech/2016-12-26-Swift</a> Quick Tips.png)</p>
<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><h3 id="UITableView"><a href="#UITableView" class="headerlink" title="UITableView"></a>UITableView</h3><h4 id="取消cell的分割线"><a href="#取消cell的分割线" class="headerlink" title="取消cell的分割线"></a>取消cell的分割线</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">tableview.separatorStyle</span> = UITableViewCellSeparatorStyleNone<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h4 id="UITabelViewCell-的高亮状态的取消"><a href="#UITabelViewCell-的高亮状态的取消" class="headerlink" title="UITabelViewCell 的高亮状态的取消"></a>UITabelViewCell 的高亮状态的取消</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView willDisplayCell:(<span class="built_in">UITableViewCell</span> *)cell forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</span><br><span class="line">    <span class="comment">//设置cell的背景是透明的。</span></span><br><span class="line">    cell.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</span><br><span class="line">    <span class="comment">//取消cell的高亮状态</span></span><br><span class="line">    cell.selectionStyle = <span class="built_in">UITableViewCellSelectionStyleNone</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用下面的这个方法会导致cell不能响应点击事件</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView shouldHighlightRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="设置分割线的左右偏移量"><a href="#设置分割线的左右偏移量" class="headerlink" title="设置分割线的左右偏移量"></a>设置分割线的左右偏移量</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">tableView.separatorInset = UIEdgeInsetsMake(<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h4 id="TableView不显示没内容的Cell"><a href="#TableView不显示没内容的Cell" class="headerlink" title="TableView不显示没内容的Cell"></a>TableView不显示没内容的Cell</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">self.tableView.tableFooterView</span> = [[UIView alloc] init]<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">tableView.separatorColor</span> = [UIColor clearColor]<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h4 id="更改tableviewcell的小对勾的颜色"><a href="#更改tableviewcell的小对勾的颜色" class="headerlink" title="更改tableviewcell的小对勾的颜色"></a>更改tableviewcell的小对勾的颜色</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">tableView.tintColor</span> = [UIColor redColor]<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h4 id="UITableView-在页面加载完成后滚动到底部"><a href="#UITableView-在页面加载完成后滚动到底部" class="headerlink" title="UITableView 在页面加载完成后滚动到底部"></a>UITableView 在页面加载完成后滚动到底部</h4><p>方法原型：<code>- (void)selectRowAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated scrollPosition:(UITableViewScrollPosition)scrollPosition</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) <span class="string">viewDidAppear:</span>(BOOL)animated &#123;</span><br><span class="line">	[<span class="keyword">super</span> <span class="string">viewDidAppear:</span>animated];</span><br><span class="line">	[self.tableView <span class="string">selectRowAtIndexPath:</span>indexPath <span class="string">animated:</span>NO <span class="string">scrollPosition:</span>UITableViewScrollPositionBottom];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="隐藏GroupedTableView上边多余的间隔"><a href="#隐藏GroupedTableView上边多余的间隔" class="headerlink" title="隐藏GroupedTableView上边多余的间隔"></a>隐藏GroupedTableView上边多余的间隔</h4><p>第一个 Section 距离屏幕顶端有间隔，解决这个问题有三种方式。</p>
<p><img src="http://file.blog.chaosky.tech/2016-10-18-Snip20161017_2.png" alt="Snip20161017_2"></p>
<h5 id="方式一：设置UITableViewHeader"><a href="#方式一：设置UITableViewHeader" class="headerlink" title="方式一：设置UITableViewHeader"></a>方式一：设置UITableViewHeader</h5><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">CGFLOAT_MIN</span>);</span><br><span class="line"><span class="keyword">self</span>.tableView.tableHeaderView = [[<span class="built_in">UIView</span> alloc] initWithFrame:frame];</span><br></pre></td></tr></table></figure>

<h5 id="方式二：Storyboard"><a href="#方式二：Storyboard" class="headerlink" title="方式二：Storyboard"></a>方式二：Storyboard</h5><p>在第一个 Section 的上面拖进来一个空 UIView，设置view的height为0.1。<br><img src="http://file.blog.chaosky.tech/2016-10-18-Snip20161017_4.png" alt="Snip20161017_4"><br><img src="http://file.blog.chaosky.tech/2016-10-18-Snip20161017_6.png" alt="Snip20161017_6"></p>
<h5 id="方式三：实现heightForHeaderInSection协议方法"><a href="#方式三：实现heightForHeaderInSection协议方法" class="headerlink" title="方式三：实现heightForHeaderInSection协议方法"></a>方式三：实现heightForHeaderInSection协议方法</h5><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">CGFloat</span>) tableView:(<span class="built_in">UITableView</span> *)tableView heightForHeaderInSection:(<span class="built_in">NSInteger</span>)section</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (section == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CGFLOAT_MIN</span>;</span><br><span class="line">    <span class="keyword">return</span> tableView.sectionHeaderHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UINavigationBar"><a href="#UINavigationBar" class="headerlink" title="UINavigationBar"></a>UINavigationBar</h3><h4 id="自定义leftBarbuttonItem，左滑返回手势失效"><a href="#自定义leftBarbuttonItem，左滑返回手势失效" class="headerlink" title="自定义leftBarbuttonItem，左滑返回手势失效"></a>自定义leftBarbuttonItem，左滑返回手势失效</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.navigationItem.leftBarButtonItem = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithImage:img style:<span class="built_in">UIBarButtonItemStylePlain</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(onBack:)];</span><br><span class="line"><span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer.delegate = (<span class="keyword">id</span>&lt;<span class="built_in">UIGestureRecognizerDelegate</span>&gt;)<span class="keyword">self</span>;</span><br></pre></td></tr></table></figure>

<h4 id="滑动隐藏NavigationBar"><a href="#滑动隐藏NavigationBar" class="headerlink" title="滑动隐藏NavigationBar"></a>滑动隐藏NavigationBar</h4><p><code>navigationController.hidesBarsOnSwipe = Yes</code></p>
<h4 id="导航条返回键隐藏title"><a href="#导航条返回键隐藏title" class="headerlink" title="导航条返回键隐藏title"></a>导航条返回键隐藏title</h4><p><code>[[UIBarButtonItem appearance] setBackButtonTitlePositionAdjustment:UIOffsetMake(0, -60) forBarMetrics:UIBarMetricsDefault];</code></p>
<h4 id="NavigationBar透明而不是带模糊的效果"><a href="#NavigationBar透明而不是带模糊的效果" class="headerlink" title="NavigationBar透明而不是带模糊的效果"></a>NavigationBar透明而不是带模糊的效果</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.navigationBar setBackgroundImage:[<span class="built_in">UIImage</span> new] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line"><span class="keyword">self</span>.navigationBar.shadowImage = [<span class="built_in">UIImage</span> new];</span><br><span class="line"><span class="keyword">self</span>.navigationBar.translucent = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure>

<h4 id="改变导航栏里返回按钮的图标颜色"><a href="#改变导航栏里返回按钮的图标颜色" class="headerlink" title="改变导航栏里返回按钮的图标颜色"></a>改变导航栏里返回按钮的图标颜色</h4><p><code>self.navigationController.navigationBar.tintColor = [UIColor whiteColor];</code></p>
<h3 id="拉伸图片，图片不变形"><a href="#拉伸图片，图片不变形" class="headerlink" title="拉伸图片，图片不变形"></a>拉伸图片，图片不变形</h3><p><code>UIImage *image = [[UIImage imageNamed:@&quot;xxx&quot;] stretchableImageWithLeftCapWidth:10 topCapHeight:10];</code></p>
<h3 id="ScrollView莫名其妙不能在viewController划到顶"><a href="#ScrollView莫名其妙不能在viewController划到顶" class="headerlink" title="ScrollView莫名其妙不能在viewController划到顶"></a>ScrollView莫名其妙不能在viewController划到顶</h3><p><code>self.automaticallyAdjustsScrollViewInsets = NO;</code></p>
<h3 id="怎么点击self-view就让键盘收起"><a href="#怎么点击self-view就让键盘收起" class="headerlink" title="怎么点击self.view就让键盘收起"></a>怎么点击self.view就让键盘收起</h3><p>两种方法：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span> *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</span><br><span class="line">&#123;</span><br><span class="line">   [<span class="keyword">self</span>.view endEditing:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)canBecomeFirstResponder &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span> *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</span><br><span class="line">&#123;</span><br><span class="line">   [<span class="keyword">self</span> becomeFirstResponder];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改状态栏样式"><a href="#修改状态栏样式" class="headerlink" title="修改状态栏样式"></a>修改状态栏样式</h3><p>在info.plist文件中添加<code>UIViewControllerBasedStatusBarAppearance</code>设置为NO<br><code>[[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];</code></p>
<h3 id="一句话解决倒计时问题，比如获取验证码倒计时"><a href="#一句话解决倒计时问题，比如获取验证码倒计时" class="headerlink" title="一句话解决倒计时问题，比如获取验证码倒计时"></a><a href="http://www.jianshu.com/p/ccbbdc776876" target="_blank" rel="noopener">一句话解决倒计时问题，比如获取验证码倒计时</a></h3><p><img src="http://upload-images.jianshu.io/upload_images/571495-92c1547f64ea24f6.gif" alt=""></p>
<h3 id="WKWebView的使用和各种坑的解决方法（OC＋Swift）"><a href="#WKWebView的使用和各种坑的解决方法（OC＋Swift）" class="headerlink" title="WKWebView的使用和各种坑的解决方法（OC＋Swift）"></a><a href="http://www.jianshu.com/p/403853b63537" target="_blank" rel="noopener">WKWebView的使用和各种坑的解决方法（OC＋Swift）</a></h3><h3 id="UIImageView加载WebP格式的图片"><a href="#UIImageView加载WebP格式的图片" class="headerlink" title="UIImageView加载WebP格式的图片"></a>UIImageView加载WebP格式的图片</h3><p>WebP格式简介：<a href="http://isux.tencent.com/introduction-of-webp.html" target="_blank" rel="noopener">http://isux.tencent.com/introduction-of-webp.html</a></p>
<p>WebP格式图片示例：<a href="http://file.blog.chaosky.tech/1.sm.webp" target="_blank" rel="noopener">http://file.blog.chaosky.tech/1.sm.webp</a></p>
<h4 id="使用CocoaPods和SDWebImage"><a href="#使用CocoaPods和SDWebImage" class="headerlink" title="使用CocoaPods和SDWebImage"></a>使用CocoaPods和SDWebImage</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pod</span> <span class="string">'SDWebImage'</span></span><br><span class="line">pod <span class="string">'SDWebImage/WebP'</span></span><br></pre></td></tr></table></figure>

<h4 id="使用CocoaPods和YYWebImage"><a href="#使用CocoaPods和YYWebImage" class="headerlink" title="使用CocoaPods和YYWebImage"></a>使用CocoaPods和YYWebImage</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pod</span> <span class="string">'YYWebImage'</span></span><br><span class="line">pod <span class="string">'YYImage/WebP'</span></span><br></pre></td></tr></table></figure>

<h3 id="UINavigationController"><a href="#UINavigationController" class="headerlink" title="UINavigationController"></a>UINavigationController</h3><h4 id="NavigationController中跳转"><a href="#NavigationController中跳转" class="headerlink" title="NavigationController中跳转"></a>NavigationController中跳转</h4><p>比如视图控制器，A——&gt;B——&gt;C——&gt;D，现在在D页面中返回时跳转到不在导航控制器栈中的F视图控制器。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">NSMutableArray * vcs = <span class="comment">[NSMutableArray arrayWithArray:self.navigationController.viewControllers]</span>;</span><br><span class="line">FViewController *fVC = <span class="comment">[<span class="comment">[FViewController alloc]</span> init]</span>;</span><br><span class="line"><span class="comment">[vcs insertObject:fVC atIndex:vcs.count - 1]</span>;</span><br><span class="line">self.navigationController.viewControllers = vcs;</span><br></pre></td></tr></table></figure>


<h2 id="常用宏"><a href="#常用宏" class="headerlink" title="常用宏"></a>常用宏</h2><h3 id="尺寸宏"><a href="#尺寸宏" class="headerlink" title="尺寸宏"></a>尺寸宏</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">StatusBar_HEIGHT</span> 20</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">NavigationBar_HEIGHT</span> 44</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">NavigationBarIcon</span> 20</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">TabBar_HEIGHT</span> 49</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">TabBarIcon</span> 30</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">SCREEN_WIDTH</span> (<span class="selector-attr">[UIScreen mainScreen]</span><span class="selector-class">.bounds</span><span class="selector-class">.size</span><span class="selector-class">.width</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">SCREEN_HEIGHT</span> (<span class="selector-attr">[UIScreen mainScreen]</span><span class="selector-class">.bounds</span><span class="selector-class">.size</span><span class="selector-class">.height</span>)</span><br></pre></td></tr></table></figure>

<h3 id="打印宏"><a href="#打印宏" class="headerlink" title="打印宏"></a>打印宏</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接替换NSLog</span></span><br><span class="line"><span class="selector-id">#if</span> <span class="selector-tag">DEBUG</span></span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">NSLog</span>(FORMAT, ...) <span class="selector-tag">fprintf</span>(stderr,<span class="string">"\n%s:%d %s \t%s\n"</span>, [[[NSString <span class="attribute">stringWithUTF8String</span>:__FILE__] lastPathComponent] UTF8String], __LINE__, __FUNCTION__, [[NSString <span class="attribute">stringWithFormat</span>:FORMAT, ##__VA_ARGS__] UTF8String]);</span><br><span class="line"><span class="selector-id">#else</span></span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">NSLog</span>(FORMAT, ...) <span class="selector-tag">nil</span></span><br><span class="line"><span class="selector-id">#endif</span></span><br></pre></td></tr></table></figure>

<h3 id="系统宏"><a href="#系统宏" class="headerlink" title="系统宏"></a>系统宏</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取版本</span></span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">IOS_VERSION</span> <span class="selector-attr">[[[UIDevice currentDevice]</span> <span class="selector-tag">systemVersion</span>] <span class="selector-tag">floatValue</span>]</span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">CurrentSystemVersion</span> <span class="selector-attr">[[UIDevice currentDevice]</span> <span class="selector-tag">systemVersion</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前语言</span></span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">CurrentLanguage</span> ([[NSLocale preferredLanguages] <span class="attribute">objectAtIndex</span>:<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是真机还是模拟器</span></span><br><span class="line"><span class="selector-id">#if</span> <span class="selector-tag">TARGET_OS_IPHONE</span></span><br><span class="line"><span class="comment">//iPhone Device</span></span><br><span class="line"><span class="selector-id">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#if</span> <span class="selector-tag">TARGET_IPHONE_SIMULATOR</span></span><br><span class="line"><span class="comment">//iPhone Simulator</span></span><br><span class="line"><span class="selector-id">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查系统版本</span></span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">SYSTEM_VERSION_EQUAL_TO</span>(v)                  ([[[UIDevice currentDevice] systemVersion] <span class="attribute">compare</span>:v <span class="attribute">options</span>:NSNumericSearch] == NSOrderedSame)</span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">SYSTEM_VERSION_GREATER_THAN</span>(v)              ([[[UIDevice currentDevice] systemVersion] <span class="attribute">compare</span>:v <span class="attribute">options</span>:NSNumericSearch] == NSOrderedDescending)</span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO</span>(v)  ([[[UIDevice currentDevice] systemVersion] <span class="attribute">compare</span>:v <span class="attribute">options</span>:NSNumericSearch] != NSOrderedAscending)</span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">SYSTEM_VERSION_LESS_THAN</span>(v)                ([[[UIDevice currentDevice] systemVersion] <span class="attribute">compare</span>:v <span class="attribute">options</span>:NSNumericSearch] == NSOrderedAscending)</span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO</span>(v)    ([[[UIDevice currentDevice] systemVersion] <span class="attribute">compare</span>:v <span class="attribute">options</span>:NSNumericSearch] != NSOrderedDescending)</span><br></pre></td></tr></table></figure>

<h3 id="内存宏"><a href="#内存宏" class="headerlink" title="内存宏"></a>内存宏</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用ARC和不使用ARC</span></span><br><span class="line"><span class="meta">#if __has_feature(objc_arc)</span></span><br><span class="line"><span class="comment">//compiling with ARC</span></span><br><span class="line"><span class="meta">#else</span></span><br><span class="line"><span class="comment">// compiling without ARC</span></span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - common functions</span></span><br><span class="line"><span class="meta">#define RELEASE_SAFELY(__POINTER) &#123; [__POINTER release]; __POINTER = nil; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放一个对象</span></span><br><span class="line"><span class="meta">#define SAFE_DELETE(P) if(P) &#123; [P release], P = nil; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#define SAFE_RELEASE(x) [x release];x=nil</span></span><br></pre></td></tr></table></figure>

<h3 id="颜色宏"><a href="#颜色宏" class="headerlink" title="颜色宏"></a>颜色宏</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rgb颜色转换（16进制-&gt;10进制）</span></span><br><span class="line">#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((<span class="built_in">float</span>)((rgbValue &amp; <span class="number">0xFF0000</span>) &gt;&gt; <span class="number">16</span>))/<span class="number">255.0</span> green:((<span class="built_in">float</span>)((rgbValue &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>))/<span class="number">255.0</span> blue:((<span class="built_in">float</span>)(rgbValue &amp; <span class="number">0xFF</span>))/<span class="number">255.0</span> alpha:<span class="number">1.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// RGB颜色</span></span><br><span class="line">#define RGBCOLOR(r, g, b) [UIColor colorWithRed:(r)/<span class="number">255.0f</span> green:(g)/<span class="number">255.0f</span> blue:(b)/<span class="number">255.0f</span> alpha:<span class="number">1</span>]</span><br><span class="line">#define RGBACOLOR(r, g, b, a) [UIColor colorWithRed:(r)/<span class="number">255.0f</span> green:(g)/<span class="number">255.0f</span> blue:(b)/<span class="number">255.0f</span> alpha:(a)]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 背景色</span></span><br><span class="line">#define BACKGROUNDCOLOR [UIColor colorWithRed:<span class="number">242.0</span>/<span class="number">255.0</span> green:<span class="number">236.0</span>/<span class="number">255.0</span> blue:<span class="number">231.0</span>/<span class="number">255.0</span> alpha:<span class="number">1.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除背景色</span></span><br><span class="line">#define CLEARCOLOR [UIColor clearColor]</span><br></pre></td></tr></table></figure>

<h3 id="其他宏"><a href="#其他宏" class="headerlink" title="其他宏"></a>其他宏</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方正黑体简体字体定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FONT(F) [UIFont fontWithName:@<span class="meta-string">"FZHTJW--GB1-0"</span> size:(F)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个API</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BaseAPIURL                @<span class="meta-string">"http://xxxxx/"</span></span></span><br><span class="line"><span class="comment">//登陆API</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> APILogin              [APIURL stringByAppendingString:@<span class="meta-string">"Login"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置View的tag属性</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VIEWWITHTAG(_OBJECT, _TAG)    [_OBJECT viewWithTag : _TAG]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//G－C－D</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BACK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAIN(block) dispatch_async(dispatch_get_main_queue(),block)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//NSUserDefaults 实例化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USER_DEFAULT [NSUserDefaults standardUserDefaults]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//由角度获取弧度 有弧度获取角度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> degreesToRadian(x) (M_PI * (x) / 180.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> radianToDegrees(radian) (radian*180.0)/(M_PI)</span></span><br></pre></td></tr></table></figure>

<h3 id="单例宏"><a href="#单例宏" class="headerlink" title="单例宏"></a>单例宏</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define SYNTHESIZE_SINGLETON_FOR_CLASS(classname) \</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line">static classname *shared<span class="comment">##classname = nil; \</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line">+ (classname *)shared<span class="comment">##classname \</span></span><br><span class="line">&#123; <span class="string">\</span></span><br><span class="line">@synchronized(self) <span class="string">\</span></span><br><span class="line">&#123; <span class="string">\</span></span><br><span class="line"><span class="keyword">if</span> (shared<span class="comment">##classname == nil) \</span></span><br><span class="line">&#123; <span class="string">\</span></span><br><span class="line">shared<span class="comment">##classname = [[self alloc] init]; \</span></span><br><span class="line">&#125; <span class="string">\</span></span><br><span class="line">&#125; <span class="string">\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="keyword">return</span> shared<span class="comment">##classname; \</span></span><br><span class="line">&#125; <span class="string">\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line">+ (id)allocWithZone:(NSZone *)zone <span class="string">\</span></span><br><span class="line">&#123; <span class="string">\</span></span><br><span class="line">@synchronized(self) <span class="string">\</span></span><br><span class="line">&#123; <span class="string">\</span></span><br><span class="line"><span class="keyword">if</span> (shared<span class="comment">##classname == nil) \</span></span><br><span class="line">&#123; <span class="string">\</span></span><br><span class="line">shared<span class="comment">##classname = [super allocWithZone:zone]; \</span></span><br><span class="line"><span class="keyword">return</span> shared<span class="comment">##classname; \</span></span><br><span class="line">&#125; <span class="string">\</span></span><br><span class="line">&#125; <span class="string">\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="keyword">return</span> nil; <span class="string">\</span></span><br><span class="line">&#125; <span class="string">\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line">- (id)copyWithZone:(NSZone *)zone <span class="string">\</span></span><br><span class="line">&#123; <span class="string">\</span></span><br><span class="line"><span class="keyword">return</span> self; <span class="string">\</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><h3 id="键盘遮挡"><a href="#键盘遮挡" class="headerlink" title="键盘遮挡"></a>键盘遮挡</h3><p><a href="">IQKeyboardManager</a></p>
<h3 id="iOS动画帧速计算类库"><a href="#iOS动画帧速计算类库" class="headerlink" title="iOS动画帧速计算类库"></a>iOS动画帧速计算类库</h3><p><a href="https://github.com/kconner/KMCGeigerCounter" target="_blank" rel="noopener">KMCGeigerCounter</a></p>
<h3 id="Gif-播放"><a href="#Gif-播放" class="headerlink" title="Gif 播放"></a>Gif 播放</h3><p><a href="https://github.com/Flipboard/FLAnimatedImage" target="_blank" rel="noopener">FLAnimatedImage</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="版本号的命名"><a href="#版本号的命名" class="headerlink" title="版本号的命名"></a>版本号的命名</h3><p>根据国际主流的惯例，使用「语义化版本（Semantic Versioning）」的命名方式，有时简称 SemVer。  </p>
<p><strong>语义化版本号</strong>（以下简称「版本号」）的格式是：<strong>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</strong> 。如：1.4.15、6.2.0。</p>
<h4 id="每一位版本号的含义"><a href="#每一位版本号的含义" class="headerlink" title="每一位版本号的含义"></a>每一位版本号的含义</h4><ul>
<li><strong>&lt;major&gt;</strong> 即主版本号，俗称大版本升级。改动到主版本号时，标志着 API 发生了巨大变化，包括但不限于新增特性、修改机制、删除功能， <strong>一般不兼容上一个主版本号</strong>。</li>
<li><strong>&lt;minor&gt;</strong> 即次版本号，俗称小版本升级。当我们进行常规的新增或修改功能时，改动次版本号，但是 <strong>必须是向前兼容的</strong>。这也意味着我们 <strong>不能直接删除某个功能</strong>。如若必要，我们可以在 changelog 中标记某项功能为「即将删除（Deprecated）」，然后在下一个大版本中将其彻底删除。</li>
<li><strong>&lt;patch&gt;</strong> 即修订号，俗称 bug 修复。顾名思义，如果仅仅为了修复或调整一些小问题，我们就只改动修订号。</li>
</ul>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>版本号前不要加 v。</li>
<li>不要在数字前补 0。错误示例：01.12.03。</li>
<li>每一位版本号按照 +1 的速度递增，不要在版本号之间跳跃。</li>
<li>主版本号停留在 0 的版本号，即 0.x.x 应当视作还在内部开发阶段的代码。如果代码有公共 API，此时不宜对外公开。</li>
<li>1.0.0 的版本号用于界定公共 API 的形成。</li>
<li>当次版本号递增时，修订号归零；当主版本号递增时，次版本号、修订号归零。</li>
<li>进行新的开发时，版本号从 0.1.0 开始。</li>
<li>如果不小心把一个不兼容的改版当成了次版本号发行，应当发行一个新的次版本号来更正这个问题并且恢复向下兼容。注意 不能去修改已发行的版本。</li>
</ul>
<h4 id="一个典型的版本号发展示例"><a href="#一个典型的版本号发展示例" class="headerlink" title="一个典型的版本号发展示例"></a>一个典型的版本号发展示例</h4><ul>
<li>0.1.0</li>
<li>0.1.1</li>
<li>0.1.2</li>
<li>0.2.0</li>
<li>1.0.0</li>
<li>1.1.0</li>
<li>1.1.1</li>
<li>……</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Objective-C 2.0 要点</title>
    <url>/2016/11/11/Effective-Objective-C-2-0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第1章-熟悉-Objective-C"><a href="#第1章-熟悉-Objective-C" class="headerlink" title="第1章 熟悉 Objective-C"></a>第1章 熟悉 Objective-C</h2><h3 id="第1条-了解-Objective-C-语言的起源"><a href="#第1条-了解-Objective-C-语言的起源" class="headerlink" title="第1条 了解 Objective-C 语言的起源"></a>第1条 了解 Objective-C 语言的起源</h3><ul>
<li>Objective-C 为C语言添加了面向对象特性，是其超集。Objective-C 使用动态绑定的消息结构，也就是说，在运行时才会检查对象类型。接收一条消息之后，究竟应执行何种代码，由运行期环境而非编译器来决定。</li>
<li>理解C语言的核心概念有助于写好Objective-C程序。尤其要掌握内存模型与指针。</li>
</ul>
<h3 id="第2条-在类的头文件中尽量少引入其他头文件"><a href="#第2条-在类的头文件中尽量少引入其他头文件" class="headerlink" title="第2条 在类的头文件中尽量少引入其他头文件"></a>第2条 在类的头文件中尽量少引入其他头文件</h3><ul>
<li>除非确有必要，否则不要引入头文件。一般来说，应在某个类的头文件中使用向前声明来提及别的类，并在实现文件中引入那些类的头文件。这样做可以尽量降低类之间的耦合。</li>
<li>有时无法使用向前声明，比如要声明某个类遵循一项协议。这种情况下，尽量把『该类遵循某协议』的这条声明移至『class-continuation分类』中。如果不行的话，就把协议单独放在一个头文件中，然后将其引入。</li>
</ul>
<h3 id="第3条-多用字面量语法，少用与之等价的方法"><a href="#第3条-多用字面量语法，少用与之等价的方法" class="headerlink" title="第3条 多用字面量语法，少用与之等价的方法"></a>第3条 多用字面量语法，少用与之等价的方法</h3><ul>
<li>应该使用字面量语法来创建字符串、数值、数组、字典。与创建此类对象的常规方法相比，这么做更加简明扼要。</li>
<li>应该通过取下标操作来访问数组下标或字典中的键所对应的元素。</li>
<li>用字面量语法创建数组或字典时，若值中有nil，则会抛出异常。因此，务必确保值里不含nil。</li>
</ul>
<h3 id="第4条-多用类型常量，少用-define-预处理指令"><a href="#第4条-多用类型常量，少用-define-预处理指令" class="headerlink" title="第4条 多用类型常量，少用 #define 预处理指令"></a>第4条 多用类型常量，少用 #define 预处理指令</h3><ul>
<li>不要用预处理指令定义常量。这样定义出来的常量不含类型信息，编译器只是会在编译前据此执行查找与替换操作。即使有人重新定义了常量值，编译器也不会产生警告信息，这将导致应用程序中的常量值不一致。</li>
<li>在实现文件中使用 static const 来定义『只在编译单元内可见的常量』（translation-unit-specific constant）。由于此类常量不在全局符号表中，所以无须为其名称加前缀。</li>
<li>在头文件中使用 extern 来声明全局常量，并在相关实现文件中定义其值。这种常量要出现在全局符号表中，所有其名称应加以区隔，通常用与之相关的类名做前缀。</li>
</ul>
<h3 id="第5条-用枚举表示状态、选项、状态码"><a href="#第5条-用枚举表示状态、选项、状态码" class="headerlink" title="第5条 用枚举表示状态、选项、状态码"></a>第5条 用枚举表示状态、选项、状态码</h3><ul>
<li>应该用枚举来表示状态机的状态、传递给方法的选项以及状态码等值，给这些值起个易懂的名字。</li>
<li>如果把传递给某个方法的选项表示为枚举类型，而多个选项又可同时使用，那么就将各选项值定义为2的幂，以便通过按位或操作将其组合起来。</li>
<li>用 NS_ENUM 与 NS_OPTIONS 宏来定义枚举类型，并指明其底层数据类型。这样做可以确保枚举是用开发者所选的底层数据类型实现出来的，而不会采用编译器所选的类型。</li>
<li>在处理枚举类型的 switch 语句中不要实现 default 分支。这样的话，加入新枚举之后，编译器就会提示开发者：switch 语句并未处理所有枚举。</li>
</ul>
<a id="more"></a>

<h2 id="第2章-对象、消息、运行期"><a href="#第2章-对象、消息、运行期" class="headerlink" title="第2章 对象、消息、运行期"></a>第2章 对象、消息、运行期</h2><h3 id="第6条-理解『属性』这一概念"><a href="#第6条-理解『属性』这一概念" class="headerlink" title="第6条 理解『属性』这一概念"></a>第6条 理解『属性』这一概念</h3><ul>
<li>可以用 @property 语法来定义对象中所封装的数据。</li>
<li>通过『特质』来指定存储数据所需的正确语义。</li>
<li>在设置所对应的实例变量时，一定要遵从该属性所声明的语义。</li>
<li>开发 iOS 程序时应该使用 nonatomic 属性，因为 atomic 属性会严重影响性能。</li>
</ul>
<h3 id="第7条-在对象内部尽量直接访问实例变量"><a href="#第7条-在对象内部尽量直接访问实例变量" class="headerlink" title="第7条 在对象内部尽量直接访问实例变量"></a>第7条 在对象内部尽量直接访问实例变量</h3><ul>
<li>在对象内部读取数据时，应该直接通过实例变量来读，而写入数据时，则应通过属性来写。</li>
<li>在初始化方法及dealloc方法中，总是应该直接通过实例变量来读写数据。</li>
<li>有时会使用惰性初始化技术配置某份数据，这种情况下，需要通过属性来读取数据。</li>
</ul>
<h3 id="第8条-理解『对象等同性』这一概念"><a href="#第8条-理解『对象等同性』这一概念" class="headerlink" title="第8条 理解『对象等同性』这一概念"></a>第8条 理解『对象等同性』这一概念</h3><ul>
<li>若想检测对象的等同性，请提供『isEqual:』与 hash 方法。</li>
<li>相同的对象必须具有相同的哈希码，但是两个哈希码相同的对象却未必相同。</li>
<li>不要盲目地逐个检测每条属性，而是应该依照具体需求来指定检测方案。</li>
<li>编写 hash 方法时，应该使用计算速度快而且哈希码碰撞几率低的算法。</li>
</ul>
<h3 id="第9条-以『类族模式』隐藏实现细节"><a href="#第9条-以『类族模式』隐藏实现细节" class="headerlink" title="第9条 以『类族模式』隐藏实现细节"></a>第9条 以『类族模式』隐藏实现细节</h3><ul>
<li>类族模式可以把实现细节隐藏在一套简单的公共接口后面。</li>
<li>系统框架中经常使用类族。</li>
<li>从类族的公共抽象基类中继承子类时要当心，若有开发文档，则应首先阅读。</li>
</ul>
<h3 id="第10条-在既有类中使用关联对象存放自定义数据"><a href="#第10条-在既有类中使用关联对象存放自定义数据" class="headerlink" title="第10条 在既有类中使用关联对象存放自定义数据"></a>第10条 在既有类中使用关联对象存放自定义数据</h3><ul>
<li>可以通过『关联对象』机制来把两个对象连起来。</li>
<li>定义关联对象时可指定内存管理语义，用以模仿定义属性时所采用的『拥有关系』与『非拥有关系』。</li>
<li>只有在其他做法不可行时才应选用关联对象，因为这种做法通常会引入难于查找的 bug。</li>
</ul>
<h3 id="第11条-理解-objc-msgSend-的作用"><a href="#第11条-理解-objc-msgSend-的作用" class="headerlink" title="第11条 理解 objc_msgSend 的作用"></a>第11条 理解 objc_msgSend 的作用</h3><ul>
<li>消息由接收者、选择子及参数构成。给某对象『发送消息』（invoke a message）也就相当于在该对象上『调用方法』（call a method）。</li>
<li>发给某对象的全部消息都要由『动态消息派发系统』（dynamic message dispatch system）来处理，该系统会查出对应的方法，并执行其代码。</li>
</ul>
<h3 id="第12条-理解消息转发机制"><a href="#第12条-理解消息转发机制" class="headerlink" title="第12条 理解消息转发机制"></a>第12条 理解消息转发机制</h3><ul>
<li>若对象无法响应某个选择子，则进入消息转发流程。</li>
<li>通过运行期的动态方法解析功能，我们可以在需要用到某个方法时再将其加入类中。</li>
<li>对象可以把其无法解读的某些选择子交给其他对象来处理。</li>
<li>经过上述两步之后，如果还是没办法处理选择子，那就启动完整的消息转发机制。<br><img src="http://file.blog.chaosky.tech/2016-12-28-20160629125258569.png" alt="20160629125258569"></li>
</ul>
<h3 id="第13条-用『方法调配技术』调试『黑盒方法』"><a href="#第13条-用『方法调配技术』调试『黑盒方法』" class="headerlink" title="第13条 用『方法调配技术』调试『黑盒方法』"></a>第13条 用『方法调配技术』调试『黑盒方法』</h3><ul>
<li>使用另一份实现来替换原来的方法实现，这道工序叫做『方法调配』，开发者常用此技术向原有实现中添加新功能。</li>
<li>一般来说，只有调试程序的时候才需要在运行期修改方法实现，这种做法不宜滥用。</li>
</ul>
<h3 id="第14条-理解『类对象』的用意"><a href="#第14条-理解『类对象』的用意" class="headerlink" title="第14条 理解『类对象』的用意"></a>第14条 理解『类对象』的用意</h3><ul>
<li>每个实例都有一个指向 Class 对象的指针，用以表明其类型，而这些 Class 对象则构成了类的继承体系。</li>
<li>如果对象类型无法在编译器确定，那么久应该使用类型信息查询方法来探知。</li>
<li>尽量使用类型信息查询方法来确定对象类型，而不要直接比较类对象，因为某些对象可能实现了消息转发功能。</li>
</ul>
<h2 id="第3章-接口与-API-设计"><a href="#第3章-接口与-API-设计" class="headerlink" title="第3章 接口与 API 设计"></a>第3章 接口与 API 设计</h2><h3 id="第15条-用前缀避免命名空间冲突"><a href="#第15条-用前缀避免命名空间冲突" class="headerlink" title="第15条 用前缀避免命名空间冲突"></a>第15条 用前缀避免命名空间冲突</h3><ul>
<li>选择与你的公司、应用程序或二者皆有关联之名称作为类名的前缀，并在所有代码中均使用这一前缀。</li>
<li>若自己所开发的程序库中用到了第三方库，则应为其中的名称加上前缀。</li>
</ul>
<h3 id="第16条-提供『全能初始化方法』"><a href="#第16条-提供『全能初始化方法』" class="headerlink" title="第16条 提供『全能初始化方法』"></a>第16条 提供『全能初始化方法』</h3><ul>
<li>在类中提供一个全能初始化方法，并在文档里指明。其他初始化方法均应调用此方法。</li>
<li>若全能初始化方法与超类不同，则需覆写超类中的对应方法。</li>
<li>如果超类的初始化方法不适用于子类，那么应该覆写这个超类方法，并在其中抛出异常。</li>
</ul>
<h3 id="第17条-实现-description-方法"><a href="#第17条-实现-description-方法" class="headerlink" title="第17条 实现 description 方法"></a>第17条 实现 description 方法</h3><ul>
<li>实现 description 方法返回一个有意义的字符串，用以描述该实例。</li>
<li>若想在调试时打印出更详尽的对象描述信息，则应实现 debugDescription 方法。</li>
</ul>
<h3 id="第18条-尽量使用不可变对象"><a href="#第18条-尽量使用不可变对象" class="headerlink" title="第18条 尽量使用不可变对象"></a>第18条 尽量使用不可变对象</h3><ul>
<li>尽量创建不可变的对象。</li>
<li>若某属性仅可于对象内部修改，则在『class-continuation 分类』中将其由 readonly 属性扩展为 readwrite 属性。</li>
<li>不要把可变的 collection 作为属性公开，而应提供相关方法，以此修改对象中的可变 collection。</li>
</ul>
<h3 id="第19条-使用清晰而协调的命名方式"><a href="#第19条-使用清晰而协调的命名方式" class="headerlink" title="第19条 使用清晰而协调的命名方式"></a>第19条 使用清晰而协调的命名方式</h3><ul>
<li>起名时应遵从标准的 Objective-C 命名规范，这样创建出来的接口更容易为开发者所理解。</li>
<li>方法名要言简意赅，从左至右读起来要像个日常用语中的句子才好。</li>
<li>方法名里不要使用缩略后的类型名称。</li>
<li>给方法起名时的第一要务就是确保其风格与你自己的代码或所要集成的框架相符。</li>
</ul>
<h3 id="第20条-为私有方法名加前缀"><a href="#第20条-为私有方法名加前缀" class="headerlink" title="第20条 为私有方法名加前缀"></a>第20条 为私有方法名加前缀</h3><ul>
<li>给私有方法的名称加上前缀，这样可以很容易地将其同公共方法区分开。</li>
<li>不要单用一个下划线做私有方法的前缀，因为这种做法是预留给苹果公司用的。</li>
</ul>
<h3 id="第21条-理解-Objective-C-错误模型"><a href="#第21条-理解-Objective-C-错误模型" class="headerlink" title="第21条 理解 Objective-C 错误模型"></a>第21条 理解 Objective-C 错误模型</h3><ul>
<li>只要发生了可使整个应用程序崩溃的严重错误时，才应使用异常。</li>
<li>在错误不那么严重的情况下，可以指派『委托方法』（delegate method）来处理错误，也可以把错误信息放在 NSError 对象里，经由『输出参数』返回给调用者。</li>
</ul>
<h3 id="第22条-理解-NSCopying-协议"><a href="#第22条-理解-NSCopying-协议" class="headerlink" title="第22条 理解 NSCopying 协议"></a>第22条 理解 NSCopying 协议</h3><ul>
<li>若想令自己所写的对象具有拷贝功能，则需实现 NSCopying 协议。</li>
<li>如果自定义的对象分为可变版本与不可变版本，那么就要同时实现 NSCopying 与 NSMutableCopying 协议。</li>
<li>复制对象时需决定采用浅拷贝还是深拷贝，一般情况下应该尽量执行浅拷贝。</li>
<li>如果你所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。</li>
</ul>
<h2 id="第4章-协议与分类"><a href="#第4章-协议与分类" class="headerlink" title="第4章 协议与分类"></a>第4章 协议与分类</h2><h3 id="第23条-通过委托与数据源协议进行对象间通信"><a href="#第23条-通过委托与数据源协议进行对象间通信" class="headerlink" title="第23条 通过委托与数据源协议进行对象间通信"></a>第23条 通过委托与数据源协议进行对象间通信</h3><ul>
<li>委托模式为对象提供了一套接口，使其可由此将相关事件告知其他对象。</li>
<li>将委托对象应该支持的接口定义成协议，在协议中把可能需要处理的事件定义成方法。</li>
<li>当某对象需要从另一个对象中获取数据时，可以使用委托模式。这种情况下，该模式亦称『数据源协议』（data source protocal）。</li>
<li>若有必要，可实现含有位段的结构体，将委托对象是否能响应相关协议方法这一信息缓存至其中。</li>
</ul>
<h3 id="第24条-将类的实现代码分散到便于管理的数个分类之中"><a href="#第24条-将类的实现代码分散到便于管理的数个分类之中" class="headerlink" title="第24条 将类的实现代码分散到便于管理的数个分类之中"></a>第24条 将类的实现代码分散到便于管理的数个分类之中</h3><ul>
<li>使用分类机制把类的实现代码划分成易于管理的小块。</li>
<li>将应该视为『私有』的方法归入名叫Private的分类中，以隐藏实现细节。</li>
</ul>
<h3 id="第25条-总是为第三方类的分类名称加前缀"><a href="#第25条-总是为第三方类的分类名称加前缀" class="headerlink" title="第25条 总是为第三方类的分类名称加前缀"></a>第25条 总是为第三方类的分类名称加前缀</h3><ul>
<li>向第三方类中添加分类时，总应给其名称加上你专用的前缀。</li>
<li>向第三方类中添加分类时，总应给其中的方法名加上你专用的前缀。</li>
</ul>
<h3 id="第26条-勿在分类中声明属性"><a href="#第26条-勿在分类中声明属性" class="headerlink" title="第26条 勿在分类中声明属性"></a>第26条 勿在分类中声明属性</h3><ul>
<li>把封装数据所用的全部属性都定义在主接口里。</li>
<li>在『class-continuation分类』之外的其他分类中，可以定义存取方法，但尽量不要定义属性。</li>
</ul>
<h3 id="第27条-使用『class-continuation分类』隐藏实现细节"><a href="#第27条-使用『class-continuation分类』隐藏实现细节" class="headerlink" title="第27条 使用『class-continuation分类』隐藏实现细节"></a>第27条 使用『class-continuation分类』隐藏实现细节</h3><ul>
<li>通过『class-continuation分类』向类中新增实例变量。</li>
<li>如果某属性在主接口中声明为『只读』，而类的内部又要用设置方法修改此属性，那么就在『class-continuation分类』中将其扩展为『可读写』。</li>
<li>把私有方法的原型声明在『class-continuation分类』里面。</li>
<li>若想使类所遵循的协议不为人所知，则可于『class-continuation分类』中声明。</li>
</ul>
<h3 id="第28条-通过协议提供匿名对象"><a href="#第28条-通过协议提供匿名对象" class="headerlink" title="第28条 通过协议提供匿名对象"></a>第28条 通过协议提供匿名对象</h3><ul>
<li>协议可在某种程度上提供匿名类型，具体的对象类型可以淡化成遵从某协议的 id 类型，协议里规定了对象所应实现的方法。</li>
<li>使用匿名对象来隐藏类型名称（或类名）。</li>
<li>使用具体类型不重要，重要的是对象能够响应（定义在协议里的）特定方法，那么可使用匿名对象来表示。</li>
</ul>
<h2 id="第5章-内存管理"><a href="#第5章-内存管理" class="headerlink" title="第5章 内存管理"></a>第5章 内存管理</h2><h3 id="第29条-理解引用计数"><a href="#第29条-理解引用计数" class="headerlink" title="第29条 理解引用计数"></a>第29条 理解引用计数</h3><ul>
<li>引用计数机制通过可以递增递减的计数器来管理内存。对象创建好之后，其保留计数至少为1。若保留计数为正，则对象继续存活。当保留计数降为0时，对象就被销毁了。</li>
<li>在对象生命期中，其余对象通过引用来保留或释放此对象。保留与释放操作分别会递增及递减保留计数。</li>
</ul>
<h3 id="第30条-以-ARC-简化引用计数"><a href="#第30条-以-ARC-简化引用计数" class="headerlink" title="第30条 以 ARC 简化引用计数"></a>第30条 以 ARC 简化引用计数</h3><ul>
<li>有 ARC 之后，程序员就无须担心内存管理问题了。使用 ARC 来编程，可省去类中的许多『样板代码』。</li>
<li>ARC 管理对象生命期的办法基本上就是：在合适的地方插入『保留』及『释放』操作。在 ARC 环境下，变量的内存管理语义可以通过修饰符指明，而原来则需要手工执行『保留』及『释放』操作。</li>
<li>由方法返回的对象，其内存管理语义总是通过方法名来体现。 ARC 将此确定为开发者必须遵守的规则。</li>
<li>ARC 只负责管理 Objective-C 对象的内存。尤其要注意：CoreFoundation 对象不归ARC 管理，开发者必须适时调用 CFRetain/CFRelease。</li>
</ul>
<h3 id="第31条-在-dealloc-方法中只释放引用并解除监听"><a href="#第31条-在-dealloc-方法中只释放引用并解除监听" class="headerlink" title="第31条 在 dealloc 方法中只释放引用并解除监听"></a>第31条 在 dealloc 方法中只释放引用并解除监听</h3><ul>
<li>在 dealloc 方法里，应该做的事情就是释放指向其他对象的引用，并取消原来订阅的『键值观测』（KVO）或 NSNotificationCenter 等通知，不要做其他事情。</li>
<li>如果对象持有文件描述符等系统资源，那么应该专门编写一个方法来释放此种资源。这样的类要和其使用者约定：用完资源后必须调用 close 方法。</li>
<li>执行异步任务的方法不应在 dealloc 里调用；只能在正常状态下执行的那些方法也不应在dealloc里调用，因为此时对象已处于正在回收的状态了。</li>
</ul>
<h3 id="第32条-编写『异常安全代码』时留意内存管理问题"><a href="#第32条-编写『异常安全代码』时留意内存管理问题" class="headerlink" title="第32条 编写『异常安全代码』时留意内存管理问题"></a>第32条 编写『异常安全代码』时留意内存管理问题</h3><ul>
<li>捕获异常时，一定要注意将 try 块内所创立的对象清理干净。</li>
<li>在默认情况下，ARC 不生成安全处理异常所需的清理代码，开启编译器标志后，可生成这种代码，不过会导致应用程序变大，而且会降低运行效率。</li>
</ul>
<h3 id="第33条-以弱引用避免保留环"><a href="#第33条-以弱引用避免保留环" class="headerlink" title="第33条 以弱引用避免保留环"></a>第33条 以弱引用避免保留环</h3><ul>
<li>将某些引用设为 weak，可避免出现『保留环』。</li>
<li>weak 引用可以自动清空，也可以不自动清空。自动清空（autonilling）是随着 ARC 而引入的新特性，由运行期系统来实现。在具备自动清空功能的弱引用上，可以随意读取其数据，因为这种引用不会指向已经回收过的对象。</li>
</ul>
<h3 id="第34条-以『自动释放池块』降低内存峰值"><a href="#第34条-以『自动释放池块』降低内存峰值" class="headerlink" title="第34条 以『自动释放池块』降低内存峰值"></a>第34条 以『自动释放池块』降低内存峰值</h3><ul>
<li>自动释放池排布在栈中，对象收到 autorelease 消息后，系统将其放入最顶端的池里。</li>
<li>合理运用自动释放池，可降低应用程序的内存峰值。</li>
<li>@autoreleasepool 这种新式写法能创建出更为轻便的自动释放池。</li>
</ul>
<h3 id="第35条-用『僵尸对象』调试内存管理问题"><a href="#第35条-用『僵尸对象』调试内存管理问题" class="headerlink" title="第35条 用『僵尸对象』调试内存管理问题"></a>第35条 用『僵尸对象』调试内存管理问题</h3><ul>
<li>系统在回收对象时，可以不将其真的回收，而是把它转化为僵尸对象。通过环境变量 NSZombieEnabled 可开启此功能。</li>
<li>系统会修改对象的 isa 指针，令其指向特殊的僵尸类，从而使该对象变成僵尸对象。僵尸类能够响应所有的选择子，响应方式为：打印一条包含消息内容及其接收者的消息，然后终止应用程序。</li>
</ul>
<h3 id="第36条-不要使用-retainCount"><a href="#第36条-不要使用-retainCount" class="headerlink" title="第36条 不要使用 retainCount"></a>第36条 不要使用 retainCount</h3><ul>
<li>对象的保留计数看似有用，实则不然，因为任何给定时间点上的『绝对保留计数』（absolute retain count）都无法反映对象生命期的全貌。</li>
<li>引入 ARC 之后，retainCount 方法就正式废止了，在 ARC 下调用该方法会导致编译器报错。</li>
</ul>
<h2 id="第6章-块（block）与大中枢派发（GCD）"><a href="#第6章-块（block）与大中枢派发（GCD）" class="headerlink" title="第6章 块（block）与大中枢派发（GCD）"></a>第6章 块（block）与大中枢派发（GCD）</h2><h3 id="第37条-理解『块』这一概念"><a href="#第37条-理解『块』这一概念" class="headerlink" title="第37条 理解『块』这一概念"></a>第37条 理解『块』这一概念</h3><ul>
<li>块是C、C++、Objective-C 中的词法闭包。</li>
<li>块可接受参数，也可返回值。</li>
<li>块可以分配在栈或堆上，也可以是全局的。分配在栈上的块可拷贝到堆里，这样的话，就和标准的 Objective-C 对象一样，具备引用计数了。</li>
</ul>
<h3 id="第38条-为常用的块类型创建-typedef"><a href="#第38条-为常用的块类型创建-typedef" class="headerlink" title="第38条 为常用的块类型创建 typedef"></a>第38条 为常用的块类型创建 typedef</h3><ul>
<li>以 typedef 重新定义块类型，可令块变量用起来更加简单。</li>
<li>定义新类型时应遵从现有的命名习惯，勿使其名称与别的类型相冲突。</li>
<li>不妨为同一个块签名定义多个类型别名。如果要重构的代码使用了块类型的某个别名，那么只需修改相应 typedef 中的块签名即可，无须改动其他 typedef。</li>
</ul>
<h3 id="第39条-用-handler-块降低代码分散程度"><a href="#第39条-用-handler-块降低代码分散程度" class="headerlink" title="第39条 用 handler 块降低代码分散程度"></a>第39条 用 handler 块降低代码分散程度</h3><ul>
<li>在创建对象时，可以使用内联的 handler 块将相关业务逻辑一并声明。</li>
<li>在有多个实例需要监控时，如果采用委托模式，那么经常需要根据传入的对象来切换，而若改用 handler 块来实现，则可直接将块与相关对象放在一起。</li>
<li>设计 API 时如果用到了 handler 块，那么可以增加一个参数，使调用者可通过此参数来决定应该把块安排在哪个队列上执行。</li>
</ul>
<h3 id="第40条-用块引用其所属对象时不要出现保留环"><a href="#第40条-用块引用其所属对象时不要出现保留环" class="headerlink" title="第40条 用块引用其所属对象时不要出现保留环"></a>第40条 用块引用其所属对象时不要出现保留环</h3><ul>
<li>如果块所捕获的对象直接或间接地保留了块本身，那么就得当心保留环问题。</li>
<li>一定要找个适当的时机解除保留环，而不能把责任推给API的调用者。</li>
</ul>
<h3 id="第41条-多用派发队列，少用同步锁"><a href="#第41条-多用派发队列，少用同步锁" class="headerlink" title="第41条 多用派发队列，少用同步锁"></a>第41条 多用派发队列，少用同步锁</h3><ul>
<li>派发队列可用来表述同步语义（synchronization semantic），这种做法要比使用 @synchronized 块或 NSLock 对象更简单。</li>
<li>将同步与异步派发结合起来，可以实现与普通加锁机制一样的同步行为，而这么做却不会阻塞执行异步派发的线程。</li>
<li>使用同步队列及栅栏块，可以令同步行为更加高效。</li>
</ul>
<h3 id="第42条-多用-GCD，少用-performSelector-系列方法"><a href="#第42条-多用-GCD，少用-performSelector-系列方法" class="headerlink" title="第42条 多用 GCD，少用 performSelector 系列方法"></a>第42条 多用 GCD，少用 performSelector 系列方法</h3><ul>
<li>performSelector 系列方法在内存管理方面容易有疏失。它无法确定将要执行的选择子具体是什么，因而 ARC 编译器也就无法插入适当的内存管理方法。</li>
<li>performSelector 系列方法所能处理的选择子太过局限了，选择子的返回值类型及发送给方法的参数个数都受到限制。</li>
<li>如果想把任务放在另一个线程上执行，那么最好不要用 performSelector 系列方法，而是应该把任务封装到块里，然后调用大中枢派发机制的相关方法来实现。</li>
</ul>
<h3 id="第43条-掌握-GCD-及操作队列的使用时机"><a href="#第43条-掌握-GCD-及操作队列的使用时机" class="headerlink" title="第43条 掌握 GCD 及操作队列的使用时机"></a>第43条 掌握 GCD 及操作队列的使用时机</h3><ul>
<li>在解决多线程与任务管理问题时，派发队列并非唯一方案。</li>
<li>操作队列提供了一套高层的 Objective-C API，能实现纯 GCD 所具备的绝大部分功能，而且还能完成一些更为复杂的操作，那些操作若改用 GCD 来实现，则需另外编写代码。</li>
</ul>
<h3 id="第44条-通过-Dispatch-Group-机制，根据系统资源状况来执行任务"><a href="#第44条-通过-Dispatch-Group-机制，根据系统资源状况来执行任务" class="headerlink" title="第44条 通过 Dispatch Group 机制，根据系统资源状况来执行任务"></a>第44条 通过 Dispatch Group 机制，根据系统资源状况来执行任务</h3><ul>
<li>一系列任务可归入一个 dispatch group 之中。开发者可以在这组任务执行完毕时获得通知。</li>
<li>通过 dispatch group，可以在并发式派发队列里同时执行多项任务。此时 GCD 会根据系统资源状况来调度这些并发执行的任务。开发者若自己来实现此功能，则需编写大量代码。</li>
</ul>
<h3 id="第45条-使用-dispatch-once-来执行只需运行一次的线程安全代码"><a href="#第45条-使用-dispatch-once-来执行只需运行一次的线程安全代码" class="headerlink" title="第45条 使用 dispatch_once 来执行只需运行一次的线程安全代码"></a>第45条 使用 dispatch_once 来执行只需运行一次的线程安全代码</h3><ul>
<li>经常需要编写『只需执行一次的线程安全代码』（thread-safe single-code execution）。通过 GCD 所提供的 dispatch_once 函数，很容易就能实现此功能。</li>
<li>标记应该声明在 static 或 global 作用域中，这样的话，在把只需执行一次的块传给 dispatch_once 函数时，传进去的标记也是相同的。</li>
</ul>
<h3 id="第46条-不要使用-dispatch-get-current-queue"><a href="#第46条-不要使用-dispatch-get-current-queue" class="headerlink" title="第46条 不要使用 dispatch_get_current_queue"></a>第46条 不要使用 dispatch_get_current_queue</h3><ul>
<li>dispatch_get_current_queue 函数的行为常常与开发者所预期的不同。此函数已经废弃，只应做调试之用。</li>
<li>由于派发队列是按层级来组织的，所以无法单用某个队列对象来描述『当前队列』这一概念。</li>
<li>dispatch_get_current_queue 函数用于解决由不可重入的代码所引发的死锁，然而能用此函数解决的问题，通常也能改用『队列特定数据』来解决。</li>
</ul>
<h2 id="第7章-系统框架"><a href="#第7章-系统框架" class="headerlink" title="第7章 系统框架"></a>第7章 系统框架</h2><h3 id="第47条-熟悉系统框架"><a href="#第47条-熟悉系统框架" class="headerlink" title="第47条 熟悉系统框架"></a>第47条 熟悉系统框架</h3><ul>
<li>许多系统框架都可以直接使用。其中最重要的是 Foundation 和 CoreFoundation，这两个框架提供了构建应用程序所需的许多核心功能。</li>
<li>很多常见任务都能用框架来做，例如音频与视频处理、网络通信、数据管理等。</li>
<li>请记住：用纯 C 写成的框架与用 Objective-C 写成的一样重要，若想成为优秀的 Objective-C 开发者，应该掌握 C 语言的核心概念。</li>
</ul>
<h3 id="第48条-多用块枚举，少用-for-循环"><a href="#第48条-多用块枚举，少用-for-循环" class="headerlink" title="第48条 多用块枚举，少用 for 循环"></a>第48条 多用块枚举，少用 for 循环</h3><ul>
<li>遍历 collection 有四种方式。最基本的办法是 for 循环，其次是 NSEnumerator 遍历法及快速遍历法，最新、最先进的方式则是『块枚举法』。</li>
<li>『块枚举法』本身就能通过 GCD 来并发执行遍历操作，无须另行编写代码。而采用其他遍历方式则无法轻易实现这一点。</li>
<li>若提前知道待遍历的 collection 含有何种对象，则应修改块签名，指出对象的具体类型。</li>
</ul>
<h3 id="第49条-对自定义其内存管理语义的-collection-使用无缝桥接"><a href="#第49条-对自定义其内存管理语义的-collection-使用无缝桥接" class="headerlink" title="第49条 对自定义其内存管理语义的 collection 使用无缝桥接"></a>第49条 对自定义其内存管理语义的 collection 使用无缝桥接</h3><ul>
<li>通过无缝桥接技术，可以在 Foundation 框架中的 Objective-C 对象与 CoreFoundation 框架中的 C 语言数据结构之间来回转换。</li>
<li>在 CoreFoundation 层面创建 collection 时，可以指定许多回调函数，这些函数表示此 collection 应如何处理其元素。然后，可运用无缝桥接技术，将其转换成具备特殊内存管理语义的 Objective-C collection。</li>
</ul>
<h3 id="第50条-构建缓存时选用-NSCache-而非-NSDictionary"><a href="#第50条-构建缓存时选用-NSCache-而非-NSDictionary" class="headerlink" title="第50条 构建缓存时选用 NSCache 而非 NSDictionary"></a>第50条 构建缓存时选用 NSCache 而非 NSDictionary</h3><ul>
<li>实现缓存时应选用 NSCache 而非 NSDictionary 对象。因为 NSCache 可以提供优雅的自动删减功能，而且是『线程安全的』。此外，它与字典不同，并不会拷贝键。</li>
<li>可以给 NSCache 对象设置上限，用以限制缓存中的对象总个数及『总成本』。而这些尺度则定义了缓存删减其中对象的时机。但是绝对不要把这些尺度当成可靠的『硬限制』（hard limit），它们仅对 NSCache 起指导作用。</li>
<li>将 NSPurgeableData 与 NSCache 搭配使用，可实现自动清除数据的功能，也就是说，当 NSPurgeableData 对象所占内存为系统所丢弃时，该对象自身也会从缓存中移除。</li>
<li>如果缓存使用的得当，那么应用程序的响应速度就能提高。只有那种『重新计算起来很费事的』数据，才值得放入缓存，比如那些需要从网络获取或从磁盘读取的数据。</li>
</ul>
<h3 id="第51条-精简-initialize-与-load-的实现代码"><a href="#第51条-精简-initialize-与-load-的实现代码" class="headerlink" title="第51条 精简 initialize 与 load 的实现代码"></a>第51条 精简 initialize 与 load 的实现代码</h3><ul>
<li>在加载阶段，如果类实现了 load 方法，那么系统就会调用它。分类里也可以定义此方法，类的 load 方法要比分类中的先调用。与其他方法不同，load 方法不参与覆写机制。</li>
<li>首次使用某个类之前，系统会向其发送 initialize 消息。由于此方法遵从普通的覆写规则，所以通常应该在里面判断当前要初始化的是那个类。</li>
<li>load 与 initialize 方法都应该实现得精简一些，这有助于保持应用程序的响应能力，也能减少引入『依赖环』（interdependency cycle）的几率。</li>
<li>无法在编译器设定的全局变量，可以放在 initialize 方法里初始化。</li>
</ul>
<h3 id="第52条-别忘了-NSTimer-会保留其目标对象"><a href="#第52条-别忘了-NSTimer-会保留其目标对象" class="headerlink" title="第52条 别忘了 NSTimer 会保留其目标对象"></a>第52条 别忘了 NSTimer 会保留其目标对象</h3><ul>
<li>NSTimer 对象会保留其目标，直到计时器本身失效为止，调用 invalidate 方法可令计时器失效，另外，一次性的计时器在触发完任务之后也会失效。</li>
<li>反复执行任务的计时器（repeating timer），很容易引入保留环，如果这种计时器的目标对象又保留了计时器本身，那肯定会导致保留环。这种环状保留关系，可能是直接发生的，也可能是通过对象图里的其他对象间接发生的。</li>
<li>可以扩充 NSTimer 的功能，用『块』来打破保留环。不过，除非 NSTimer 将来在公共接口里提供此功能，否则必须创建分类，将相关实现代码加入其中。</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode 工具链</title>
    <url>/2017/01/04/Xcode-Toolchain/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>虽然我们来自不同背景、有不同观点，经历不同；虽然我们做事动机不同，信念、偏见和意见使我们彼此分离，有一件事我们是在一起的：</p>
<p><strong>不管好坏，我们都必须使用 Xcode。</strong></p>
<p>Xcode 不仅仅只是一个应用程序，在 GUI 之下是一个应用程序和命令行工具的结合，它们与开发人员的工作流程一样是编辑器的核心。</p>
<a id="more"></a>

<h2 id="Xcode-Tools"><a href="#Xcode-Tools" class="headerlink" title="Xcode Tools"></a>Xcode Tools</h2><h3 id="xcode-select"><a href="#xcode-select" class="headerlink" title="xcode-select"></a>xcode-select</h3><p>每个人与 Xcode 的旅程从一个选择开始。<code>xcode-select</code>提供了这个选择，尽管是一个永恒的问题：『蛋糕或死亡？』</p>
<p>从 Mavericks 开始，在 Mac 上的开发者从执行一条命令开始：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure>

<p>将安装命令行工具，编译 Objective-C 代码必备的。</p>
<h3 id="xcrun"><a href="#xcrun" class="headerlink" title="xcrun"></a>xcrun</h3><p><code>xcrun</code> 是 Xcode 基本的命令行工具。使用它可以调用其他工具。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>xcrun xcodebuild</span><br></pre></td></tr></table></figure>

<p>除运行命令之外，<code>xcrun</code> 可以查找文件和显示 SDK 的路径：</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">xcrun</span> --<span class="comment">find</span> <span class="comment">clang</span></span><br><span class="line"><span class="comment">$</span> <span class="comment">xcrun</span> --<span class="comment">sdk</span> <span class="comment">iphoneos</span> --<span class="comment">find</span> <span class="comment">pngcrush</span></span><br><span class="line"><span class="comment">$</span> <span class="comment">xcrun</span> --<span class="comment">sdk</span> <span class="comment">macosx</span> --<span class="comment">show</span><span class="literal">-</span><span class="comment">sdk</span><span class="literal">-</span><span class="comment">path</span></span><br></pre></td></tr></table></figure>

<p>因为 <code>xcrun</code> 的执行是基于当前的 Xcode 版本环境（通过 <code>xcode-select</code>设置），所以在系统中能存在多个版本的 Xcode 工具链是非常容易的。</p>
<p>在脚本和其他外部工具中使用 <code>xcrun</code> 能确保在不同环境中保证一致性。比如，Xcode 附带了代码分发工具 Git。通过调用 <code>$ xcrun git</code> 而不是 <code>$ git</code>，构建系统可以保证运行正确。</p>
<h3 id="xcodebuild"><a href="#xcodebuild" class="headerlink" title="xcodebuild"></a>xcodebuild</h3><p>第二个最重要的 Xcode 工具是 <code>xcodebuild</code>，顾名思义，构建 Xcode project 和 workspace。</p>
<p>不用传递任何构建参数，<code>xcodebuild</code> 默认为 Xcode.app 最近使用的 scheme 和 配置：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>xcodebuild</span><br></pre></td></tr></table></figure>

<p>然而，任何 scheme、targets、配置、目标设备、SDK和导出数据位置都可以配置：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">$ xcodebuild -workspace <span class="module-access"><span class="module"><span class="identifier">NSHipster</span>.</span></span>xcworkspace -scheme <span class="string">"NSHipster"</span></span><br></pre></td></tr></table></figure>

<p>有六个可以依次调用的构建操作：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>build</td>
<td>在构建根路径(SYMROOT)构建target。默认构建操作。</td>
</tr>
<tr>
<td>analyze</td>
<td>在构建根路径(SYMROOT)构建和分析target或者scheme。需要指定 scheme。</td>
</tr>
<tr>
<td>archive</td>
<td>在构建根路径（SYMROOT）打包 scheme。需要指定 scheme。</td>
</tr>
<tr>
<td>test</td>
<td>在构建根路径（SYMROOT）测试 scheme。需要指定 scheme和可选指定目标设备。</td>
</tr>
<tr>
<td>installsrc</td>
<td>拷贝工程源到源根路径（SRCROOT）。</td>
</tr>
<tr>
<td>install</td>
<td>构建target、安装到target在目标设备根路径（DSTROOT）的安装目录</td>
</tr>
<tr>
<td>clean</td>
<td>从构建根路径（SYMROOT）移除构建的产品和中间文件</td>
</tr>
</tbody></table>
<h3 id="genstrings"><a href="#genstrings" class="headerlink" title="genstrings"></a>genstrings</h3><p><code>genstrings</code> 工具从指定的C或者Objective-C源文件生成 <code>.strings</code> 文件。在不同的 <code>locale</code> 本地化应用程序使用 <code>.strings</code> 文件。在苹果的 <code>Cocoa Core Competencies</code> 中的 [Internationalization](<a href="https://developer.apple.com/library/mac/documentation/general/conceptual/devpedia-cocoacore/-" target="_blank" rel="noopener">https://developer.apple.com/library/mac/documentation/general/conceptual/devpedia-cocoacore/-</a> Internationalization.html) 有相关的描述。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">$ genstrings -<span class="keyword">a</span> /path/<span class="built_in">to</span>/source/<span class="built_in">files</span><span class="comment">/*.m</span></span><br></pre></td></tr></table></figure>

<p>每次在源文件中使用 <code>NSLocalizedString</code>，<code>genstrings</code> 将会追加 <code>key</code> 和 <code>comment</code> 到目标文件中。然后由开发人员为每个目标 locale 创建文件的副本， 并将该文件翻译。</p>
<p>fr.lproj/Localizable.strings</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">/* No comment provided by engineer. */</span><br><span class="line"></span><br><span class="line"><span class="string">"Username"</span>=<span class="string">"nom d'utilisateur"</span>;</span><br><span class="line"></span><br><span class="line">/* &#123;<span class="keyword">User</span> <span class="title">First</span> Name&#125;'s Profile */</span><br><span class="line"></span><br><span class="line"><span class="string">"%@'s Profile"</span>=<span class="string">"profil de %1$@"</span>;</span><br></pre></td></tr></table></figure>

<h3 id="ibtool"><a href="#ibtool" class="headerlink" title="ibtool"></a>ibtool</h3><p>正如 <code>genstrings</code> 作用于源代码，而 <code>ibtool</code> 作用于 <code>XIB</code> 文件。</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">$ ibtool --<span class="keyword">generate</span>-strings-file Localizable<span class="variable">.strings</span> en<span class="variable">.lpoj</span>/Interface<span class="variable">.xib</span></span><br></pre></td></tr></table></figure>

<p>本地化是它的主要功能，<code>ibtool</code> 还拥有对 <code>Interface Builder</code> 文档有效的其他几个功能。</p>
<ul>
<li><code>--convert</code>： 更改所有对类名的引用</li>
<li><code>--upgrade</code>： 将文档升级到最新版</li>
<li><code>--enable-auto-layout</code>：启用自动布局</li>
<li><code>--update-frames</code>：更新框架</li>
<li><code>--update-constraints</code>：更新约束</li>
</ul>
<h3 id="iprofiler"><a href="#iprofiler" class="headerlink" title="iprofiler"></a>iprofiler</h3><p><code>iprofiler</code> 测量应用程序的性能，而不启动 <code>Instruments.app</code>：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ iprofiler -allocations -leaks -T <span class="number">15</span>s -o perf -a NSHipster</span><br></pre></td></tr></table></figure>

<p>上面的命令将附加到 NSHipster 程序，运行15秒，分析内存分配和泄露，然后将结果写入perf文件。之后输出结果可以通过 Instruments.app 读取和显示。</p>
<h3 id="xed"><a href="#xed" class="headerlink" title="xed"></a>xed</h3><p>这个命令可以简单地打开 Xcode。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">$ xed <span class="module-access"><span class="module"><span class="identifier">NSHipster</span>.</span></span>xcworkspace</span><br></pre></td></tr></table></figure>

<p>通过传递 <code>-w</code> 参数，<code>xed</code> 将等待直到所有打开的窗口关闭。对于脚本化用户交互非常有用，例如提示用户编辑文件并继续一旦完成。</p>
<h3 id="agvtool"><a href="#agvtool" class="headerlink" title="agvtool"></a>agvtool</h3><p><code>agvtool</code> 用于读取和写入 Xcode工程 Info.plist 中的版本号。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ agvtool what-<span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<p>返回当前版本</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>agvtool <span class="keyword">next</span>-version</span><br></pre></td></tr></table></figure>

<p>累加 <code>CURRENT_PROJECT_VERSION</code> 和 <code>DYLIB_CURRENT_VERSION</code>。传递 <code>-all</code> 选项将更新 <code>Info.plist</code> 中的 <code>CFBundleVersion</code>。</p>
<h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><p>除了上述的 Xcode 工具以外，还有一些其他用 <code>xcrun</code> 调用的程序：</p>
<h3 id="编译-amp-汇编"><a href="#编译-amp-汇编" class="headerlink" title="编译 &amp; 汇编"></a>编译 &amp; 汇编</h3><ul>
<li><strong>clang</strong>: 编译 C、C++、Objective-C和 Objective-C 源文件。</li>
<li><strong>lldb</strong>: 调试C、C++、Objective-C 和 Objective-C 程序</li>
<li><strong>nasm</strong>: 汇编文件</li>
<li><strong>ndisasm</strong>: 反汇编文件</li>
<li><strong>symbols</strong>: 显示一个文件或者进程的符号信息。</li>
<li><strong>strip</strong>: 删除或修改符号表附加到汇编器和链接编辑器的输出。</li>
<li><strong>atos</strong>: 将数字内存地址转换为二进制映像或进程的符号。</li>
</ul>
<h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><ul>
<li><strong>unifdef</strong>: 从代码中移除条件宏 <code>#ifdef</code>。</li>
<li><strong>ifnames</strong>: 在 C++ 文件中找出所有条件。</li>
</ul>
<h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><ul>
<li><strong>ld</strong>: 将目标文件和库合并成一个文件。</li>
<li><strong>otool</strong>: 显示目标文件或库的指定部分。</li>
<li><strong>ar</strong>: 创建和维护库文档。</li>
<li><strong>libtool</strong>: 使用链接器 <code>ld</code> 创建库。</li>
<li><strong>ranlib</strong>: 更新归档库的目录。</li>
<li><strong>mksdk</strong>: 创建和更新 SDK。</li>
<li><strong>lorder</strong>: 列出目标文件的依赖。</li>
</ul>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><ul>
<li><strong>sdef</strong>: 脚本定义提取器</li>
<li><strong>sdp</strong>: 脚本定义处理器</li>
<li><strong>desdp</strong>: 脚本定义生成器</li>
<li><strong>amlint</strong>: 检查 Automator 对问题的操作</li>
</ul>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><ul>
<li><strong>installer</strong>: 安装 OS X 包。</li>
<li><strong>pkgutil</strong>: 读取和操纵 OS X 包。</li>
<li><strong>lsbom</strong>: 列出 bom（Bill of Mterials）内容。</li>
</ul>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul>
<li><strong>headerdoc</strong>: 处理头文档。</li>
<li><strong>gatherheaderdoc</strong>: 编译和链接 <code>headerdoc</code> 输出。</li>
<li><strong>headerdoc2html</strong>: 从 <code>headerdoc</code> 输出生成 HTML。</li>
<li><strong>hdxml2manxml</strong>: 从 <code>headerdoc</code> XML 输出翻译成被 <code>xml2man</code> 使用的文件。</li>
<li><strong>xml2man</strong>: 将 <code>Man Page Generation Language（MPGL）</code> XML文件转换为手册页。</li>
</ul>
<h3 id="Core-Data"><a href="#Core-Data" class="headerlink" title="Core Data"></a>Core Data</h3><ul>
<li><strong>momc</strong>: 编译 <code>Managed Object Model(.mom)</code>文件</li>
<li><strong>mapc</strong>: 编译 <code>Core Data Mapping Model(.xcmappingmodel)</code>文件</li>
</ul>
<h2 id="第三方工具"><a href="#第三方工具" class="headerlink" title="第三方工具"></a>第三方工具</h2><h3 id="appledoc"><a href="#appledoc" class="headerlink" title="appledoc"></a>appledoc</h3><p>Cocoa 开发人员认为 Objective-C 的冗长有助于自注释代码。在 <code>longMethodNamesWithNamedParameters:</code> 和 明确的参数类型。Objective-C 方法不会留下太多的想象力。</p>
<p>但是即使自注释代码也可以通过文档来改进，只用少量的努力就能够对他人产生显著的益处。</p>
<p>在 Objective-C 中，选择的文档工具是 <code>appledoc</code>。使用 <code>javadoc</code> 类似的语法，<code>appledoc</code> 能够从 .h文件生成 HTML 和 Xcode 兼容的 .docset 文档，看起来几乎和苹果官方文档完全相同。</p>
<p>Objective-C 文档由任何 <code>@interface</code> 或 <code>@protocol</code> 之前的 <code>/** */</code> 注释块（注意额外的初始星号）以及任何方法或 <code>@property</code> 声明指定。文档还可能包含系统字段的标签，如参数或返回值：</p>
<ul>
<li><strong>@param [param] [Description]</strong>: 描述应传递什么值或此参数</li>
<li><strong>@return [Description]</strong>: 描述方法的返回值</li>
<li><strong>@see [selector]</strong>: 提供 『参见』相关项目的参考</li>
<li><strong>@discussion [Discussion]</strong>: 提供额外的背景资料</li>
<li><strong>@warning [Description]</strong>: 调用异常或潜在的危险行为</li>
</ul>
<p><code>appledoc</code> 可以通过以下命令安装：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>appledoc</span><br></pre></td></tr></table></figure>

<p>要生成文档，需要在 Xcode 工程的根目录下执行 <code>appledoc</code> 命令，传递元数据比如工程名和公司名：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ appledoc <span class="params">--project-name</span> CFHipsterRef <span class="params">--project-company</span> <span class="string">"NSHipster"</span> <span class="params">--company-id</span> com.nshipster <span class="params">--output</span> ~<span class="string">/Documents</span> .</span><br></pre></td></tr></table></figure>

<p>从目标目录中找到的头文件中生成并安装一个Xcode .docset文件。</p>
<p>通过传递 <code>--help</code> 参数可以找到其他配置选项（包括HTML输出）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> appledoc --<span class="built_in">help</span></span></span><br></pre></td></tr></table></figure>

<h3 id="xctool"><a href="#xctool" class="headerlink" title="xctool"></a>xctool</h3><p>它可以直接替代 xcodebuild，也就是 Xcode.app 自己所依赖的底层工具。</p>
<p>我们自己作为苹果硬件和软件的消费者，都清楚设计的重要性怎么强调都不为过。在这个方面，xctool 做得非常漂亮。构建过程的每一步都经过清晰的组织，使用 ANSI 彩色字符和一系列 Unicode 装饰字符，使得表现的方式既容易理解又具有视觉吸引力，同时 xctool 的美丽不仅仅体现了表面：构建过程同样支持以其他工具可读取的格式进行输出：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>xctool -reporter <span class="symbol">plain:</span>output.txt build</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>pretty</strong>: (默认) 一个文字化的输出器，使用 ANSI 颜色和 unicode 符号来进行美化输出。</li>
<li><strong>plain</strong>: 类似 pretty, 不过没有颜色和 Unicode。</li>
<li><strong>phabricator</strong>: 把构建/测试的结果输出为 JSON 数组，它可以被 Phabricator 的代码评审工具读取。</li>
<li><strong>junit</strong>: 把测试结果输出成和 JUnit/xUnit 兼容的 XML 文件。</li>
<li><strong>json-stream</strong>: 一个由构建/测试事件组成的 JSON 字典流，每行一个（示例输出）。</li>
<li><strong>json-compilation-database</strong>: 输出构建事件的 JSON Compilation Database ，它可以用于基于 Clang Tooling 的工具，例如 OCLint.</li>
</ul>
<p>xctool 相对于 xcodebuild 另一个主要的进步是，xctool 可以和 Xcode.app 一样执行应用测试（xcodebuild 不能区分项目 scheme 中哪些是测试使用的 target，更不用说在模拟器中执行测试了）。</p>
<p>仅仅因为这一个原因，xctool 就深刻地影响了 Objective-C 社区中新兴的持续集成测试的规范。</p>
<p>通过以下命令安装 <code>xctool</code>：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>xctool</span><br></pre></td></tr></table></figure>

<h3 id="OCLint"><a href="#OCLint" class="headerlink" title="OCLint"></a>OCLint</h3><p>OCLint 是一个静态代码分析工具，可以检查 Objective-C（也支持 C 和 C++）代码中常见的问题，例如空的 if/else/try/catch/finally 语句，未使用的本地变量和参数，大量复杂的没有注释的(NCSS)，具有圈复杂度或者 NPath 复杂度的代码，冗余的代码，代码“异味”，以及其他的不好的代码实践。</p>
<p>安装 OCLint 最好的方式是通过 Homebrew Cask:</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>cask <span class="keyword">install </span>oclint</span><br></pre></td></tr></table></figure>

<p>还记得 <code>xctool</code> 的 <code>json-compilation-database</code> 输出选项吗？它的输出可以直接 被 <code>OCLint</code> 读取，供它进行魔法一般的静态分析。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ xctool -workspace NSHipster.xcworkspace -scheme "NSHipster" -reporter <span class="type">json</span>-compilation-<span class="keyword">database</span> build &gt; compile_commands.json</span><br><span class="line"></span><br><span class="line">$ oclint-<span class="type">json</span>-compilation-<span class="keyword">database</span></span><br></pre></td></tr></table></figure>

<h3 id="xcpretty"><a href="#xcpretty" class="headerlink" title="xcpretty"></a>xcpretty</h3><p><code>xcpretty</code> 类似于 <code>xctool</code>，改进了 <code>xcodebuild</code> 的构建输出，但是 <code>xcpretty</code> 不是尝试替换 <code>xcodebuild</code>，而是扩展并改进它。</p>
<p>实际上，xcpretty 通过获取 xcodebuild 的管道输出而不是直接调用，充分体现了 Unix的可组合性理念：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">$ xcodebuild [flags] <span class="string">| xcpretty -c</span></span><br></pre></td></tr></table></figure>

<p>这种方法的一个主要好处是它真的很快——事实上，在某些情况下，xcpretty 实际上比直接调用 xcodebuild 快一点，因为它节省了打印到控制台的时间。</p>
<p>与 xctool 的另一个共性是报告器功能，其具有格式化输出到JUnit风格的XML、HTML或上述OCTool 兼容的 json编译数据库格式。</p>
<p>xcpretty 通过 RubyGems 安装：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ gem <span class="keyword">install</span> xcpretty</span><br></pre></td></tr></table></figure>

<h3 id="Nomad"><a href="#Nomad" class="headerlink" title="Nomad"></a>Nomad</h3><p><code>Nomad</code> 是用于 iOS 和 OS X 开发的世界级命令行实用程序的集合。它自动化常见的管理任务，以便开发人员可以专注于构建和传输软件。</p>
<p>每个工具可以单独安装，也可以一起安装：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ gem install nomad-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>

<h4 id="Cupertino"><a href="#Cupertino" class="headerlink" title="Cupertino"></a>Cupertino</h4><p>应用程序 Provisioning 流程普遍被苹果开发人员厌恶。</p>
<p>除了整个过程是一个从开始到完成的噩梦，许多操作需要通过 Web 界面进行交互。不仅需要大量的额外点击，但使得它非常不自动化。</p>
<p><code>Cupertino</code> 提供一个命令行工具管理设备、provisioning proﬁle、app ID 和证书。</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">$ ios devices:list</span><br><span class="line"></span><br><span class="line">+------------------------------+---------------------------------------+</span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line"><span class="string">Listing 2 devices. You can register 98 additional devices.</span></span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">+---------------------------+------------------------------------------+</span><br><span class="line"></span><br><span class="line">|<span class="string"> Device Name</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> Device Identifier</span></span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">+---------------------------+------------------------------------------+</span><br><span class="line"></span><br><span class="line">|<span class="string"> Johnny Appleseed iPad</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> 0123456789012345678901234567890123abcdef </span>|</span><br><span class="line"></span><br><span class="line">|<span class="string"> Johnny Appleseed iPhone</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> abcdef0123456789012345678901234567890123 </span>|</span><br><span class="line"></span><br><span class="line">+---------------------------+------------------------------------------+</span><br><span class="line"></span><br><span class="line">$ ios devices:add <span class="string">"iPad 1"</span>=abc123</span><br><span class="line"></span><br><span class="line">$ ios devices:add <span class="string">"iPad 2"</span>=def456 <span class="string">"iPad 3"</span>=ghi789 ...</span><br></pre></td></tr></table></figure>

<p>通过以下命令单独安装：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ gem <span class="keyword">install</span> cupertino</span><br></pre></td></tr></table></figure>

<h4 id="Shenzhen"><a href="#Shenzhen" class="headerlink" title="Shenzhen"></a>Shenzhen</h4><p>Web 开发人员在 iOS 上的对应部分是能够在几秒钟内持续部署代码，而不是等待几天 Capertino 批准（有时拒绝！）更新。</p>
<p>幸运的是，一个围绕着开发和企业分发的新兴产业已经兴起。第三方服务像 HockeyApp、DeployGate 和 TestFlight 提供给开发者更容易的范式注册测试用户和发送最新构建给QA。</p>
<p><code>Shenzhen</code> 是进一步自动化此过程的工具，通过构建 .ipa文件，然后发布到 FTP/SFTP服务器、S3 存储或者其他任何上述第三方服务。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ cd /path/<span class="keyword">to</span>/iOS Project/</span><br><span class="line">$ ipa build</span><br><span class="line">$ ipa distribute:sftp --host HOST -u<span class="built_in"> USER </span>-p PASSWORD -P FTP_PATH</span><br></pre></td></tr></table></figure>

<h4 id="Houston"><a href="#Houston" class="headerlink" title="Houston"></a>Houston</h4><p><code>Houston</code> 是一个简单的工具发送苹果推送通知。传递凭据、构造消息并将其发送到设备。</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">$ apn push <span class="string">"&lt;token&gt;"</span> -<span class="keyword">c</span> /path/<span class="keyword">to</span>/apple_push_notification.pem -m <span class="string">"Hello from the command line!"</span></span><br></pre></td></tr></table></figure>

<p>这个工具对测试远程推送非常有用——尤其是在新应用中实现该功能。</p>
<h4 id="Venice"><a href="#Venice" class="headerlink" title="Venice"></a>Venice</h4><p>不管怎样应用内购买已经成为app开发者最有利的商业模式。有了这么多，对某人的生活而言确保这些购买的有效性是首要的。</p>
<p><code>Venice</code> 是一个命令行程序，用于验证 Apple 应用内购买收据，并检索与收据数据相关的信息。</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">$ iap verify /path/to/receipt</span><br><span class="line">+-----------------------------+-------------------------------+</span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line"><span class="string">Receipt</span></span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">+-----------------------------+-------------------------------+</span><br><span class="line"></span><br><span class="line">|<span class="string"> app_item_id</span></span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">|<span class="string"> bid</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> com.foo.bar</span></span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">|<span class="string"> bvrs</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> 20120427</span></span><br><span class="line"></span><br><span class="line">|</span><br><span class="line">|<span class="string"> original_purchase_date</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> Sun, 01 Jan 2013 12:00:00 GMT </span>|</span><br><span class="line"></span><br><span class="line">|<span class="string"> original_transaction_id</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> 1000000000000001</span></span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">|<span class="string"> product_id</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> com.example.product</span></span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">|<span class="string"> purchase_date</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> Sun, 01 Jan 2013 12:00:00 GMT </span>|</span><br><span class="line"></span><br><span class="line">|<span class="string"> quantity</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> 1</span></span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">|<span class="string"> transaction_id</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> 1000000000000001</span></span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">|<span class="string"> version_external_identifier </span>|</span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line"><span class="string">+-----------------------------+-------------------------------+</span></span><br></pre></td></tr></table></figure>

<p>像 <code>Houston</code>、<code>Venice</code>有一个客户端库组件，允许它部署在 Rails或 Sinatra应用程序上。验证服务器上的收据允许保留他们自己的过去购买记录，这对于最新的指标和历史分析是有用的。因此，任何人关于IAP需要认真对待是推荐的做法。</p>
<h4 id="Dubai"><a href="#Dubai" class="headerlink" title="Dubai"></a>Dubai</h4><p>Passbook 管理登机牌、电影票、零售优惠券和会员卡。使用 PassKit API，开发人员可以注册 Web 服务自动更新 Passbook的内容，例如登机牌上的登机口更改或会员卡添加积分。</p>
<p><code>Dubai</code>可以很容易地从脚本或命令行生成 .pkpass 文件，允许快速迭代你的 pass 的设计和内容，或者在空中生成一次性的。</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">$ pk <span class="keyword">generate</span> Example<span class="variable">.pass</span> -T boarding-pass</span><br></pre></td></tr></table></figure>

<p>一旦生成了通行证，它可以用 <code>Dubai</code> 创建本地 HTTP 服务，允许通行证在 iOS 模拟器中实时预览：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">$ pk serve <span class="module-access"><span class="module"><span class="identifier">Example</span>.</span></span>pass -c /path/<span class="keyword">to</span>/certificate.p12</span><br><span class="line">$ <span class="keyword">open</span> http:<span class="comment">//localhost:4567/pass.pkpass</span></span><br></pre></td></tr></table></figure>

<h3 id="Fastlane"><a href="#Fastlane" class="headerlink" title="Fastlane"></a>Fastlane</h3><p>fastlane 是一套自动化打包的工具集，用 Ruby 写的，用于 iOS 和 Android 的自动化打包和发布等工具。gym 是其中的打包命令。</p>
<p>官网：<a href="https://fastlane.tools" target="_blank" rel="noopener">https://fastlane.tools</a></p>
<p>GitHub：<a href="https://github.com/fastlane/fastlane" target="_blank" rel="noopener">https://github.com/fastlane/fastlane</a></p>
<p>fastlane 包含了我们日常编码之后要上线时候进行操作的所有命令。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deliver:</span> 上传屏幕截图、二进制程序数据和应用程序到AppStore</span><br><span class="line"><span class="symbol">snapshot:</span> 自动截取你的程序在每个设备上的图片</span><br><span class="line"><span class="symbol">frameit:</span> 应用截屏外添加设备框架</span><br><span class="line"><span class="symbol">pem:</span> 可以自动化地生成和更新应用推送通知描述文件</span><br><span class="line"><span class="symbol">sigh:</span> 生成下载开发商店的配置文件</span><br><span class="line"><span class="symbol">produce:</span> 利用命令行在 iTunes Connect 创建一个新的 iOS app</span><br><span class="line"><span class="symbol">cert:</span> 自动创建 iOS 证书</span><br><span class="line"><span class="symbol">pilot:</span> 最好的在终端管理测试和建立的文件</span><br><span class="line"><span class="symbol">boarding:</span> 很容易的方式邀请beta测试</span><br><span class="line"><span class="symbol">gym:</span> 建立新的发布的版本，打包</span><br><span class="line"><span class="symbol">match:</span> 使用git同步你成员间的开发者证书和文件配置</span><br><span class="line"><span class="symbol">scan:</span> 在iOS 和Mac app 上执行测试用例</span><br></pre></td></tr></table></figure>

<p>一个完整的发布过程可以用 fastlane描述成下面这样：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">lane <span class="symbol">:appstore</span> <span class="keyword">do</span></span><br><span class="line">	increment_build_number</span><br><span class="line">	cocoapods</span><br><span class="line">	xctool</span><br><span class="line">	snapshot</span><br><span class="line">	sigh</span><br><span class="line">	deliver</span><br><span class="line">	frameit</span><br><span class="line">	sh <span class="string">"./customScript.sh"</span></span><br><span class="line">	Slack</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<ol>
<li>提高版本号</li>
<li>cocoapods 进行相关pod配置</li>
<li>xctool 进行编译</li>
<li>snapshot 自动生成截图</li>
<li>sigh 处理 provision profile 相关的事情</li>
<li>deliver 上传截图</li>
<li>frameit 将应用截图快速的放入对应的设备尺寸中</li>
<li>执行一些自动化的脚本</li>
<li>把结果发送到 slack</li>
</ol>
<p>这是一个完成的自动化的过程。不过实际发布过程中，截图那部分笔者所在公司还是自己手动上传了，fastlane基本还是用来自动化打包。</p>
<p><img src="http://file.blog.chaosky.tech/2017-03-07-intro-fastlane-tree.png" alt="intro-fastlane-tree"><br>安装fastlane</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ gem <span class="keyword">install</span> fastlane</span><br></pre></td></tr></table></figure>

<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>在项目根目录下，初始化Fastlane:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>fastlane init</span><br></pre></td></tr></table></figure>

<p>初始化的过程中会要求填写一些项目信息比如 Apple ID, fastlane 会自动检测当前目录中项目的App Name和App Identifier。如果检测的不对，选择 n 自行输入。同时会在项目中生成一个fastlane的文件夹。</p>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">fastlane</span></span><br><span class="line">├── <span class="selector-tag">Appfile</span></span><br><span class="line">├── <span class="selector-tag">Deliverfile</span></span><br><span class="line">├── <span class="selector-tag">Fastfile</span></span><br><span class="line">├── <span class="selector-tag">metadata</span></span><br><span class="line">│   ├── <span class="selector-tag">app_icon</span><span class="selector-class">.jpg</span></span><br><span class="line">│   ├── <span class="selector-tag">copyright</span><span class="selector-class">.txt</span></span><br><span class="line">│   ├── <span class="selector-tag">primary_category</span><span class="selector-class">.txt</span></span><br><span class="line">│   ├── <span class="selector-tag">primary_first_sub_category</span><span class="selector-class">.txt</span></span><br><span class="line">│   ├── <span class="selector-tag">primary_second_sub_category</span><span class="selector-class">.txt</span></span><br><span class="line">│   ├── <span class="selector-tag">review_information</span></span><br><span class="line">│   │   ├── <span class="selector-tag">demo_password</span><span class="selector-class">.txt</span></span><br><span class="line">│   │   ├── <span class="selector-tag">demo_user</span><span class="selector-class">.txt</span></span><br><span class="line">│   │   ├── <span class="selector-tag">email_address</span><span class="selector-class">.txt</span></span><br><span class="line">│   │   ├── <span class="selector-tag">first_name</span><span class="selector-class">.txt</span></span><br><span class="line">│   │   ├── <span class="selector-tag">last_name</span><span class="selector-class">.txt</span></span><br><span class="line">│   │   ├── <span class="selector-tag">notes</span><span class="selector-class">.txt</span></span><br><span class="line">│   │   └── <span class="selector-tag">phone_number</span><span class="selector-class">.txt</span></span><br><span class="line">│   ├── <span class="selector-tag">secondary_category</span><span class="selector-class">.txt</span></span><br><span class="line">│   ├── <span class="selector-tag">secondary_first_sub_category</span><span class="selector-class">.txt</span></span><br><span class="line">│   ├── <span class="selector-tag">secondary_second_sub_category</span><span class="selector-class">.txt</span></span><br><span class="line">│   └── <span class="selector-tag">zh-Hans</span></span><br><span class="line">│       ├── <span class="selector-tag">description</span><span class="selector-class">.txt</span></span><br><span class="line">│       ├── <span class="selector-tag">keywords</span><span class="selector-class">.txt</span></span><br><span class="line">│       ├── <span class="selector-tag">marketing_url</span><span class="selector-class">.txt</span></span><br><span class="line">│       ├── <span class="selector-tag">name</span><span class="selector-class">.txt</span></span><br><span class="line">│       ├── <span class="selector-tag">privacy_url</span><span class="selector-class">.txt</span></span><br><span class="line">│       ├── <span class="selector-tag">release_notes</span><span class="selector-class">.txt</span></span><br><span class="line">│       └── <span class="selector-tag">support_url</span><span class="selector-class">.txt</span></span><br><span class="line">└── <span class="selector-tag">screenshots</span></span><br><span class="line">    ├── <span class="selector-tag">README</span><span class="selector-class">.txt</span></span><br><span class="line">    └── <span class="selector-tag">zh-Hans</span></span><br><span class="line">        ├── 1_<span class="selector-tag">iphone6Plus_1</span><span class="selector-class">.6</span>+ <span class="selector-tag">Screenshot</span> 0 <span class="selector-tag">iPhone</span><span class="selector-class">.png</span></span><br><span class="line">        ├── 2_<span class="selector-tag">iphone6Plus_2</span><span class="selector-class">.6</span>+ <span class="selector-tag">Screenshot</span> 1 <span class="selector-tag">iPhone</span><span class="selector-class">.png</span></span><br><span class="line">        ├── 3_<span class="selector-tag">iphone6Plus_3</span><span class="selector-class">.6</span>+ <span class="selector-tag">Screenshot</span> 4 <span class="selector-tag">iPhone</span><span class="selector-class">.png</span></span><br><span class="line">        ├── 4_<span class="selector-tag">iphone6Plus_4</span><span class="selector-class">.6</span>+ <span class="selector-tag">Screenshot</span> 2 <span class="selector-tag">iPhone</span><span class="selector-class">.png</span></span><br><span class="line">        └── 5_<span class="selector-tag">iphone6Plus_5</span><span class="selector-class">.6</span>+ <span class="selector-tag">Screenshot</span> 3 <span class="selector-tag">iPhone</span><span class="selector-class">.png</span></span><br></pre></td></tr></table></figure>


<p>上面这些文件中，最重要的两个文件就是Appfile和Fastfile。</p>
<p>Appfile 里面存放了App的基本信息包括app_identifier、apple_id、team_id。如果在init的时候你输入了正确的appId账号和密码会在这里生成正确的team_id信息。如果没有team，这里就不会显示。</p>
<p>Fastfile是最重要的一个文件，在这个文件里面可以编写和定制我们打包脚本的一个文件，所有自定义的功能都写在这里。</p>
<p>如果在init的时候选择了在iTunes Connect创建App，那么fastlane会调用produce进行初始化，如果现在还不想创建，也可以之后再运行produce init进行这个流程。如果不执行produce的流程，deliver的流程不会被执行，当然之后也可以deliver init运行完全一样的流程。</p>
<p>在iTunes Connect 中成功创建App之后，fastlane的文件夹里面就有Deliverfile文件了。</p>
<p>Deliverfile文件里面主要是deliver的配置文件和Deliverfile的一些帮助。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>软件团队模式和开发流程</title>
    <url>/2017/02/22/Team-Mode-Development-Process/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件团队的模式"><a href="#软件团队的模式" class="headerlink" title="软件团队的模式"></a>软件团队的模式</h2><h3 id="主治医师模式（Chief-Programmer-Team，Surgical-Team）"><a href="#主治医师模式（Chief-Programmer-Team，Surgical-Team）" class="headerlink" title="主治医师模式（Chief Programmer Team，Surgical Team）"></a>主治医师模式（Chief Programmer Team，Surgical Team）</h3><p>就像在手术台上那样，有一个主刀医师，其他人（麻醉，护士，器械）各司其职，为主刀医师服务。</p>
<p>这样的软件团队中，有首席程序员（Chief Programmer），他/她负责处理主要模块的设计和编码，其他成员从各种角度支持他/她的工作（后备程序员、系统管理员、工具开发、编程语言专家、业务专家）。</p>
<p>在一些学校里，软件工程的团队模式往往从这一模式退化为『一个学生干活，其余学生跟着打酱油』。</p>
<h3 id="明星模式（Super-star-Model）"><a href="#明星模式（Super-star-Model）" class="headerlink" title="明星模式（Super-star Model）"></a>明星模式（Super-star Model）</h3><p>主治医师模式运用到极点，可以蜕化为明星模式，在这里，明星的光芒盖过了团队其他人的总和。明星也是人，也会受伤，犯错误，如何让团队的利益最大化，而不是明星的利益最大化？如何让团队的价值在明星陨落之后任然能够保持？是这个模式要解决的问题。</p>
<h3 id="社区模式（Community-Model）"><a href="#社区模式（Community-Model）" class="headerlink" title="社区模式（Community Model）"></a>社区模式（Community Model）</h3><p>社区由很多志愿者参与，每个人参与自己感兴趣的项目，贡献力量，大部分人不拿报酬。这种模式的好处是『众人拾柴火焰高』，但是如果大家都只来烤火，不去拾柴；或者捡到的柴火质量太差，最后火也就熄灭了。<strong>『社区』并不意味着『随意』</strong>，一些成功社区项目（例如开发和维护Linux操作系统的社区），都有很严格的代码复审和签入的质量控制。</p>
<h3 id="业余剧团模式（Amateur-Theater-Team）"><a href="#业余剧团模式（Amateur-Theater-Team）" class="headerlink" title="业余剧团模式（Amateur Theater Team）"></a>业余剧团模式（Amateur Theater Team）</h3><p>这样的团队在每一个项目中，不同的人会挑选不同的角色。在下一个项目中，这些人也许会换一个完全不同的角色类型。各人在团队中听从一个中央指挥（导演）的指导和安排。在学生实践项目或培训项目中，这样的事情经常发生。</p>
<h3 id="秘密团队（Skunk-Work-Team）"><a href="#秘密团队（Skunk-Work-Team）" class="headerlink" title="秘密团队（Skunk Work Team）"></a>秘密团队（Skunk Work Team）</h3><p>一些软件项目在秘密状态下进行，别人不知道他们具体在做什么。这种模式的好处是：团队内部有极大的自由，没有外界的干扰（不用每周给别人介绍项目进展，听领导的最新指示，等等），团队成员有极大的投入。</p>
<h3 id="特工团队（SWAT）"><a href="#特工团队（SWAT）" class="headerlink" title="特工团队（SWAT）"></a>特工团队（SWAT）</h3><p>软件行业的一些团队由一些有特殊技能的专业人士组成，负责解决一些棘手而有紧迫性的问题。</p>
<h3 id="交响乐团模式（Orchestra）"><a href="#交响乐团模式（Orchestra）" class="headerlink" title="交响乐团模式（Orchestra）"></a>交响乐团模式（Orchestra）</h3><p>想象一下交响乐团的演奏，有下面的特点。</p>
<ul>
<li>家伙多，门类齐全。</li>
<li>各司其职，各自有专门场地，演奏期间没有聊天、走动等现象。</li>
<li>演奏都靠谱，同时看指挥的。</li>
<li>演奏的都是练习过多次的曲目，重在执行。</li>
</ul>
<p>当某个软件领域处于稳定成长阶段的时候，众多大型软件公司的开发团队就会才去这种模式。</p>
<h3 id="爵士乐模式（Jazz-Band）"><a href="#爵士乐模式（Jazz-Band）" class="headerlink" title="爵士乐模式（Jazz Band）"></a>爵士乐模式（Jazz Band）</h3><p>和交响乐团相比，这种模式有以下特点。</p>
<ul>
<li>不靠谱。他们演奏时都没有谱子。</li>
<li>没有现场指挥，平时有编曲起到协调和指导作用。</li>
<li>也有模式，架构师先吹出主题，然后他走到一旁抽烟去了，其余人员根据这个主题各自即兴发挥，最后迈尔斯加入，回应主题，像是对曲子的总结。</li>
<li>人数较少。</li>
</ul>
<h3 id="功能团队模式（Feature-Team）"><a href="#功能团队模式（Feature-Team）" class="headerlink" title="功能团队模式（Feature Team）"></a>功能团队模式（Feature Team）</h3><p>很多软件公式的团队最后都演变成功能团队，简而言之，就是具备不同能力的同事们平等协作，共同完成一个功能。</p>
<p>在这个功能完成之后，这些人又重新组织，和别的角色一起去完成下一个功能。他们之间没有管理和被管理的关系。大型软件公司里的不少团队都是采用这种模式。这些功能小组也称为Feature Crew，小组内的交流比较频繁。</p>
<p>每个小组都由一到三个人组成，每个小组都是一个有自主权的单元，可以自由选用最有利于他们完成工作的任何技术。但是，每个小组必须与其他小组就编码规范达成一致。</p>
<h3 id="官僚模式（Bureaucratic-Model）"><a href="#官僚模式（Bureaucratic-Model）" class="headerlink" title="官僚模式（Bureaucratic Model）"></a>官僚模式（Bureaucratic Model）</h3><p>这种模式脱胎于大机构的组织架构，几个人报告给一个小头目，几个小头目报告给中头目，依次而上。这种模式在软件开发中会出问题。因为成员之间不光有技术方面的合作和领导，同时还混进了组织上的领导和被领导关系。跨组织的合作变得比较困难，因为各自头顶上都有不同的老板。</p>
<p>这种模式如果应用不好，最后会变成『老板驱动』的开发流程。</p>
<a id="more"></a>

<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><h3 id="写了再改模式（Code-and-Fix）"><a href="#写了再改模式（Code-and-Fix）" class="headerlink" title="写了再改模式（Code-and-Fix）"></a>写了再改模式（Code-and-Fix）</h3><p>这个流程不需要太多其他准备或相关知识，大家上来就写代码，也许就能写出来，写不出来就改，也许能改好。当面临下面的任务时，也许这个方法是有用的。</p>
<ul>
<li>『只用一次』的程序</li>
<li>『看过了就扔』的原型</li>
<li>一些不实用的演示程序</li>
</ul>
<h3 id="瀑布模型（Waterfall-Model）"><a href="#瀑布模型（Waterfall-Model）" class="headerlink" title="瀑布模型（Waterfall Model）"></a>瀑布模型（Waterfall Model）</h3><p><img src="http://file.blog.chaosky.tech/2017-03-07-Jietu20170302-113416.png" alt="相邻步骤的回溯"><br><img src="http://file.blog.chaosky.tech/2017-03-07-Jietu20170302-113508.png" alt="收集反馈并改进"></p>
<p><img src="http://file.blog.chaosky.tech/2017-03-07-Jietu20170302-113540.png" alt="6种文档"></p>
<p><img src="http://file.blog.chaosky.tech/2017-03-07-Snip20170302_3.png" alt="子瀑布模型"></p>
<h3 id="Rational-Unified-Process统一流程（RUP）"><a href="#Rational-Unified-Process统一流程（RUP）" class="headerlink" title="Rational Unified Process统一流程（RUP）"></a>Rational Unified Process统一流程（RUP）</h3><p>RUP 把软件开发的各个阶段整合在一个统一的框架里。</p>
<p>要完成一个复杂的软件项目，团队的各种成员要在不同阶段做不同的事情，这些不同类型的工作在 RUP 中叫做规程（Discipline）或者工作流（Workflow）。</p>
<h4 id="业务建模"><a href="#业务建模" class="headerlink" title="业务建模"></a>业务建模</h4><p>为用户提供软件，就要理解目前用户的业务流程，但是精通计算机语言细节的工程师并不能马上理解对用户活动和期望值的各种自然语言描述。为了解决这个问题，业务建模（Business Modeling）工作流用精确的语言（通常是UML）把用户的活动描述出来。这个工作流的结果通常是用例（Use Case）。</p>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>有了用例之后，开发人员和用户要分析并确认软件系统得提供什么样的功能来满足用户的需求，功能有什么约束条件，如何验证功能满足了用户需求。这就是需求（Requirement）工作流的作用。</p>
<h4 id="分析和设计"><a href="#分析和设计" class="headerlink" title="分析和设计"></a>分析和设计</h4><p>分析和设计（Analysis &amp; Design）工作流将需求转换成系统的设计。这一步结束之后，团队成员就能知道系统有哪些子系统、模块，他们之间的关系是怎样的。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>在实现（Implementation）工作流中，工程师按照计划实现上一步产出的设计，将开发出的组件（Module），连同验证模块（例如：单元测试）提交到系统中。同时，工程师们集成由单个开发者（或小组）所产生的结果，通过手工或自动化的手段，把可执行的系统搭建出来。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>测试（Test）工作流要验证现阶段交付的所有组件的正确性、组件之间交互的正确性，以及检验所有的需求已被正确地实现。在这个工程中，发现、报告、会诊、修复各种缺陷，在软件部署之前保证质量达到预期要求。</p>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>部署（Deployment）工作流的目的是生成最终版本并将软件分发给最终用户。</p>
<h4 id="配置和变更管理"><a href="#配置和变更管理" class="headerlink" title="配置和变更管理"></a>配置和变更管理</h4><p>配置和变更管理工作流（Configuration and Change Management）负责管理 RUP 各个阶段产生的各种工作结果（例如源代码控制系统管理和备份各种源文件），要记录修改人员、修改原因、修改时间等属性，有些团队还可以考虑并行开发、分布式开发等。</p>
<h4 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h4><p>软件项目管理工作流（Project Management）平衡各种可能产生冲突的目标，管理风险，克服各种约束并成功地在各个阶段交付达到要求的产品。</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>环境（Environment）工作流的目的是向软件开发组织提供软件开发环境，包括工程和工具。</p>
<p>RUP 把软件开发分成几个阶段，一个大阶段的结束称为一个里程碑（Milestone），每个阶段内可以有几个迭代，以比较灵活的形式实现本阶段的任务。从这一点来说，RUP在大尺度上像瀑布模型，在每个阶段内像迭代模型。</p>
<p>四个阶段：</p>
<p><strong>初始阶段</strong>——此阶段的目标是分析软件系统大概的构成，系统与外部系统的边界在哪里（我们的系统究竟和什么别的外部实体打交道），大致的成本和预算是多少，系统的风险主要来自哪里，成功度过初始阶段的项目会达到生命周期目标（Lifecycle Objective）里程碑。</p>
<p><strong>细化阶段</strong>——它的目标是分析问题领域，建立健全的体系结构基础，编制目标计划，按优先级处理项目中的风险。团队要确定项目的具体范围、主要功能、性能、安全性、可扩展性等非功能需求。同时为项目建立支持环境，包括创建开发案例、创建模板并准备工具。细化阶段结束时，项目达到了第二个重要的里程碑：生命周期结构（Lifecycle Architecture）里程碑。</p>
<p><strong>构造阶段</strong>——在这一阶段，团队开发出所有的功能集，并有秩序地把功能集成为经过各种测试验证过的产品。构造阶段结束时是第三个重要的里程碑：初始功能（Initial Operational）里程碑。此时的产品版本也常被称为『beta』版。</p>
<p><strong>交付阶段</strong>——这时候，团队工作的重点是确保软件能满足最终用户的实际需求。交付阶段可以有迭代（beta1，beta2等），团队还要注意处理用户设置、安装和可用性等问题。在交付阶段的终点是第四个里程碑：产品发布（Product Release）里程碑。</p>
<p><img src="http://file.blog.chaosky.tech/2017-03-07-Snip20170302_5.png" alt="Snip20170302_5"></p>
<h3 id="渐进交付的流程（Evolutionary-Delivery），MVP-和-MBP"><a href="#渐进交付的流程（Evolutionary-Delivery），MVP-和-MBP" class="headerlink" title="渐进交付的流程（Evolutionary Delivery），MVP 和 MBP"></a>渐进交付的流程（Evolutionary Delivery），MVP 和 MBP</h3><p>当系统的主要需求和架构明确之后，软件团队进入了一个不断演进的 evolution 循环中：</p>
<p><img src="http://file.blog.chaosky.tech/2017-03-07-Snip20170302_6.png" alt="Snip20170302_6"></p>
<p>MVP —— Minimal Viable Product，最小可行产品，又称为Minimal Feature Set，最小功能集。</p>
<p>具体的做法是：把产品最核心的功能用最小的成本实现出来（或者描绘出来），然后快速征求用户意见。例如：一个社交网站已经有很多用户，都是免费的，产品团队想设计一个付费的VIP服务，MVP的做法可以是这样——在目前的用户入口页面中加一个『VIP服务』的链接，指向一个简单的介绍页面。观察到底有多少用户点击这个链接。如果点击量太小，那么这个VIP服务就不用做了。</p>
<p>MVP的指导思想和渐进交付相似，但是它更强调更早获得用户反馈，为此可以在产品完成之前就发布，它也强调产品的核心价值（产品最区别与竞争产品的地方），为了突出核心功能，别的辅助功能可以不考虑或者用别的平台提供的服务来代替。</p>
<p>MBP —— Maximal Beautiful Product（最强最美产品）。如果对用户的需求了然于心，或者产品团队比用户更了解用户的需求，为何不把产品最全、最美的形态展现出来，一举征服用户。</p>
<h3 id="敏捷流程"><a href="#敏捷流程" class="headerlink" title="敏捷流程"></a>敏捷流程</h3><p>现有的做法 VS. 敏捷的做法</p>
<table>
<thead>
<tr>
<th>现有的做法</th>
<th>敏捷的做法</th>
</tr>
</thead>
<tbody><tr>
<td>流程和工具</td>
<td>个人和交流</td>
</tr>
<tr>
<td>完备的文档</td>
<td>可用的软件</td>
</tr>
<tr>
<td>为合同谈判</td>
<td>与客户合作</td>
</tr>
<tr>
<td>执行原定计划</td>
<td>响应变化</td>
</tr>
</tbody></table>
<h4 id="敏捷软件开发宣言"><a href="#敏捷软件开发宣言" class="headerlink" title="敏捷软件开发宣言"></a>敏捷软件开发宣言</h4><blockquote>
<p>我们一直在实践中探寻更好的软件开发方法，身体力行的同时也帮助他人。由此我们建立了如下价值观：<br><strong>个体和互动</strong> 高于 流程和工具<br><strong>工作的软件</strong> 高于 详尽的文档<br><strong>客户合作</strong> 高于 合同谈判<br><strong>响应变化</strong> 高于 遵循计划<br>也就是说，尽管右项有其价值，我们更重视左项的价值。</p>
</blockquote>
<h4 id="敏捷开发原则"><a href="#敏捷开发原则" class="headerlink" title="敏捷开发原则"></a>敏捷开发原则</h4><ol>
<li>尽早并持续地交付有价值的软件以满足顾客需求</li>
<li>敏捷流程欢迎需求的变化，并利用这种变化来提高用户的竞争优势</li>
<li>经常发布可用的软件，发布间隔可以从几周到几个月，能短则短</li>
<li>业务人员和开发人员在项目开发过程中应该每天共同工作</li>
<li>以有进取心的人为项目核心，充分支持信任他们</li>
<li>无论团队内外，面对面的交流始终最有效的沟通方式</li>
<li>可用的软件是衡量项目进展的主要指标</li>
<li>敏捷流程应能保持可持续的发展。领导、团队和用户应该能按照目前的步调持续合作下去</li>
<li>只有不断关注技术和设计，才能越来越敏捷</li>
<li>保持简明——尽可能简化工作量的技艺——极为重要</li>
<li>只有能自我管理的团队才能创建优秀的架构、需求和设计</li>
<li>时时总结如何提高团队效率，并付诸行动</li>
</ol>
<h4 id="Scrum-方法论"><a href="#Scrum-方法论" class="headerlink" title="Scrum 方法论"></a>Scrum 方法论</h4><h5 id="第一步：找出完成产品需要做的事情——Product-Backlog"><a href="#第一步：找出完成产品需要做的事情——Product-Backlog" class="headerlink" title="第一步：找出完成产品需要做的事情——Product Backlog"></a>第一步：找出完成产品需要做的事情——Product Backlog</h5><p>Backlog 翻译成『积压的工作』、『待解决的问题』、『产品订单』，都可以。产品负责人主导大家对于这个 Backlog 进行增/删/改的工作。每一项工作的时间估计单位为『天』。</p>
<h5 id="第二步：决定当前的冲刺（Sprint）需要解决的事情——Sprint-Backlog。"><a href="#第二步：决定当前的冲刺（Sprint）需要解决的事情——Sprint-Backlog。" class="headerlink" title="第二步：决定当前的冲刺（Sprint）需要解决的事情——Sprint Backlog。"></a>第二步：决定当前的冲刺（Sprint）需要解决的事情——Sprint Backlog。</h5><p>整个产品的实现被划分为几个相互联系的冲刺（Sprint）。产品订单上的任务被进一步细化了，被分解为以小时为单位。如果一个任务的估计时间太长（如超过16个小时），那么它就应该被进一步分解。订单上的任务是团队成员根据自己的情况来认领。团队成员能主导任务的估计和分配，他们的能动性得到较大的发挥。</p>
<h5 id="第三步：冲刺（Sprint）"><a href="#第三步：冲刺（Sprint）" class="headerlink" title="第三步：冲刺（Sprint）"></a>第三步：冲刺（Sprint）</h5><p>在冲刺阶段，外部人士不能直接打扰团队成员。一切交流只能通过 Scrum 大师（Scrum Master）来完成。这一措施较好地平衡了『交流』和『集中注意力』的矛盾。有任何需求的改变都留待冲刺结束后再讨论。</p>
<p>冲刺期间，每天要开一个每日例会（Scrum Meeting），团队成员大多站着开会，所以又称<strong>每日立会</strong>。大家依次报告：</p>
<pre><code>我昨天做了啥
我今天要做啥
我碰到了哪些问题</code></pre><p>每日立会强迫每个人向同伴报告进度，迫使大家把问题摆在明面上。同时启动每日构建，让大家每天都能看到一个逐渐完善的版本。</p>
<p>用简明的图表展现整个项目的进度，这个图最好放在大家工作的环境中，或者每天传达给各个成员。</p>
<p>也可以是简单的看板图：把一堆任务从最初的『待定』推动到『工作中』等各个状态，直至『完成』。</p>
<p>冲刺阶段是时间驱动的（Time-boxed），时间一到就结束。这个特点看似不起眼，但其实它有效地断了各种延期想法的后路，很高明。</p>
<h5 id="第四步：得到软件的一个增量版本，发布给用户。然后在此基础上又进一步计划增量的新功能和改进。"><a href="#第四步：得到软件的一个增量版本，发布给用户。然后在此基础上又进一步计划增量的新功能和改进。" class="headerlink" title="第四步：得到软件的一个增量版本，发布给用户。然后在此基础上又进一步计划增量的新功能和改进。"></a>第四步：得到软件的一个增量版本，发布给用户。然后在此基础上又进一步计划增量的新功能和改进。</h5><h4 id="敏捷总结"><a href="#敏捷总结" class="headerlink" title="敏捷总结"></a>敏捷总结</h4><p>敏捷对团队的要求很简单：自主管理（Self-managing）、自我组织（Self-organizing）、多功能型（Cross-functional），但是这很难做到。</p>
<p>与质量控制理论的模型如经典的戴明环（Plan-Do-Check-Act/Adjust，PDCA）类似。</p>
<p>Scrum 核心特点：</p>
<blockquote>
<p>在迭代开始时，团队审视摆在他们面前的任务，选择他们认为可以在迭代期间完成的那些任务（Plan）。然后团队独立地尽最大努力完成这些任务（Do）。在迭代结束时，团队给利益关系人展示成果（Check），并对开发流程进行调整（Act/Adjust）。</p>
</blockquote>
<p>Sprint/Scrum 对项目的众多需求采取分而治之的办法，能让相关人员集中精力，在一定期限内解决部分问题。它强调短时间的迭代（Iteration、Timebox），在多次迭代中不断总结，改进团队的流程和产品功能。他明确地指出不同的人在一个项目中的投入和责任的不同，并坚持让全身心投入的『猪』来主导项目。它通过Daily Scrum、Scrum Master等方法和角色，鼓励团队内部交流，并优化团队和其他人员的交流方式。它对团队成员提出了很高的要求：自主管理、自我组织、多功能型。一般人不能马上做到这一点。它不是『银弹』，不能解决软件开发的所有问题。至于具体项目进度如何跟踪，如何管理测试工作，如何管理复杂项目，还是靠战斗在一线的团队成员见招拆招，想出合适的办法。</p>
<h5 id="敏捷流程的经验教训"><a href="#敏捷流程的经验教训" class="headerlink" title="敏捷流程的经验教训"></a>敏捷流程的经验教训</h5><ol>
<li>敏捷宣言表明的是一些优先级，不必当作圣旨或者教条来争论。</li>
<li>Scrum Master 不是一个官，而是一个没有行政权力的沟通者，就像微软的PM那样。他/她同时还要在团队中做具体的工作。直接把原来的『经理』变成 Scrum Master，大多行不通。</li>
<li>一些项目需要很多暗箱操作和政治角力才能搞定，Scrum 会把这些矛盾都摆在明处。这有好处，也有风险。</li>
<li>在复杂的项目里，要让一线团队成员做决定。</li>
<li>创业公司的团队其实经常是运行在 Scrum 模式中。</li>
<li>在 Scrum 计划阶段的估计不是一个『合同』，领导们不要把它当成一个合同。估计总是不准的。坚持短期的Sprint，这样即使不准的估计也不会有大的损害。</li>
<li>不要和管理层谈『流程』，他们只关心『结果』。</li>
<li>在大型团队、跨地区的团队，或者复杂项目中，Scrum 并没有非常完美的答案，Scrum的创始人也承认这一点。</li>
</ol>
]]></content>
      <categories>
        <category>软件设计</category>
      </categories>
      <tags>
        <tag>开发流程</tag>
        <tag>团队模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastlane 实践（一）：自动化打包和发布</title>
    <url>/2020/05/04/fastlane-in-action-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://docs.fastlane.tools/img/fastlane_text.png" alt=""></p>
<blockquote>
<p>fastlane is the easiest way to automate beta deployments and releases for your iOS and Android apps. 🚀 It handles all tedious tasks, like generating screenshots, dealing with code signing, and releasing your application.</p>
</blockquote>
<p>fastlane 是自动化Beta部署和发布iOS和Android应用程序最简单方法。它可以处理所有繁琐的任务，例如生成屏幕截图，处理代码签名以及发布应用程序。</p>
<h2 id="Fastlane-安装"><a href="#Fastlane-安装" class="headerlink" title="Fastlane 安装"></a>Fastlane 安装</h2><h3 id="安装-Xcode-command-line-tools"><a href="#安装-Xcode-command-line-tools" class="headerlink" title="安装 Xcode command line tools"></a>安装 Xcode command line tools</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> xcode-select --install</span></span><br></pre></td></tr></table></figure>

<h3 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span></span><br></pre></td></tr></table></figure>

<h3 id="安装-RVM"><a href="#安装-RVM" class="headerlink" title="安装 RVM"></a>安装 RVM</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -sSL https://get.rvm.io | bash -s stable --auto-dotfiles</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.rvm/scripts/rvm</span></span><br></pre></td></tr></table></figure>

<p>修改 RVM 的 Ruby 安装源到 Ruby China 的 Ruby 镜像服务器，这样能提高安装速度。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"ruby_url=https://cache.ruby-china.org/pub/ruby"</span> &gt; ~/.rvm/user/db</span></span><br></pre></td></tr></table></figure>

<h4 id="安装Ruby-2-6-5"><a href="#安装Ruby-2-6-5" class="headerlink" title="安装Ruby 2.6.5"></a>安装Ruby 2.6.5</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rvm install 2.6.5</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rvm use 2.6.5 --default</span></span><br></pre></td></tr></table></figure>

<h4 id="更新-RubyGems-镜像"><a href="#更新-RubyGems-镜像" class="headerlink" title="更新 RubyGems 镜像"></a>更新 RubyGems 镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gem sources -l</span></span><br><span class="line">https://gems.ruby-china.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 确保只有 gems.ruby-china.org</span></span><br><span class="line">bundle config mirror.https://rubygems.org https://gems.ruby-china.org</span><br></pre></td></tr></table></figure>

<h4 id="安装-CocoaPods-和-Fastlane"><a href="#安装-CocoaPods-和-Fastlane" class="headerlink" title="安装 CocoaPods 和 Fastlane"></a>安装 CocoaPods 和 Fastlane</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gem install cocoapods</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gem install fastlane -NV</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gem install bundle</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ol>
<li><p>进入 iOS App 的目录并运行：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastlane init</span><br></pre></td></tr></table></figure>

<p> fastlane 会自动自动识别你的项目，并询问任何缺失的信息。</p>
</li>
<li><p><a href="https://docs.fastlane.tools/getting-started/ios/setup/" target="_blank" rel="noopener">fastlane Getting Started guide for iOS</a></p>
</li>
<li><p><a href="https://docs.fastlane.tools/getting-started/android/setup/" target="_blank" rel="noopener">fastlane Getting Started guide for Android</a></p>
</li>
</ol>
<h2 id="Fastlane-进阶用法"><a href="#Fastlane-进阶用法" class="headerlink" title="Fastlane 进阶用法"></a>Fastlane 进阶用法</h2><p>随着公司项目的增多，每次都运行重复的Fastlane 命令进行配置会低效很多，所以急需一套可以满足所有App需求的配置。</p>
<p>Fastlane 是由Ruby开发，所以也支持 dotenv 的功能。</p>
<p>最终Fastlane生成目录结构如下：</p>
<blockquote>
<p>├── .env<br>├── Appfile<br>├── Deliverfile<br>├── Fastfile<br>├── Matchfile<br>├── Pluginfile<br>├── README.md<br>├── Scanfile<br>├── metadata<br>│   ├── app_icon.jpg<br>│   ├── copyright.txt<br>│   ├── primary_category.txt<br>│   ├── primary_first_sub_category.txt<br>│   ├── primary_second_sub_category.txt<br>│   ├── review_information<br>│   │   ├── demo_password.txt<br>│   │   ├── demo_user.txt<br>│   │   ├── email_address.txt<br>│   │   ├── first_name.txt<br>│   │   ├── last_name.txt<br>│   │   ├── notes.txt<br>│   │   └── phone_number.txt<br>│   ├── secondary_category.txt<br>│   ├── secondary_first_sub_category.txt<br>│   ├── secondary_second_sub_category.txt<br>│   ├── trade_representative_contact_information<br>│   │   ├── address_line1.txt<br>│   │   ├── address_line2.txt<br>│   │   ├── address_line3.txt<br>│   │   ├── city_name.txt<br>│   │   ├── country.txt<br>│   │   ├── email_address.txt<br>│   │   ├── first_name.txt<br>│   │   ├── is_displayed_on_app_store.txt<br>│   │   ├── last_name.txt<br>│   │   ├── phone_number.txt<br>│   │   ├── postal_code.txt<br>│   │   ├── state.txt<br>│   │   └── trade_name.txt<br>│   └── zh-Hans<br>│       ├── apple_tv_privacy_policy.txt<br>│       ├── description.txt<br>│       ├── keywords.txt<br>│       ├── marketing_url.txt<br>│       ├── name.txt<br>│       ├── privacy_url.txt<br>│       ├── promotional_text.txt<br>│       ├── release_notes.txt<br>│       ├── subtitle.txt<br>│       └── support_url.txt<br>└── pem<br>    ├── development_xxx.xxx.xxx.p12<br>    ├── development_xxx.xxx.xxx.pem<br>    ├── development_xxx.xxx.xxx.pkey<br>    ├── production_xxx.xxx.xxx.p12<br>    ├── production_xxx.xxx.xxx.pem<br>    ├── production_xxx.xxx.xxx.pkey</p>
</blockquote>
<h3 id="env"><a href="#env" class="headerlink" title=".env"></a>.env</h3><p>这个文件中放入的是需要引用的环境变量。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">FASTLANE_SKIP_UPDATE_CHECK=<span class="literal">true</span></span><br><span class="line">FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT=<span class="number">120</span></span><br><span class="line"></span><br><span class="line">APPLE_ID=<span class="string">"xxxx"</span>	<span class="comment"># Apple ID 账号</span></span><br><span class="line">TEAM_ID=<span class="string">"xxxx"</span>	<span class="comment"># Apple Team ID</span></span><br><span class="line">FASTLANE_PASSWORD=<span class="string">"xxx"</span>	<span class="comment"># Apple ID 密码</span></span><br><span class="line">FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=<span class="string">"qwwe-tdpp-hdpc-fgzy"</span> <span class="comment"># Apple 应用程序特定密码，Apple ID 现在强制开启两步验证后，此密码是必须的</span></span><br><span class="line">ITC_TEAM_ID=<span class="string">"xxxx"</span>	<span class="comment"># iTunes Connect Team ID</span></span><br><span class="line"></span><br><span class="line">APP_IDENTIFIER=<span class="string">"xxx.xxx.xxx"</span></span><br><span class="line">SCHEME_NAME=<span class="string">"XXX"</span></span><br><span class="line">WORKSPACE_NAME=<span class="string">"XXX.xcworkspace"</span></span><br><span class="line">XCODEPROJ_NAME=<span class="string">"XXX.xcodeproj"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试环境</span></span><br><span class="line">DEV_APP_IDENTIFIER=<span class="string">"xxx.xxx.dev.xxx"</span></span><br><span class="line">DEV_APP_NAME=<span class="string">"XXX测试版"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正式环境</span></span><br><span class="line">PROD_APP_IDENTIFIER=<span class="string">"xxx.xxx.xxx"</span></span><br><span class="line">PROD_APP_NAME=<span class="string">"XXX"</span></span><br><span class="line"></span><br><span class="line">MATCH_GIT_BRANCH=<span class="string">"XXX"</span></span><br><span class="line"></span><br><span class="line">DELIVER_METADATA_PATH=<span class="string">"./fastlane/metadata"</span></span><br><span class="line">DOWNLOAD_METADATA_PATH=<span class="string">"./metadata"</span></span><br></pre></td></tr></table></figure>

<h3 id="Appfile"><a href="#Appfile" class="headerlink" title="Appfile"></a>Appfile</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">app_identifier <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"APP_IDENTIFIER"</span>]&#125;</span>"</span> <span class="comment"># The bundle identifier of your app</span></span><br><span class="line">apple_id <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"APPLE_ID"</span>]&#125;</span>"</span> <span class="comment"># Your Apple email address</span></span><br><span class="line"></span><br><span class="line">team_id <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"TEAM_ID"</span>]&#125;</span>"</span> <span class="comment"># Developer Portal Team ID</span></span><br><span class="line">itc_team_id <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"ITC_TEAM_ID"</span>]&#125;</span>"</span> <span class="comment"># App Store Connect Team ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># you can even provide different app identifiers, Apple IDs and team names per lane:</span></span><br><span class="line"><span class="comment"># More information: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Appfile.md</span></span><br></pre></td></tr></table></figure>

<h3 id="Deliverfile"><a href="#Deliverfile" class="headerlink" title="Deliverfile"></a>Deliverfile</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">###################### More Options ######################</span></span><br><span class="line"><span class="comment"># If you want to have even more control, check out the documentation</span></span><br><span class="line"><span class="comment"># https://docs.fastlane.tools/actions/deliver</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### Automatically generated ######################</span></span><br><span class="line"><span class="comment"># Feel free to remove the following line if you use fastlane (which you should)</span></span><br><span class="line"></span><br><span class="line">app_identifier <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"APP_IDENTIFIER"</span>]&#125;</span>"</span> <span class="comment"># The bundle identifier of your app</span></span><br><span class="line">username <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"APPLE_ID"</span>]&#125;</span>"</span> <span class="comment"># your Apple ID user</span></span><br></pre></td></tr></table></figure>

<h3 id="Fastfile"><a href="#Fastfile" class="headerlink" title="Fastfile"></a>Fastfile</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Customise this file, documentation can be found here:</span></span><br><span class="line"><span class="comment"># https://docs.fastlane.tools/actions/</span></span><br><span class="line"><span class="comment"># All available actions: https://docs.fastlane.tools/actions</span></span><br><span class="line"><span class="comment"># can also be listed using the `fastlane actions` command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change the syntax highlighting to Ruby</span></span><br><span class="line"><span class="comment"># All lines starting with a # are ignored when running `fastlane`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you want to automatically update fastlane if a new version is available:</span></span><br><span class="line"><span class="comment"># update_fastlane</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the minimum version number required.</span></span><br><span class="line"><span class="comment"># Update this, if you use features of a newer version</span></span><br><span class="line">fastlane_require <span class="string">"spaceship"</span></span><br><span class="line"></span><br><span class="line">fastlane_version <span class="string">"2.89.0"</span></span><br><span class="line"></span><br><span class="line">default_platform <span class="symbol">:ios</span></span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  base_path = Pathname::new(File::dirname(__FILE_<span class="number">_</span>)).realpath.parent</span><br><span class="line"></span><br><span class="line">  before_all <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."</span></span><br><span class="line">    <span class="comment"># cocoapods</span></span><br><span class="line">    <span class="comment"># carthage</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"生成 adhoc 测试版本，提交到蒲公英，参数 =&gt; type:'adhoc/development'，默认adhoc"</span></span><br><span class="line">  lane <span class="symbol">:pgyer_beta</span> <span class="keyword">do</span> <span class="params">|options|</span></span><br><span class="line"></span><br><span class="line">    type = String(options[<span class="symbol">:type</span>] <span class="params">||</span> <span class="string">"adhoc"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> type == <span class="string">"adhoc"</span></span><br><span class="line">      export_method = <span class="string">"ad-hoc"</span></span><br><span class="line">      match_type = <span class="string">"adhoc"</span></span><br><span class="line">      match_type_name = <span class="string">"AdHoc"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      export_method = <span class="string">"development"</span></span><br><span class="line">      match_type = <span class="string">"development"</span></span><br><span class="line">      match_type_name = <span class="string">"Development"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    git_reversion = sh(<span class="string">"git log -1 --pretty=format:'%h'"</span>)</span><br><span class="line">    version_number = get_info_plist_value(<span class="symbol">path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>/Info.plist"</span>, <span class="symbol">key:</span> <span class="string">"CFBundleShortVersionString"</span>)</span><br><span class="line">    build_number = number_of_commits(<span class="symbol">all:</span> <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># git log</span></span><br><span class="line">    git_log = sh(<span class="string">"git log --no-merges -1 --pretty=format:'# %ai%n# %B by %an'"</span>)</span><br><span class="line">    build_time = Time.new.strftime(<span class="string">"%Y-%m-%d_%H.%M.%S"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出目录</span></span><br><span class="line">    output_dir = <span class="string">"<span class="subst">#&#123;base_path&#125;</span>/Output/adhoc/<span class="subst">#&#123;build_time&#125;</span>"</span></span><br><span class="line">    output_name = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>_v<span class="subst">#&#123;version_number&#125;</span>(<span class="subst">#&#123;build_number&#125;</span>).ipa"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新badge</span></span><br><span class="line">    add_badge(<span class="symbol">shield:</span> <span class="string">"<span class="subst">#&#123;version_number&#125;</span>-<span class="subst">#&#123;build_number&#125;</span>-orange"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新 build number</span></span><br><span class="line">    increment_build_number(<span class="symbol">build_number:</span> build_number)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新 product bundle identifier</span></span><br><span class="line">    update_app_identifier(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">plist_path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>/Info.plist"</span>,</span><br><span class="line">      <span class="symbol">app_identifier:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_APP_IDENTIFIER"</span>]&#125;</span>"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 更新display名称，PS: 不能用来更新bundle identifier</span></span><br><span class="line">    update_info_plist(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">plist_path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>/Info.plist"</span>,</span><br><span class="line">      <span class="symbol">block:</span> proc <span class="keyword">do</span> <span class="params">|plist|</span></span><br><span class="line">        plist[<span class="string">"CFBundleDisplayName"</span>] = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_APP_NAME"</span>]&#125;</span>"</span></span><br><span class="line">        plist[<span class="string">"CFBundleName"</span>] = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_APP_NAME"</span>]&#125;</span>"</span></span><br><span class="line">        plist[<span class="string">"GIT_REVISION"</span>] = git_reversion</span><br><span class="line">        plist[<span class="string">"BUILD_TIME"</span>] = build_time</span><br><span class="line">        plist[<span class="string">"APP_CHANNEL"</span>] = <span class="string">"pgyer"</span></span><br><span class="line">        urlScheme = plist[<span class="string">"CFBundleURLTypes"</span>].find&#123;<span class="params">|scheme|</span> scheme[<span class="string">"CFBundleURLName"</span>] == <span class="string">"weixin"</span>&#125;</span><br><span class="line">        urlScheme[<span class="symbol">:CFBundleURLSchemes</span>] = [<span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_WEIXIN_APPID"</span>]&#125;</span>"</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新Notification Service Extension plist</span></span><br><span class="line">    update_app_identifier(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">plist_path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"NOTIFICATIONSERVICE_SCHEME_NAME"</span>]&#125;</span>/Info.plist"</span>,</span><br><span class="line">      <span class="symbol">app_identifier:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    match(</span><br><span class="line">      <span class="symbol">type:</span> <span class="string">"<span class="subst">#&#123;match_type&#125;</span>"</span>, </span><br><span class="line">      <span class="symbol">app_identifier:</span> [<span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_APP_IDENTIFIER"</span>]&#125;</span>"</span>, <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span>], </span><br><span class="line">      <span class="symbol">readonly:</span> <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    gym(</span><br><span class="line">      <span class="symbol">export_method:</span> <span class="string">"<span class="subst">#&#123;export_method&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">include_bitcode:</span> <span class="literal">false</span>,</span><br><span class="line">      <span class="symbol">scheme:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>"</span>, </span><br><span class="line">      <span class="symbol">configuration:</span> <span class="string">"AdHoc"</span>,</span><br><span class="line">      <span class="symbol">export_options:</span> &#123;</span><br><span class="line">        <span class="symbol">compileBitcode:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="symbol">uploadBitcode:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="symbol">provisioningProfiles:</span> &#123;</span><br><span class="line">          <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_APP_IDENTIFIER"</span>]&#125;</span>"</span> =&gt; <span class="string">"match <span class="subst">#&#123;match_type_name&#125;</span> <span class="subst">#&#123;ENV[<span class="string">"DEV_APP_IDENTIFIER"</span>]&#125;</span>"</span>,</span><br><span class="line">          <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span> =&gt; <span class="string">"match <span class="subst">#&#123;match_type_name&#125;</span> <span class="subst">#&#123;ENV[<span class="string">"DEV_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="symbol">output_directory:</span> output_dir,</span><br><span class="line">      <span class="symbol">output_name:</span> output_name</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># pilot</span></span><br><span class="line">    upload_ipa(<span class="symbol">type:</span> <span class="string">'gxm'</span>, <span class="symbol">log:</span> git_log)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上传 dsym 文件到 bugly</span></span><br><span class="line">    bugly(<span class="symbol">app_id:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_BUGLY_APPID"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">app_key:</span><span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_BUGLY_APPKEY"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">symbol_type:</span> <span class="number">2</span>,</span><br><span class="line">      <span class="symbol">bundle_id:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_APP_IDENTIFIER"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">product_version:</span> <span class="string">"<span class="subst">#&#123;version_number&#125;</span>(<span class="subst">#&#123;build_number&#125;</span>)"</span>,</span><br><span class="line">      <span class="symbol">channel:</span> <span class="string">'pgyer'</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    copy_dsym(<span class="symbol">tpye:</span> <span class="string">'adhoc'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"生成 adhoc 预发版本，提交到蒲公英"</span></span><br><span class="line">  lane <span class="symbol">:pgyer_release</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    git_reversion = sh(<span class="string">"git log -1 --pretty=format:'%h'"</span>)</span><br><span class="line">    build_time = Time.new.strftime(<span class="string">"%Y-%m-%d_%H.%M.%S"</span>)</span><br><span class="line">    version_number = get_info_plist_value(<span class="symbol">path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>/Info.plist"</span>, <span class="symbol">key:</span> <span class="string">"CFBundleShortVersionString"</span>)</span><br><span class="line">    build_number = number_of_commits(<span class="symbol">all:</span> <span class="literal">false</span>)</span><br><span class="line">    git_log = sh(<span class="string">"git log --no-merges -1 --pretty=format:'# %ai%n# %B by %an'"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出目录</span></span><br><span class="line">    output_dir = <span class="string">"<span class="subst">#&#123;base_path&#125;</span>/Output/release/<span class="subst">#&#123;build_time&#125;</span>"</span></span><br><span class="line">    output_name = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>_v<span class="subst">#&#123;version_number&#125;</span>(<span class="subst">#&#123;build_number&#125;</span>).ipa"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新badge</span></span><br><span class="line">    add_badge(<span class="symbol">shield:</span> <span class="string">"<span class="subst">#&#123;version_number&#125;</span>-<span class="subst">#&#123;build_number&#125;</span>-orange"</span>, <span class="symbol">alpha:</span> <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新 build number</span></span><br><span class="line">    increment_build_number(<span class="symbol">build_number:</span> build_number)</span><br><span class="line"></span><br><span class="line">    update_app_identifier(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">plist_path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>/Info.plist"</span>,</span><br><span class="line">      <span class="symbol">app_identifier:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    update_info_plist(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">plist_path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>/Info.plist"</span>,</span><br><span class="line">      <span class="symbol">block:</span> proc <span class="keyword">do</span> <span class="params">|plist|</span></span><br><span class="line">        plist[<span class="string">"CFBundleDisplayName"</span>] = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_NAME"</span>]&#125;</span>"</span></span><br><span class="line">        plist[<span class="string">"CFBundleName"</span>] = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_NAME"</span>]&#125;</span>"</span></span><br><span class="line">        plist[<span class="string">"GIT_REVISION"</span>] = git_reversion</span><br><span class="line">        plist[<span class="string">"BUILD_TIME"</span>] = build_time</span><br><span class="line">        plist[<span class="string">"APP_CHANNEL"</span>] = <span class="string">"pgyer"</span></span><br><span class="line">        urlScheme = plist[<span class="string">"CFBundleURLTypes"</span>].find&#123;<span class="params">|scheme|</span> scheme[<span class="string">"CFBundleURLName"</span>] == <span class="string">"weixin"</span>&#125;</span><br><span class="line">        urlScheme[<span class="symbol">:CFBundleURLSchemes</span>] = [<span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_WEIXIN_APPID"</span>]&#125;</span>"</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新Notification Service Extension plist</span></span><br><span class="line">    update_app_identifier(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">plist_path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"NOTIFICATIONSERVICE_SCHEME_NAME"</span>]&#125;</span>/Info.plist"</span>,</span><br><span class="line">      <span class="symbol">app_identifier:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    match(</span><br><span class="line">      <span class="symbol">type:</span> <span class="string">"adhoc"</span>, </span><br><span class="line">      <span class="symbol">app_identifier:</span> [<span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span>, <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span>], </span><br><span class="line">      <span class="symbol">readonly:</span> <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    update_project_provisioning(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">target_filter:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">profile:</span>ENV[<span class="string">"sigh_<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>_adhoc_profile-path"</span>],</span><br><span class="line">      <span class="symbol">build_configuration:</span> <span class="string">"Release"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    update_project_provisioning(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">target_filter:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"NOTIFICATIONSERVICE_SCHEME_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">profile:</span>ENV[<span class="string">"sigh_<span class="subst">#&#123;ENV[<span class="string">"PROD_NOTIFICATION_SERVICE"</span>]&#125;</span>_adhoc_profile-path"</span>],</span><br><span class="line">      <span class="symbol">build_configuration:</span> <span class="string">"Release"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    gym(</span><br><span class="line">      <span class="symbol">export_method:</span> <span class="string">"ad-hoc"</span>, </span><br><span class="line">      <span class="symbol">scheme:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>"</span>, </span><br><span class="line">      <span class="symbol">configuration:</span> <span class="string">"Release"</span>,</span><br><span class="line">      <span class="symbol">export_options:</span> &#123;</span><br><span class="line">        <span class="symbol">compileBitcode:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="symbol">uploadBitcode:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="symbol">provisioningProfiles:</span> &#123;</span><br><span class="line">          <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span> =&gt; <span class="string">"match AdHoc <span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span>,</span><br><span class="line">          <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span> =&gt; <span class="string">"match AdHoc <span class="subst">#&#123;ENV[<span class="string">"PROD_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="symbol">output_directory:</span> output_dir,</span><br><span class="line">      <span class="symbol">output_name:</span> output_name</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># pilot</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 上传蒲公英</span></span><br><span class="line">    upload_ipa(<span class="symbol">type:</span> <span class="string">'gxm'</span>, <span class="symbol">log:</span> <span class="string">"App Store 包上传：<span class="subst">#&#123;version_number&#125;</span>(<span class="subst">#&#123;build_number&#125;</span>)"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上传 dsym 文件到 bugly</span></span><br><span class="line">    bugly(<span class="symbol">app_id:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_BUGLY_APPID"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">app_key:</span><span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_BUGLY_APPKEY"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">symbol_type:</span> <span class="number">2</span>,</span><br><span class="line">      <span class="symbol">bundle_id:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">product_version:</span> <span class="string">"<span class="subst">#&#123;version_number&#125;</span>(<span class="subst">#&#123;build_number&#125;</span>)"</span>,</span><br><span class="line">      <span class="symbol">channel:</span> <span class="string">'pgyer'</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    copy_dsym(<span class="symbol">tpye:</span> <span class="string">'release'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"生成 appstore 版本，发布到 App Store"</span></span><br><span class="line">  lane <span class="symbol">:appstore_release</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    git_reversion = sh(<span class="string">"git log -1 --pretty=format:'%h'"</span>)</span><br><span class="line">    build_time = Time.new.strftime(<span class="string">"%Y-%m-%d_%H.%M.%S"</span>)</span><br><span class="line">    version_number = get_info_plist_value(<span class="symbol">path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>/Info.plist"</span>, <span class="symbol">key:</span> <span class="string">"CFBundleShortVersionString"</span>)</span><br><span class="line">    build_number = number_of_commits(<span class="symbol">all:</span> <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出目录</span></span><br><span class="line">    output_dir = <span class="string">"<span class="subst">#&#123;base_path&#125;</span>/Output/appstore/<span class="subst">#&#123;build_time&#125;</span>"</span></span><br><span class="line">    output_name = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>_v<span class="subst">#&#123;version_number&#125;</span>(<span class="subst">#&#123;build_number&#125;</span>).ipa"</span></span><br><span class="line"></span><br><span class="line">    clear_derived_data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新 build number</span></span><br><span class="line">    increment_build_number(<span class="symbol">build_number:</span> build_number)</span><br><span class="line"></span><br><span class="line">    update_app_identifier(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">plist_path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>/Info.plist"</span>,</span><br><span class="line">      <span class="symbol">app_identifier:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    update_info_plist(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">plist_path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>/Info.plist"</span>,</span><br><span class="line">      <span class="symbol">block:</span> proc <span class="keyword">do</span> <span class="params">|plist|</span></span><br><span class="line">        plist[<span class="string">"CFBundleDisplayName"</span>] = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_NAME"</span>]&#125;</span>"</span></span><br><span class="line">        plist[<span class="string">"CFBundleName"</span>] = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_NAME"</span>]&#125;</span>"</span></span><br><span class="line">        plist[<span class="string">"GIT_REVISION"</span>] = git_reversion</span><br><span class="line">        plist[<span class="string">"BUILD_TIME"</span>] = build_time</span><br><span class="line">        plist[<span class="string">"APP_CHANNEL"</span>] = <span class="string">"appstore"</span></span><br><span class="line">        urlScheme = plist[<span class="string">"CFBundleURLTypes"</span>].find&#123;<span class="params">|scheme|</span> scheme[<span class="string">"CFBundleURLName"</span>] == <span class="string">"weixin"</span>&#125;</span><br><span class="line">        urlScheme[<span class="symbol">:CFBundleURLSchemes</span>] = [<span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_WEIXIN_APPID"</span>]&#125;</span>"</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新Notification Service Extension plist</span></span><br><span class="line">    update_app_identifier(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">plist_path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"NOTIFICATIONSERVICE_SCHEME_NAME"</span>]&#125;</span>/Info.plist"</span>,</span><br><span class="line">      <span class="symbol">app_identifier:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    match(</span><br><span class="line">      <span class="symbol">type:</span> <span class="string">"appstore"</span>, </span><br><span class="line">      <span class="symbol">app_identifier:</span> [<span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span>, <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span>], </span><br><span class="line">      <span class="symbol">readonly:</span> <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    update_project_provisioning(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">target_filter:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">profile:</span>ENV[<span class="string">"sigh_<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>_appstore_profile-path"</span>],</span><br><span class="line">      <span class="symbol">build_configuration:</span> <span class="string">"AppStore"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    update_project_provisioning(</span><br><span class="line">      <span class="symbol">xcodeproj:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"XCODEPROJ_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">target_filter:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"NOTIFICATIONSERVICE_SCHEME_NAME"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">profile:</span>ENV[<span class="string">"sigh_<span class="subst">#&#123;ENV[<span class="string">"PROD_NOTIFICATION_SERVICE"</span>]&#125;</span>_appstore_profile-path"</span>],</span><br><span class="line">      <span class="symbol">build_configuration:</span> <span class="string">"AppStore"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># snapshot</span></span><br><span class="line"></span><br><span class="line">    gym(</span><br><span class="line">      <span class="symbol">export_method:</span> <span class="string">"app-store"</span>, </span><br><span class="line">      <span class="symbol">scheme:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>"</span>, </span><br><span class="line">      <span class="symbol">configuration:</span> <span class="string">"AppStore"</span>,</span><br><span class="line">      <span class="symbol">export_options:</span> &#123;</span><br><span class="line">        <span class="symbol">provisioningProfiles:</span> &#123;</span><br><span class="line">          <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span> =&gt; <span class="string">"match AppStore <span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span>,</span><br><span class="line">          <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span> =&gt; <span class="string">"match AppStore <span class="subst">#&#123;ENV[<span class="string">"PROD_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="symbol">output_directory:</span> output_dir,</span><br><span class="line">      <span class="symbol">output_name:</span> output_name</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上传 dsym 文件到 bugly</span></span><br><span class="line">    bugly(<span class="symbol">app_id:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_BUGLY_APPID"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">app_key:</span><span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_BUGLY_APPKEY"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">symbol_type:</span> <span class="number">2</span>,</span><br><span class="line">      <span class="symbol">bundle_id:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">product_version:</span> <span class="string">"<span class="subst">#&#123;version_number&#125;</span>(<span class="subst">#&#123;build_number&#125;</span>)"</span>,</span><br><span class="line">      <span class="symbol">channel:</span> <span class="string">'appstore'</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上传蒲公英</span></span><br><span class="line">    upload_ipa(<span class="symbol">type:</span> <span class="string">'gxm'</span>, <span class="symbol">log:</span> <span class="string">"App Store 包上传：<span class="subst">#&#123;version_number&#125;</span>(<span class="subst">#&#123;build_number&#125;</span>)"</span>)</span><br><span class="line"></span><br><span class="line">    copy_dsym(<span class="symbol">type:</span> <span class="string">'appstore'</span>)</span><br><span class="line"></span><br><span class="line">    deliver(</span><br><span class="line">      <span class="symbol">metadata_path:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DELIVER_METADATA_PATH"</span>]&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">force:</span> <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># frameit</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"上传 AppStore DSYM 文件到 Bugly，参数 =&gt; version:[latest]"</span></span><br><span class="line">  lane <span class="symbol">:upload_appstore_dsyms</span> <span class="keyword">do</span> <span class="params">|options|</span></span><br><span class="line">    version = String(options[<span class="symbol">:version</span>] <span class="params">||</span> <span class="string">"latest"</span>)</span><br><span class="line">    download_dsyms(<span class="symbol">version:</span> version)</span><br><span class="line">    dsym_paths = lane_context[SharedValues::DSYM_PATHS]</span><br><span class="line">    <span class="keyword">for</span> dsym_path <span class="keyword">in</span> dsym_paths</span><br><span class="line">      <span class="comment"># 解析DSYM文件版本</span></span><br><span class="line">      split_strs = dsym_path.split(<span class="regexp">/\//</span>).last.split(<span class="regexp">/-/</span>)</span><br><span class="line">      version_number = split_strs[<span class="number">1</span>]</span><br><span class="line">      build_number = split_strs[<span class="number">2</span>].split(<span class="regexp">/\./</span>)[<span class="number">0</span>]</span><br><span class="line">      <span class="comment"># 上传 dsym 文件到 bugly</span></span><br><span class="line">      bugly(<span class="symbol">app_id:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_BUGLY_APPID"</span>]&#125;</span>"</span>,</span><br><span class="line">        <span class="symbol">app_key:</span><span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_BUGLY_APPKEY"</span>]&#125;</span>"</span>,</span><br><span class="line">        <span class="symbol">symbol_type:</span> <span class="number">2</span>,</span><br><span class="line">        <span class="symbol">bundle_id:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span>,</span><br><span class="line">        <span class="symbol">product_version:</span> <span class="string">"<span class="subst">#&#123;version_number&#125;</span>(<span class="subst">#&#123;build_number&#125;</span>)"</span>,</span><br><span class="line">        <span class="symbol">channel:</span> <span class="string">'appstore'</span>,</span><br><span class="line">        <span class="symbol">dsym:</span> dsym_path</span><br><span class="line">      )</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    clean_build_artifacts</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"手动批量添加设备到profile"</span></span><br><span class="line">  lane <span class="symbol">:add_devices_manual</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    UI.header <span class="string">"Add Device"</span></span><br><span class="line">    device_hash = &#123;&#125;</span><br><span class="line">    device_sum = UI.input(<span class="string">"Device Sum: "</span>).to_i</span><br><span class="line">    <span class="keyword">if</span> device_sum == <span class="number">0</span></span><br><span class="line">      <span class="keyword">next</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; device_sum <span class="keyword">do</span></span><br><span class="line">      device_name = UI.input(<span class="string">"Device Name: "</span>)</span><br><span class="line">      device_udid = UI.input(<span class="string">"Device UDID: "</span>)</span><br><span class="line">      device_hash[device_name] = device_udid</span><br><span class="line">      index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    register_devices(</span><br><span class="line">        <span class="symbol">devices:</span> device_hash</span><br><span class="line">    )</span><br><span class="line">    refresh_profiles</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"文件批量添加设备到profile"</span></span><br><span class="line">  lane <span class="symbol">:add_devices_file</span> <span class="keyword">do</span></span><br><span class="line">    register_devices(</span><br><span class="line">      <span class="symbol">devices_file:</span> <span class="string">"fastlane/devices.txt"</span></span><br><span class="line">    )</span><br><span class="line">    refresh_profiles</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"批量导出设备"</span></span><br><span class="line">  lane <span class="symbol">:export_devices</span> <span class="keyword">do</span></span><br><span class="line">    password = UI.password(<span class="string">"输入 <span class="subst">#&#123;ENV[<span class="string">"APPLE_ID"</span>]&#125;</span> 账号密码: "</span>)</span><br><span class="line">    Spaceship::Portal.login(<span class="string">"<span class="subst">#&#123;ENV[<span class="string">"APPLE_ID"</span>]&#125;</span>"</span>, password)</span><br><span class="line">    Spaceship::Portal.select_team(<span class="symbol">team_id:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"TEAM_ID"</span>]&#125;</span>"</span>)</span><br><span class="line">    devices = Spaceship.device.all</span><br><span class="line">    File.open(<span class="string">"<span class="subst">#&#123;base_path&#125;</span>/fastlane/devices.txt"</span>, <span class="string">"wb"</span>) <span class="keyword">do</span> <span class="params">|f|</span></span><br><span class="line">      f.puts <span class="string">"Device ID\tDevice Name"</span></span><br><span class="line">      devices.each <span class="keyword">do</span> <span class="params">|device|</span></span><br><span class="line">        f.puts <span class="string">"<span class="subst">#&#123;device.udid&#125;</span>\t<span class="subst">#&#123;device.name&#125;</span>"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># You can define as many lanes as you want</span></span><br><span class="line">  desc <span class="string">"更新 provisioning profiles"</span></span><br><span class="line">  lane <span class="symbol">:refresh_profiles</span> <span class="keyword">do</span></span><br><span class="line">    match(</span><br><span class="line">      <span class="symbol">type:</span> <span class="string">"development"</span>,</span><br><span class="line">      <span class="symbol">force:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">force_for_new_devices:</span> <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">    match(</span><br><span class="line">      <span class="symbol">type:</span> <span class="string">"adhoc"</span>,</span><br><span class="line">      <span class="symbol">force:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">force_for_new_devices:</span> <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">    match(</span><br><span class="line">      <span class="symbol">type:</span> <span class="string">"appstore"</span>,</span><br><span class="line">      <span class="symbol">force:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">force_for_new_devices:</span> <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"同步 certificates 和 provisioning profiles"</span></span><br><span class="line">  lane <span class="symbol">:sync_cert_profiles</span> <span class="keyword">do</span></span><br><span class="line">    match(</span><br><span class="line">      <span class="symbol">type:</span> <span class="string">"development"</span>,</span><br><span class="line">      <span class="symbol">readonly:</span> <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">    match(</span><br><span class="line">      <span class="symbol">type:</span> <span class="string">"adhoc"</span>,</span><br><span class="line">      <span class="symbol">readonly:</span> <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">    match(</span><br><span class="line">      <span class="symbol">type:</span> <span class="string">"appstore"</span>,</span><br><span class="line">      <span class="symbol">readonly:</span> <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"移除本地描述文件"</span></span><br><span class="line">  lane <span class="symbol">:remove_local_profiles</span> <span class="keyword">do</span></span><br><span class="line">    app_identifiers = [<span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_APP_IDENTIFIER"</span>]&#125;</span>"</span>, <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span>, <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span>, <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_NOTIFICATION_SERVICE"</span>]&#125;</span>"</span>]</span><br><span class="line">    types = [<span class="string">"development"</span>, <span class="string">"adhoc"</span>, <span class="string">"appstore"</span>]</span><br><span class="line">    app_identifiers.each <span class="keyword">do</span> <span class="params">|app_identifier|</span></span><br><span class="line">      types.each <span class="keyword">do</span> <span class="params">|type|</span></span><br><span class="line">        remove_provisioning_profile(<span class="symbol">app_identifier:</span> app_identifier, <span class="symbol">type:</span> type)    </span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"revoke 证书和描述文件"</span></span><br><span class="line">  private_lane <span class="symbol">:revoke_cert_profiles</span> <span class="keyword">do</span></span><br><span class="line">    ENV[<span class="string">"MATCH_SKIP_CONFIRMATION"</span>] = <span class="string">"1"</span></span><br><span class="line">    sh(<span class="string">"fastlane match nuke development"</span>)</span><br><span class="line">    sh(<span class="string">"fastlane match nuke distribution"</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"生成APNs证书"</span></span><br><span class="line">  lane <span class="symbol">:generate_apns_cert</span> <span class="keyword">do</span></span><br><span class="line">    pem(</span><br><span class="line">      <span class="symbol">development:</span> <span class="literal">true</span>, </span><br><span class="line">      <span class="symbol">force:</span> <span class="literal">true</span>, </span><br><span class="line">      <span class="symbol">app_identifier:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_APP_IDENTIFIER"</span>]&#125;</span>"</span>, </span><br><span class="line">      <span class="symbol">p12_password:</span> <span class="string">"GXM"</span>, <span class="symbol">output_path:</span> <span class="string">"fastlane/pem"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pem(</span><br><span class="line">      <span class="symbol">development:</span> <span class="literal">false</span>, </span><br><span class="line">      <span class="symbol">force:</span> <span class="literal">true</span>, </span><br><span class="line">      <span class="symbol">app_identifier:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"DEV_APP_IDENTIFIER"</span>]&#125;</span>"</span>, </span><br><span class="line">      <span class="symbol">p12_password:</span> <span class="string">"GXM"</span>, <span class="symbol">output_path:</span> <span class="string">"fastlane/pem"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pem(</span><br><span class="line">      <span class="symbol">development:</span> <span class="literal">true</span>, </span><br><span class="line">      <span class="symbol">force:</span> <span class="literal">true</span>, </span><br><span class="line">      <span class="symbol">app_identifier:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span>, </span><br><span class="line">      <span class="symbol">p12_password:</span> <span class="string">"GXM"</span>, <span class="symbol">output_path:</span> <span class="string">"fastlane/pem"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pem(</span><br><span class="line">      <span class="symbol">development:</span> <span class="literal">false</span>, </span><br><span class="line">      <span class="symbol">force:</span> <span class="literal">true</span>, </span><br><span class="line">      <span class="symbol">app_identifier:</span> <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"PROD_APP_IDENTIFIER"</span>]&#125;</span>"</span>, </span><br><span class="line">      <span class="symbol">p12_password:</span> <span class="string">"GXM"</span>, <span class="symbol">output_path:</span> <span class="string">"fastlane/pem"</span></span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"同步 metadata"</span></span><br><span class="line">  lane <span class="symbol">:sync_metadata</span> <span class="keyword">do</span></span><br><span class="line">    ENV[<span class="string">"DELIVER_FORCE_OVERWRITE"</span>] = <span class="string">"1"</span></span><br><span class="line">    sh(<span class="string">"fastlane deliver download_metadata --metadata_path <span class="subst">#&#123;ENV[<span class="string">"DOWNLOAD_METADATA_PATH"</span>]&#125;</span>"</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"拷贝 dSYM"</span></span><br><span class="line">  private_lane <span class="symbol">:copy_dsym</span> <span class="keyword">do</span> <span class="params">|options|</span></span><br><span class="line">    type = String(options[<span class="symbol">:type</span>] <span class="params">||</span> <span class="string">"adhoc"</span>)</span><br><span class="line">    dsym_path = lane_context[SharedValues::DSYM_OUTPUT_PATH]</span><br><span class="line">    share_dir = File.join(ENV[<span class="string">'HOME'</span>],<span class="string">'/Public/iOS'</span>, <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"SCHEME_NAME"</span>]&#125;</span>"</span>, <span class="string">"<span class="subst">#&#123;type&#125;</span>"</span>)</span><br><span class="line">    FileUtils.mkdir_p(share_dir)</span><br><span class="line">    FileUtils.cp_r(File.join(dsym_path), share_dir)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"上传 ipa，type: [pgyer,gxm], log: desc"</span></span><br><span class="line">  private_lane <span class="symbol">:upload_ipa</span> <span class="keyword">do</span> <span class="params">|options|</span></span><br><span class="line">    type = options[<span class="symbol">:type</span>] <span class="params">||</span> <span class="string">'pgyer'</span></span><br><span class="line">    log = options[<span class="symbol">:log</span>] <span class="params">||</span> <span class="string">''</span></span><br><span class="line">    log = String</span><br><span class="line">    <span class="keyword">if</span> type == <span class="string">"pgyer"</span></span><br><span class="line">      pgyer(</span><br><span class="line">        <span class="symbol">api_key:</span> <span class="string">'0098b94391ff417d86837343597789a9'</span>,</span><br><span class="line">        <span class="symbol">user_key:</span> <span class="string">'4ca1278171177f624ba3f3cc39eb2d73'</span>,</span><br><span class="line">        <span class="symbol">update_description:</span> log</span><br><span class="line">      )</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      sh(<span class="string">"curl -X 'POST' 'https://fabu.guoxiaomei.com/api/apps/5dca5121f3920d001f71e42d/upload' -H 'Content-Type: multipart/form-data' -H 'accept: application/json' -H 'apikey: 07a0840834294e7b89c41ab9c302c852' -F 'file=@<span class="subst">#&#123;lane_context[SharedValues::IPA_OUTPUT_PATH]&#125;</span>'"</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  after_all <span class="keyword">do</span> <span class="params">|lane|</span></span><br><span class="line">    <span class="comment"># This block is called, only if the executed lane was successful</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># slack(</span></span><br><span class="line">    <span class="comment">#   message: "Successfully deployed new App Update."</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  error <span class="keyword">do</span> <span class="params">|lane, exception|</span></span><br><span class="line">    <span class="comment"># slack(</span></span><br><span class="line">    <span class="comment">#   message: exception.message,</span></span><br><span class="line">    <span class="comment">#   success: false</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md</span></span><br><span class="line"><span class="comment"># All available actions: https://docs.fastlane.tools/actions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fastlane reports which actions are used. No personal data is recorded. </span></span><br><span class="line"><span class="comment"># Learn more at https://github.com/fastlane/fastlane#metrics</span></span><br></pre></td></tr></table></figure>

<p>以上 fastlane 满足基本的功能需求。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>fastlane</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法说明</title>
    <url>/2014/10/12/Markdown-syntax/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p><code>行尾2空格 + 1回车</code> = 换行<br><code>连续2回车</code> = 空行分段<br><code>*斜体*</code><br><code>**粗体**</code><br><code>4空格</code> = 代码块<br><code>&gt;</code> = 引用<br><code>-,*,+</code> = 无序列表<br><code>1.</code> = 有序列表<br><code>&lt;http://foo.com&gt;</code>  = 链接网址<br><code>[文字](http://url)</code> = 链接文字<br><code>![说明](http://imgurl)</code> = 图片  </p>
<a id="more"></a>
<h2 id="详细用法"><a href="#详细用法" class="headerlink" title="详细用法"></a>详细用法</h2><p><strong>声明：</strong> 这份文档派生(fork)于<a href="http://markdown.tw/" target="_blank" rel="noopener">繁体中文版</a>，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href="http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md" target="_blank" rel="noopener">查看它的源文件</a>。「繁体中文版的原始文件可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md" target="_blank" rel="noopener">查看这里</a> 。」–By @<a href="http://twitter.com/riku" target="_blank" rel="noopener">riku</a></p>
<p><strong>注：</strong> 本项目托管于 <a href="http://gitcafe.com/riku/Markdown-Syntax-CN/" target="_blank" rel="noopener">GitCafe</a>上，请通过”派生”和”合并请求”来帮忙改进本项目。</p>
<h1 id="Markdown-语法说明-简体中文版-点击查看快速入门"><a href="#Markdown-语法说明-简体中文版-点击查看快速入门" class="headerlink" title="Markdown 语法说明 (简体中文版) / (点击查看快速入门)"></a>Markdown 语法说明 (简体中文版) / (<a href="./basic.html">点击查看快速入门</a>)</h1><ul>
<li><a href="#overview">概述</a><ul>
<li><a href="#philosophy">宗旨</a></li>
<li><a href="#html">兼容 HTML</a></li>
<li><a href="#autoescape">特殊字符自动转换</a></li>
</ul>
</li>
<li><a href="#block">区块元素</a><ul>
<li><a href="#p">段落和换行</a></li>
<li><a href="#header">标题</a></li>
<li><a href="#blockquote">区块引用</a></li>
<li><a href="#list">列表</a></li>
<li><a href="#precode">代码区块</a></li>
<li><a href="#hr">分隔线</a></li>
</ul>
</li>
<li><a href="#span">区段元素</a><ul>
<li><a href="#link">链接</a></li>
<li><a href="#em">强调</a></li>
<li><a href="#code">代码</a></li>
<li><a href="#img">图片</a></li>
</ul>
</li>
<li><a href="#misc">其它</a><ul>
<li><a href="#backslash">反斜杠</a></li>
<li><a href="#autolink">自动链接</a></li>
</ul>
</li>
<li><a href="#acknowledgement">感谢</a></li>
<li><a href="#editor">Markdown 免费编辑器</a></li>
</ul>
<hr>
<h2 id="overview">概述</h2>

<h3 id="philosophy">宗旨</h3>

<p>Markdown 的目标是实现「易读易写」。</p>
<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 [Setext] <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">1</a>、[atx] <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">2</a>、[Textile] <a href="http://textism.com/tools/textile/" target="_blank" rel="noopener">3</a>、[reStructuredText] <a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="noopener">4</a>、[Grutatext] <a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="noopener">5</a> 和 [EtText] <a href="http://ettext.taint.org/doc/" target="_blank" rel="noopener">6</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p>
<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>
<h3 id="html">兼容 HTML</h3>

<p>Markdown 语法的目标是：成为一种适用于网络的<em>书写</em>语言。</p>
<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想<em>不是</em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种<em>发布</em>的格式，Markdown 是一种<em>书写</em>的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>
<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>
<p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p>
<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>
<pre><code>这是一个普通段落。

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

这是另一个普通段落。</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p>
<p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>
<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>
<h3 id="autoescape">特殊字符自动转换</h3>

<p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>
<p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p>
<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre><p>你必须要把网址转换写为：</p>
<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p>
<p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。</p>
<p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p>
<pre><code>&amp;copy;</code></pre><p>Markdown 会保留它不动。而若你写：</p>
<pre><code>AT&amp;T</code></pre><p>Markdown 就会将它转为：</p>
<pre><code>AT&amp;amp;T</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="#html">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p>
<pre><code>4 &lt; 5</code></pre><p>Markdown 将会把它转换为：</p>
<pre><code>4 &amp;lt; 5</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p>
<hr>
<h2 id="block">区块元素</h2>


<h3 id="p">段落和换行</h3>

<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>
<p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p>
<p>如果你<em>确实</em>想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p>
<p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="#blockquote">区块引用</a> 和多段落的 <a href="#list">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>
<h3 id="header">标题</h3>

<p>Markdown 支持两种标题的语法，类 [Setext] <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">1</a> 和类 [atx] <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">2</a> 形式。</p>
<p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p>
<pre><code>This is an H1
=============

This is an H2
-------------</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>
<p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p>
<pre><code># 这是 H1

## 这是 H2

###### 这是 H6</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>
<pre><code># 这是 H1 #

## 这是 H2 ##

### 这是 H3 ######</code></pre><h3 id="blockquote">区块引用 Blockquotes</h3>

<p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt;
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p>
<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<pre><code>&gt; ## 这是一个标题。
&gt;
&gt; 1.   这是第一行列表项。
&gt; 2.   这是第二行列表项。
&gt;
&gt; 给出一些例子代码：
&gt;
&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p>
<h3 id="list">列表</h3>

<p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号、加号或是减号作为列表标记：</p>
<pre><code>*   Red
*   Green
*   Blue</code></pre><p>等同于：</p>
<pre><code>+   Red
+   Green
+   Blue</code></pre><p>也等同于：</p>
<pre><code>-   Red
-   Green
-   Blue</code></pre><p>有序列表则使用数字接着一个英文句点：</p>
<pre><code>1.  Bird
2.  McHale
3.  Parish</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>
<pre><code>&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;</code></pre><p>如果你的列表标记写成：</p>
<pre><code>1.  Bird
1.  McHale
1.  Parish</code></pre><p>或甚至是：</p>
<pre><code>3. Bird
1. McHale
8. Parish</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>
<p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p>
<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>
<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>
<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>但是如果你懒，那也行：</p>
<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code><br>标签包起来，举例来说：</p>
<pre><code>*   Bird
*   Magic</code></pre><p>会被转换为：</p>
<pre><code>&lt;ul&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;Magic&lt;/li&gt;
&lt;/ul&gt;</code></pre><p>但是这个：</p>
<pre><code>*   Bird

*   Magic</code></pre><p>会被转换为：</p>
<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p>
<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>
<pre><code>*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You&apos;re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.</code></pre><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p>
<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.</code></pre><p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p>
<pre><code>*   一列表项包含一个列表区块：

        &lt;代码写在这&gt;</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>
<pre><code>1986. What a great season.</code></pre><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p>
<pre><code>1986\. What a great season.</code></pre><h3 id="precode">代码区块</h3>

<p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p>
<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
<pre><code>这是一个普通段落：

    这是一个代码区块。</code></pre><p>Markdown 会转换成：</p>
<pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个代码区块。
&lt;/code&gt;&lt;/pre&gt;</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p>
<pre><code>Here is an example of AppleScript:

    tell application &quot;Foo&quot;
        beep
    end tell</code></pre><p>会被转换为：</p>
<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>
<p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p>
<pre><code>&lt;div class=&quot;footer&quot;&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;</code></pre><p>会被转换为：</p>
<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>
<h3 id="hr">分隔线</h3>

<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<pre><code>* * *

***

*****

- - -

---------------------------------------</code></pre><hr>
<h2 id="span">区段元素</h2>

<h3 id="link">链接</h3>

<p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p>
<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>
<p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>
<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.

[This link](http://example.net/) has no title attribute.</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>
<pre><code>See my [About](/about/) page for details.</code></pre><p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>
<pre><code>This is [an example][id] reference-style link.</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p>
<pre><code>This is [an example] [id] reference-style link.</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
<pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;</code></pre><p>链接内容定义的形式为：</p>
<ul>
<li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>接着一个冒号</li>
<li>接着一个以上的空格或制表符</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li>
</ul>
<p>下面这三种链接的定义都是相同：</p>
<pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;
[foo]: http://example.com/  &apos;Optional Title Here&apos;
[foo]: http://example.com/  (Optional Title Here)</code></pre><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p>
<p>链接网址也可以用尖括号包起来：</p>
<pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p>
<pre><code>[id]: http://example.com/longish/path/to/resource/here
    &quot;Optional Title Here&quot;</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>
<p>链接辨别标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p>
<pre><code>[link text][a]
[link text][A]</code></pre><p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p>
<pre><code>[Google][]</code></pre><p>然后定义链接内容：</p>
<pre><code>[Google]: http://google.com/</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p>
<pre><code>Visit [Daring Fireball][] for more information.</code></pre><p>然后接着定义链接：</p>
<pre><code>[Daring Fireball]: http://daringfireball.net/</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>
<p>下面是一个参考式链接的范例：</p>
<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &quot;Google&quot;
  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [3]: http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>如果改成用链接名称的方式写：</p>
<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &quot;Google&quot;
  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>上面两种写法都会产生下面的 HTML。</p>
<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;
title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from
&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;
or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>
<pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)
than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or
[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p>
<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>
<h3 id="em">强调</h3>

<p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p>
<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__</code></pre><p>会转成：</p>
<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p>
<p>强调也可以直接插在文字中间：</p>
<pre><code>un*frigging*believable</code></pre><p>但是<strong>如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p>
<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>
<pre><code>\*this text is surrounded by literal asterisks\*</code></pre><h3 id="code">代码</h3>

<p>如果要标记一小段行内代码，你可以用反引号把它包起来（<code>`</code>），例如：</p>
<pre><code>Use the `printf()` function.</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>
<pre><code>``There is a literal backtick (`) here.``</code></pre><p>这段语法会产生：</p>
<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p>
<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre><p>在代码区段内，<code>&amp;</code> 和尖括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p>
<pre><code>Please don&apos;t use any `&lt;blink&gt;` tags.</code></pre><p>转为：</p>
<pre><code>&lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre><p>你也可以这样写：</p>
<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre><p>以产生：</p>
<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre><h3 id="img">图片</h3>

<p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p>
<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em>和<em>参考式</em>。</p>
<p>行内式的图片语法看起来像是：</p>
<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre><p>详细叙述如下：</p>
<ul>
<li>一个惊叹号 <code>!</code></li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上<br>选择性的 ‘title’ 文字。</li>
</ul>
<p>参考式的图片语法则长得像这样：</p>
<pre><code>![Alt text][id]</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>
<pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>
<hr>
<h2 id="misc">其它</h2>

<h3 id="autolink">自动链接</h3>

<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>
<pre><code>&lt;http://example.com/&gt;</code></pre><p>Markdown 会转为：</p>
<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p>
<pre><code>&lt;address@example.com&gt;</code></pre><p>Markdown 会转成：</p>
<pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</code></pre><p>在浏览器里面，这段字串（其实是 <code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「<a href="mailto:address@example.com">address@example.com</a>」链接。</p>
<p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p>
<h3 id="backslash">反斜杠</h3>

<p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p>
<pre><code>\*literal asterisks\*</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<pre><code>\   反斜线
`   反引号
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号</code></pre><h2 id="acknowledgement">感谢</h2>

<p>感谢 <a href="https://twitter.com/#!/leafy7382" target="_blank" rel="noopener">leafy7382</a> 协助翻译，<a href="http://iamhlb.com/" target="_blank" rel="noopener">hlb</a>、<a href="http://twitter.com/randylien" target="_blank" rel="noopener">Randylien</a> 帮忙润稿，<a href="https://twitter.com/#!/ethantw" target="_blank" rel="noopener">ethantw</a> 的<a href="http://ethantw.net/projects/han/" target="_blank" rel="noopener">汉字标准格式・CSS Reset</a>， <a href="http://kidwm.net/" target="_blank" rel="noopener">WM</a> 回报文字错误。</p>
<p>感谢 <a href="https://github.com/fenprace" target="_blank" rel="noopener">fenprace</a>，<a href="https://github.com/addv" target="_blank" rel="noopener">addv</a>。</p>
<hr>
<h2 id="editor">Markdown 免费编辑器</h2>

<p>Windows 平台</p>
<ul>
<li><a href="http://markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a></li>
<li><a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="noopener">MarkPad</a></li>
</ul>
<p>Linux 平台</p>
<ul>
<li><a href="http://sourceforge.net/p/retext/home/ReText/" target="_blank" rel="noopener">ReText</a></li>
</ul>
<p>Mac 平台</p>
<ul>
<li><a href="http://mouapp.com/" target="_blank" rel="noopener">Mou</a></li>
</ul>
<p>在线编辑器</p>
<ul>
<li><a href="http://markable.in/" target="_blank" rel="noopener">Markable.in</a></li>
<li><a href="http://dillinger.io/" target="_blank" rel="noopener">Dillinger.io</a></li>
</ul>
<p>浏览器插件</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog" target="_blank" rel="noopener">MaDe</a> (Chrome)</li>
</ul>
<p>高级应用</p>
<ul>
<li><a href="http://www.sublimetext.com/2" target="_blank" rel="noopener">Sublime Text 2</a> + <a href="http://ttscoff.github.com/MarkdownEditing/" target="_blank" rel="noopener">MarkdownEditing</a> / <a href="http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/" target="_blank" rel="noopener">教程</a></li>
</ul>
<p>*** 如有更好的 Markdown 免费编辑器推荐，请到<a href="https://gitcafe.com/riku/Markdown-Syntax-CN/tickets/1" target="_blank" rel="noopener">这里反馈</a>，谢谢！</p>
<p>来源链接:<a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">http://wowubuntu.com/markdown/</a></p>
]]></content>
      <categories>
        <category>Manual</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 密码技术</title>
    <url>/2016/06/13/iOS-Common-Crypto/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="转码技术"><a href="#转码技术" class="headerlink" title="转码技术"></a>转码技术</h2><h3 id="URL转码（百分号转码）"><a href="#URL转码（百分号转码）" class="headerlink" title="URL转码（百分号转码）"></a>URL转码（百分号转码）</h3><p>URL：只有字母和数字[0-9a-zA-Z]、一些特殊符号<code>$-_.+!*&#39;(),[不包括双引号]</code>、以及某些保留字，才可以不经过编码直接用于URL。</p>
<h4 id="URL-编码实现"><a href="#URL-编码实现" class="headerlink" title="URL 编码实现"></a>URL 编码实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 废弃接口</span><br><span class="line">- (NSString *)stringByAddingPercentEscapesUsingEncoding:(NSStringEncoding)encoding</span><br><span class="line">&#x2F;&#x2F; iOS 7 之后</span><br><span class="line">- (NSString *)stringByAddingPercentEncodingWithAllowedCharacters:(NSCharacterSet *)allowedCharacters</span><br></pre></td></tr></table></figure>

<h4 id="URL-解码实现"><a href="#URL-解码实现" class="headerlink" title="URL 解码实现"></a>URL 解码实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 废弃接口</span><br><span class="line">- (NSString *)stringByReplacingPercentEscapesUsingEncoding:(NSStringEncoding)encoding</span><br><span class="line">&#x2F;&#x2F; iOS 7 之后</span><br><span class="line">@property(readonly, copy) NSString *stringByRemovingPercentEncoding</span><br></pre></td></tr></table></figure>

<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="http://www.w3school.com.cn/tags/html_ref_urlencode.html" target="_blank" rel="noopener">http://www.w3school.com.cn/tags/html_ref_urlencode.html</a></li>
<li><a href="https://zh.wikipedia.org/wiki/百分号编码" target="_blank" rel="noopener">维基百科</a></li>
<li><a href="http://tool.oschina.net/encode?type=4" target="_blank" rel="noopener">在线工具</a></li>
</ul>
<a id="more"></a>

<h3 id="Base64-转码"><a href="#Base64-转码" class="headerlink" title="Base64 转码"></a>Base64 转码</h3><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。</p>
<h4 id="Base64索引表"><a href="#Base64索引表" class="headerlink" title="Base64索引表"></a>Base64索引表</h4><p>数值    字符         数值    字符         数值    字符         数值    字符<br>0    A    16    Q    32    g    48    w<br>1    B    17    R    33    h    49    x<br>2    C    18    S    34    i    50    y<br>3    D    19    T    35    j    51    z<br>4    E    20    U    36    k    52    0<br>5    F    21    V    37    l    53    1<br>6    G    22    W    38    m    54    2<br>7    H    23    X    39    n    55    3<br>8    I    24    Y    40    o    56    4<br>9    J    25    Z    41    p    57    5<br>10    K    26    a    42    q    58    6<br>11    L    27    b    43    r    59    7<br>12    M    28    c    44    s    60    8<br>13    N    29    d    45    t    61    9<br>14    O    30    e    46    u    62    +<br>15    P    31    f    47    v    63    /</p>
<h4 id="例子：编码『Man』"><a href="#例子：编码『Man』" class="headerlink" title="例子：编码『Man』"></a>例子：编码『Man』</h4><p>文本：Man</p>
<p>ASCII编码：77 97 110</p>
<p>二进制位：01001101 01100001 01101110</p>
<p>索引：19 22 5 46</p>
<p>Base64编码：TWFu</p>
<p>如果要编码的字节数不能被3整除，最后会多出1个或2个字节，那么可以使用下面的方法进行处理：先使用0字节值在末尾补足，使其能够被3整除，然后再进行base64的编码。在编码后的base64文本后加上一个或两个’=’号，代表补足的字节数。也就是说，当最后剩余一个八位字节（一个byte）时，最后一个6位的base64字节块有四位是0值，最后附加上两个等号；如果最后剩余两个八位字节（2个byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号。</p>
<h4 id="Base64-编码实现"><a href="#Base64-编码实现" class="headerlink" title="Base64 编码实现"></a>Base64 编码实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (NSData *)base64EncodedDataWithOptions:(NSDataBase64EncodingOptions)options</span><br><span class="line">- (NSString *)base64EncodedStringWithOptions:(NSDataBase64EncodingOptions)options</span><br></pre></td></tr></table></figure>

<h4 id="Base64-解码实现"><a href="#Base64-解码实现" class="headerlink" title="Base64 解码实现"></a>Base64 解码实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (instancetype)initWithBase64EncodedData:(NSData *)base64Data options:(NSDataBase64DecodingOptions)options</span><br><span class="line">- (instancetype)initWithBase64EncodedString:(NSString *)base64String options:(NSDataBase64DecodingOptions)options</span><br></pre></td></tr></table></figure>

<h4 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://zh.wikipedia.org/zh-cn/Base64" target="_blank" rel="noopener">维基百科</a></li>
<li><a href="http://tool.oschina.net/encrypt?type=3" target="_blank" rel="noopener">http://tool.oschina.net/encrypt?type=3</a></li>
</ul>
<h2 id="对称密码（共享密钥密码）——用相同的密钥进行加密和解密"><a href="#对称密码（共享密钥密码）——用相同的密钥进行加密和解密" class="headerlink" title="对称密码（共享密钥密码）——用相同的密钥进行加密和解密"></a>对称密码（共享密钥密码）——用相同的密钥进行加密和解密</h2><h3 id="一次性密码本——绝对不会被破译的密码"><a href="#一次性密码本——绝对不会被破译的密码" class="headerlink" title="一次性密码本——绝对不会被破译的密码"></a>一次性密码本——绝对不会被破译的密码</h3><p>一次性密码本是一种非常简单的密码，它的原理是『将明文与一串随机的比特序列进行XOR运算』。</p>
<p>为什么一次性密码本是绝对无法破译的呢？我们假设对一次性密码本的密文尝试进行暴力破解，那么总有一天我们会尝试到和加密时相同的密钥，<strong>但是我们无法判断它是否是正确的明文</strong>。</p>
<p>一次性密码本是<strong>无条件安全的，在理论上是无法破译的。</strong></p>
<h3 id="DES（Data-Encryption-Standard）"><a href="#DES（Data-Encryption-Standard）" class="headerlink" title="DES（Data Encryption Standard）"></a>DES（Data Encryption Standard）</h3><p>DES是一种将64比特的明文加密成64比特的密文的对称密码算法，他的密钥长度是56比特。尽管从规格上来说，DES的密钥长度是64比特，但由于每隔7比特会设置一个用于错误检测的比特，因此实质上器密钥长度是56比特。</p>
<p><strong>PS：现在DES已经能够被暴力破解。</strong></p>
<h4 id="DES加密实现"><a href="#DES加密实现" class="headerlink" title="DES加密实现"></a>DES加密实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *  DES加密</span><br><span class="line"> *</span><br><span class="line"> *  @param data 加密的二进制数据</span><br><span class="line"> *  @param key  加密的密钥，长度为8字节</span><br><span class="line"> *  @param iv   初始化向量，每次加密时都会随机产生一个不同的比特序列来作为初始化向量</span><br><span class="line"> *</span><br><span class="line"> *  @return 加密后的二进制数据</span><br><span class="line"> *&#x2F;</span><br><span class="line">NSData * desEncrypt(NSData * data, NSData * key, NSData * iv)</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F; 密码长度为8字节  </span><br><span class="line">    if ([key length] !&#x3D; 8) &#123;</span><br><span class="line">        @throw [NSException exceptionWithName:@&quot;DES Encrypt&quot;</span><br><span class="line">                                       reason:@&quot;Length of key is wrong. Length of iv should be 8(64bits)&quot;</span><br><span class="line">                                     userInfo:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 加密后的数据长度为数据长度+DES block size</span><br><span class="line">    size_t bufferSize &#x3D; [data length] + kCCBlockSizeDES;</span><br><span class="line">    void * buffer &#x3D; malloc(bufferSize);</span><br><span class="line">    size_t encryptedSize &#x3D; 0;</span><br><span class="line">    &#x2F;&#x2F; DES加密</span><br><span class="line">    CCCryptorStatus cryptStatus &#x3D; CCCrypt(kCCEncrypt,</span><br><span class="line">                                          kCCAlgorithmDES,</span><br><span class="line">                                          kCCOptionPKCS7Padding,</span><br><span class="line">                                          [key bytes], kCCKeySizeDES,</span><br><span class="line">                                          [iv bytes],</span><br><span class="line">                                          [data bytes],</span><br><span class="line">                                          [data length],</span><br><span class="line">                                          buffer, bufferSize,</span><br><span class="line">                                          &amp;encryptedSize);</span><br><span class="line">  	&#x2F;&#x2F; 判断加密是否成功</span><br><span class="line">    if (cryptStatus &#x3D;&#x3D; kCCSuccess) &#123;</span><br><span class="line">        NSData * encryptedData &#x3D; [NSData dataWithBytes:buffer length:encryptedSize];</span><br><span class="line">        free(buffer);</span><br><span class="line">        return encryptedData;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        free(buffer);</span><br><span class="line">        @throw [NSException exceptionWithName:@&quot;DES Encrypt&quot;</span><br><span class="line">                                       reason:@&quot;Encrypt Error!&quot;</span><br><span class="line">                                     userInfo:nil];</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DES解密实现"><a href="#DES解密实现" class="headerlink" title="DES解密实现"></a>DES解密实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *  DES 解密</span><br><span class="line"> *</span><br><span class="line"> *  @param data 解密的二进制数据</span><br><span class="line"> *  @param key  解密的密钥，长度8字节</span><br><span class="line"> *  @param iv   初始化向量</span><br><span class="line"> *</span><br><span class="line"> *  @return 解密后的数据</span><br><span class="line"> *&#x2F;</span><br><span class="line">NSData *desDecrypt(NSData * data, NSData * key, NSData * iv)</span><br><span class="line">&#123;</span><br><span class="line">    if ([key length] !&#x3D; 8) &#123;</span><br><span class="line">        @throw [NSException exceptionWithName:@&quot;DES Encrypt&quot;</span><br><span class="line">                                       reason:@&quot;Length of key is wrong. Length of iv should be 8(64bits)&quot;</span><br><span class="line">                                     userInfo:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 加密后的数据长度为数据长度+DES block size</span><br><span class="line">    size_t bufferSize &#x3D; [data length] + kCCBlockSizeDES;</span><br><span class="line">    void * buffer &#x3D; malloc(bufferSize);</span><br><span class="line">    size_t decryptedSize &#x3D; 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    CCCryptorStatus cryptStatus &#x3D; CCCrypt(kCCDecrypt,</span><br><span class="line">                                          kCCAlgorithmDES,</span><br><span class="line">                                          kCCOptionPKCS7Padding,</span><br><span class="line">                                          [key bytes], kCCKeySizeDES,</span><br><span class="line">                                          [iv bytes],</span><br><span class="line">                                          [data bytes],</span><br><span class="line">                                          [data length],</span><br><span class="line">                                          buffer, bufferSize,</span><br><span class="line">                                          &amp;decryptedSize);</span><br><span class="line">    if (cryptStatus &#x3D;&#x3D; kCCSuccess) &#123;</span><br><span class="line">        NSData * decryptedData &#x3D; [NSData dataWithBytes:buffer length:decryptedSize];</span><br><span class="line">        free(buffer);</span><br><span class="line">        return decryptedData;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        free(buffer);</span><br><span class="line">        @throw [NSException exceptionWithName:@&quot;DES Decrypt&quot;</span><br><span class="line">                                       reason:@&quot;Decrypt Error!&quot;</span><br><span class="line">                                     userInfo:nil];</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参考链接-2"><a href="#参考链接-2" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/資料加密標準" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/資料加密標準</a></li>
</ul>
<h3 id="3DES（-Triple-Data-Encryption-Standard）"><a href="#3DES（-Triple-Data-Encryption-Standard）" class="headerlink" title="3DES（ Triple Data Encryption Standard）"></a>3DES（ Triple Data Encryption Standard）</h3><p>** 三重DES（triple-DES）** 是为了增加DES的强度，将DES重复3次所得到的一种密码算法，通常缩写为<strong>3DES</strong>。</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/三重資料加密演算法" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/三重資料加密演算法</a></li>
</ul>
<h3 id="AES（Advanced-Encryption-Standard）"><a href="#AES（Advanced-Encryption-Standard）" class="headerlink" title="AES（Advanced Encryption Standard）"></a>AES（Advanced Encryption Standard）</h3><p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/高级加密标准" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/高级加密标准</a></li>
</ul>
<h3 id="对称加密-解密实现"><a href="#对称加密-解密实现" class="headerlink" title="对称加密/解密实现"></a>对称加密/解密实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CCCryptorStatus CCCrypt(</span><br><span class="line">    CCOperation op,         &#x2F;* kCCEncrypt, etc. *&#x2F;</span><br><span class="line">    CCAlgorithm alg,        &#x2F;* kCCAlgorithmAES128, etc. *&#x2F;</span><br><span class="line">    CCOptions options,      &#x2F;* kCCOptionPKCS7Padding, etc. *&#x2F;</span><br><span class="line">    const void *key,</span><br><span class="line">    size_t keyLength,</span><br><span class="line">    const void *iv,         &#x2F;* optional initialization vector *&#x2F;</span><br><span class="line">    const void *dataIn,     &#x2F;* optional per op and alg *&#x2F;</span><br><span class="line">    size_t dataInLength,</span><br><span class="line">    void *dataOut,          &#x2F;* data RETURNED here *&#x2F;</span><br><span class="line">    size_t dataOutAvailable,</span><br><span class="line">    size_t *dataOutMoved)</span><br></pre></td></tr></table></figure>

<h4 id="CCOperation：加密解密操作"><a href="#CCOperation：加密解密操作" class="headerlink" title="CCOperation：加密解密操作"></a>CCOperation：加密解密操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*!</span><br><span class="line">    @enum       CCOperation</span><br><span class="line">    @abstract   密码操作类型.</span><br><span class="line"></span><br><span class="line">    @constant   kCCEncrypt  对称加密.</span><br><span class="line">    @constant   kCCDecrypt  对称解密.</span><br><span class="line">*&#x2F;</span><br><span class="line">enum &#123;</span><br><span class="line">    kCCEncrypt &#x3D; 0,</span><br><span class="line">    kCCDecrypt,     </span><br><span class="line">&#125;;</span><br><span class="line">typedef uint32_t CCOperation;</span><br></pre></td></tr></table></figure>

<h4 id="CCAlgorithm：加密算法"><a href="#CCAlgorithm：加密算法" class="headerlink" title="CCAlgorithm：加密算法"></a>CCAlgorithm：加密算法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*!</span><br><span class="line">    @enum       CCAlgorithm</span><br><span class="line">    @abstract   Encryption algorithms implemented by this module.</span><br><span class="line"></span><br><span class="line">    @constant   kCCAlgorithmAES128  Advanced Encryption Standard, 128-bit block</span><br><span class="line">                                    This is kept for historical reasons.  It&#39;s</span><br><span class="line">                                    preferred now to use kCCAlgorithmAES since</span><br><span class="line">                                    128-bit blocks are part of the standard.</span><br><span class="line">    @constant   kCCAlgorithmAES     Advanced Encryption Standard, 128-bit block</span><br><span class="line">    @constant   kCCAlgorithmDES     Data Encryption Standard</span><br><span class="line">    @constant   kCCAlgorithm3DES    Triple-DES, three key, EDE configuration</span><br><span class="line">    @constant   kCCAlgorithmCAST    CAST</span><br><span class="line"> 	@constant   kCCAlgorithmRC4     RC4 stream cipher</span><br><span class="line"> 	@constant   kCCAlgorithmBlowfish    Blowfish block cipher</span><br><span class="line">*&#x2F;</span><br><span class="line">enum &#123;</span><br><span class="line">    kCCAlgorithmAES128 &#x3D; 0,</span><br><span class="line">    kCCAlgorithmAES &#x3D; 0,</span><br><span class="line">    kCCAlgorithmDES,</span><br><span class="line">    kCCAlgorithm3DES,       </span><br><span class="line">    kCCAlgorithmCAST,       </span><br><span class="line">    kCCAlgorithmRC4,</span><br><span class="line">    kCCAlgorithmRC2,   </span><br><span class="line">    kCCAlgorithmBlowfish    </span><br><span class="line">&#125;;</span><br><span class="line">typedef uint32_t CCAlgorithm;</span><br></pre></td></tr></table></figure>

<h4 id="CCOptions：配置选项"><a href="#CCOptions：配置选项" class="headerlink" title="CCOptions：配置选项"></a>CCOptions：配置选项</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">/*!</span><br><span class="line">    @<span class="class"><span class="keyword">enum</span>       <span class="title">CCOptions</span></span></span><br><span class="line">    @<span class="keyword">abstract</span>   Options flags, passed to CCCryptorCreate().</span><br><span class="line"></span><br><span class="line">    @constant   kCCOptionPKCS7Padding   Perform PKCS7 padding.</span><br><span class="line">    @constant   kCCOptionECBMode        Electronic Code Book Mode.</span><br><span class="line">                                        Default is CBC.</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">enum &#123;</span></span><br><span class="line"><span class="regexp">    /</span>* options <span class="keyword">for</span> block ciphers *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    kCCOptionPKCS7Padding   = 0x0001,</span></span><br><span class="line"><span class="regexp">    kCCOptionECBMode        = 0x0002</span></span><br><span class="line"><span class="regexp">    /</span>* stream ciphers currently have no options *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">typedef uint32_t CCOptions;</span></span><br></pre></td></tr></table></figure>

<p>PKCS：Public Key Cryptography Standards，公钥加密标准</p>
<p>PKCS7：密码消息语法标准（Cryptographic Message Syntax Standard）</p>
<p>ECB：电子密码本（Electronic codebook，ECB）模式。需要加密的消息按照块密码的块大小被分为数个块，并对每个块进行独立加密。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c4/Ecb_encryption.png" alt=""></p>
<p>CBC：在CBC模式中，每个平文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有平文块。同时，为了保证每条消息的唯一性，在第一个块中需要使用初始化向量。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/d/d3/Cbc_encryption.png" alt=""></p>
<h4 id="key、keyLength：密钥长度"><a href="#key、keyLength：密钥长度" class="headerlink" title="key、keyLength：密钥长度"></a>key、keyLength：密钥长度</h4><p>密钥长度必须为指定的长度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum &#123;</span><br><span class="line">    kCCKeySizeAES128          &#x3D; 16,</span><br><span class="line">    kCCKeySizeAES192          &#x3D; 24,</span><br><span class="line">    kCCKeySizeAES256          &#x3D; 32,</span><br><span class="line">    kCCKeySizeDES             &#x3D; 8,</span><br><span class="line">    kCCKeySize3DES            &#x3D; 24,</span><br><span class="line">    kCCKeySizeMinCAST         &#x3D; 5,</span><br><span class="line">    kCCKeySizeMaxCAST         &#x3D; 16,</span><br><span class="line">    kCCKeySizeMinRC4          &#x3D; 1,</span><br><span class="line">    kCCKeySizeMaxRC4          &#x3D; 512,</span><br><span class="line">    kCCKeySizeMinRC2          &#x3D; 1,</span><br><span class="line">    kCCKeySizeMaxRC2          &#x3D; 128,</span><br><span class="line">    kCCKeySizeMinBlowfish     &#x3D; 8,</span><br><span class="line">    kCCKeySizeMaxBlowfish     &#x3D; 56,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="iv：初始化向量（可选）"><a href="#iv：初始化向量（可选）" class="headerlink" title="iv：初始化向量（可选）"></a>iv：初始化向量（可选）</h4><p>初始化向量（IV，Initialization Vector）是许多工作模式中用于随机化加密的一块数据，因此可以由相同的明文，相同的密钥产生不同的密文，而无需重新产生密钥，避免了通常相当复杂的这一过程。</p>
<p><strong>用于CBC模式</strong>。如果存在，必须和选择算法的block size一样长。</p>
<p>如果使用ECB模式或者使用流式密码算法将自动忽略。</p>
<p><code>Byte iv[] = {0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF};</code></p>
<h4 id="dataIn、dataInLength：要加密或解密的数据"><a href="#dataIn、dataInLength：要加密或解密的数据" class="headerlink" title="dataIn、dataInLength：要加密或解密的数据"></a>dataIn、dataInLength：要加密或解密的数据</h4><h4 id="dataOut、dataOutAvailable：加密或解密后的输出数据"><a href="#dataOut、dataOutAvailable：加密或解密后的输出数据" class="headerlink" title="dataOut、dataOutAvailable：加密或解密后的输出数据"></a>dataOut、dataOutAvailable：加密或解密后的输出数据</h4><p>创建对应算法需要的输出数据字节大小。输出数据的bufferSize足够大，大约要加密数据的长度+kCCBlockSize长度。</p>
<p>示例如下，DES加密解密需要的内存块大小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">size_t bufferSize &#x3D; [data length] + kCCBlockSizeDES;</span><br><span class="line">void *buffer &#x3D; malloc(bufferSize);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*!</span><br><span class="line">    @enum           Block sizes</span><br><span class="line"></span><br><span class="line">    @discussion     Block sizes, in bytes, for supported algorithms.</span><br><span class="line"></span><br><span class="line">    @constant kCCBlockSizeAES128    AES block size (currently, only 128-bit</span><br><span class="line">                                    blocks are supported).</span><br><span class="line">    @constant kCCBlockSizeDES       DES block size.</span><br><span class="line">    @constant kCCBlockSize3DES      Triple DES block size.</span><br><span class="line">    @constant kCCBlockSizeCAST      CAST block size.</span><br><span class="line">*&#x2F;</span><br><span class="line">enum &#123;</span><br><span class="line">    &#x2F;* AES *&#x2F;</span><br><span class="line">    kCCBlockSizeAES128        &#x3D; 16,</span><br><span class="line">    &#x2F;* DES *&#x2F;</span><br><span class="line">    kCCBlockSizeDES           &#x3D; 8,</span><br><span class="line">    &#x2F;* 3DES *&#x2F;</span><br><span class="line">    kCCBlockSize3DES          &#x3D; 8,</span><br><span class="line">    &#x2F;* CAST *&#x2F;</span><br><span class="line">    kCCBlockSizeCAST          &#x3D; 8,</span><br><span class="line">    kCCBlockSizeRC2           &#x3D; 8,</span><br><span class="line">    kCCBlockSizeBlowfish      &#x3D; 8,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="dataOutMoved"><a href="#dataOutMoved" class="headerlink" title="dataOutMoved"></a>dataOutMoved</h4><p>成功时，返回写入到dataOut内存块中字节数。</p>
<p>kCCBufferTooSmall时，返回需要提供不足的内存空间大小。</p>
<h4 id="CCCryptorStatus：返回加密-解密状态"><a href="#CCCryptorStatus：返回加密-解密状态" class="headerlink" title="CCCryptorStatus：返回加密/解密状态"></a>CCCryptorStatus：返回加密/解密状态</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum &#123;</span><br><span class="line">    kCCSuccess          &#x3D; 0,</span><br><span class="line">    kCCParamError       &#x3D; -4300,</span><br><span class="line">    kCCBufferTooSmall   &#x3D; -4301,</span><br><span class="line">    kCCMemoryFailure    &#x3D; -4302,</span><br><span class="line">    kCCAlignmentError   &#x3D; -4303,</span><br><span class="line">    kCCDecodeError      &#x3D; -4304,</span><br><span class="line">    kCCUnimplemented    &#x3D; -4305,</span><br><span class="line">    kCCOverflow         &#x3D; -4306,</span><br><span class="line">    kCCRNGFailure       &#x3D; -4307,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="公钥密码——用公钥加密，用私钥解密"><a href="#公钥密码——用公钥加密，用私钥解密" class="headerlink" title="公钥密码——用公钥加密，用私钥解密"></a>公钥密码——用公钥加密，用私钥解密</h2><p>公钥密码（public-key cryptography）中，密钥分为加密密钥和解密密钥两种，发送者用加密密钥对消息进行加密，接收者用解密密钥对密文进行解密。</p>
<p>仔细思考一下加密密钥和解密密钥的区别，我们可以发现：</p>
<ul>
<li>发送者只需要加密密钥</li>
<li>接收者只需要解密密钥</li>
<li>解密密钥不可以被窃听者获取</li>
<li>加密密钥被窃听者获取也没问题</li>
</ul>
<p>公钥密码中，加密密钥一般是公开的。正是由于加密密钥可以任意公开，因此该密钥被称为<strong>公钥（public key）</strong>。当然，我们也没有必要将公钥公开给全世界所有的人，但至少我们需要将公钥发送给需要使用公钥进行加密的通信对象（也就是给自己发送密文的发送者）。</p>
<p>相对地，解密密钥是绝对不能公开的，这个密钥只能由你自己来使用，一次成为<strong>私钥（private key）</strong>。私钥不可以被别人知道，也不可以将它发送给别人，甚至也不能发送给自己的通信对象。</p>
<p>公钥和私钥是一一对应的，一对公钥和私钥统称为<strong>密钥对（key pair）</strong>，由公钥进行加密的密文，必须使用与该公钥配对的私钥才能够解密。密钥对中的两个密钥之间具有非常密切的关系——数学上的关系——因此公钥和私钥是不能分别单独生成的。</p>
<p>公钥密码的使用者需要生成一个包括公钥和私钥的密钥对，其中公钥会发送给别人，而私钥则仅供自己使用。</p>
<p>常见的公钥加密算法有：RSA、ElGamal、背包算法、Rabin（RSA的特例）、迪菲－赫尔曼密钥交换协议中的公钥加密算法、椭圆曲线加密算法（英语：Elliptic Curve Cryptography, ECC）。使用最广泛的是RSA算法（由发明者Rivest、Shmir和Adleman姓氏首字母缩写而来）是著名的公开金钥加密算法，ElGamal是另一种常用的非对称加密算法。</p>
<p><strong>RSA加密算法</strong>是一种<strong>非对称加密算法</strong>。在公开密钥加密和电子商业中RSA被广泛使用。</p>
<h3 id="RSA密钥生成命令"><a href="#RSA密钥生成命令" class="headerlink" title="RSA密钥生成命令"></a>RSA密钥生成命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 生成RSA私钥</span><br><span class="line">$ openssl genrsa -out rsa_private_key.pem 1024</span><br><span class="line">&#x2F;&#x2F; 生成RSA公钥</span><br><span class="line">$ openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</span><br><span class="line">&#x2F;&#x2F; 将RSA私钥转换成PKCS8格式</span><br><span class="line">openssl pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt</span><br></pre></td></tr></table></figure>

<h2 id="单向散列函数——获取消息的『指纹』"><a href="#单向散列函数——获取消息的『指纹』" class="headerlink" title="单向散列函数——获取消息的『指纹』"></a>单向散列函数——获取消息的『指纹』</h2><p>散列函数（或散列算法，又称哈希函数，英语：Hash Function）是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用来代表一个短的随机字母和数字组成的字符串。好的散列函数在输入域中很少出现散列冲突。在散列表和数据处理中，不抑制冲突来区别数据，会使得数据库记录更难找到。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/d/da/Hash_function.svg" alt="散列函数的工作原理"></p>
<p>单向散列函数，就是把任意长的输入消息串变化成固定长的输出串且由输出串难以得到输入串的一种函数。这个输出串称为该消息的散列值。</p>
<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p><strong>单向散列函数</strong>：也称为<strong>消息摘要函数</strong>（message digest function），<strong>哈希函数</strong>或者<strong>杂凑函数</strong>。</p>
<p>输入单向散列函数的<strong>消息</strong>也称为<strong>原像</strong>（pre-image）。</p>
<p>单向散列函数输出的<strong>散列值</strong>也称为<strong>消息摘要</strong>（message digest）或者<strong>指纹</strong>（fingerprint）。</p>
<p>完整性也称为一致性。</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul>
<li><h4 id="根据任意长度的消息计算出固定长度的散列值"><a href="#根据任意长度的消息计算出固定长度的散列值" class="headerlink" title="根据任意长度的消息计算出固定长度的散列值"></a>根据任意长度的消息计算出固定长度的散列值</h4><p>首先，单向散列函数的输入必须能够使任意长度的消息。其次，无论输入多长的消息，单向散列函数必须都能够生成长度很短的散列值，散列值的长度最好是短且固定的。</p>
</li>
<li><h4 id="能够快速计算出散列值"><a href="#能够快速计算出散列值" class="headerlink" title="能够快速计算出散列值"></a>能够快速计算出散列值</h4></li>
<li><h4 id="消息不同散列值也不同"><a href="#消息不同散列值也不同" class="headerlink" title="消息不同散列值也不同"></a>消息不同散列值也不同</h4><p>当给定某条消息的散列值时，单向散列函数必须确保<strong>要找到和该条消息具备相同散列值的另外一条消息是非常困难的</strong>。这一性质称为『<strong>弱抗碰撞性</strong>』。单向散列函数都必须具备弱抗碰撞性。</p>
<p>和弱抗碰撞性相对的，还有强抗碰撞性，所谓强抗碰撞性，是指<strong>要找到散列值相同的两条不同的消息是非常困难的</strong>。在这里，散列值可以是任意值。</p>
</li>
<li><h4 id="具备单向性"><a href="#具备单向性" class="headerlink" title="具备单向性"></a>具备单向性</h4><p>单向散列函数必须具备单向性，单向性指的是无法通过散列值反算出消息的性质。</p>
</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li><h4 id="检测软件是否被篡改"><a href="#检测软件是否被篡改" class="headerlink" title="检测软件是否被篡改"></a>检测软件是否被篡改</h4></li>
<li><h4 id="基于口令的加密"><a href="#基于口令的加密" class="headerlink" title="基于口令的加密"></a>基于口令的加密</h4><p>单向散列函数也被用于基于口令的加密（Password Based Encryption, PBE）</p>
<p>PBE的原理是将口令和盐（salt，通过伪随机数生成器产生的随机值）混合后计算其散列值，然后将这个散列值用作加密的密钥。</p>
</li>
<li><h4 id="消息认证码"><a href="#消息认证码" class="headerlink" title="消息认证码"></a>消息认证码</h4><p>消息认证码是将『发送者和接收者之间的共享密钥』和『消息』进行混合后计算出的散列值。使用消息认证码可以检测并防止通信过程中的错误、篡改以及伪装。</p>
</li>
<li><h4 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h4><p>数字签名是现实社会中的签名（sign）和盖章这样的行为在数字世界中实现。数字签名的处理过程非常耗时，一次一般不会对整个消息内容直接施加数字签名，而是先通过单向散列函数计算出消息的散列值，然后再对这个散列值施加数字签名。</p>
</li>
<li><h4 id="伪随机数生成器"><a href="#伪随机数生成器" class="headerlink" title="伪随机数生成器"></a>伪随机数生成器</h4><p>密码技术中所使用的随机数需要具备『事实上不可能根据过去的随机数列预测未来的随机数列』这样的性质。为了保证不可预测性，可以利用单向散列函数的单向性。</p>
</li>
<li><h4 id="一次性口令"><a href="#一次性口令" class="headerlink" title="一次性口令"></a>一次性口令</h4><p>一次性口令经常被用于服务器对客户端的合法性认证。在这种方式中，通过使用单向散列函数可以保证口令只在通信链路上传送一次，因此即使窃听者窃取了口令，也无法使用。</p>
</li>
</ul>
<h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。</p>
<p><strong>PS：已发现碰撞。</strong></p>
<h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><p>MD5已经广泛使用在为文件传输提供一定的可靠性方面。例如，服务器预先提供一个MD5校验和，用户下载完文件以后，用MD5算法计算下载文件的MD5校验和，然后通过检查这两个校验和是否一致，就能判断下载的文件是否出错。</p>
<p>MD5亦有应用于部分网上赌场以保证赌博的公平性，原理是系统先在玩家下注前已生成该局的结果，将该结果的字符串配合一组随机字符串利用MD5 加密，将该加密字符串于玩家下注前便显示给玩家，再在结果开出后将未加密的字符串显示给玩家，玩家便可利用MD5工具加密验证该字符串是否吻合。</p>
<p>例子: 在玩家下注骰宝前，赌场便先决定该局结果，假设生成的随机结果为4、5、 6大，赌场便会先利用MD5 加密“4, 5, 6”此字符串并于玩家下注前告诉玩家；由于赌场是无法预计玩家会下什么注，所以便能确保赌场不能作弊；当玩家下注完毕后，赌场便告诉玩家该原始字符串，即“4, 5, 6”，玩家便可利用MD5工具加密该字符串是否与下注前的加密字符串吻合。</p>
<p>该字符串一般会加上一组随机字符串 (Random string)，以防止玩家利用碰撞 (Collision) 解密字符串，但如使用超级电脑利用碰撞亦有可能从加上随机字符串的加密字符串中获取游戏结果。随机字符串的长度与碰撞的次数成正比关系，一般网上赌场使用的随机字符串是长于20字，有些网上赌场的随机字符串更长达500字，以增加解密难度。</p>
<h4 id="MD5代码实现"><a href="#MD5代码实现" class="headerlink" title="MD5代码实现"></a>MD5代码实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*** MD5 ***&#x2F;</span><br><span class="line">#define CC_MD5_DIGEST_LENGTH    16          &#x2F;* digest length in bytes *&#x2F;</span><br><span class="line">#define CC_MD5_BLOCK_BYTES      64          &#x2F;* block size in bytes *&#x2F;</span><br><span class="line">unsigned char *CC_MD5(const void *data, CC_LONG len, unsigned char *md)</span><br></pre></td></tr></table></figure>

<h4 id="参考链接-3"><a href="#参考链接-3" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/MD5" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/MD5</a></li>
</ul>
<h3 id="SHA家族"><a href="#SHA家族" class="headerlink" title="SHA家族"></a>SHA家族</h3><p><strong>安全散列算法</strong>（英语：Secure Hash Algorithm，缩写为SHA）是一个密码散列函数家族，是FIPS所认证的五种安全散列算法。能计算出一个数字消息所对应到的，长度固定的字符串（又称消息摘要）的算法。且若输入的消息不同，它们对应到不同字符串的概率很高。这些算法之所以称作“安全”是基于以下两点（根据官方标准的描述）：</p>
<ul>
<li>由消息摘要反推原输入消息，从计算理论上来说是很困难的。</li>
<li>想要找到两组不同的消息对应到相同的消息摘要，从计算理论上来说也是很困难的。任何对输入消息的变动，都有很高的概率导致其产生的消息摘要迥异。</li>
</ul>
<p>SHA家族的五个算法，分别是SHA-1、SHA-224、SHA-256、SHA-384，和SHA-512，由美国国家安全局（NSA）所设计，并由美国国家标准与技术研究院（NIST）发布；是美国的政府标准。后四者有时并称为SHA-2。SHA-1在许多安全协议中广为使用，包括TLS和SSL、PGP、SSH、S/MIME和IPsec，曾被视为是MD5（更早之前被广为使用的散列函数）的后继者。但SHA-1的安全性如今被密码学家严重质疑；虽然至今尚未出现对SHA-2有效的攻击，它的算法跟SHA-1基本上仍然相似；因此有些人开始发展其他替代的散列算法。缘于最近[何时？]对SHA-1的种种攻击发表，“美国国家标准与技术研究院（NIST）开始设法经由公开竞争管道（类似高级加密标准AES的发展经过），发展一个或多个新的散列算法。”</p>
<p><img src="http://file.blog.chaosky.tech/2016-06-12-Snip20160612_1.png" alt=""></p>
<p><img src="http://file.blog.chaosky.tech/2016-06-12-Snip20160612_2.png" alt=""></p>
<h4 id="SHA代码实现"><a href="#SHA代码实现" class="headerlink" title="SHA代码实现"></a>SHA代码实现</h4><h5 id="SHA-1"><a href="#SHA-1" class="headerlink" title="SHA-1"></a>SHA-1</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*** SHA1 ***&#x2F;</span><br><span class="line">#define CC_SHA1_DIGEST_LENGTH   20          &#x2F;* digest length in bytes *&#x2F;</span><br><span class="line">#define CC_SHA1_BLOCK_BYTES     64          &#x2F;* block size in bytes *&#x2F;</span><br><span class="line">unsigned char *CC_SHA1(const void *data, CC_LONG len, unsigned char *md)</span><br></pre></td></tr></table></figure>

<h5 id="SHA-224"><a href="#SHA-224" class="headerlink" title="SHA-224"></a>SHA-224</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*** SHA224 ***&#x2F;</span><br><span class="line">#define CC_SHA224_DIGEST_LENGTH     28          &#x2F;* digest length in bytes *&#x2F;</span><br><span class="line">#define CC_SHA224_BLOCK_BYTES       64          &#x2F;* block size in bytes *&#x2F;</span><br><span class="line">unsigned char *CC_SHA224(const void *data, CC_LONG len, unsigned char *md)</span><br></pre></td></tr></table></figure>

<h5 id="SHA-256"><a href="#SHA-256" class="headerlink" title="SHA-256"></a>SHA-256</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*** SHA256 ***&#x2F;</span><br><span class="line">#define CC_SHA256_DIGEST_LENGTH     32          &#x2F;* digest length in bytes *&#x2F;</span><br><span class="line">#define CC_SHA256_BLOCK_BYTES       64          &#x2F;* block size in bytes *&#x2F;</span><br><span class="line">unsigned char *CC_SHA256(const void *data, CC_LONG len, unsigned char *md)</span><br></pre></td></tr></table></figure>

<h5 id="SHA-384"><a href="#SHA-384" class="headerlink" title="SHA-384"></a>SHA-384</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*** SHA384 ***&#x2F;</span><br><span class="line">#define CC_SHA384_DIGEST_LENGTH     48          &#x2F;* digest length in bytes *&#x2F;</span><br><span class="line">#define CC_SHA384_BLOCK_BYTES      128          &#x2F;* block size in bytes *&#x2F;</span><br><span class="line">unsigned char *CC_SHA384(const void *data, CC_LONG len, unsigned char *md)</span><br></pre></td></tr></table></figure>

<h5 id="SHA-512"><a href="#SHA-512" class="headerlink" title="SHA-512"></a>SHA-512</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*** SHA512 ***&#x2F;</span><br><span class="line">#define CC_SHA512_DIGEST_LENGTH     64          &#x2F;* digest length in bytes *&#x2F;</span><br><span class="line">#define CC_SHA512_BLOCK_BYTES      128          &#x2F;* block size in bytes *&#x2F;</span><br><span class="line">unsigned char *CC_SHA512(const void *data, CC_LONG len, unsigned char *md)</span><br></pre></td></tr></table></figure>

<h3 id="参考链接-4"><a href="#参考链接-4" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/散列函數" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/散列函數</a></li>
<li><a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">在线工具</a></li>
</ul>
<h2 id="消息认证码-1"><a href="#消息认证码-1" class="headerlink" title="消息认证码"></a>消息认证码</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>消息认证码</strong>（message authentication code）是一种确认完整性并进行认证的技术，简称『<strong>MAC</strong>』。</p>
<p>消息认证码的输入包括任意长度的消息和一个发送者与接收者之间<strong>共享的密钥</strong>，他可以输出固定长度的数据，这个数据称为<strong>MAC值</strong>。</p>
<p>使用SHA-1、MD5之类的单向散列函数可以实现消息认证码，其中一种实现方法称为<strong>HMAC</strong>。</p>
<p><strong>密钥散列消息认证码</strong>（英语：Keyed-hash message authentication code，缩写为HMAC），又称散列消息认证码（Hash-based message authentication code），是一种通过特别计算方式之后产生的消息认证码（MAC），使用密码散列函数，同时结合一个加密密钥。它可以用来保证数据的完整性，同时可以用来作某个消息的身份验证。</p>
<h3 id="HMAC的应用"><a href="#HMAC的应用" class="headerlink" title="HMAC的应用"></a>HMAC的应用</h3><p>hmac主要应用在身份验证中，它的使用方法是这样的：<br>(1) 客户端发出登录请求（假设是浏览器的GET请求）<br>(2) 服务器返回一个随机值，并在会话中记录这个随机值<br>(3) 客户端将该随机值作为密钥，用户密码进行hmac运算，然后提交给服务器<br>(4) 服务器读取用户数据库中的用户密码和步骤2中发送的随机值做与客户端一样的hmac运算，然后与用户发送的结果比较，如果结果一致则验证用户合法。</p>
<p>在这个过程中，可能遭到安全攻击的是服务器发送的随机值和用户发送的hmac结果，而对于截获了这两个值的黑客而言这两个值是没有意义的，绝无获取用户密码的可能性，随机值的引入使hmac只在当前会话中有效，大大增强了安全性和实用性。</p>
<h3 id="HMAC实现"><a href="#HMAC实现" class="headerlink" title="HMAC实现"></a>HMAC实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void CCHmac(</span><br><span class="line">    CCHmacAlgorithm algorithm,  &#x2F;* kCCHmacSHA1, kCCHmacMD5 *&#x2F;</span><br><span class="line">    const void *key,</span><br><span class="line">    size_t keyLength,           &#x2F;* length of key in bytes *&#x2F;</span><br><span class="line">    const void *data,</span><br><span class="line">    size_t dataLength,          &#x2F;* length of data in bytes *&#x2F;</span><br><span class="line">    void *macOut)               &#x2F;* MAC written here *&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="参考链接-5"><a href="#参考链接-5" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/金鑰雜湊訊息鑑別碼" target="_blank" rel="noopener">密钥散列消息认证码——维基百科</a></li>
</ul>
<h2 id="Key-Derivation（密钥导出）"><a href="#Key-Derivation（密钥导出）" class="headerlink" title="Key Derivation（密钥导出）"></a>Key Derivation（密钥导出）</h2><p>PBKDF2(Password-Based Key Derivation Function)是一个用来导出密钥的函数，常用于生成加密的密码。</p>
<p>它的基本原理是通过一个伪随机函数（例如HMAC函数），把明文和一个盐值作为输入参数，然后重复进行运算，并最终产生密钥。</p>
<p>如果重复的次数足够大，破解的成本就会变得很高。而盐值的添加也会增加“彩虹表”攻击的难度。</p>
<h3 id="PBKDF2函数的定义"><a href="#PBKDF2函数的定义" class="headerlink" title="PBKDF2函数的定义"></a>PBKDF2函数的定义</h3><p>DK = PBKDF2(PRF, Password, Salt, c, dkLen)<br>PRF是一个伪随机函数，例如HASH_HMAC函数，它会输出长度为hLen的结果。<br>Password是用来生成密钥的原文密码。<br>Salt是一个加密用的盐值。<br>c是进行重复计算的次数。<br>dkLen是期望得到的密钥的长度。<br>DK是最后产生的密钥。</p>
<h4 id="PBKDF代码实现"><a href="#PBKDF代码实现" class="headerlink" title="PBKDF代码实现"></a>PBKDF代码实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int CCKeyDerivationPBKDF( CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen,</span><br><span class="line">                      const uint8_t *salt, size_t saltLen,</span><br><span class="line">                      CCPseudoRandomAlgorithm prf, uint rounds,</span><br><span class="line">                      uint8_t *derivedKey, size_t derivedKeyLen)</span><br></pre></td></tr></table></figure>


<h2 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">CCRNGStatus <span class="constructor">CCRandomGenerateBytes(<span class="params">void</span> <span class="operator">*</span><span class="params">bytes</span>, <span class="params">size_t</span> <span class="params">count</span>)</span></span><br></pre></td></tr></table></figure>


<h2 id="Symmetric-Key-Wrap"><a href="#Symmetric-Key-Wrap" class="headerlink" title="Symmetric Key Wrap"></a>Symmetric Key Wrap</h2><p>Wrap a symmetric key with a Key Encryption Key (KEK).</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int  </span><br><span class="line">CCSymmetricKeyWrap( CCWrappingAlgorithm algorithm,</span><br><span class="line">                   const uint8_t *iv, const size_t ivLen,</span><br><span class="line">                   const uint8_t *kek, size_t kekLen,</span><br><span class="line">                   const uint8_t *rawKey, size_t rawKeyLen,</span><br><span class="line">                   uint8_t  *wrappedKey, size_t *wrappedKeyLen)</span><br></pre></td></tr></table></figure>


<h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><ul>
<li><a href="https://github.com/kelp404/CocoaSecurity" target="_blank" rel="noopener">https://github.com/kelp404/CocoaSecurity</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Cryptography</tag>
        <tag>密码技术</tag>
      </tags>
  </entry>
  <entry>
    <title>App Store 审核指南——2016.6</title>
    <url>/2016/06/24/AppStore-Review-Guidelines/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="提交应用之前的检查列表"><a href="#提交应用之前的检查列表" class="headerlink" title="提交应用之前的检查列表"></a>提交应用之前的检查列表</h2><p>为了帮助你的应用能够尽可能顺利的过审，请查看下面列出来的可能降低审核速度或者被拒绝的常见失误。本清单无法代替审核条款，但你需要确保你已经达到了清单的要求作为良好的开始。</p>
<p><strong>确保你已经：</strong></p>
<ul>
<li><p>测试你的应用程序，保证它不会发生崩溃和错误</p>
</li>
<li><p>确保你的应用程序的信息和应用内容保持完整和准确</p>
</li>
<li><p>保证联系人信息始终有效，审核团队可以及时联系到你</p>
</li>
<li><p>提供一个有效的测试帐号以及登录信息，并提供测试功能必要的的硬件和资源（例如，一个测试用的二维码）</p>
</li>
<li><p>保证后台服务在审核期间运行正常</p>
</li>
<li><p>如果应用的某些功能和应用内付费隐藏较深，需提供详细的描述文档和支持文档。如果因为地域的原因我们无法正常使用该功能，请提供该功能的描述视频链接。</p>
</li>
<li><p>请检查你的应用程序是否符合其他规范，包括（注意文中部分内容也有对应的条款和说明，请注意查看）</p>
<p>开发指南<br><a href="https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072" target="_blank" rel="noopener">应用程序编程指南（App Programming Guide）</a><br><a href="https://developer.apple.com/library/mac/documentation/General/Conceptual/ExtensibilityPG/" target="_blank" rel="noopener">应用扩展编程指南（App Extension Programming Guide）</a><br><a href="https://developer.apple.com/icloud/documentation/data-storage/index.html" target="_blank" rel="noopener">iOS数据存储条款（iOS Data Storage Guidelines）</a><br><a href="https://developer.apple.com/library/mac/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010672" target="_blank" rel="noopener">Mac OS X文件系统文档（Mac OS X File System Documentation）</a><br><a href="https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/Introduction/Introduction.html" target="_blank" rel="noopener">Safari扩展开发指南（Safari Extensions Development Guide）</a><br><a href="https://developer.apple.com/library/ios/iTunesConnectGuide/" target="_blank" rel="noopener">iTunes Connect开发指南（iTunes Connect Developer Guide）</a></p>
<p>设计指南<br><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/" target="_blank" rel="noopener">iOS人机交互界面条款（iOS Human Interface Guidelines）</a><br><a href="https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/OSXHIGuidelines/" target="_blank" rel="noopener">Mac OS人机交互界面条款（Mac OS Human Interface Guidelines）</a><br><a href="https://developer.apple.com/tvos/human-interface-guidelines/" target="_blank" rel="noopener">tvOS人机交互界面条款（tvOS Human Interface Guidelines）</a><br><a href="https://developer.apple.com/watch/human-interface-guidelines/" target="_blank" rel="noopener">watchOS人机交互界面条款（watchOS Human Interface Guidelines）</a></p>
<p>品牌营销指南<br><a href="https://developer.apple.com/app-store/marketing/guidelines/" target="_blank" rel="noopener">App Store市场营销条款（App Store Marketing Guidelines）</a><br><a href="https://developer.apple.com/apple-pay/Apple-Pay-Identity-Guidelines.pdf" target="_blank" rel="noopener">苹果支付身份条款（Apple Pay Identity Guidelines）</a><br><a href="https://developer.apple.com/wallet/Add-to-Apple-Wallet-Guidelines.pdf" target="_blank" rel="noopener">加入苹果支付许可条款（Add to Apple Wallet Guidelines）</a><br><a href="http://www.apple.com/legal/intellectual-property/guidelinesfor3rdparties.html" target="_blank" rel="noopener">使用Apple商标和版权的条款（Guidelines for Using Apple Trademarks and Copyrights）</a></p>
</li>
</ul>
<a id="more"></a>

<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>当用户从App Store安装应用的时候，他们需要确认这样的操作是安全的。所以应用程序不能包含令人不快或者冒犯性的内容，而且使用中不会造成身心伤害。我们列出了常见的几种缺陷，如果你的应用准备冒犯用户或者与用户发生冲突，App Store不是你的应用应该上架的地方。</p>
<h3 id="1-1不当内容"><a href="#1-1不当内容" class="headerlink" title="1.1不当内容"></a>1.1不当内容</h3><p>应用程序不应该包括攻击性，敏感，令人不悦，侮辱或者品味低下的内容。例如：</p>
<p>1.1.1 诽谤或者人格侮辱的内容，包括引用或者评论宗教、种族、性取向、性别或者其他目标群体的内容，特别是该应用对特定的人群造成了伤害（只有专业的政治讽刺作家和幽默大师才不会受到此限制）。</p>
<p>1.1.2 对人或动物被杀害、致残、折磨、虐待的逼真的描述或者具有暴力倾向的内容。如果是游戏，那么其中的敌人不能只针对特定的种族、文化、政府、公司以及任何其他实体。</p>
<p>1.1.3 鼓励人们非法或者轻率使用武器和危险品的内容，或者方便人们购买枪支的内容。</p>
<p>1.1.4 公开的性爱或色情的内容。根据韦氏词典（Webster’s Dictionary）的定义，这些内容特指“明确的描述或展示性器官，或者目的在于激发人们的性欲，而不是展示美学或者渲染气氛”。</p>
<p>1.1.5 煽动宗教仇恨或者对宗教文献的误导性和不准确的引用。</p>
<p>1.1.6 提供虚假信息和虚假功能，包括提供不正确的设备信息，提供恶作剧的功能例如虚假的位置跟踪工具。即便是明确指出该应用程序是出于娱乐性的目的也不会无视该条款。发送匿名虚假诈骗信息或者拨打恶意电话的应用会被直接拒绝。</p>
<h3 id="1-2-用户生成的内容"><a href="#1-2-用户生成的内容" class="headerlink" title="1.2 用户生成的内容"></a>1.2 用户生成的内容</h3><p>为了防止非法滥用用户生成的内容，从而给用户提供虚假信息、盗取用户的知识产权，社交应用以及应用当中包含用户生成的信息的应用必须包括下述功能：</p>
<ul>
<li>过滤不良内容</li>
<li>提供举报机制</li>
<li>后台服务可以提供阻止骚扰用户的行为</li>
<li>提供官方联系方式，让用户可以快速联系到开发商</li>
</ul>
<p>如果应用在使用用户生成的内容或者提供服务的时候，主要目的是发布色情内容，人肉搜索、侮辱用户，人身威胁、恐吓用户，这种应用不应该放在应用商店，而且苹果可能会不通知开发商并直接下架。如果你的应用使用用户生成的信息来提供网络服务，并且网页上包含了一些限制级的内容，需要默认隐藏并且提供明显的NSFW（不适合工作场所）标识，用户主动点击才会显示。</p>
<h3 id="1-3-儿童分类"><a href="#1-3-儿童分类" class="headerlink" title="1.3 儿童分类"></a>1.3 儿童分类</h3><p>儿童分类是人们找到适合儿童的应用的良好方式。如果你希望你的应用上架到这个类别当中，你需要关注并且在设计应用的时候需要照顾到儿童的良好体验。这些应用程序不可以包括指向其他应用的链接，付费入口以及其他可能会吸引儿童的不适合的内容，除非提供给家长监控和开启的能力。请记住，一旦客户期望你的应用程序遵循儿童类别的要求，那么它需要进行不断的修改从而满足后续版本的儿童类别的条款更新。即便是你打算取消发布在儿童类别当中也一样需要遵守这些条款。点此了解家长监控的更多内容。</p>
<p>儿童类别的应用不允许包括基于用户行为的广告（也就是这种广告会根据用户行为而决定展示什么样的内容）。如果包含了广告，这些广告必须也适合儿童。与此同时，你也需要特别留意世界各地有关在线收集儿童数据的相关法律法规。请务必查看本条款的隐私条款来了解更多的相关信息。</p>
<h3 id="1-4-人身伤害"><a href="#1-4-人身伤害" class="headerlink" title="1.4 人身伤害"></a>1.4 人身伤害</h3><p>如果你的应用程序可能会危害到人身安全，我们可能会拒绝掉它。这类情况包括：</p>
<p>1.4.1 如果你的应用属于医疗范畴，那我们将会对这个应用提供用于医疗诊断的信息的准确性进行更加严格的审查。如果你的医疗应用已经获得了相关监管部门的批准，你需要随同你的应用一并提供指向相关批准文档的链接用于审核</p>
<p>1.4.2 药物剂量计算器必须来自药物生产企业、医院、高校、健康保险公司以及其他具有合法资质的实体。或者你的计算方法已经获得了FDA或其他国际上的同行的认可。考虑到潜在的人身伤害的危险，我们需要确保你的应用会长期获得更新和支持</p>
<p>1.4.3 应用程序不允许鼓励人们非法摄入过量的酒精或药物，或者鼓励未成年人消费药物、酒精和烟草。与此同时，严禁销售大麻等毒品。</p>
<p>1.4.4 应用程序只能显示执法机构提供的酒后驾驶检查站，而且不允许鼓励人们进行危险的行为，包括酒驾、超速。</p>
<p>1.4.5 应用程序禁止强迫人们采用违背苹果硬件的安全文档的方式，包括冒着设备损坏或者造成人身伤害的危险使用他们的设备。例如，应用程序不应该鼓励人们将设备塞到床垫下面或枕头下面充电。</p>
<h3 id="1-5-开发者信息"><a href="#1-5-开发者信息" class="headerlink" title="1.5 开发者信息"></a>1.5 开发者信息</h3><p>用户需要了解当他们遇到问题的时候该如何与您联系。确保你提供的链接当中包含了使用户找到你的非常方便的方法。如果联系人信息不准确或者过期，这不仅令用户失望，在有些国家和地区这也属于违法行为。与此同时，确保支付许可包含发行商的有效联系信息，并且这些信息采用分配给发行商的来自权威机构的合法的根证书进行签名。</p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><h3 id="2-1-应用程序的完整性"><a href="#2-1-应用程序的完整性" class="headerlink" title="2.1 应用程序的完整性"></a>2.1 应用程序的完整性</h3><p>提审版本的应用必须是最终版本，并且包含了所有应用内容以及所有有效链接。应用在提交的时候需要清除掉所有占位符、无效地址和临时内容。确保你的应用在提交审核之前经过充分测试并且没有BUG，如果你的应用需要登陆，需要包含一个合法的账户而且对应的后台服务也是正常有效的。如果你的应用包含应用内付费，确保他们是完整的，最新的，并且审核人员可以很容易找到。如果不可以，需要提供明确的解释为何不行。请不要把应用程序审核当作软件测试服务，如果你的应用不完整或者存在明显的技术缺陷，它将直接被拒绝。</p>
<h3 id="2-2-Beta版测试"><a href="#2-2-Beta版测试" class="headerlink" title="2.2 Beta版测试"></a>2.2 Beta版测试</h3><p>您的应用程序的测试版本不应该上架到应用商店，请使用Testflight来代替。如果你的应用提交到Testflight Beta，那么这个应用已经准备好对外发布，并且符合应用审核条款。请注意，Testflight版本的应用不允许从测试人员当中获取任何利益，包括来自众筹的资金。你应该对测试人员提供明确的更新说明。请通过Testflight Beta测试说明了解更多信息。</p>
<h3 id="2-3-应用内容的准确性"><a href="#2-3-应用内容的准确性" class="headerlink" title="2.3 应用内容的准确性"></a>2.3 应用内容的准确性</h3><p>客户在下载你的应用的时候需要明确了解你的应用是什么，所以请确保你的应用描述、截图、预览视频始终是最新版本，并且能够准确反映你的应用。</p>
<p>2.3.1 不要在你的应用当中包含任何隐藏和没有相关说明文档的功能。你的应用程序的功能必须让用户和审核人员了解清楚。如果这样的行为过分或者反复出现，你可能会被苹果从开发者身份当中除名。我们努力确保App Store是一个令人信赖的生态系统，并且期望每一个开发者也能够遵守这种要求。如果你没有信誉，我们不想和你合作。</p>
<p>2.3.2 如果你的应用程序包含了应用内付费功能，请确保你的应用程序的描述、截图和预览视频能够明确表明哪些功能、关卡、订阅内容等需要额外购买。</p>
<p>2.3.3 你的截图必须符合你的应用程序的实际内容，而不是标题艺术，登陆界面和闪屏界面。</p>
<p>2.3.4 你的预览视频是让用户能够快速了解你的应用是用来做什么的好方法。为了确保人们可以清楚的了解他们将会在你的应用当中获得什么内容，你的预览视频必须从应用程序本身的运行效果当中捕获。你可以添加旁白或者文本描述来帮助解释视频本身无法解释清楚的内容。</p>
<p>2.3.5 你需要遵守App Store的类别定义，并且为你的应用选择最合适的类别。如果你选择的类别不符合你的应用，我们可能会帮助你改变应用类别。</p>
<p>2.3.6 你必须诚实的回答iTunes Connect上面提供的年龄分级的问题，从而你的应用可以良好的使用家长控制功能。如果你的应用年龄分级不正确，用户可能会对你的应用程序的行为表示十分意外，这也可能导致某些国家和地区的监管部门对你的应用分级不正确的问题开展调查。</p>
<p>2.3.7 你需要创建一个独一无二的应用名称，设计一套准确描述你的应用的关键词。不要尝试使用商标术语、流行的应用名称以及其他不相关的词语来包装你的应用。苹果可能随时修改不恰当的关键词。</p>
<p>2.3.8 你的应用内容应该适合所有的用户，所以一定要确保你的应用图标、截图和预览视频能够准确的反映你的应用。即使你的应用程序年龄分级高于4+，你的图标、截图和预览视频也必须符合4+的年龄分级。例如你的应用是一个游戏，并且具有暴力内容，你必须选择一个不反映死亡、枪决的截图放到应用商店当中。记住确保你的应用内容，包括应用名称和图标（小图标、大图标、Apple Watch图标等）是一致的从而防止用户感到迷惑。</p>
<p>2.3.9 开发商具有保证版权合法的责任，包括应用程序图标，截图，预览视频的版权。图标、截图和预览视频需要使用一个虚构的账户的信息，而不是一个真实的用户信息。</p>
<h3 id="2-4-硬件兼容性"><a href="#2-4-硬件兼容性" class="headerlink" title="2.4 硬件兼容性"></a>2.4 硬件兼容性</h3><p>2.4.1 为了确保人们可以尽可能充分的体验你的应用，在可能的情况下iPhone应用也可以完美支持iPad。我们鼓励您建立通用的应用，使得用户可以在不同的设备上使用。</p>
<p>2.4.2 你的应用需要高效的利用电量。应用程序不应该快速的消耗电池电量并且产生过多的热量，或者对用户的设备造成不必要的负担。</p>
<p>2.4.3 你的Apple TV应用可以在只有Siri遥控器或者游戏手柄的时候可以正常运行，但我们不反对你通过更多的外围设备增强你的应用功能的做法。如果你需要一个游戏控制器，请确保在游戏当中对这个游戏控制器提供明确的教程，从而让用户知道如何使用这个控制器。</p>
<p>2.4.4 应用程序不应该建议或者要求设备重新启动。</p>
<p>2.4.5 通过Mac App Store发布的应用还需要遵守额外的要求：</p>
<p>（i）它们必须适当的被沙盒化，而且遵守Mac OS文件系统文档。这些应用也必须通过对应的Mac OSAPI来修改其他应用的数据（例如书签、地址簿和日历）。</p>
<p>（ii）必须使用Xcode对应用进行打包，不允许包含第三方的安装程序。它们必须是自我包含的、单一文件的安装包，而且不能在共享的位置安装代码和解压资源。</p>
<p>（iii）在未经用户允许的情况下不允许自动启动或者开机启动，而且用户退出应用之后不允许在未经用户同意的情况下残留后台进程。应用不允许自动将图标放在Dock或者用户桌面。</p>
<p>（iv）应用程序不允许私自下载和安装其他应用，驱动，额外的代码，以及添加应用功能或者明显改变与审核版本的应用不同的应用工作方式的资源文件。</p>
<p>（v）应用程序不允许要求升级到root权限，或者使用setuid属性来升级权限。</p>
<p>（vi）这些应用运行的时候不允许弹出要求许可证的窗口，或者其他的显示方式来反盗版（应用商店允许付费并视为购买了正版授权）。</p>
<p>（vii）必须使用Mac App Store发布更新，其他方式不被允许。</p>
<p>（viii）应用程序仅在在当前版本的系统就可以运行，不允许使用可选安装的技术或者废弃过时的技术（例如Java, Rosetta等）</p>
<p>（ix）所有的本地化版本必须包含在同一个应用程序包下。</p>
<h3 id="2-5-软件要求"><a href="#2-5-软件要求" class="headerlink" title="2.5 软件要求"></a>2.5 软件要求</h3><p>2.5.1 应用程序只能使用公共API，不允许使用私有API。</p>
<p>2.5.2 应用程序bundle当中需要是自包含的，不允许读写它们设计的容器之外的数据，并且不得下载、安装或执行代码，包括其他iOS，watchOS，macOS和tvOS的应用。</p>
<p>2.5.3 如果应用程序传播病毒、文件、计算机代码或者其他可能损坏操作系统和硬件的功能，包括消息推送和游戏中心，将被拒绝。如果这种行为十分恶劣而且反复出现，开发者可能会被苹果除名。</p>
<p>2.5.4 多任务的应用只能在预期目的下运行后台服务，例如网络电话、音频播放、定位服务、任务计划、本地通知等。如果你的应用程序使用了定位服务，需要提供一个明确的提醒告诉用户这么做会加快电量消耗。</p>
<p>2.5.5 我们会在IPv6网络上审核你的应用，所以如果你的应用程序无法使用IPv6协议，可能会被拒绝。</p>
<p>2.5.6 应用程序如果浏览网络，必须使用WebKit框架和WebKit Javascript标准。</p>
<p>2.5.7 使用蜂窝数据网络播放的视频如果超过10分钟，必须使用HTTP Live Streaming技术并且提供192kbps的码率选项。</p>
<p>2.5.8 改动用户桌面/home界面环境体验的应用，以及模拟多应用小工具使用体验的的应用将会被拒绝。</p>
<p>2.5.9 应用程序如果修改了标准开关的功能，例如音量上下键和响铃开关，或者其他原生用户界面元素和行为将会被拒绝。</p>
<p>2.5.10 应用程序在提交的时候不允许包含一个空的广告栏或者测试广告。</p>
<h2 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h2><p>你的应用可以在App Store当中有多种方式赚钱。如果你的应用的商业模式不够明显，请在应用内容或者审核备注当中提供商业化描述。如果你的应用程序的行为我们无法理解，或者你的应用内付费入口不够明显，将会使得你的应用审核速度变慢甚至被拒绝。尽管定价权在你，但是如果你的应用或者应用内付费存在明显的敲竹杠的行为，我们也会拒绝发布这个应用或者这个应用内付费。我们会拒绝掉视图以不正常的高价格欺骗用户的昂贵的应用。</p>
<p>如果我们发现你视图诱导用户给较高评价等操纵评价的行为，例如通过支付来诱导、过滤不良评价、通过水军刷虚假评价或者通过第三方的公司或团队代表您进行这类操作，我们会采取措施来维护App Store的环境，其中可能包括将你从开发人员当中除名。</p>
<h3 id="3-1-付款"><a href="#3-1-付款" class="headerlink" title="3.1 付款"></a>3.1 付款</h3><p>3.1.1 应用内付费：如果你希望通过付费才可以解锁你的应用当中的一些功能（例如，订阅内容，游戏货币，游戏关卡，获取优质内容，解锁完整版本），你必须使用应用内付费（IAP）。应用程序不允许包括按钮、链接或者其他调用方式和行为指导用户采用非IAP的方式付费。通过IAP购买的游戏内的虚拟货币或积分必须只能在这个应用内才可以消费，不能过期，你应该确保你的应用针对具有可恢复的应用内付费具有恢复应用内付费的购买状态的功能和机制。如果你的应用内付费的付费类型不正确，你的应用会被拒绝。应用不可以直接或间接使用应用内付费的内容和功能向其他用户赠送礼品。在Mac应用商店发布的APP需要使用其他机制或者包含一个插件而不是应用商店本身来完成这样的赠送功能。</p>
<p>3.1.2 订阅：自动更新的订阅只能使用应用内付费来提供，并且只能用于期刊（例如报杂志），商业应用（例如企业、生产力、专业创作和云存储），媒体应用（例如视频，音频，语音和照片共享），以及其他批准的服务（例如约会计划、食谱管理和天气预报）。这些订阅必须持续不少于7天，而且从这款应用可以运行的用户的所有的设备当中都可以获取。你可能会提供跨应用程序的丁芸，但这些订阅内容不允许再扩展到第三方的应用或服务。</p>
<p>3.1.3 基于内容的“阅读”应用：应用可以允许用户访问他们之前购买的内容或者订阅的内容（比如报纸、杂志、书籍、音频，音乐，视频，专业的数据库，网络电话，云存储以及其他被批准的服务例如管理学生成绩和课程表的教育应用）。应用程序提供商不允许指引用户采用IAP之外的付费机制付费。</p>
<p>3.1.4 代码：应用不允许使用自己的机制来解锁应用内容和功能。包括许可证密钥，增强现实的标识，二维码等。在条件不允许的情况下（例如这个功能需要搭配特定的硬件才可以使用，比如天文应用程序在有望远镜的情况下可以扩展它的功能），这些应用可以不使用应用内付费来解锁这些功能。应用程序的功能如果搭配一个被批准的硬件来使用（例如一个玩具），可以只解锁基本的功能，并提供一个应用内付费解锁增值功能。您不允许要求用户购买一个不相关的产品或者参加一个市场营销活动来解锁应用的功能。</p>
<p>3.1.5 应用之外的商品和服务：如果你的应用允许人们购买商品和服务，但这些商品和服务的消费和该应用无关，你必须使用非IAP的方式完成支付。例如Apple Pay，信用卡和借记卡支付入口。应用程序可以使用批准的虚拟货币进行交易（例如比特币，狗狗币），只要这些付费方式遵守这个应用发布的国家和地区的相关法律法规即可。</p>
<p>3.1.6 ApplePay：使用Apple Pay的应用程序在出售商品或服务之前，必须提供所有商品和服务的信息给用户。必须正确的使用Apple Pay的品牌和用户界面元素，符合Apple Pay身份识别条款和人机交互界面条款（Apple Pay Identity Guidelines and Human Interface Guidelines）。使用Apple Pay提供定期付款必须提供下述信息：</p>
<p>定期的时间长度以及明确指出在取消之前定期付款将一直持续<br>每个周期提供什么样的功能和服务<br>实际收费的账单<br>取消定期付款的方式</p>
<h3 id="3-2-其他商业模式问题"><a href="#3-2-其他商业模式问题" class="headerlink" title="3.2 其他商业模式问题"></a>3.2 其他商业模式问题</h3><p>下面的列表并不全面，而且拟提交的应用可能会触犯我们以后更新的最新政策。但是这里面也提供了一些额外的你应该和不应该做的内容：</p>
<p>3.2.1 可接受的方式<br>（i）你的应用可以展示给用户你开发的其他应用，但你的应用程序不能仅仅是提供其他应用程序的目录应用</p>
<p>（ii）展示或者建议其他的第三方应用的集合，并且这些应用被设计为在特定领域才发挥作用（例如健康管理，航空服务，交通服务），你的应用程序需要提供强大的编辑能力，使得它看起来不像是一个单独的商店页面。</p>
<p>（iii）当租约过期的时候禁止用户访问特定的需要批准出租的内容（例如电影、电视节目、音乐和书籍）。但是其他的物品和服务不能过期。</p>
<p>（iv）支付许可可以用于付款或者收费，转移优惠券和票据（例如电影票，优惠券和VIP凭证）。其他用途可能会导致应用被拒绝或者撤销支付许可证书。</p>
<p>（v）保险类应用必须是免费的，符合发布地区的相关法律法规，且不能使用应用内付费。</p>
<p>3.2.2 不可接受的方式<br> （i）展示第三方应用的界面、扩展、插件看起来和App Store很像，或者作为一般的兴趣集合。</p>
<p>（ii）苹果的硬件和系统内置的功能需要付费才可以解锁，例如通知推送，照相机，陀螺仪。包括苹果服务，例如苹果音乐的访问能力和iCloud存储的访问能力。</p>
<p>（iii）人为的增加广告的展示量和点击量，包括应用程序被设计为主要展示广告的应用。</p>
<p>（iv）在应用内为慈善机构募捐资金。这类应用在应用商店必须免费而且必须使用其他方式募捐资金，例如通过短信，网页内支付。</p>
<p>（v）通过某种方式人为限制应用的使用人群，例如通过位置或者载体来限制。</p>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>苹果的客户十分喜欢那些简洁、精致、创新和易于使用的应用，这正是我们希望在应用商店当中看到的。尽管是你在创造出伟大的设计，但下面的这些标准都是通过应用商店审核的最低标准。</p>
<h3 id="4-1-模仿者"><a href="#4-1-模仿者" class="headerlink" title="4.1 模仿者"></a>4.1 模仿者</h3><p>拿出你自己的创意，我们知道你具有创意，所以请将你的创意实现出来。不要简单照搬应用商店当中的流行应用，或者仅仅对这个应用的名称和UI进行简单的修改并将其作为自己的应用。除了冒着侵犯他人知识产权的风险外，应用商店也难以搜索到正确的应用，并且这也使得你的同行受到不公正的待遇。</p>
<h3 id="4-2-最少功能"><a href="#4-2-最少功能" class="headerlink" title="4.2 最少功能"></a>4.2 最少功能</h3><p>你的应用在除了仅仅包装一个网站页面之外还要包含其他的功能和内容。如果你的应用程序不是特别有用、独特、或者看起来像是一个应用程序，那么它不应该在应用商店上架。如果你的应用没有提供持久的娱乐价值，或者仅限于让人们感觉毛骨悚然，这个应用可能会被拒。如果应用仅仅是一首歌曲或者一部电影，它应该被提交到iTunes Store。如果应用仅仅是一本书或者一本游戏指南，那它应该被提交到iBooks商店。</p>
<p>4.2.1 应用程序应该按照它的预期目的来调用API和开发框架。并且在应用描述当中明确指出这种融合方式。例如，HomeKit框架应该提供家庭自动化服务，HealthKit应该是基于健康和健身的目的并且集成在健康类应用程序当中。</p>
<p>4.2.2 除了目录用于提供专门的类别之外。应用程序的主要功能不应该是提供营销材料，广告，网络剪辑，内容聚合或者链接集合。</p>
<p>4.2.3 你的应用程序应该不依赖其他应用或功能就可以正常工作。</p>
<p>4.2.4 Apple Watch应用如果看起来像是一个表盘会令用户困惑，因为用户期望Apple Watch具有丰富的功能，例如刷卡，消息提醒和第三方服务。如果你的应用程序使用独特的方式展示时间是具有创造性的（例如对于冲浪爱好者展示潮汐的时间），但是如果你的应用看起来特别像传统的手表的表盘，我们会拒绝它。</p>
<p>4.2.5 如果应用的主要功能是访问iCloud以及iCloud的文件管理器，你需要提供额外的附加功能来使你的应用批准上架。</p>
<h3 id="4-3-垃圾应用"><a href="#4-3-垃圾应用" class="headerlink" title="4.3 垃圾应用"></a>4.3 垃圾应用</h3><p>不要为同一个应用程序创建多个Bundle ID。如果你的应用程序有多个版本，例如针对特定的国家和地区的版本，体育队伍，大学等，考虑提交一个版本的应用但是使用应用内付费来作区分。此外还要避免将你的应用放到已经饱和的分类下。App Store当中已经有了足够多的手电、放屁、打嗝、和某种不好的词语的应用。如果想要往App Store投放垃圾应用可能会导致你的开发者资格被撤销。</p>
<h3 id="4-4-扩展"><a href="#4-4-扩展" class="headerlink" title="4.4 扩展"></a>4.4 扩展</h3><p>应用程序扩展必须符合应用程序扩展开发指南（App Extension Programming Guide）或Safari扩展开发指南（Safari Extensions Development Guide），并且如果可能应该包括额外的功能，例如帮助界面，设置界面等。扩展应用的界面不应该包括市场营销内容，广告和应用内付费。</p>
<p>4.4.1 键盘扩展有一些额外的规则，他们必须：</p>
<p>提供键盘输入功能（比如键入字符）<br>提供切换输入法的方式<br>在无网络的情况下仍然可以正常使用<br>根据应用扩展开发指南（App Extension Programming Guide）的要求提供数字和符号输入键盘<br>如果键盘输入是这个应用的主要功能，那它的主要类别是工具（Utilities）<br>只基于增强iOS设备输入功能的目的收集用户信息</p>
<p>4.4.2 Safari扩展必须可以在当前OS X系统上的Safari浏览器上正常运行，它们不能干扰到系统和Safari UI元素，并且绝不能包含恶意或者误导用户的代码。违反此规则会被从开发者当中除名。</p>
<h3 id="4-5-苹果网站和服务"><a href="#4-5-苹果网站和服务" class="headerlink" title="4.5 苹果网站和服务"></a>4.5 苹果网站和服务</h3><p>4.5.1 应用可以订阅一些苹果提供的RSS源，例如iTunes Store RSS源。但是不能收集从苹果网站上获得的任何信息（包括apple.com，iTunes Store，App Store，iTunes Connect，开发人员门户网站等），或者创建一个基于这些信息的排名。</p>
<p>4.5.2 苹果音乐API可以允许用户在使用你的应用的时候访问他们的订阅内容。用户必须主动使用播放、暂停和跳过按钮来访问播放列表，不允许应用擅自访问和播放。此外你的应用不允许要求用户必须付费或者间接赚钱才可以访问苹果音乐服务（例如应用内付费，观看广告，获取用户信息等）。</p>
<p>4.5.3 不要使用苹果服务去发送垃圾信息，钓鱼，发送垃圾邮件。包括游戏中心，推送消息等。不要尝试反向追踪，扫描，嗅探，或者非法获取玩家ID，别名和其他来自Game Center的信息，否则你会被从开发者当中除名。</p>
<p>4.5.4 推送通知不得作为应用必选项才能使用这个应用，不能用于广告，促销和直销的目的，或者发送敏感和机密信息。</p>
<p>4.5.5 只能使用Game Center规定的方式访问Game Center玩家ID等信息，但不能展示在APP当中或者分发给第三方厂商。</p>
<h2 id="法律"><a href="#法律" class="headerlink" title="法律"></a>法律</h2><p>应用程序必须遵守当地的所有法律法规才可以正常使用（如果你不确认需要遵守哪些法律法规，请咨询律师）。我们了解这些事情十分复杂，但是保证遵守当地一切适用的法规是你应尽的义务，不仅仅是遵守我们的条款。当然，如果应用程序拉帮结派、煽动和蛊惑人们犯罪的这种鲁莽行为会直接导致应用被拒。</p>
<h3 id="5-1-隐私"><a href="#5-1-隐私" class="headerlink" title="5.1 隐私"></a>5.1 隐私</h3><p>保护隐私是苹果生态系统当中的重中之重。你应该谨慎小心的使用收集到的个人信息，以确保你遵守适用的法律条款和苹果开发人员计划许可协议（Apple Developer Program License Agreement）。更不用说这些都是用户对你的的期望。更具体地说：</p>
<p>5.1.1 数据收集和存储<br>（i）收集用户数据的应用必须具有隐私政策并且安全的取得用户的同意。这包括但不限于应用程序如果使用了HealthKit和其他医疗、健康技术的应用、HomeKit，键盘扩展，Apple Pay，并且包括登陆、访问设备上的用户数据（例如地理位置，通讯录，日历等）。</p>
<p>（ii）如果你的应用程序不包括明显需要使用用户账户的功能，那么请让用户不登陆的情况下就可以正常使用。应用程序不能要求用户输入用户个人信息来使用其中的功能，但核心功能必要或者法律要求的情况下除外。</p>
<p>（iii）开发人员如果使用应用窃取用户密码和其他隐私数据会从开发人员当中除名。</p>
<p>5.1.2 数据的使用和分享<br>（i）你在向用户提供明确的如何使用用户数据的说明文档并取得用户明确的许可之前，你的应用不能使用或者转移用户的数据。</p>
<p>（ii）如果不是基于提升用户体验，提升软硬件性能或者符合苹果开发者计划许可协议（Apple Developer Program License Agreement）的广告推广目的，不允许使用或者向第三方厂商告知用户数据。</p>
<p>（iii）从HomeKit API当中获得的数据不允许应用在广告投放和数据挖掘的目的。</p>
<p>（iv）使用苹果支付并且通过苹果支付获取用户数据的应用，在使用或向第三方厂商告知的时候只能基于促进或改善商品和服务的交付的目的。</p>
<p>5.1.3 卫生与健康研究<br>健康、健身和医疗数据十分敏感，所以这类应用程序需要遵守额外的规则以保护客户的隐私安全：</p>
<p>（i）如果目的是打广告或者用户数据挖掘（用于提升健康管理，或者用于获得了批准的科研目的除外），那么应用不得使用或者向第三方披露用户的健康、健身和医疗数据。这些数据来自但不限于HealthKit API，运动和健身功能，或者其他有关健康的学科的研究课题。</p>
<p>（ii）应用不能向HealthKit以及其他医疗研究和健康管理应用当中写入虚假数据，而且不能够在iCloud上存储健康数据。</p>
<p>（iii）致力于人类健康相关的学科研究必须在参与者的同意之下才可以进行，或者对于未成年人，他们的父母和监护人的同意之下才可以进行。相关许可条款必须包括（a）性质、宗旨和研究时长；（b）研究程序，风险和参与人的利害关系；（c）数据的保密性和管理方法，包括与第三方共享的任何数据；（d）参与者如果有疑问需要知道的联络方式；（e）参与者如何撤出的机制。</p>
<p>（iv）如果应用进行健康相关的研究必须具有独立的伦理审查委员会的许可。此类批准必须按照要求提供。</p>
<p>5.1.4 儿童<br>基于很多因素，在使用来自儿童的数据的时候务必保持谨慎。我们希望您在使用这些数据之前能够仔细了解相关要求和国际适用的法律条款，例如儿童在线隐私保护法（Children‘s online privacy protection act，COPPA）。</p>
<p>应用程序只能基于提供必要的功能和非年龄相关的娱乐价值的目的下，而且在遵守相关法律的前提下才可以请求获取孩子的生日和父母的联系方式。</p>
<p>此外，儿童类应用如果需要采集、传输、分享儿童的信息（包括姓名、地址、电子邮件、位置、照片、视频、图画、聊天功能、其他个人数据和与上述任何信息一起使用的永久的标识符），必须提供隐私条款，而且必须符合所有适用于儿童的隐私政策。为了明确起见，如果这类应用需要家长监控，通常这两种情况所需要提供的隐私条款会有所不同。点此了解详细信息。</p>
<p>5.1.5 位置服务<br>使用位置服务的应用程序必须提供和位置服务直接相关的功能。使用基于位置的API不允许用于提供紧急服务，或者实现自动控制车辆、飞行器以及其他设备（小型的设备例如小型无人机和玩具例外），远程控制汽车警报系统等。在收集、传输和使用用户的位置数据之前，请确保你已经取得了用户的同意。如果应用程序使用了后台定位服务，务必在应用当中阐明其目的。参考人机交互界面条款（Human Interface Guidelines）了解最佳的做法。</p>
<h3 id="5-2-知识产权"><a href="#5-2-知识产权" class="headerlink" title="5.2 知识产权"></a>5.2 知识产权</h3><p>确保你的应用只包括你创建的内容，或者在使用他人的内容的时候具有合法的许可协议。如果你在许可协议规定的方式之外使用这些内容可能会被苹果下架你的应用。当然，这也意味着其他盗用你的内容的应用也可能会被下架。如果你认为你的知识产权已经被侵犯，请填写这个表单发起诉讼申请。知识产权相关法规在每个国家和地区有所不同，但你的应用必须避免以下最基本的错误：</p>
<p>5.2.1 一般而言：不要使用受保护的第三方内容，如商标、版权作品，或者在你的应用当中使用未经专利许可的创意。不要包含误导、虚假，山寨的描述，名称和应用内容在你的应用当中。</p>
<p>5.2.2 第三方网站/服务：如果你的应用使用、访问、展示和商业化第三方的服务，请保证你已经获得了相应的授权许可。并且许可文件必须根据要求在审核前一并提供。</p>
<p>5.2.3 音频和视频下载：应用程序不能对非法分享、保存、转换或者来自第三方源的数据的非法使用提供方便（第三方来源包括Apple Music, YouTube, SoundCloud, Vimeo等），除非具有相应的合法授权协议。如果应用提供了音视频文件，可能这些文件也会违反知识产权，所以你的应用在提供这些文件和服务的访问能力之前务必具有合法授权协议并且必须按照要求在审核前提供。</p>
<p>5.2.4 苹果广告代言：不要明示或暗示苹果公司是你的应用的供应商，或者苹果为你的应用的功能和质量代言。如果你的应用被授予“编辑选择奖”，苹果会自动加上这个徽章。</p>
<p>5.2.5 苹果产品：禁止创建一个应用看起来与苹果已有的产品，用户界面（如Finder），应用（如App Store, iTunes Store或Messages），广告主题相似，并且不允许拼错苹果产品名称（如Iphone, iTunz）。iTunes音乐的预览不允许在取得对应的授权许可之前直接使用。例如作为拼图应用的背景音乐，游戏背景音乐等。如果你的应用展示了Activity圆圈，不允许修改圆圈的显示方式以及它们代表的数据。人机界面交互条款当中对如何使用Activity圆圈有更多的信息。</p>
<h3 id="5-3-游戏，赌博，彩票"><a href="#5-3-游戏，赌博，彩票" class="headerlink" title="5.3 游戏，赌博，彩票"></a>5.3 游戏，赌博，彩票</h3><p>赌博、游戏和彩票功能可能是最难以管理也是苹果应用商店当中最普遍的促销方式。只有当你完全明白相关法律风险并且已经准备好足够的时间应对监管部门的审查的时候才可以考虑使用。不过有些事情需要牢记：</p>
<p>5.3.1 抽奖和竞猜必须由应用开发商赞助</p>
<p>5.3.2 用于抽奖和竞猜的官方规则必须在应用当中予以提供，并且明确表明苹果公司不是赞助商或者以任何形式参与该活动。</p>
<p>5.3.3 应用不允许使用应用内付费购买信用点或者虚拟货币，并把它们与实际的货币结合使用，也不允许在应用当中购买彩票，抽奖券，和进行资金转移。</p>
<p>5.3.4 提供需要使用真实货币进行游戏的应用（例如体育博彩、扑克赌博、赌场游戏和赛马竞猜等）或者提供彩票，必须具有当地相关监管部门的合法的授权许可。而且发行的地区仅限于许可协议规定的地点，并且在应用商店当中必须是免费的。非法赌博的工具，包括计牌客不允许上架到App Store当中。彩票App必须具有下列要素：报酬，中奖几率和奖金。</p>
<p>After<br>提交应用之后<br>一旦你将应用程序和元数据提交到iTunes Connect当中，并且进入审核流程，这里有一些事情你需要牢记：</p>
<p>时间：应用审核团队会尽快审核你的应用，我们也一直努力加快审核速度。可以在此了解更多有关App审核的信息。</p>
<p>状态更新：你的应用的当前状态会在iTunes Connect当中直接反映。所以你可以在上面留意你的应用状态。</p>
<p>加急审核申请：如果你们对时间非常敏感，你们可以点此申请加急审核。请务必当你在真正需要它的情况下才进行加急审核，因为你也需要尊重你的同行。如果我们发现你在滥用这个系统，我们可能会拒绝你的加急申请。</p>
<p>发布日期：如果你的发布日期设为未来的某个时候，你的应用在到达那个时间点之前不会发布到应用商店上面，即便是已经通过了审核。请记住，你的应用在所有选定的应用商店上架可能需要长达24小时的时间。</p>
<p>被拒：我们的目标是严格遵守这些准则，但人无完人，如果你的应用程序被拒绝并且你对此表示疑问或者希望提供更多的信息，请使用解决方案中心来和应用审核团队直接沟通。这可能对你的应用尽快上架有帮助，而且这也可能帮助我们完善应用程序审核流程或者让我们发现审核政策当中表述不清的地方。如果你仍然对结果有异议，请点此提出上诉。</p>
<blockquote>
<p>Apple:We’re excited to see what you come up with next!<br>——我们很期待看到你们未来发布的产品！</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzIwNDAxNjIzNg==&mid=2650120083&idx=1&sn=73d9419687c25fece39eb5ac817d144d&scene=1&srcid=0616Vn6NAmGEqGYmXICtrXVY#rd" target="_blank" rel="noopener">中文翻译来源</a></li>
<li><a href="https://developer.apple.com/app-store/review/guidelines/" target="_blank" rel="noopener">官方App Store Review Guidelines</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Guidelines</tag>
        <tag>审核指南</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝牙通信</title>
    <url>/2016/03/18/Bluetooth-Communication/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="蓝牙-Bluetooth"><a href="#蓝牙-Bluetooth" class="headerlink" title="蓝牙(Bluetooth)"></a>蓝牙(Bluetooth)</h1><p>去App Store搜索并下载<strong>『LightBlue』</strong>这个App，对调试你的app和理解Core Bluetooth会很有帮助。</p>
<h2 id="蓝牙常见名称和缩写"><a href="#蓝牙常见名称和缩写" class="headerlink" title="蓝牙常见名称和缩写"></a>蓝牙常见名称和缩写</h2><ul>
<li><strong>MFI</strong> —— make for ipad ,iphone, itouch 专门为苹果设备制作的设备</li>
<li><strong>BLE</strong> —— buletouch low energy，蓝牙4.0设备因为低耗电，所以也叫做BLE</li>
<li><strong>peripheral,central</strong> —— 外设和中心，发起连接的设备为central，被连接的设备为perilheral</li>
<li><strong>service and characteristic</strong> —— 服务和特征，每个设备会提供服务和特征，类似于服务端的api，但是机构不同。每个设备都会有一些服务，每个服务里面都会有一些特征，特征就是具体键值对，提供数据的地方。每个特征属性分为这么几种：读，写，通知三种方式。</li>
<li><strong>Description</strong> —— 每个characteristic可以对应一个或多个Description用户描述characteristic的信息或属性</li>
</ul>
<p>MFI —— 开发使用ExternalAccessory 框架</p>
<p>4.0 BLE —— 开发使用CoreBluetooth 框架</p>
<a id="more"></a>

<h2 id="Core-Bluetooth概述"><a href="#Core-Bluetooth概述" class="headerlink" title="Core Bluetooth概述"></a>Core Bluetooth概述</h2><p>CoreBluetooth框架能够让你的iOS和Mac App能够和支持BLE的设备进行通信。比如，你的应用程序可以发现、搜索、以及和这些支持BLE的外围设备进行交互，比如心率监测器、数字温控器，甚至其他的iOS设备。</p>
<p>该框架基于BLE4.0规范，直接适用于蓝牙低功率设备的使用。是对于蓝牙 4.0规范的一个抽象，该框架隐藏了很多开发规范的底层实现细节，使您更容易开发出与蓝牙低功耗设备进行交互的App。因为该说明中涉及到蓝牙框架的一些概念和术语在本说明中已经被广泛采用，本文将向你介绍这个 Core Bluetooth 框架中的一些关键术语和概念。</p>
<h2 id="中央（Central）和外围设备（Peripheral）以及它们之间蓝牙通信的规则"><a href="#中央（Central）和外围设备（Peripheral）以及它们之间蓝牙通信的规则" class="headerlink" title="中央（Central）和外围设备（Peripheral）以及它们之间蓝牙通信的规则"></a>中央（Central）和外围设备（Peripheral）以及它们之间蓝牙通信的规则</h2><p>所有涉及蓝牙低功耗的交互中有两个主要的角色：中心<code>Central</code>和外围设备<code>Perpheral</code>。根据一些传统的<code>客户端-服务端</code>结构，<code>Peripheral</code>通常具有其他设备所需要的数据，而<code>Central</code>通常通过使用<code>Perpheral</code>的信息来实现一些特定的功能。如下图所示，例如，一个心率监听器可能含有一些有用的信息，你的 Mac/iOS app 可能需要以用户友好的方式显示用户的心率。</p>
<p><img src="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/Art/CBDevices1_2x.png" alt=""></p>
<h3 id="Central-发现并连接广播中的-Peripheral"><a href="#Central-发现并连接广播中的-Peripheral" class="headerlink" title="Central 发现并连接广播中的 Peripheral"></a>Central 发现并连接广播中的 Peripheral</h3><p>Peripheral向外广播一些广告包(Advertising)形式的数据，广告包是一个相对较小的、捆绑了外围可能包含的有用信息且必须提供的数据包，如外设的名称和主要功能。例如，一个数字温控器可能广播它能提供当前房间的温度。在低功耗蓝牙中，广播是Peripheral被获知的主要方式。<br>另一方面说，Central可以扫描和监听任何对广播内容感兴趣的Peripheral。如下图，Central可以请求连接任何已对外广播内容的Peripheral。</p>
<p><img src="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/Art/AdvertisingAndDiscovery_2x.png" alt=""></p>
<h3 id="数据在-Peripheral-中如何构成"><a href="#数据在-Peripheral-中如何构成" class="headerlink" title="数据在 Peripheral 中如何构成"></a>数据在 Peripheral 中如何构成</h3><p>连接到Peripheral的目的是为了对它所提供的数据进行探索和交互。在此之前，理解数据在Peripheral中是怎样构成的将会对我们有所帮助。  </p>
<p>Peripheral包含一个或者多个Service（服务）以及有关其连接信号强度的有用信息。Service是指为了实现一个功能或者特性的数据采集和相关行为的集合。例如，一个心率监听器的Service可能包含从监听心率传感器采集的心率数据。</p>
<p>Service本身由Characteristic（特征）或者包含其他被引用的Service组成。Characteristic提供了Peripheral的Service更多细节。例如，刚才描述的心率service中包含一个用来描述心率传感器位置信息的characteristic和另外一个发送测量心率数据的Characteristic（即这个服务包含了两个特征）。如下图阐述了一个心率监测器的服务和特征的数据可能的结构和特点。</p>
<p><img src="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/Art/CBPeripheralData_Example_2x.png" alt=""></p>
<h3 id="Central-在-Peripheral-上的数据探索及交互"><a href="#Central-在-Peripheral-上的数据探索及交互" class="headerlink" title="Central 在 Peripheral 上的数据探索及交互"></a>Central 在 Peripheral 上的数据探索及交互</h3><p>在Central成功与Peripheral建立连接后，就能发现到Peripheral提供的所有的Service和Characteristic。(广播数据可能只包含一部分可用的Service)<br>Central可以通过读写Service中Characteristic的value与Peripheral进行交互。例如，你的 App 也许会从数字温控器那里请求当前的室内温度，或者 App 向数字温控器提供一个值从而来设置当前房间的温度。</p>
<h2 id="Central、Peripherals及Peripheral数据的表示"><a href="#Central、Peripherals及Peripheral数据的表示" class="headerlink" title="Central、Peripherals及Peripheral数据的表示"></a>Central、Peripherals及Peripheral数据的表示</h2><p>在低功耗蓝牙通信中的主要角色(即前面提到的Central和Peripheral)及其数据通过简单、直接的方法映射到了CoreBluetooth框架中。</p>
<h3 id="Central-端的对象"><a href="#Central-端的对象" class="headerlink" title="Central 端的对象"></a>Central 端的对象</h3><p>当你使用本地Central和远程Peripheral进行交互(这里本地和远程的意思就是，比如你拿着手机搜索其他的设备，那么你的手机就是本地Central这端，其他的设备是远程Peripheral一端，这里的本地和远程是相对我们用户来说，表示空间距离，不是我们通常意义上的本地和远程，大家直接忽略本地和远程对理解也不会有什么影响)，在低功耗蓝牙通信中你通常扮演Central这端。除非你是建立一个本地Peripheral设备用来响应其他Central的请求，大多数的蓝牙交互由Central端完成。</p>
<h4 id="本地-Central-和远程-Peripheral"><a href="#本地-Central-和远程-Peripheral" class="headerlink" title="本地 Central 和远程 Peripheral"></a>本地 Central 和远程 Peripheral</h4><p>在Central端，本地Central设备用CBCentralManager对象表示。这些对象用来管理发现或连接远程Peripheral设备(表示为CBPeripheral)，包括扫描，发现和连接广播中的Peripheral。下图展示了在CoreBluetooth框架中本地 Central 和远程 Peripheral的对象表示。</p>
<p><img src="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/Art/CBObjects_CentralSide_2x.png" alt=""></p>
<h4 id="远程-Peripheral-数据表示为-CBService-和CBCharacteristic"><a href="#远程-Peripheral-数据表示为-CBService-和CBCharacteristic" class="headerlink" title="远程 Peripheral 数据表示为 CBService 和CBCharacteristic"></a>远程 Peripheral 数据表示为 CBService 和CBCharacteristic</h4><p>当你与远程Peripheral(表示为CBPeripheral)进行数据交互时，你将处理它的Service和Characteristic。在Core Bluetooth框架中，远程Peripheral的Service表示为CBService。相类似的，远程Peripheral中Service的Characteritic表示为CBCharacteristic。下图阐述了远程外围服务及特征的基础结构。</p>
<p><img src="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/Art/TreeOfServicesAndCharacteristics_Remote_2x.png" alt=""></p>
<h3 id="Peripheral-端的对象"><a href="#Peripheral-端的对象" class="headerlink" title="Peripheral 端的对象"></a>Peripheral 端的对象</h3><p>在OS X 10.9和iOS6以后，Mac和iOS设备可以设置成低功耗蓝牙的Peripheral，能够提供数据给其他的设备，包括其他的Macs，iPhones，iPads。当设置你的设备实现Peripheral角色时，你就可以完成低功耗蓝牙交互的Peripheral端功能。</p>
<h4 id="本地-Peripheral-和远程-Central"><a href="#本地-Peripheral-和远程-Central" class="headerlink" title="本地 Peripheral 和远程 Central"></a>本地 Peripheral 和远程 Central</h4><p>在Peripheral端，本地Peripheral设备用CBPeripheralManager对象来表示。这些对象用本地Peripheral设备的Service和Characteristic的数据库发布服务，广播给远程Central设备(表示为CBCentral)。CBPeripheralManager用时也用来响应远程Central的读写请求。下图展示了本地Peripheral和远程Central在CoreBluetooth框架中的表示。</p>
<p><img src="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/Art/CBObjects_PeripheralSide_2x.png" alt=""></p>
<h4 id="本地-Peripheral-数据表示为-CBMutableService-和-CBMutableCharacteristic"><a href="#本地-Peripheral-数据表示为-CBMutableService-和-CBMutableCharacteristic" class="headerlink" title="本地 Peripheral 数据表示为 CBMutableService 和 CBMutableCharacteristic"></a>本地 Peripheral 数据表示为 CBMutableService 和 CBMutableCharacteristic</h4><p>当你建立和本地Peripheral(表示为CBPeripheralManager)数据交互，你其实是在处理Service和Characteristic的可变版本。就可以处理Service和Characteristic的可变版本。在Core Bluetooth框架中，本地Peripheral的Service表示为CBMutableService。相应的本地Peripheral中Service的Characteristic表示为CBMutableCharacteristic。下图阐述了本地外围服务和特征的基本结构。</p>
<p><img src="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/Art/TreeOfServicesAndCharacteristics_Local_2x.png" alt=""></p>
<h2 id="蓝牙开发流程"><a href="#蓝牙开发流程" class="headerlink" title="蓝牙开发流程"></a>蓝牙开发流程</h2><p>CoreBluetooth框架的核心其实是两个东西，peripheral和central, 可以理解成外设和中心。对应他们分别有一组相关的API和类。<br><img src="http://file.blog.chaosky.tech/CoreBluetoothFramework.jpeg" alt=""><br>这两组api分别对应不同的业务场景，左侧叫做中心模式，就是以你的app作为中心，连接其他的外设的场景，而右侧称为外设模式，使用手机作为外设别其他中心设备操作的场景。<br>服务和特征，特征的属性(service and characteristic)：每个设备都会有一些服务，每个服务里面都会有一些特征，特征就是具体键值对，提供数据的地方。每个特征属性分为这么几种：读，写，通知这么几种方式。</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">//objcetive c特征的定义枚举</span><br><span class="line">typedef <span class="type">NS_OPTIONS</span>(<span class="type">NSUInteger</span>, <span class="type">CBCharacteristicProperties</span>) &#123;</span><br><span class="line">  <span class="type">CBCharacteristicPropertyBroadcast</span>												= 0x01,</span><br><span class="line">  <span class="type">CBCharacteristicPropertyRead</span>													= 0x02,</span><br><span class="line">  <span class="type">CBCharacteristicPropertyWriteWithoutResponse</span>									= 0x04,</span><br><span class="line">  <span class="type">CBCharacteristicPropertyWrite</span>													= 0x08,</span><br><span class="line">  <span class="type">CBCharacteristicPropertyNotify</span>													= 0x10,</span><br><span class="line">  <span class="type">CBCharacteristicPropertyIndicate</span>												= 0x20,</span><br><span class="line">  <span class="type">CBCharacteristicPropertyAuthenticatedSignedWrites</span>								= 0x40,</span><br><span class="line">  <span class="type">CBCharacteristicPropertyExtendedProperties</span>										= 0x80,</span><br><span class="line">  <span class="type">CBCharacteristicPropertyNotifyEncryptionRequired</span> <span class="type">NS_ENUM_AVAILABLE</span>(<span class="type">NA</span>, 6_0)		= 0x100,</span><br><span class="line">  <span class="type">CBCharacteristicPropertyIndicateEncryptionRequired</span> <span class="type">NS_ENUM_AVAILABLE</span>(<span class="type">NA</span>, 6_0)	= 0x200</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="蓝牙中心模式流程"><a href="#蓝牙中心模式流程" class="headerlink" title="蓝牙中心模式流程"></a>蓝牙中心模式流程</h3><ol>
<li>建立中心角色</li>
<li>扫描外设（discover）</li>
<li>连接外设(connect)</li>
<li>扫描外设中的服务和特征(discover)<ul>
<li>4.1 获取外设的services</li>
<li>4.2 获取外设的Characteristics,获取Characteristics的值，获取Characteristics的Descriptor和Descriptor的值</li>
</ul>
</li>
<li>与外设做数据交互(explore and interact)</li>
<li>订阅Characteristic的通知</li>
<li>断开连接(disconnect)</li>
</ol>
<h3 id="蓝牙外设模式流程"><a href="#蓝牙外设模式流程" class="headerlink" title="蓝牙外设模式流程"></a>蓝牙外设模式流程</h3><ol>
<li>启动一个Peripheral管理对象</li>
<li>本地Peripheral设置服务,特性,描述，权限等等</li>
<li>Peripheral发送广告</li>
<li>设置处理订阅、取消订阅、读characteristic、写characteristic的委托方法</li>
</ol>
<h3 id="蓝牙设备状态"><a href="#蓝牙设备状态" class="headerlink" title="蓝牙设备状态"></a>蓝牙设备状态</h3><ol>
<li>待机状态（standby）：设备没有传输和发送数据，并且没有连接到任何设</li>
<li>广播状态（Advertiser）：周期性广播状态</li>
<li>扫描状态（Scanner）：主动寻找正在广播的设备</li>
<li>发起链接状态（Initiator）：主动向扫描设备发起连接。</li>
<li>主设备（Master）：作为主设备连接到其他设备。</li>
<li>从设备（Slave）：作为从设备连接到其他设备。</li>
</ol>
<h3 id="蓝牙设备的五种工作状态"><a href="#蓝牙设备的五种工作状态" class="headerlink" title="蓝牙设备的五种工作状态"></a>蓝牙设备的五种工作状态</h3><p>准备（standby）<br>广播（advertising）<br>监听扫描（Scanning<br>发起连接（Initiating）<br>已连接（Connected）</p>
<h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><p>&lt;<a href="https://github.com/coolnameismy/BabyBluetooth&gt;" target="_blank" rel="noopener">https://github.com/coolnameismy/BabyBluetooth&gt;</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li>官网文档：<a href="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/CoreBluetoothOverview/CoreBluetoothOverview.html" target="_blank" rel="noopener">https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/CoreBluetoothOverview/CoreBluetoothOverview.html</a></li>
<li><a href="http://lynchwong.com/2014/12/15/iOS蓝牙，CoreBluetooth框架简介及入门使用/" target="_blank" rel="noopener">http://lynchwong.com/2014/12/15/iOS蓝牙，CoreBluetooth框架简介及入门使用/</a></li>
<li><a href="http://liuyanwei.jumppo.com/2015/07/17/ios-BLE-0.html" target="_blank" rel="noopener">http://liuyanwei.jumppo.com/2015/07/17/ios-BLE-0.html</a></li>
<li><a href="http://www.jianshu.com/p/760f042a1d81" target="_blank" rel="noopener">http://www.jianshu.com/p/760f042a1d81</a></li>
<li><a href="http://southpeak.github.io/blog/2014/07/29/core-bluetoothkuang-jia-zhi-%5B%3F%5D-:centralyu-peripheral/" target="_blank" rel="noopener">http://southpeak.github.io/blog/2014/07/29/core-bluetoothkuang-jia-zhi-%5B%3F%5D-:centralyu-peripheral/</a></li>
</ol>
<h1 id="多点通信（MultipeerConnectivity）"><a href="#多点通信（MultipeerConnectivity）" class="headerlink" title="多点通信（MultipeerConnectivity）"></a>多点通信（MultipeerConnectivity）</h1><p>去App Store搜索并下载 <strong>『FireChat』</strong> 这个App，对理解<code>Multipeer Connectivity</code>框架会很有帮助。</p>
<h2 id="MultipeerConnectivity概述"><a href="#MultipeerConnectivity概述" class="headerlink" title="MultipeerConnectivity概述"></a>MultipeerConnectivity概述</h2><p>那么Multipeer Connectivity框架到底能实现什么样的功能？即使在没有Wi-Fi和移动网络的情况下，利用Multipeer Connectivity框架，iOS设备之间也可以在一定范围内通过蓝牙和点对点的Wi-Fi连接进行通讯，这与利用Air Drop传输文件非常类似。</p>
<p>两台iOS设备在使用Multipeer Connectivity框架进行数据交换之前需要经过两个阶段——发现阶段和会话阶段。在发现阶段，使用Multipeer Connectivity框架的应用会浏览或通知周围可供连接的设备以便自己可以加入设备间的数据交换中。此时，两个应用之间是不能交换数据的。</p>
<p>当用户选择与某台设备连接在一起后，双方就进入了会话模式，这时它们将可以进行数据交互，比如，传送文字、图片等。</p>
<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p>用MultiPeerConnectivity进行通讯，如同三次握手的通讯类似，A先放出广播，B用于搜索！B搜到之后，会向A发送邀请，建立连接，当A接受了之后，A会向B发送一个会话(session)，若建立成功则可以互传数据！</p>
<h3 id="Advertising-amp-Discovering"><a href="#Advertising-amp-Discovering" class="headerlink" title="Advertising &amp; Discovering"></a>Advertising &amp; Discovering</h3><p>通信的第一步是让大家互相知道彼此，我们通过广播(Advertising)和发现(discovering)服务来实现。</p>
<p>广播作为服务器搜索附近的节点，而节点同时也去搜索附近的广播。在许多情况下，客户端同时广播并发现同一个服务，这将导致一些混乱，尤其是在client-server模式中。</p>
<p>每一个服务都应有一个类型（标示符），它是由ASCII字母、数字和“-”组成的短文本串，最多15个字符。通常，一个服务的名字应该由应用程序的名字开始，后边跟“-”和一个独特的描述符号。(作者认为这和 com.apple.* 标示符很像)，就像下边：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> XXServiceType = <span class="string">@"xx-service"</span>;</span><br></pre></td></tr></table></figure>

<p>一个节点有一个唯一标示MCPeerID对象，使用展示名称进行初始化，它可能是用户指定的昵称，或是单纯的设备名称。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">MCPeerID *localPeerID = <span class="comment">[<span class="comment">[MCPeerID alloc]</span> initWithDisplayName:<span class="comment">[<span class="comment">[UIDevice currentDevice]</span> name]</span>]</span>;</span><br></pre></td></tr></table></figure>

<h4 id="Creating-a-Session"><a href="#Creating-a-Session" class="headerlink" title="Creating a Session"></a>Creating a Session</h4><p>创建session，并在接受邀请连接时传递到节点。</p>
<p>MCSession有两个初始化方式：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">- (instance<span class="keyword">type</span>)initWithPeer:(<span class="type">MCPeerID</span> *)myPeerID</span><br><span class="line">- (instance<span class="keyword">type</span>)initWithPeer:(<span class="type">MCPeerID</span> *)myPeerID securityIdentity:(<span class="type">NSArray</span> *)identity encryptionPreference:(<span class="type">MCEncryptionPreference</span>)encryptionPreference</span><br></pre></td></tr></table></figure>

<p>myPeerID：本地节点标识符</p>
<p>securityIdentity：可选参数。通过X.509证书，它允许节点安全识别并连接其他节点。</p>
<p>encryptionPreference：指定是否加密节点之间的通信。MCEncryptionPreference枚举提供的三种值是:</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">MCEncryptionOptional:</span>会话更喜欢使用加密,但会接受未加密的连接。</span><br><span class="line"><span class="symbol">MCEncryptionRequired:</span>会话需要加密。</span><br><span class="line"><span class="symbol">MCEncryptionNone:</span>会话不应该加密。</span><br></pre></td></tr></table></figure>

<p>启用加密会显著降低传输速率，所以除非你的应用程序很特别，需要对用户敏感信息的处理，否则建议使用MCEncryptionNone。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">MCSession *session = [[MCSession alloc] <span class="string">initWithPeer:</span>localPeerID <span class="string">securityIdentity:</span>nil <span class="string">encryptionPreference:</span>MCEncryptionNone];</span><br><span class="line">session.delegate = self;</span><br></pre></td></tr></table></figure>

<p>MCSessionDelegate协议将会在发送和接受信息的部分被覆盖。</p>
<h4 id="Advertising"><a href="#Advertising" class="headerlink" title="Advertising"></a>Advertising</h4><h5 id="MCNearbyServiceAdvertiser"><a href="#MCNearbyServiceAdvertiser" class="headerlink" title="MCNearbyServiceAdvertiser"></a>MCNearbyServiceAdvertiser</h5><p>服务的广播通过MCNearbyServiceAdvertiser来操作，初始化时带着本地节点、服务类型以及任何可与发现该服务的节点进行通信的可选信息。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">MCNearbyServiceAdvertiser *advertiser = [[MCNearbyServiceAdvertiser alloc] <span class="string">initWithPeer:</span>localPeerID <span class="string">discoveryInfo:</span>nil <span class="string">serviceType:</span>XXServiceType];</span><br><span class="line">advertiser.delegate = self;</span><br><span class="line">[advertiser startAdvertisingPeer];</span><br></pre></td></tr></table></figure>

<p>相关事件由advertiser的代理来处理，需遵从MCNearbyServiceAdvertiserDelegate协议。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 广播失败</span></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">advertiser</span><span class="selector-pseudo">:(MCNearbyServiceAdvertiser</span> *)<span class="selector-tag">advertiser</span> <span class="selector-tag">didNotStartAdvertisingPeer</span><span class="selector-pseudo">:(NSError</span> *)<span class="selector-tag">error</span></span><br><span class="line"><span class="comment">// 是否接受或拒绝传入连接请求，并有权以拒绝或屏蔽任何来自该节点的后续请求选项</span></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">advertiser</span><span class="selector-pseudo">:(MCNearbyServiceAdvertiser</span> *)<span class="selector-tag">advertiser</span> <span class="selector-tag">didReceiveInvitationFromPeer</span><span class="selector-pseudo">:(MCPeerID</span> *)<span class="selector-tag">peerID</span> <span class="selector-tag">withContext</span><span class="selector-pseudo">:(NSData</span> *)<span class="selector-tag">context</span> <span class="selector-tag">invitationHandler</span><span class="selector-pseudo">:(void</span> (^)(BOOL accept, MCSession *session))<span class="selector-tag">invitationHandler</span></span><br></pre></td></tr></table></figure>

<h5 id="MCAdvertiserAssistant"><a href="#MCAdvertiserAssistant" class="headerlink" title="MCAdvertiserAssistant"></a>MCAdvertiserAssistant</h5><p>服务的广播通过MCAdvertiserAssistant来操作，初始化时带着服务类型以及Session信息。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">MCAdvertiserAssistant *advertiser = [[MCAdvertiserAssistant alloc]<span class="string">initWithServiceType:</span>XXServiceType <span class="string">discoveryInfo:</span>nil <span class="string">session:</span>session];</span><br><span class="line"><span class="comment">//开始广播</span></span><br><span class="line">[advertiser start];</span><br></pre></td></tr></table></figure>

<h4 id="Discovering"><a href="#Discovering" class="headerlink" title="Discovering"></a>Discovering</h4><p>客户端使用MCNearbyServiceBrowser来发现广播，它需要local peer标识符，以及非常类似MCNearbyServiceAdvertiser的服务类型来初始化：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">MCNearbyServiceBrowser</span> *<span class="keyword">browser </span>= [[MCNearbyServiceBrowser alloc] initWithPeer:localPeerID serviceType:XXServiceType]<span class="comment">;</span></span><br><span class="line"><span class="keyword">browser.delegate </span>= <span class="keyword">self;</span></span><br><span class="line"><span class="keyword">// </span>开始发现</span><br><span class="line">[<span class="keyword">browser </span>startBrowsingForPeers]<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>可能会有很多节点广播一个特定的服务，所以为了方便用户（或开发者），MCBrowserViewController将提供一个内置的、标准的方式来呈现链接到广播节点：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">MCBrowserViewController</span> *<span class="keyword">browserViewController </span>=</span><br><span class="line">    [[MCBrowserViewController alloc] initWithBrowser:<span class="keyword">browser</span></span><br><span class="line"><span class="keyword"> </span>                                            session:session]<span class="comment">;</span></span><br><span class="line"><span class="keyword">browserViewController.delegate </span>= <span class="keyword">self;</span></span><br><span class="line"><span class="keyword">[self </span>presentViewController:<span class="keyword">browserViewController</span></span><br><span class="line"><span class="keyword"> </span>                  animated:YES</span><br><span class="line"><span class="symbol">                 completion:</span></span><br><span class="line">^&#123;</span><br><span class="line">    // 开始发现</span><br><span class="line">    [<span class="keyword">browser </span>startBrowsingForPeers]<span class="comment">;</span></span><br><span class="line">&#125;]<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>当browser完成节点连接后，它将使用它的delegate调用browserViewControllerDidFinish:，以通知展示视图控制器–它应该更新UI以适应新连接的客户端。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#param mark - MCNearbyServiceBrowserDelegate</span></span><br><span class="line"><span class="comment">// 发现服务错误</span></span><br><span class="line">- (<span class="keyword">void</span>)browser:(MCNearbyServiceBrowser *)browser didNotStartBrowsingForPeers:(<span class="built_in">NSError</span> *)error</span><br><span class="line"><span class="comment">// 发现附近的广播者</span></span><br><span class="line">- (<span class="keyword">void</span>)browser:(MCNearbyServiceBrowser *)browser foundPeer:(MCPeerID *)peerID withDiscoveryInfo:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="built_in">NSString</span> *&gt; *)info</span><br><span class="line"><span class="comment">// 附近的广播者停止广播</span></span><br><span class="line">- (<span class="keyword">void</span>)browser:(MCNearbyServiceBrowser *)browser lostPeer:(MCPeerID *)peerID</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#param</span> <span class="selector-tag">mark</span> <span class="selector-tag">-</span> <span class="selector-tag">MCBrowserViewControllerDelegate</span></span><br><span class="line"><span class="comment">// 点击完成按钮</span></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">browserViewControllerDidFinish</span><span class="selector-pseudo">:(MCBrowserViewController</span> *)<span class="selector-tag">browserViewController</span></span><br><span class="line"><span class="comment">// 点击取消按钮</span></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">browserViewControllerWasCancelled</span><span class="selector-pseudo">:(MCBrowserViewController</span> *)<span class="selector-tag">browserViewController</span></span><br></pre></td></tr></table></figure>

<h3 id="Sending-amp-Receiving-Information"><a href="#Sending-amp-Receiving-Information" class="headerlink" title="Sending &amp; Receiving Information"></a>Sending &amp; Receiving Information</h3><p>一旦节点彼此相连，它们将能互传信息。Multipeer Connectivity框架区分三种不同形式的数据传输：</p>
<ul>
<li>Messages：定义明确的信息，比如端文本或者小序列化对象。</li>
<li>Streams：可连续传输数据（如音频，视频或实时传感器事件）的信息公开渠道。</li>
<li>Resources：是图片、电影以及文档的文件。</li>
</ul>
<h4 id="Messages"><a href="#Messages" class="headerlink" title="Messages"></a>Messages</h4><p>Messages使用-sendData:toPeers:withMode:error::方法发送。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *message = <span class="string">@"Hello, World!"</span>;</span><br><span class="line"><span class="built_in">NSData</span> *data = [message dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"><span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">if</span> (![<span class="keyword">self</span>.session sendData:data</span><br><span class="line">                    toPeers:peers</span><br><span class="line">                   withMode:MCSessionSendDataReliable</span><br><span class="line">                      error:&amp;error]) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"[Error] %@"</span>, error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过MCSessionDelegate方法 -sessionDidReceiveData:fromPeer:收取信息。以下是如何解码先前示例代码中发送的消息：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - MCSessionDelegate</span></span><br><span class="line">- (<span class="keyword">void</span>)session:(MCSession *)session</span><br><span class="line"> didReceiveData:(<span class="built_in">NSData</span> *)data</span><br><span class="line">       fromPeer:(MCPeerID *)peerID</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *message =</span><br><span class="line">        [[<span class="built_in">NSString</span> alloc] initWithData:data</span><br><span class="line">                              encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一种方法是发送NSKeyedArchiver编码的对象：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> &lt;<span class="built_in">NSSecureCoding</span>&gt; object = <span class="comment">// ...;</span></span><br><span class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSKeyedArchiver</span> archivedDataWithRootObject:object];</span><br><span class="line"><span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">if</span> (![<span class="keyword">self</span>.session sendData:data</span><br><span class="line">                    toPeers:peers</span><br><span class="line">                   withMode:MCSessionSendDataReliable</span><br><span class="line">                      error:&amp;error]) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"[Error] %@"</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - MCSessionDelegate</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)session:(MCSession *)session</span><br><span class="line"> didReceiveData:(<span class="built_in">NSData</span> *)data</span><br><span class="line">       fromPeer:(MCPeerID *)peerID</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSKeyedUnarchiver</span> *unarchiver = [[<span class="built_in">NSKeyedUnarchiver</span> alloc] initForReadingWithData:data];</span><br><span class="line">    unarchiver.requiresSecureCoding = <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">id</span> object = [unarchiver decodeObject];</span><br><span class="line">    [unarchiver finishDecoding];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了防范对象替换攻击,设置requiresSecureCoding为YES是很重要的，这样如果根对象类没有遵从&lt;NSSecureCoding&gt;，就会抛出一个异常。</p>
<h4 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h4><p>Streams 使用 -startStreamWithName:toPeer:方法发送：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">NSOutputStream *outputStream =</span><br><span class="line">    [<span class="meta">session startStreamWithName:name</span></span><br><span class="line"><span class="meta">                          toPeer:peer</span>];</span><br><span class="line">stream.<span class="keyword">delegate</span> = self;</span><br><span class="line">[<span class="meta">stream scheduleInRunLoop:[NSRunLoop mainRunLoop</span>]</span><br><span class="line">                forMode:NSDefaultRunLoopMode];</span><br><span class="line">[<span class="meta">stream open</span>];</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>Streams通过MCSessionDelegate的方法session:didReceiveStream:withName:fromPeer:来接收：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - MCSessionDelegate</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)session:(MCSession *)session</span><br><span class="line">didReceiveStream:(<span class="built_in">NSInputStream</span> *)stream</span><br><span class="line">       withName:(<span class="built_in">NSString</span> *)streamName</span><br><span class="line">       fromPeer:(MCPeerID *)peerID</span><br><span class="line">&#123;</span><br><span class="line">    stream.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [stream scheduleInRunLoop:[<span class="built_in">NSRunLoop</span> mainRunLoop]</span><br><span class="line">                      forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line">    [stream open];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入和输出的streams必须安排好并打开，然后才能使用它们。一旦这样做，streams就可以被读出和写入。</p>
<h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><p>Resources 发送使用 -sendResourceAtURL:withName:toPeer:withCompletionHandler::</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *fileURL = [<span class="built_in">NSURL</span> fileURLWithPath:<span class="string">@"path/to/resource"</span>];</span><br><span class="line"><span class="built_in">NSProgress</span> *progress =</span><br><span class="line">    [<span class="keyword">self</span>.session sendResourceAtURL:fileURL</span><br><span class="line">                           withName:[fileURL lastPathComponent]</span><br><span class="line">                             toPeer:peer</span><br><span class="line">                  withCompletionHandler:^(<span class="built_in">NSError</span> *error)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"[Error] %@"</span>, error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>返回的NSProgress对象可以是通过KVO(Key-Value Observed)来监视文件传输的进度，并且它提供取消传输的方法：-cancel。</p>
<p>接收资源实现MCSessionDelegate两种方法：-session:didStartReceivingResourceWithName:fromPeer:withProgress: 和 -session:didFinishReceivingResourceWithName:fromPeer:atURL:withError:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - MCSessionDelegate</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)session:(MCSession *)session</span><br><span class="line">didStartReceivingResourceWithName:(<span class="built_in">NSString</span> *)resourceName</span><br><span class="line">       fromPeer:(MCPeerID *)peerID</span><br><span class="line">   withProgress:(<span class="built_in">NSProgress</span> *)progress</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)session:(MCSession *)session</span><br><span class="line">didFinishReceivingResourceWithName:(<span class="built_in">NSString</span> *)resourceName</span><br><span class="line">       fromPeer:(MCPeerID *)peerID</span><br><span class="line">          atURL:(<span class="built_in">NSURL</span> *)localURL</span><br><span class="line">      withError:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSURL</span> *destinationURL = [<span class="built_in">NSURL</span> fileURLWithPath:<span class="string">@"/path/to/destination"</span>];</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (![[<span class="built_in">NSFileManager</span> defaultManager] moveItemAtURL:localURL</span><br><span class="line">                                                 toURL:destinationURL</span><br><span class="line">                                                 error:&amp;error]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"[Error] %@"</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次说明，在传输期间NSProgress parameter in -session:didStartReceivingResourceWithName:fromPeer:withProgress:允许接收节点来监控文件传输进度。在-session:didFinishReceivingResourceWithName:fromPeer:atURL:withError:中,delegate的责任是从临时localURL移动文件至永久位置。</p>
<p>Multipeer是突破性的API，其价值才刚刚开始被理解。虽然完整的支持功能比如AirDrop目前仅限于最新的设备，你应该会看到它将成为让所有人盼望的功能。</p>
<h2 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://www.cocoachina.com/industry/20140408/8118.html" target="_blank" rel="noopener">http://www.cocoachina.com/industry/20140408/8118.html</a></li>
<li><a href="https://www.objc.io/issues/18-games/multipeer-connectivity-for-games/" target="_blank" rel="noopener">https://www.objc.io/issues/18-games/multipeer-connectivity-for-games/</a></li>
<li><a href="http://blog.csdn.net/daiyibo123/article/details/48287079" target="_blank" rel="noopener">http://blog.csdn.net/daiyibo123/article/details/48287079</a></li>
<li><a href="http://www.jianshu.com/p/84b479039797" target="_blank" rel="noopener">http://www.jianshu.com/p/84b479039797</a></li>
<li><a href="http://www.jianshu.com/p/d1401793eeea" target="_blank" rel="noopener">http://www.jianshu.com/p/d1401793eeea</a></li>
</ol>
<h1 id="iBeacon"><a href="#iBeacon" class="headerlink" title="iBeacon"></a>iBeacon</h1><h2 id="iBeacon概述"><a href="#iBeacon概述" class="headerlink" title="iBeacon概述"></a>iBeacon概述</h2><p>维基百科定义</p>
<blockquote>
<p>iBeacon是apple公司提出的“一种可以让附近手持电子设备检测到的一种新的低功耗、低成本信号传送器”的一套可用于室内定位系统的协议。这种技术可以使一个智能手机或其他装置在一个iBeacon基站的感应范围内执行相应的命令。</p>
<p>这是帮助智能手机确定他们大概位置或环境的一个应用程序。在一个iBeacon基站的帮助下，智能手机的软件能大概找到它和这个iBeacon基站的相对位置。iBeacon能让手机收到附近售卖商品的通知，也可以让消费者不用拿出钱包或信用卡就能在销售点的POS机上完成支付。iBeacon技术通过低功耗蓝牙（BLE），也就是我们所说的智能蓝牙来实现。</p>
<p>iBeacon为利用低功耗蓝牙可以近距离感测的功能来传输通用唯一识别码的一个app或操作系统。这个识别码可以在网上被查找到用以确定设备的物理位置或者可以在设备上触发一个动作比如在社交媒体签到或者推送通知。</p>
</blockquote>
<p>iBeacon 是苹果公司在 iOS 7 中新推出的一种近场定位技术，可以感知一个附近的 iBeacon 信标的存在。<br>当一个 iBeacon 兼容设备进入/退出一个 iBeacon 信标标识的区域时，iOS 和支持 iBeacon 的 app 就能得知这一信息，从而对用户发出相应的通知。</p>
<p>典型的应用场景例如博物馆实时推送附近展品的相关信息，商场内即时通知客户折扣信息等。苹果在 Apple Store 中也部署了 iBeacon 来推送优惠、活动信息。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>iBeacon 基于低功耗蓝牙技术（Bluetooth Low Energy, BLE）这一开放标准，因此也继承了 BLE 的一些特点。</p>
<ul>
<li><p>范围广</p>
<p>相比于 NFC 的数厘米的识别范围，iBeacon 的识别范围可以达到数十米，并且能够估计距离的远近。</p>
</li>
</ul>
<ul>
<li><p>兼容性</p>
<p>iBeacon 是基于 BLE 做的一个简单封装，因此大部分支持 BLE 的设备都可以兼容。例如可以使用一个普通的蓝牙芯片作为信标，使用 Android 设备检测信标的存在。</p>
</li>
</ul>
<ul>
<li><p>低能耗</p>
<p>不少 beacon 实现宣称可以不依赖外部能源独立运行两年。</p>
</li>
</ul>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>我们以一个连锁商场的例子来讲解 iBeacon 的一个流程。在一个连锁商场中，店家需要在商场中的不同地方推送不同的优惠信息，比如服装和家居柜台推送的消息就很有可能不同。</p>
<p>当消费者走进某个商场时，会扫描到一个 beacon。这个 beacon 有三个标志符，proximityUUID 是一个整个公司（所有连锁商场）统一的值，可以用来标识这个公司，major 值用来标识特定的连锁商场，比如消费者正在走进的商场，minor 值标识了特定的一个位置的 beacon，例如定位到消费者正在门口。</p>
<p>这时商场的 app 会被系统唤醒，app 可以运行一个比较短的时间。在这段时间内，app 可以根据 beacon 的属性查询到用户的地理位置（通过查询服务器或者本地数据），例如在化妆品专柜，之后就可以通过一个 local notification 推送化妆品的促销信息。用户可以点击这次 local notification 来查看更详细的信息，这样一次促销行为就完成了。</p>
<h2 id="iBeacon使用"><a href="#iBeacon使用" class="headerlink" title="iBeacon使用"></a>iBeacon使用</h2><p>使用iBeacon需要添加2个库的支持，CoreLocation.framework、CoreBluetooth.framework</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;CoreLocation/CoreLocation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;CoreBluetooth/CoreBluetooth.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>宏定义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UUID @<span class="meta-string">"E2C56DB5-DFFB-48D2-B060-D0F5A71096E4"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IDENTIFIER [NSBundle mainBundle].bundleIdentifier</span></span><br></pre></td></tr></table></figure>

<p>成员变量</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建立iBeacon服务端，只负责发送出去数据</span></span><br><span class="line"><span class="built_in">CLBeaconRegion</span> * serverBeaconRegion;</span><br><span class="line">CBPeripheralManager * peripheralMsg;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立iBeacon客户端,只负责接收数据</span></span><br><span class="line"><span class="built_in">CLLocationManager</span> * locationManager;</span><br><span class="line"><span class="built_in">CLBeaconRegion</span> * findBeaconRegion;</span><br><span class="line"><span class="comment">//对于商场应用，我们多数可能只需要客户端，而不一定需要服务端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们还需要字典，记录发送端的返回数据</span></span><br><span class="line"><span class="built_in">NSMutableDictionary</span> * regionData;</span><br></pre></td></tr></table></figure>

<h3 id="使用-iOS-设备作为-iBeacon"><a href="#使用-iOS-设备作为-iBeacon" class="headerlink" title="使用 iOS 设备作为 iBeacon"></a>使用 iOS 设备作为 iBeacon</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务端设置主频和副频 unsigned short最大数不超过65535</span></span><br><span class="line"><span class="comment">//主频(最有效值)</span></span><br><span class="line">CLBeaconMajorValue major=<span class="number">1430</span>;</span><br><span class="line"><span class="comment">//副频(最低有效值)</span></span><br><span class="line">CLBeaconMinorValue minor= <span class="number">1000</span>;</span><br><span class="line"><span class="comment">//创建UUID</span></span><br><span class="line">NSUUID * user = [[NSUUID alloc]<span class="string">initWithUUIDString:</span>UUID];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建发现信息</span></span><br><span class="line">serverBeaconRegion = [[CLBeaconRegion alloc]<span class="string">initWithProximityUUID:</span>user <span class="string">major:</span>major <span class="string">minor:</span>minor <span class="string">identifier:</span>IDENTIFIER];</span><br><span class="line"><span class="comment">//发现信息计算成字典</span></span><br><span class="line">regionData = [serverBeaconRegion <span class="string">peripheralDataWithMeasuredPower:</span>nil];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务</span></span><br><span class="line">peripheralMsg = [[CBPeripheralManager alloc]<span class="string">initWithDelegate:</span>self <span class="string">queue:</span>dispatch_get_main_queue()];</span><br></pre></td></tr></table></figure>

<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pragma mark - CBPeripheralManagerDelegate</span></span><br><span class="line">-(void)peripheralManagerDidUpdateState:(CBPeripheralManager *)peripheral</span><br><span class="line">&#123;</span><br><span class="line">    //检测状态</span><br><span class="line">    if (peripheral.<span class="keyword">state</span>==CBPeripheralManagerStatePoweredOn) &#123;</span><br><span class="line">        //可以开始</span><br><span class="line">        [peripheral startAdvertising:regionData];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if (peripheral.<span class="keyword">state</span>==CBPeripheralManagerStatePoweredOff) &#123;</span><br><span class="line">            //关闭</span><br><span class="line">            [peripheral stopAdvertising];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-iOS-设备发现-iBeacon"><a href="#使用-iOS-设备发现-iBeacon" class="headerlink" title="使用 iOS 设备发现 iBeacon"></a>使用 iOS 设备发现 iBeacon</h3><p>不用设置主频和副频，需要设置UUID</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">NSUUID *user = [[NSUUID alloc]<span class="string">initWithUUIDString:</span>UUID];</span><br><span class="line"><span class="comment">//注意这里初始化和服务端的初始化有所区别</span></span><br><span class="line">findBeaconRegion = [[CLBeaconRegion alloc]<span class="string">initWithProximityUUID:</span>user <span class="string">identifier:</span>IDENTIFIER];</span><br><span class="line">locationManager = [[CLLocationManager alloc]init];</span><br><span class="line">locationManager.delegate=self;</span><br><span class="line"><span class="comment">// NSLocationAlwaysUsageDescription</span></span><br><span class="line"><span class="comment">// 请求用户定位权限</span></span><br><span class="line">[locationManager requestAlwaysAuthorization];</span><br><span class="line"><span class="comment">//开启搜索</span></span><br><span class="line">[locationManager <span class="string">startRangingBeaconsInRegion:</span>findBeaconRegion];</span><br><span class="line">[locationManager <span class="string">startMonitoringForRegion:</span>findBeaconRegion];</span><br><span class="line">[locationManager <span class="string">requestStateForRegion:</span>findBeaconRegion];</span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - CLLocationManagerDelegate</span></span><br><span class="line"><span class="comment">// 用户定位授权回调</span></span><br><span class="line">- (<span class="keyword">void</span>)locationManager:(<span class="built_in">CLLocationManager</span> *)manager didChangeAuthorizationStatus:(<span class="built_in">CLAuthorizationStatus</span>)status</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (status == kCLAuthorizationStatusAuthorizedAlways) &#123;</span><br><span class="line">        <span class="comment">//开启iBeacon搜索</span></span><br><span class="line">        [manager startRangingBeaconsInRegion:findBeaconRegion];</span><br><span class="line">        [manager startMonitoringForRegion:findBeaconRegion];</span><br><span class="line">        [manager requestStateForRegion:findBeaconRegion];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 近距离回调</span></span><br><span class="line">-(<span class="keyword">void</span>)locationManager:(<span class="built_in">CLLocationManager</span> *)manager didDetermineState:(<span class="built_in">CLRegionState</span>)state forRegion:(<span class="built_in">CLRegion</span> *)region</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//近距离回调，有三个状态，三个状态分别在我们距离1米以内的时候触发</span></span><br><span class="line">    <span class="keyword">if</span> (state==<span class="built_in">CLRegionStateInside</span>) &#123;</span><br><span class="line">        <span class="comment">//在1米以内</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state==<span class="built_in">CLRegionStateOutside</span>) &#123;</span><br><span class="line">            <span class="comment">//在1米以外</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//不知道CLRegionStateUnknown;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>)locationManager:(<span class="built_in">CLLocationManager</span> *)manager didEnterRegion:(<span class="built_in">CLRegion</span> *)region</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//该方法在推出后台，并且锁屏情况下依然可以触发，我们可以设置当我们进入后台时候，设置本地推送来提示用户进入一个范围即可</span></span><br><span class="line">    <span class="comment">//判断是否在后台</span></span><br><span class="line">    <span class="built_in">UIApplicationState</span> back=[<span class="built_in">UIApplication</span> sharedApplication].applicationState;</span><br><span class="line">    <span class="keyword">if</span> (back==<span class="built_in">UIApplicationStateBackground</span>) &#123;</span><br><span class="line">        <span class="comment">//在后台，我们需要执行推送告知用户</span></span><br><span class="line">        <span class="built_in">UILocalNotification</span>*local=[[<span class="built_in">UILocalNotification</span> alloc]init];</span><br><span class="line">        <span class="comment">//设置时间</span></span><br><span class="line">        local.fireDate=[<span class="built_in">NSDate</span> date];</span><br><span class="line">        <span class="comment">//设置文字</span></span><br><span class="line">        local.alertBody=<span class="string">@"我们进入一个店铺"</span>;</span><br><span class="line">        <span class="comment">//加入推送</span></span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication]scheduleLocalNotification:local];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"进入了一个iBeacon，欢迎光临"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>)locationManager:(<span class="built_in">CLLocationManager</span> *)manager didExitRegion:(<span class="built_in">CLRegion</span> *)region</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"离开了一个iBeacon，欢迎再次光临"</span>);</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>)locationManager:(<span class="built_in">CLLocationManager</span> *)manager didRangeBeacons:(<span class="built_in">NSArray</span> *)beacons inRegion:(<span class="built_in">CLBeaconRegion</span> *)region</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//扫描结果</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"扫描结果，该函数会一直调用"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;beacons.count; i++) &#123;</span><br><span class="line">        <span class="comment">//读取灯塔</span></span><br><span class="line">        <span class="built_in">CLBeacon</span>*beacon=beacons[i];</span><br><span class="line">        <span class="comment">//其中的数据转换为字符串</span></span><br><span class="line">        <span class="built_in">NSString</span>*message= [<span class="keyword">self</span> beaconValue:beacon];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"beacon~~~%@"</span>,message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置复用过程</span></span><br><span class="line">        <span class="built_in">UITextView</span>*textView=(<span class="built_in">UITextView</span>*)[<span class="keyword">self</span>.view viewWithTag:beacon.minor.integerValue];</span><br><span class="line">        <span class="keyword">if</span> (textView) &#123;</span><br><span class="line">            textView.text=message;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//创建</span></span><br><span class="line"></span><br><span class="line">            textView=[[<span class="built_in">UITextView</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(num%<span class="number">3</span>*<span class="number">110</span>, num/<span class="number">3</span>*<span class="number">200</span>+<span class="number">64</span>, <span class="number">100</span>, <span class="number">190</span>)];</span><br><span class="line">            textView.backgroundColor=[<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">            textView.textColor=[<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">            <span class="comment">//复用的关键</span></span><br><span class="line">            textView.tag=beacon.minor.integerValue;</span><br><span class="line">            [<span class="keyword">self</span>.view addSubview:textView];</span><br><span class="line">            <span class="comment">//设置num+1</span></span><br><span class="line">            num=num+<span class="number">1</span>;</span><br><span class="line">            textView.text=message;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">-(<span class="built_in">NSString</span>*)beaconValue:(<span class="built_in">CLBeacon</span>*)beacon&#123;</span><br><span class="line">    <span class="comment">//获取主频和副频</span></span><br><span class="line">    <span class="built_in">NSString</span>*major=beacon.major.stringValue;</span><br><span class="line">    <span class="built_in">NSString</span>*minor=beacon.minor.stringValue;</span><br><span class="line">    <span class="comment">//获取距离</span></span><br><span class="line">    <span class="built_in">NSString</span>*acc=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%lf"</span>,beacon.accuracy];</span><br><span class="line">    <span class="comment">//获取感知，当距离非常近的时候告诉我接近程度 proximity是一个枚举</span></span><br><span class="line">    <span class="built_in">NSString</span>*px=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%ld"</span>,beacon.proximity];</span><br><span class="line">    <span class="comment">//信号强度</span></span><br><span class="line">    <span class="built_in">NSString</span>*rssi=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%ld"</span>,beacon.rssi];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组装字符串</span></span><br><span class="line">    <span class="built_in">NSString</span>*message=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"主频~%@\n副频~%@\n距离~%@\n感知~%@\n信号强度~%@\n"</span>,major,minor,acc,px,rssi];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>)locationManager:(<span class="built_in">CLLocationManager</span> *)manager rangingBeaconsDidFailForRegion:(<span class="built_in">CLBeaconRegion</span> *)region withError:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"扫描失败"</span>);</span><br><span class="line">    <span class="comment">//当扫描启动失败以后，也就是用户没有开启蓝牙导致的失败，我们需要提示用户如何打开iBeacon，这个过程其实是诱导用户打开，判断是否在后台如果在后台就不进行任何操作了</span></span><br><span class="line">    <span class="comment">//该功能在iOS7下的各个版本表现不一样，iOS7.0时候启动失败，就算打开蓝牙开关也无效，只能通过重启手机办法才可以做到，iOS7.1.2的时候，苹果明确说明了特意修复了该功能，但是实际表现结果依然差劲，还是需要重启解决，但是这个说明在上线时候，苹果对审核的时候，也表示可以理解，并在会发一封致歉信给苹果开发者</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://zh.wikipedia.org/wiki/IBeacon" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/IBeacon</a></li>
<li><a href="https://developer.apple.com/ibeacon/" target="_blank" rel="noopener">https://developer.apple.com/ibeacon/</a></li>
<li><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-04-23-ios7-ibeacons-tutorial.md" target="_blank" rel="noopener">https://github.com/nixzhu/dev-blog/blob/master/2014-04-23-ios7-ibeacons-tutorial.md</a></li>
<li><a href="http://tech.meituan.com/iBeacaon-first-glance.html" target="_blank" rel="noopener">http://tech.meituan.com/iBeacaon-first-glance.html</a></li>
<li><a href="http://www.jianshu.com/p/7816b016ceac" target="_blank" rel="noopener">http://www.jianshu.com/p/7816b016ceac</a></li>
</ol>
<h1 id="Demo-下载"><a href="#Demo-下载" class="headerlink" title="Demo 下载"></a>Demo 下载</h1><p><a href="https://github.com/chaoskyx/Demo/tree/master/Bluetooth" target="_blank" rel="noopener">https://github.com/chaoskyx/Demo/tree/master/Bluetooth</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Bluetooth</tag>
        <tag>BLE</tag>
        <tag>MultipeerConnectivity</tag>
        <tag>iBeacon</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 支付</title>
    <url>/2016/01/21/iOS-Payment/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>iOS支付分为两类，<strong>第三方支付</strong>和<strong>应用内支付（内购）</strong>。</p>
<p>第三方支付包括：支付宝支付、微信支付、银联支付、百度钱包、京东支付等等。</p>
<p>应用内支付（In-App Purchase）：在应用程序内购买虚拟商品。如果你在App Store上销售的应用程序，将收到支付金额的70％。</p>
<a id="more"></a>

<h2 id="第三方支付"><a href="#第三方支付" class="headerlink" title="第三方支付"></a>第三方支付</h2><h3 id="弹出方式"><a href="#弹出方式" class="headerlink" title="弹出方式"></a>弹出方式</h3><h4 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h4><p>有些第三方支付没有安装客户端，可以直接弹出网页进行支付。（比如支付宝）</p>
<h4 id="调用APP"><a href="#调用APP" class="headerlink" title="调用APP"></a>调用APP</h4><p>手机中安装了客户端可以跳转到APP中进行支付。微信支付只能调用App进行支付。</p>
<h3 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h3><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ul>
<li>支付宝开放平台（SDK&amp;开发文档）：<a href="https://open.alipay.com/platform/home.htm" target="_blank" rel="noopener">https://open.alipay.com/platform/home.htm</a></li>
<li>移动支付集成：<a href="https://doc.open.alipay.com/doc2/detail?treeId=59&amp;articleId=103563&amp;docType=1" target="_blank" rel="noopener">https://doc.open.alipay.com/doc2/detail?treeId=59&amp;articleId=103563&amp;docType=1</a></li>
<li>商户服务平台（与支付宝签约需要填写的公司资料）：<a href="https://b.alipay.com/newIndex.htm" target="_blank" rel="noopener">https://b.alipay.com/newIndex.htm</a></li>
</ul>
<h4 id="支付流程"><a href="#支付流程" class="headerlink" title="支付流程"></a>支付流程</h4><ol>
<li><p>在商户服务平台先与支付宝签约，获得商户ID（partner）和账号ID（seller），需要提供公司资质或者营业执照，个人无法申请。</p>
<p>文档地址：<a href="https://doc.open.alipay.com/doc2/detail?treeId=58&amp;articleId=103542&amp;docType=1" target="_blank" rel="noopener">https://doc.open.alipay.com/doc2/detail?treeId=58&amp;articleId=103542&amp;docType=1</a></p>
</li>
<li><p>生成并下载相应的公钥私钥文件（加密签名用）</p>
<p>文档地址：<a href="https://doc.open.alipay.com/doc2/detail.htm?spm=0.0.0.0.POMYKl&amp;treeId=58&amp;articleId=103543&amp;docType=1" target="_blank" rel="noopener">https://doc.open.alipay.com/doc2/detail.htm?spm=0.0.0.0.POMYKl&amp;treeId=58&amp;articleId=103543&amp;docType=1</a></p>
</li>
<li><p>下载支付宝SDK：<a href="https://doc.open.alipay.com/doc2/detail?treeId=54&amp;articleId=103419&amp;docType=1" target="_blank" rel="noopener">https://doc.open.alipay.com/doc2/detail?treeId=54&amp;articleId=103419&amp;docType=1</a></p>
</li>
<li><p>生成订单信息</p>
</li>
<li><p>调用支付宝客户端，由支付宝客户端跟支付宝安全服务器打交道</p>
</li>
<li><p>支付完毕后返回支付结果给商户客户端和服务器</p>
</li>
</ol>
<p>SDK里有集成支付宝功能的一个Demo，集成支付功能的具体操作方式，可以参考Demo。</p>
<h4 id="代码集成流程"><a href="#代码集成流程" class="headerlink" title="代码集成流程"></a>代码集成流程</h4><p>参考文档地址：<a href="https://doc.open.alipay.com/doc2/detail.htm?spm=0.0.0.0.efmKDS&amp;treeId=59&amp;articleId=103676&amp;docType=1" target="_blank" rel="noopener">https://doc.open.alipay.com/doc2/detail.htm?spm=0.0.0.0.efmKDS&amp;treeId=59&amp;articleId=103676&amp;docType=1</a></p>
<ol>
<li><p>下载官方SDK</p>
<p>下载地址：<a href="https://doc.open.alipay.com/doc2/detail?treeId=54&amp;articleId=103419&amp;docType=1" target="_blank" rel="noopener">https://doc.open.alipay.com/doc2/detail?treeId=54&amp;articleId=103419&amp;docType=1</a></p>
<p>本Demo使用的SDK是从官方Demo整理出来的，整理的SDK版本：201501022。</p>
<p>下载地址：<a href="http://file.blog.chaosky.tech/AlipaySDK.zip" target="_blank" rel="noopener">http://file.blog.chaosky.tech/AlipaySDK.zip</a></p>
<p>目录结构如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">├── <span class="module-access"><span class="module"><span class="identifier">AlipaySDK</span>.</span></span>bundle</span><br><span class="line">├── <span class="module-access"><span class="module"><span class="identifier">AlipaySDK</span>.</span></span>framework</span><br><span class="line">├── <span class="module-access"><span class="module"><span class="identifier">Order</span>.</span></span>h</span><br><span class="line">├── <span class="module-access"><span class="module"><span class="identifier">Order</span>.</span></span>m</span><br><span class="line">├── Util</span><br><span class="line">├── libcrypto.a</span><br><span class="line">├── libssl.a</span><br><span class="line">└── openssl</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li><code>AlipaySDK.bundle</code>和<code>AlipaySDK.framework</code>是支付宝SDK</li>
<li><code>Order</code>类：定义订单信息</li>
<li><code>Util、libcrypto.a、libssl.a、openssl</code>：数据签名，对订单信息进行加密</li>
</ul>
</li>
<li><p>添加依赖库</p>
<p><img src="https://img.alicdn.com/top/i1/LB1PlBHKpXXXXXoXXXXXXXXXXXX" alt=""></p>
<p>其中，需要注意的是：</p>
<p>如果是Xcode 7.0之后的版本，需要添加libc++.tbd、libz.tbd；</p>
<p>如果是Xcode 7.0之前的版本，需要添加libc++.dylib、libz.dylib。</p>
</li>
<li><p>创建<code>prefix header file</code>PCH文件，添加<code>#import &lt;Foundation/Foundation.h&gt;</code></p>
<p>在<code>Build Settings</code>中的<code>prefix header</code>设置pch文件路径</p>
</li>
<li><p>在<code>Build Settings</code>中<code>Header Search Paths</code>添加头文件引用路径，<code>[文件路径]/AlipaySDK/</code></p>
</li>
<li><p>在需要调用AlipaySDK的文件中，增加头文件引用。</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">import</span>  &lt;AlipaySDK/AlipaySDK.h&gt;</span><br><span class="line">#<span class="keyword">import</span> <span class="string">"Order.h"</span></span><br><span class="line">#<span class="keyword">import</span> <span class="string">"DataSigner.h"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成订单信息及签名</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将商品信息赋予AlixPayOrder的成员变量</span></span><br><span class="line"><span class="keyword">Order</span> *<span class="keyword">order</span> = [[<span class="keyword">Order</span> alloc] init];</span><br><span class="line"><span class="keyword">order</span>.partner = PartnerID; <span class="comment">// 商户ID</span></span><br><span class="line"><span class="keyword">order</span>.seller = SellerID; <span class="comment">// 账号ID</span></span><br><span class="line"><span class="keyword">order</span>.tradeNO = @<span class="string">"20150923"</span>; <span class="comment">//订单ID（由商家自行制定）</span></span><br><span class="line"><span class="keyword">order</span>.productName = @<span class="string">"iPhone6s"</span>; <span class="comment">//商品标题</span></span><br><span class="line"><span class="keyword">order</span>.productDescription = @<span class="string">"新年打折"</span>; <span class="comment">//商品描述</span></span><br><span class="line"><span class="keyword">order</span>.amount = @<span class="string">"0.01"</span>; <span class="comment">//商品价格(单位：元)</span></span><br><span class="line"><span class="keyword">order</span>.notifyURL =  @<span class="string">"http://www.chaosky.me"</span>; <span class="comment">//回调URL，支付成功或者失败回调通知自己的服务器进行订单状态变更</span></span><br><span class="line"><span class="keyword">order</span>.service = @<span class="string">"mobile.securitypay.pay"</span>;</span><br><span class="line"><span class="keyword">order</span>.paymentType = @<span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">order</span>.inputCharset = @<span class="string">"utf-8"</span>;</span><br><span class="line"><span class="keyword">order</span>.itBPay = @<span class="string">"30m"</span>;</span><br><span class="line"><span class="keyword">order</span>.showUrl = @<span class="string">"m.alipay.com"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用注册scheme,在AlixPayDemo-Info.plist定义URL types</span></span><br><span class="line">NSString *appScheme = @<span class="string">"AliPayDemo"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将商品信息拼接成字符串</span></span><br><span class="line">NSString *orderSpec = [<span class="keyword">order</span> description];</span><br><span class="line">NSLog(@<span class="string">"orderSpec = %@"</span>,orderSpec);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取私钥并将商户信息签名,外部商户可以根据情况存放私钥和签名,只需要遵循RSA签名规范,并将签名字符串base64编码和UrlEncode</span></span><br><span class="line">id&lt;DataSigner&gt; signer = CreateRSADataSigner(PartnerPrivKey);</span><br><span class="line">NSString *signedString = [signer signString:orderSpec];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将签名成功字符串格式化为订单字符串,请严格按照该格式</span></span><br><span class="line">NSString *orderString = nil;</span><br><span class="line"><span class="keyword">if</span> (signedString != nil) &#123;</span><br><span class="line">    orderString = [NSString stringWithFormat:@<span class="string">"%@&amp;sign=\"</span>%@\<span class="string">"&amp;sign_type=\"</span>%@\<span class="string">""</span>,</span><br><span class="line">                   orderSpec, signedString, @<span class="string">"RSA"</span>];</span><br><span class="line"></span><br><span class="line">    [[AlipaySDK defaultService] payOrder:orderString fromScheme:appScheme callback:^(NSDictionary * resultDic) &#123;</span><br><span class="line">        NSLog(@<span class="string">"reslut = %@"</span>,resultDic);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Xcode设置URL scheme</p>
<p>iPhone SDK可以把你的App和一个自定义的URL Scheme绑定。该URL Scheme可用来从浏览器或别的App启动你的App。</p>
<p>配置方法：打开info.plist文件，找到或者添加如图所示的键值对：</p>
<p><img src="http://file.blog.chaosky.tech/QQ20160121-1@2x.png" alt=""></p>
<p>URL Scheme值为代码中对应的值，<strong>必须一致</strong>。</p>
</li>
<li><p>配置支付宝客户端返回url处理方法</p>
<p>AppDelegate.m文件中，增加引用代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;AlipaySDK/AlipaySDK.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在@implementation AppDelegate中增加如下代码：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> (BOOL)<span class="selector-tag">application</span><span class="selector-pseudo">:(UIApplication</span> *)<span class="selector-tag">application</span> <span class="selector-tag">openURL</span><span class="selector-pseudo">:(NSURL</span> *)<span class="selector-tag">url</span> <span class="selector-tag">sourceApplication</span><span class="selector-pseudo">:(NSString</span> *)<span class="selector-tag">sourceApplication</span> <span class="selector-tag">annotation</span><span class="selector-pseudo">:(id)annotation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果极简开发包不可用，会跳转支付宝钱包进行支付，需要将支付宝钱包的支付结果回传给开发包</span></span><br><span class="line">    <span class="selector-tag">if</span> ([url.host <span class="attribute">isEqualToString</span>:@<span class="string">"safepay"</span>]) &#123;</span><br><span class="line">        <span class="selector-attr">[[AlipaySDK defaultService]</span> <span class="selector-tag">processOrderWithPaymentResult</span><span class="selector-pseudo">:url</span> <span class="selector-tag">standbyCallback</span>:^(NSDictionary * resultDic) &#123;</span><br><span class="line">    <span class="comment">//【由于在跳转支付宝客户端支付的过程中，商户app在后台很可能被系统kill了，所以pay接口的callback就会失效，请商户对standbyCallback返回的回调结果进行处理,就是在这个方法里面处理跟callback一样的逻辑】</span></span><br><span class="line">            <span class="selector-tag">NSLog</span>(@<span class="string">"result = %@"</span>,resultDic);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">if</span> ([url.host <span class="attribute">isEqualToString</span>:@<span class="string">"platformapi"</span>])&#123;<span class="comment">//支付宝钱包快登授权返回authCode</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-attr">[[AlipaySDK defaultService]</span> <span class="selector-tag">processAuthResult</span><span class="selector-pseudo">:url</span> <span class="selector-tag">standbyCallback</span>:^(NSDictionary * resultDic) &#123;</span><br><span class="line">            <span class="comment">//【由于在跳转支付宝客户端支付的过程中，商户app在后台很可能被系统kill了，所以pay接口的callback就会失效，请商户对standbyCallback返回的回调结果进行处理,就是在这个方法里面处理跟callback一样的逻辑】</span></span><br><span class="line">            <span class="selector-tag">NSLog</span>(@<span class="string">"result = %@"</span>,resultDic);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h3><p>需要提供公司资质或者营业执照，个人无法申请。</p>
<h4 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h4><ul>
<li>微信开放平台：<a href="https://open.weixin.qq.com" target="_blank" rel="noopener">https://open.weixin.qq.com</a></li>
<li>微信支付商户平台：<a href="https://pay.weixin.qq.com/index.php" target="_blank" rel="noopener">https://pay.weixin.qq.com/index.php</a></li>
<li>微信公众平台：<a href="https://mp.weixin.qq.com" target="_blank" rel="noopener">https://mp.weixin.qq.com</a></li>
</ul>
<h4 id="支付流程-1"><a href="#支付流程-1" class="headerlink" title="支付流程"></a>支付流程</h4><ol>
<li><p>向微信注册你的应用程序id</p>
<p><em>开发者应用登记页面</em> 进行登记，登记并选择移动应用进行设置后，将获得AppID，可立即用于开发。但应用登记完成后还需要提交审核，只有审核通过的应用才能正式发布使用。</p>
<p><img src="http://file.blog.chaosky.tech/QQ20160121-0@2x.png" alt=""></p>
</li>
<li><p>微信APP支付接入商户服务中心</p>
<p>参考文档链接：<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419317780&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419317780&amp;token=&amp;lang=zh_CN</a></p>
</li>
<li><p>下载微信SDK文件，如果在项目中应使用SDK的最新版。</p>
<p>官方资源下载地址：<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419319164&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419319164&amp;token=&amp;lang=zh_CN</a></p>
<p>本Demo使用的SDK是从官方Demo整理出来的，整理的SDK版本：1.6.1。</p>
<p>下载地址：<a href="http://file.blog.chaosky.tech/AlipaySDK.zip" target="_blank" rel="noopener">http://file.blog.chaosky.tech/AlipaySDK.zip</a></p>
<p>目录结构如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">├── SDKExport</span><br><span class="line">│   ├── <span class="module-access"><span class="module"><span class="identifier">WXApi</span>.</span></span>h</span><br><span class="line">│   ├── <span class="module-access"><span class="module"><span class="identifier">WXApiObject</span>.</span></span>h</span><br><span class="line">│   ├── libWeChatSDK.a</span><br><span class="line">│   └── read_me.txt</span><br><span class="line">└── lib</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">ApiXml</span>.</span></span>h</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">ApiXml</span>.</span></span>mm</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">WXUtil</span>.</span></span>h</span><br><span class="line">    ├── <span class="module-access"><span class="module"><span class="identifier">WXUtil</span>.</span></span>mm</span><br><span class="line">    ├── payRequsestHandler.h</span><br><span class="line">    └── payRequsestHandler.mm</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<p><code>SDKExport</code>文件夹：SDK文件</p>
<p><code>lib</code>文件夹：工具类</p>
</li>
<li><p>添加依赖库</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">SystemConfiguration</span><span class="selector-class">.framework</span></span><br><span class="line"><span class="selector-tag">libz</span><span class="selector-class">.dylib</span></span><br><span class="line"><span class="selector-tag">libsqlite3</span><span class="selector-class">.dylib</span></span><br><span class="line"><span class="selector-tag">libc</span>++<span class="selector-class">.dylib</span></span><br><span class="line"><span class="selector-tag">CoreTelephony</span><span class="selector-class">.framework</span></span><br><span class="line"><span class="selector-tag">CoreGraphics</span><span class="selector-class">.framework</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Xcode设置URL scheme</p>
<p> 在Xcode中，选择你的工程设置项，选中“TARGETS”一栏，在“info”标签栏的“URL type“添加“URL scheme”为你所注册的应用程序id（如下图所示）。</p>
<p><img src="http://file.blog.chaosky.tech/QQ20160121-2@2x.png" alt=""></p>
</li>
<li><p>在你需要使用微信终端API的文件中import WXApi.h 头文件，并增加 WXApiDelegate 协议。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 微信所有的API接口</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"WXApi.h"</span></span></span><br><span class="line"><span class="comment">// APP端签名相关头文件</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"payRequsestHandler.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AppDelegate</span> ()&lt;<span class="title">WXApiDelegate</span>&gt;</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>要使你的程序启动后微信终端能响应你的程序，必须在代码中向微信终端注册你的id。（如下图所示，在 AppDelegate 的 didFinishLaunchingWithOptions 函数中向微信注册id）。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (BOOL)<span class="string">application:</span>(UIApplication *)application <span class="string">didFinishLaunchingWithOptions:</span>(NSDictionary *)launchOptions &#123;</span><br><span class="line">    <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">    <span class="comment">//向微信注册</span></span><br><span class="line">    [WXApi <span class="string">registerApp:</span>APP_ID <span class="string">withDescription:</span>@<span class="string">"demo 2.0"</span>];</span><br><span class="line">    <span class="keyword">return</span> YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重写AppDelegate的handleOpenURL和openURL方法：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- (BOOL)<span class="symbol">application:</span>(UIApplication *)application <span class="symbol">handleOpenURL:</span>(NSURL *)url</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [WXApi <span class="symbol">handleOpenURL:</span>url <span class="symbol">delegate:</span><span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)<span class="symbol">application:</span>(UIApplication *)application <span class="symbol">openURL:</span>(NSURL *)url <span class="symbol">sourceApplication:</span>(NSString *)sourceApplication <span class="keyword">annotation</span>:(<span class="title">id</span>)<span class="title">annotation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [WXApi <span class="symbol">handleOpenURL:</span>url <span class="symbol">delegate:</span><span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在，你的程序要实现和微信终端交互的具体请求与回应，因此需要实现WXApiDelegate协议的两个方法：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>) <span class="string">onReq:</span>(BaseReq*)req</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>([req <span class="string">isKindOfClass:</span>[GetMessageFromWXReq <span class="class"><span class="keyword">class</span>]])</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">// 微信请求App提供内容， 需要app提供内容后使用sendRsp返回</span></span><br><span class="line">        NSString * strTitle = [NSString <span class="string">stringWithFormat:</span>@<span class="string">"微信请求App提供内容"</span>];</span><br><span class="line">        NSString * strMsg = @<span class="string">"微信请求App提供内容，App要调用sendResp:GetMessageFromWXResp返回给微信"</span>;</span><br><span class="line"></span><br><span class="line">        UIAlertView * alert = [[UIAlertView alloc] <span class="string">initWithTitle:</span>strTitle <span class="string">message:</span>strMsg <span class="string">delegate:</span>self <span class="string">cancelButtonTitle:</span>@<span class="string">"OK"</span> <span class="string">otherButtonTitles:</span>nil, nil];</span><br><span class="line">        alert.tag = <span class="number">1000</span>;</span><br><span class="line">        [alert show];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>([req <span class="string">isKindOfClass:</span>[ShowMessageFromWXReq <span class="class"><span class="keyword">class</span>]])</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        ShowMessageFromWXReq *  temp = (ShowMessageFromWXReq*)req;</span><br><span class="line">        WXMediaMessage * msg = temp.message;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示微信传过来的内容</span></span><br><span class="line">        WXAppExtendObject * obj = msg.mediaObject;</span><br><span class="line"></span><br><span class="line">        NSString * strTitle = [NSString <span class="string">stringWithFormat:</span>@<span class="string">"微信请求App显示内容"</span>];</span><br><span class="line">        NSString * strMsg = [NSString <span class="string">stringWithFormat:</span>@<span class="string">"标题：%@ \n内容：%@ \n附带信息：%@ \n缩略图:%lu bytes\n\n"</span>, msg.title, msg.description, obj.extInfo, msg.thumbData.length];</span><br><span class="line"></span><br><span class="line">        UIAlertView * alert = [[UIAlertView alloc] <span class="string">initWithTitle:</span>strTitle <span class="string">message:</span>strMsg <span class="string">delegate:</span>self <span class="string">cancelButtonTitle:</span>@<span class="string">"OK"</span> <span class="string">otherButtonTitles:</span>nil, nil];</span><br><span class="line">        [alert show];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>([req <span class="string">isKindOfClass:</span>[LaunchFromWXReq <span class="class"><span class="keyword">class</span>]])</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">//从微信启动App</span></span><br><span class="line">        NSString * strTitle = [NSString <span class="string">stringWithFormat:</span>@<span class="string">"从微信启动"</span>];</span><br><span class="line">        NSString * strMsg = @<span class="string">"这是从微信启动的消息"</span>;</span><br><span class="line">        UIAlertView * alert = [[UIAlertView alloc] <span class="string">initWithTitle:</span>strTitle <span class="string">message:</span>strMsg <span class="string">delegate:</span>self <span class="string">cancelButtonTitle:</span>@<span class="string">"OK"</span> <span class="string">otherButtonTitles:</span>nil, nil];</span><br><span class="line">        [alert show];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>onReq是微信终端向第三方程序发起请求，要求第三方程序响应。第三方程序响应完后必须调用sendRsp返回。在调用sendRsp返回时，会切回到微信终端程序界面。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>) <span class="string">onResp:</span>(BaseResp*)resp</span><br><span class="line"> &#123;</span><br><span class="line">     NSString * strMsg = [NSString <span class="string">stringWithFormat:</span>@<span class="string">"errcode:%d"</span>, resp.errCode];</span><br><span class="line">     NSString * strTitle;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span>([resp <span class="string">isKindOfClass:</span>[SendMessageToWXResp <span class="class"><span class="keyword">class</span>]])</span></span><br><span class="line"><span class="class">     &#123;</span></span><br><span class="line">         strTitle = [NSString <span class="string">stringWithFormat:</span>@<span class="string">"发送媒体消息结果"</span>];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>([resp <span class="string">isKindOfClass:</span>[PayResp <span class="class"><span class="keyword">class</span>]])&#123;</span></span><br><span class="line">         <span class="comment">//支付返回结果，实际支付结果需要去微信服务器端查询</span></span><br><span class="line">         strTitle = [NSString <span class="string">stringWithFormat:</span>@<span class="string">"支付结果"</span>];</span><br><span class="line"></span><br><span class="line">         <span class="keyword">switch</span> (resp.errCode) &#123;</span><br><span class="line">             <span class="keyword">case</span> <span class="string">WXSuccess:</span></span><br><span class="line">                 strMsg = @<span class="string">"支付结果：成功！"</span>;</span><br><span class="line">                 NSLog(@<span class="string">"支付成功－PaySuccess，retcode = %d"</span>, resp.errCode);</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="symbol">             default:</span></span><br><span class="line">                 strMsg = [NSString <span class="string">stringWithFormat:</span>@<span class="string">"支付结果：失败！retcode = %d, retstr = %@"</span>, resp.errCode,resp.errStr];</span><br><span class="line">                 NSLog(@<span class="string">"错误，retcode = %d, retstr = %@"</span>, resp.errCode,resp.errStr);</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     UIAlertView * alert = [[UIAlertView alloc] <span class="string">initWithTitle:</span>strTitle <span class="string">message:</span>strMsg <span class="string">delegate:</span>self <span class="string">cancelButtonTitle:</span>@<span class="string">"OK"</span> <span class="string">otherButtonTitles:</span>nil, nil];</span><br><span class="line">     [alert show];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>如果第三方程序向微信发送了sendReq的请求，那么onResp会被回调。sendReq请求调用后，会切到微信终端程序界面</p>
</li>
</ol>
<h2 id="应用内支付（In-App-Purchase）"><a href="#应用内支付（In-App-Purchase）" class="headerlink" title="应用内支付（In-App Purchase）"></a>应用内支付（In-App Purchase）</h2><p>在应用程序内购买虚拟商品。如果你在App Store上销售的应用程序，将收到支付金额的70％。</p>
<h3 id="相关资料-1"><a href="#相关资料-1" class="headerlink" title="相关资料"></a>相关资料</h3><p>沙盒测试账号：<a href="mailto:imetax@hotmail.com">imetax@hotmail.com</a> 密码：Test1000phone</p>
<h3 id="支付流程-2"><a href="#支付流程-2" class="headerlink" title="支付流程"></a>支付流程</h3><h4 id="配置App-ID"><a href="#配置App-ID" class="headerlink" title="配置App ID"></a>配置App ID</h4><ol>
<li>为应用建立建立一个不带通配符的App ID</li>
<li>用该App ID生成和安装相应的Provisioning Profile文件。</li>
</ol>
<h4 id="配置iTunes-Connect"><a href="#配置iTunes-Connect" class="headerlink" title="配置iTunes Connect"></a>配置iTunes Connect</h4><ol>
<li><p>填写相关的税务，银行，联系人信息</p>
<p><img src="http://file.blog.chaosky.tech/Snip20160124_5.png" alt=""></p>
<p>参考链接：<a href="http://www.jianshu.com/p/c7cf65911bc1" target="_blank" rel="noopener">iOS App提交指南(二)-协议、税务和银行业务</a></p>
</li>
<li><p>添加一个用于在sandbox付费的测试用户</p>
<p><img src="http://file.blog.chaosky.tech/Snip20160124_3.png" alt=""></p>
<p><img src="http://file.blog.chaosky.tech/Snip20160124_4.png" alt=""></p>
</li>
<li><p>用该App ID创建一个新的应用。</p>
</li>
<li><p>创建应用内付费项目，选择付费类型。</p>
<p><img src="http://file.blog.chaosky.tech/QQ20160124-0@2x.png" alt=""></p>
<p><img src="http://file.blog.chaosky.tech/QQ20160124-1@2x.png" alt=""></p>
<p>App 内购买项目摘要填写  </p>
<p><img src="http://file.blog.chaosky.tech/Snip20160124_1.png" alt=""></p>
<p><img src="http://file.blog.chaosky.tech/Snip20160124_2.png" alt=""></p>
</li>
</ol>
<h4 id="主要代码实现"><a href="#主要代码实现" class="headerlink" title="主要代码实现"></a>主要代码实现</h4><ol>
<li><p>在工程中引入 <code>StoreKit.framework</code> 和<code>#import &lt;StoreKit/StoreKit.h&gt;</code></p>
</li>
<li><p>获得所有的付费Product ID列表。这个可以用常量存储在本地，也可以由自己的服务器返回。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在内购项目中创建的商品单号</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ProductID_IAP_FTHJ @<span class="meta-string">"com.1000phone.IAPDemo.fthj_purple"</span> <span class="comment">// 方天画戟 488元</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ProductID_IAP_XYJ @<span class="meta-string">"com.1000phone.IAPDemo.xyj"</span> <span class="comment">// 轩辕剑 6,498元</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ProductID_IAP_JB @<span class="meta-string">"com.1000phone.IAPDemo.jb"</span> <span class="comment">// 金币 6元=6金币</span></span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>制作界面，展示所有的应用内付费项目。这些应用内付费项目的价格和介绍信息可以从App Store服务器请求，也可以是自己的服务器返回。向App Store查询速度非常慢，通常需要2-3秒钟，最好从服务器请求。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)createViews</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSArray</span> * buttonNames = @[<span class="string">@"轩辕剑 6498元"</span>, <span class="string">@"方天画戟 488元"</span>, <span class="string">@"金币6元=6金币"</span>];</span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    [buttonNames enumerateObjectsUsingBlock:^(<span class="built_in">NSString</span> * buttonName, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * stop) &#123;</span><br><span class="line">        <span class="built_in">UIButton</span> * button = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeSystem</span>];</span><br><span class="line">        [weakSelf.view addSubview:button];</span><br><span class="line">        button.frame = <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span> + idx   * <span class="number">60</span>, <span class="number">150</span>, <span class="number">50</span>);</span><br><span class="line">        button.titleLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">18</span>];</span><br><span class="line">        [button setTitle:buttonName forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置tag值</span></span><br><span class="line">        button.tag = PAY_BUTTON_BEGIN_TAG + idx;</span><br><span class="line">        [button addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(buyProduct:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)buyProduct:(<span class="built_in">UIButton</span> *) sender</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>当用户点击了一个IAP项目，我们先查询用户是否允许应用内付费。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)buyProduct:(<span class="built_in">UIButton</span> *) sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span>.buyType = sender.tag - PAY_BUTTON_BEGIN_TAG;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="built_in">SKPaymentQueue</span> canMakePayments]) &#123;</span><br><span class="line">        <span class="comment">// 执行下面提到的第5步：</span></span><br><span class="line">        [<span class="keyword">self</span> requestProductData];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"允许程序内付费购买"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"不允许程序内付费购买"</span>);</span><br><span class="line">        <span class="built_in">UIAlertView</span> *alerView =  [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"提示"</span></span><br><span class="line">                                                            message:<span class="string">@"您的手机没有打开程序内付费购买"</span></span><br><span class="line">                                                           delegate:<span class="literal">nil</span> cancelButtonTitle:<span class="built_in">NSLocalizedString</span>(<span class="string">@"关闭"</span>,<span class="literal">nil</span>) otherButtonTitles:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">        [alerView show];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们先通过该IAP的ProductID向AppStore查询，获得SKPayment实例，然后通过SKPaymentQueue的 addPayment方法发起一个购买的操作。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面的ProductId应该是事先在itunesConnect中添加好的，已存在的付费项目。否则查询会失败。</span></span><br><span class="line">- (<span class="keyword">void</span>)requestProductData &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"---------请求对应的产品信息------------"</span>);</span><br><span class="line">   <span class="built_in">NSArray</span> *product = <span class="literal">nil</span>;</span><br><span class="line">   <span class="keyword">switch</span> (<span class="keyword">self</span>.buyType) &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">           product = [<span class="built_in">NSArray</span> arrayWithObject:ProductID_IAP_XYJ];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">           product = [<span class="built_in">NSArray</span> arrayWithObject:ProductID_IAP_FTHJ];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">           product = [<span class="built_in">NSArray</span> arrayWithObject:ProductID_IAP_JB];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">NSSet</span> *nsset = [<span class="built_in">NSSet</span> setWithArray:product];</span><br><span class="line">   <span class="built_in">SKProductsRequest</span> *request=[[<span class="built_in">SKProductsRequest</span> alloc] initWithProductIdentifiers: nsset];</span><br><span class="line">   request.delegate=<span class="keyword">self</span>;</span><br><span class="line">   [request start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - SKProductsRequestDelegate</span></span><br><span class="line"><span class="comment">// 收到的产品信息回调</span></span><br><span class="line">- (<span class="keyword">void</span>)productsRequest:(<span class="built_in">SKProductsRequest</span> *)request didReceiveResponse:(<span class="built_in">SKProductsResponse</span> *)response&#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"-----------收到产品反馈信息--------------"</span>);</span><br><span class="line">   <span class="built_in">NSArray</span> *myProduct = response.products;</span><br><span class="line">   <span class="keyword">if</span> (myProduct.count == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"无法获取产品信息，购买失败。"</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"产品Product ID:%@"</span>,response.invalidProductIdentifiers);</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"产品付费数量: %d"</span>, (<span class="keyword">int</span>)[myProduct count]);</span><br><span class="line">   <span class="comment">// populate UI</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="built_in">SKProduct</span> *product <span class="keyword">in</span> myProduct)&#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"product info"</span>);</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"SKProduct 描述信息%@"</span>, [product description]);</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"产品标题 %@"</span> , product.localizedTitle);</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"产品描述信息: %@"</span> , product.localizedDescription);</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"价格: %@"</span> , product.price);</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"Product id: %@"</span> , product.productIdentifier);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">SKPayment</span> * payment = [<span class="built_in">SKPayment</span> paymentWithProduct:myProduct[<span class="number">0</span>]];</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"---------发送购买请求------------"</span>);</span><br><span class="line">   [[<span class="built_in">SKPaymentQueue</span> defaultQueue] addPayment:payment];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出错误信息</span></span><br><span class="line">- (<span class="keyword">void</span>)request:(<span class="built_in">SKRequest</span> *)request didFailWithError:(<span class="built_in">NSError</span> *)error&#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"-------弹出错误信息----------"</span>);</span><br><span class="line">   <span class="built_in">UIAlertView</span> *alerView =  [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="built_in">NSLocalizedString</span>(<span class="string">@"Alert"</span>,<span class="literal">NULL</span>) message:[error localizedDescription]</span><br><span class="line">                                                      delegate:<span class="literal">nil</span> cancelButtonTitle:<span class="built_in">NSLocalizedString</span>(<span class="string">@"Close"</span>,<span class="literal">nil</span>) otherButtonTitles:<span class="literal">nil</span>];</span><br><span class="line">   [alerView show];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) requestDidFinish:(<span class="built_in">SKRequest</span> *)request</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"----------反馈信息结束--------------"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在viewDidLoad方法中，将购买页面设置成购买的Observer。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">viewDidLoad</span> &#123;</span><br><span class="line">    <span class="selector-attr">[super viewDidLoad]</span>;</span><br><span class="line">    <span class="selector-attr">[self createViews]</span>;</span><br><span class="line">    <span class="comment">// 监听购买结果</span></span><br><span class="line">    <span class="selector-attr">[[SKPaymentQueue defaultQueue]</span> <span class="selector-tag">addTransactionObserver</span><span class="selector-pseudo">:self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">dealloc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="selector-attr">[[SKPaymentQueue defaultQueue]</span> <span class="selector-tag">removeTransactionObserver</span><span class="selector-pseudo">:self</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当用户购买的操作有结果时，就会触发下面的回调函数，相应进行处理即可。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - SKPaymentTransactionObserver</span></span><br><span class="line"><span class="comment">// 处理交易结果</span></span><br><span class="line">- (<span class="keyword">void</span>)paymentQueue:(<span class="built_in">SKPaymentQueue</span> *)queue updatedTransactions:(<span class="built_in">NSArray</span> *)transactions &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">SKPaymentTransaction</span> *transaction <span class="keyword">in</span> transactions)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (transaction.transactionState)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStatePurchased</span>:<span class="comment">//交易完成</span></span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"transactionIdentifier = %@"</span>, transaction.transactionIdentifier);</span><br><span class="line">                [<span class="keyword">self</span> completeTransaction:transaction];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStateFailed</span>:<span class="comment">//交易失败</span></span><br><span class="line">                [<span class="keyword">self</span> failedTransaction:transaction];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStateRestored</span>:<span class="comment">//已经购买过该商品</span></span><br><span class="line">                [<span class="keyword">self</span> restoreTransaction:transaction];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStatePurchasing</span>:      <span class="comment">//商品添加进列表</span></span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"商品添加进列表"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易完成</span></span><br><span class="line">- (<span class="keyword">void</span>)completeTransaction:(<span class="built_in">SKPaymentTransaction</span> *)transaction &#123;</span><br><span class="line">    <span class="built_in">NSString</span> * productIdentifier = transaction.payment.productIdentifier;</span><br><span class="line"><span class="comment">//    NSString * receipt = [transaction.transactionReceipt base64EncodedString];</span></span><br><span class="line">    <span class="keyword">if</span> ([productIdentifier length] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 向自己的服务器验证购买凭证</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove the transaction from the payment queue.</span></span><br><span class="line">    [[<span class="built_in">SKPaymentQueue</span> defaultQueue] finishTransaction: transaction];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易失败</span></span><br><span class="line">- (<span class="keyword">void</span>)failedTransaction:(<span class="built_in">SKPaymentTransaction</span> *)transaction &#123;</span><br><span class="line">    <span class="keyword">if</span>(transaction.error.code != <span class="built_in">SKErrorPaymentCancelled</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"购买失败"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"用户取消交易"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    [[<span class="built_in">SKPaymentQueue</span> defaultQueue] finishTransaction: transaction];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已购商品</span></span><br><span class="line">- (<span class="keyword">void</span>)restoreTransaction:(<span class="built_in">SKPaymentTransaction</span> *)transaction &#123;</span><br><span class="line">    <span class="comment">// 对于已购商品，处理恢复购买的逻辑</span></span><br><span class="line">    [[<span class="built_in">SKPaymentQueue</span> defaultQueue] finishTransaction: transaction];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务器验证凭证(Optional)。如果购买成功，我们需要将凭证发送到服务器上进行验证。考虑到网络异常情况，iOS端的发送凭证操作应该进行持久化，如果程序退出，崩溃或网络异常，可以恢复重试。</p>
</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://www.jianshu.com/p/86ac7d3b593a" target="_blank" rel="noopener">iOS开发内购全套图文教程</a></li>
<li><a href="http://blog.devtang.com/blog/2012/12/09/in-app-purchase-check-list/" target="_blank" rel="noopener">iOS应用内付费(IAP)开发步骤列表</a></li>
<li><a href="http://onevcat.com/2013/11/ios-iap-checklist/" target="_blank" rel="noopener">iOS内购实现及测试Check List</a></li>
</ol>
<h2 id="苹果支付（-Pay）"><a href="#苹果支付（-Pay）" class="headerlink" title="苹果支付（ Pay）"></a>苹果支付（ Pay）</h2><p>苹果支付是一种在应用内运行的具有隐秘性和安全性非接触式的支付方式。它允许触摸付款，你可以用来购买实体商品和服务。</p>
<p>Apple 不会存储或共享客户的实际信用卡和借记卡卡号，因此商家和 App 开发者无需负责管理和保护实际的信用卡和借记卡卡号。</p>
<p><img src="https://developer.apple.com/apple-pay/images/figure-1-payment-sheet-cn_2x.png" alt=""></p>
<p><img src="https://developer.apple.com/apple-pay/images/figure-2-payment-flow-cn_2x.png" alt=""></p>
<h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><p>除了使用 PassKit 框架实施 Apple Pay 之外，您还必须：</p>
<ul>
<li><p>通过<a href="https://developer.apple.com/apple-pay/" target="_blank" rel="noopener">付款处理机构或网关</a>设置一个帐户。</p>
</li>
<li><p>通过“<a href="https://developer.apple.com/account/ios/identifiers/merchant/merchantLanding.action" target="_blank" rel="noopener">证书、标识符和描述文件</a>”（“Certificates, Identifiers &amp; Profiles”）注册一个商家 ID。</p>
</li>
<li><p>生成一个 <a href="https://developer.apple.com/account/ios/certificate/certificateCreate.action" target="_blank" rel="noopener">Apple Pay 证书</a>，用于加密和解密付款令牌。</p>
</li>
<li><p>在您的 App 中包括一个 Apple Pay 授权。</p>
</li>
<li><p>遵循“应用审核准则”的第 29 节中列出的要求。</p>
</li>
<li><p>遵循<a href="https://developer.apple.com/app-store/review/guidelines/#apple-pay" target="_blank" rel="noopener">《App 审核准则》</a>(“App Review Guidelines”)第 29 节中列出的要求。</p>
</li>
</ul>
<h3 id="支付流程-3"><a href="#支付流程-3" class="headerlink" title="支付流程"></a>支付流程</h3><h4 id="配置-Merchant-ID（商家ID）"><a href="#配置-Merchant-ID（商家ID）" class="headerlink" title="配置 Merchant ID（商家ID）"></a>配置 Merchant ID（商家ID）</h4><p>Apple Pay 中的商家 ID 用于标识你能够接受付款。与商家 ID 相关联的公钥与证书用于在支付过程中加密支付信息。要想使用 Apple Pay，你首先需要注册一个商家 ID 并且配置它的证书。</p>
<ol>
<li><p>在开发者中心选择<a href="https://developer.apple.com/account/ios/identifiers/merchant/merchantLanding.action" target="_blank" rel="noopener">证书、标识符及描述文件</a></p>
</li>
<li><p>在标识符下选择商家 ID，点击右上角的添加按钮(+)。<br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_3.png" alt="Snip20160808_3"></p>
</li>
<li><p>输入描述与和标识符，然后继续，检查设置然后点击注册，点击完成。<br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_5.png" alt="Snip20160808_5"></p>
</li>
<li><p>为商家 ID 配置证书，在开发者中心选择<a href="https://developer.apple.com/account/ios/identifiers/merchant/merchantLanding.action" target="_blank" rel="noopener">证书、标识符及描述文件</a>，在标识符下选择商家 ID。从列表中选择商家 ID，点击编辑。<br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_6.png" alt="Snip20160808_6"><br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_8.png" alt="Snip20160808_8"></p>
</li>
<li><p>点击创建证书， 根据提示生成证书签名请求（CSR），选择你的 CSR，然后点击生成下载证书。<br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_10.png" alt="Snip20160808_10"><br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_11.png" alt="Snip20160808_11"><br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_12.png" alt="Snip20160808_12"></p>
</li>
<li><p>如果你在钥匙串访问 (Keychain Access) 看到警告信息：该证书由一个未知的机构签发或者该证书有一个无效的发行人，请将 <a href="https://www.apple.com/certificateauthority/AppleWWDRCAG2.cer" target="_blank" rel="noopener">WWDR 中级证书 - G2</a> 以及 <a href="https://www.apple.com/certificateauthority/AppleRootCA-G2.cer" target="_blank" rel="noopener">Apple 根证书 - G2</a> 安装到你的钥匙串中。你可以在 <a href="https://www.apple.com/certificateauthority/" target="_blank" rel="noopener">https://www.apple.com/certificateauthority/</a> 下载到这两个证书。<br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_13.png" alt="Snip20160808_13"><br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_15.png" alt="Snip20160808_15"></p>
</li>
</ol>
<h4 id="配置-App-ID"><a href="#配置-App-ID" class="headerlink" title="配置 App ID"></a>配置 App ID</h4><ol>
<li>为应用建立建立一个不带通配符的App ID，并勾选上【Apple Pay】。<br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_19.png" alt="Snip20160808_19"></li>
<li>在App IDs列表中编辑该App ID，进行Apple Pay的关联。<br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_20.png" alt="Snip20160808_20"><br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_21.png" alt="Snip20160808_21"><br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_24.png" alt="Snip20160808_24"><br> <img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_25.png" alt="Snip20160808_25"></li>
<li>用该App ID生成和安装相应的Provisioning Profile文件。</li>
</ol>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="Xcode工程配置"><a href="#Xcode工程配置" class="headerlink" title="Xcode工程配置"></a>Xcode工程配置</h5><p>在 Xcode 的 【capabilities 面板】中为应用启用 【Apple Pay】功能。在 Apple Pay 这一行中点击开启，然后指定该应用使用的商家 ID 即可。<br><img src="http://file.blog.chaosky.tech/2016-08-08-Snip20160808_17.png" alt="Snip20160808_17"></p>
<h5 id="判断用户是否能够支付"><a href="#判断用户是否能够支付" class="headerlink" title="判断用户是否能够支付"></a>判断用户是否能够支付</h5><ol>
<li><p>调用<code>PKPaymentAuthorizationViewController</code> 的 <code>canMakePayments</code> 方法可以判断当前设备是否支持 Apple Pay。</p>
 <figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否支持Apple Pay</span></span><br><span class="line"><span class="keyword">if</span> ([PKPaymentAuthorizationViewController canMakePayments]) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 如果 <code>canMakePayments</code> 返回 NO，则设备不支持 Apple Pay。不要显示 Apple Pay 按扭，你可以选择使用其它的支付方式。</p>
</li>
<li><p>调用 <code>PKPaymentAuthorizationViewController</code> 的方法 <code>canMakePaymentsUsingNetworks:(NSArray&lt;NSString *&gt; *)supportedNetworks</code> 判断用户是否能使用你支持的支付网络完成付款。  </p>
<p> <code>canMakePaymentsUsingNetworks:</code>方法需要传递一个支持的支付网络数组。支付网络包括以下类型：</p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> PKPaymentNetworkAmex <span class="built_in">NS_AVAILABLE</span>(NA, <span class="number">8</span>_0);	<span class="comment">// 美国运通卡</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> PKPaymentNetworkChinaUnionPay <span class="built_in">NS_AVAILABLE</span>(NA, <span class="number">9</span>_2);	<span class="comment">// 中国银联卡</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> PKPaymentNetworkDiscover <span class="built_in">NS_AVAILABLE</span>(NA, <span class="number">9</span>_0);	<span class="comment">// 美国发现卡</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> PKPaymentNetworkInterac <span class="built_in">NS_AVAILABLE</span>(NA, <span class="number">9</span>_2);	<span class="comment">// 加拿大Interac银行卡</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> PKPaymentNetworkMasterCard <span class="built_in">NS_AVAILABLE</span>(NA, <span class="number">8</span>_0);	<span class="comment">// 万事达卡</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> PKPaymentNetworkPrivateLabel <span class="built_in">NS_AVAILABLE</span>(NA, <span class="number">9</span>_0);	<span class="comment">// 信用卡、借记卡</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> PKPaymentNetworkVisa <span class="built_in">NS_AVAILABLE</span>(NA, <span class="number">8</span>_0);	<span class="comment">// 维萨卡</span></span><br></pre></td></tr></table></figure>

<p> 如果 <code>canMakePayementsUsingNetworks:</code>返回 NO，则表示设备支持 Apple Pay，但是用户并没有为任何请求的支付网络添加银行卡。你可以选择显示一个支付设置按扭，引导用户添加银行卡。如果用户点击该按扭，则开始设置新的银行卡流程 (例如，通过调用 openPaymentSetup 方法)。</p>
 <figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">// 引导用户添加银行卡</span><br><span class="line">// 判断是否能打开卡包</span><br><span class="line">if (<span class="comment">[PKPassLibrary isPassLibraryAvailable]</span>) &#123;</span><br><span class="line">   PKPassLibrary * pk = <span class="comment">[<span class="comment">[PKPassLibrary alloc]</span> init]</span>;</span><br><span class="line">   <span class="comment">[pk openPaymentSetup]</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 银行卡类型</span></span><br><span class="line"><span class="built_in">NSArray</span> * supportedNetworks = @[PKPaymentNetworkChinaUnionPay, PKPaymentNetworkPrivateLabel, PKPaymentNetworkInterac];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否支持Apple Pay</span></span><br><span class="line"><span class="keyword">if</span> ([PKPaymentAuthorizationViewController canMakePayments]) &#123;</span><br><span class="line">   <span class="keyword">self</span>.paymentButton = [PKPaymentButton buttonWithType:PKPaymentButtonTypeBuy style:PKPaymentButtonStyleWhiteOutline];</span><br><span class="line">   [<span class="keyword">self</span>.paymentButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(paymentTapped:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ([PKPaymentAuthorizationViewController canMakePaymentsUsingNetworks:supportedNetworks]) &#123;</span><br><span class="line">   <span class="comment">// 添加银行卡</span></span><br><span class="line">   <span class="keyword">self</span>.paymentButton = [[PKPaymentButton alloc] initWithPaymentButtonType:PKPaymentButtonTypeSetUp paymentButtonStyle:PKPaymentButtonStyleWhiteOutline];</span><br><span class="line">   [<span class="keyword">self</span>.paymentButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(paymentSetupTapped:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.paymentButton != <span class="literal">nil</span>) &#123;</span><br><span class="line">   [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.paymentButton];</span><br><span class="line">   <span class="keyword">self</span>.paymentButton.center = <span class="built_in">CGPointMake</span>(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

 <figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">- (void)paymentSetupTapped:(PKPaymentButton *) sender &#123;</span><br><span class="line">   // 判断是否打开卡包</span><br><span class="line">   if (<span class="comment">[PKPassLibrary isPassLibraryAvailable]</span>) &#123;</span><br><span class="line">       PKPassLibrary * pk = <span class="comment">[<span class="comment">[PKPassLibrary alloc]</span> init]</span>;</span><br><span class="line">       <span class="comment">[pk openPaymentSetup]</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="显示支付按钮"><a href="#显示支付按钮" class="headerlink" title="显示支付按钮"></a>显示支付按钮</h5><p>使用 <code>PKPayementButton</code> 方法在初始化支付请求时创建带商标的 Apple Pay 按扭。</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">+ (instance<span class="keyword">type</span>)buttonWithType:(<span class="type">PKPaymentButtonType</span>)buttonType style:(<span class="type">PKPaymentButtonStyle</span>)buttonStyle;</span><br></pre></td></tr></table></figure>

<p>PKPaymentButtonType按钮类型：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">PKPaymentButtonTypePlain = <span class="number">0</span>,  <span class="comment">// 显示文字【Pay】</span></span><br><span class="line">PKPaymentButtonTypeBuy,		  <span class="comment">// 显示文字【Buy with Pay】</span></span><br><span class="line">PKPaymentButtonTypeSetUp NS_ENUM_AVAILABLE_IOS(<span class="number">9</span>_0) <span class="comment">// 显示文字【Set up Pay】</span></span><br></pre></td></tr></table></figure>

<p>PKPaymentButtonStyle样式类型：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">PKPaymentButtonStyleWhite = <span class="number">0</span>, <span class="comment">// 白底黑字</span></span><br><span class="line">PKPaymentButtonStyleWhiteOutline, <span class="comment">// 白底黑字，黑色边框</span></span><br><span class="line">PKPaymentButtonStyleBlack		  <span class="comment">// 黑底白字</span></span><br></pre></td></tr></table></figure>


<h5 id="创建支付请求"><a href="#创建支付请求" class="headerlink" title="创建支付请求"></a>创建支付请求</h5><p>支付请求是 PKPayementRequest 类的一个实例。一个支持请求包含用户支付的物品概要清单、可选配送方式列表、用户需提供的配送信息、商家的信息以及支付处理机构。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">paymentTapped:</span>(PKPaymentButton *) sender &#123;</span><br><span class="line">    <span class="comment">// 创建支付请求</span></span><br><span class="line">    PKPaymentRequest * paymentRequest = [[PKPaymentRequest alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置商家ID</span></span><br><span class="line">    paymentRequest.merchantIdentifier = @<span class="string">"merchant.me.chaosky.applepay"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置货币代码及国家代码</span></span><br><span class="line">    paymentRequest.currencyCode = @<span class="string">"CNY"</span>;</span><br><span class="line">    paymentRequest.countryCode = @<span class="string">"CN"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持的支付网络，用户能使用类型的银行卡</span></span><br><span class="line">    paymentRequest.supportedNetworks = @[PKPaymentNetworkChinaUnionPay, PKPaymentNetworkPrivateLabel];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商家支付能力，商家的支付网络</span></span><br><span class="line">    paymentRequest.merchantCapabilities = PKMerchantCapability3DS | PKMerchantCapabilityEMV;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否显示发票收货地址</span></span><br><span class="line">    paymentRequest.requiredBillingAddressFields = PKAddressFieldNone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否显示快递地址</span></span><br><span class="line">    paymentRequest.requiredShippingAddressFields = PKAddressFieldAll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义联系信息</span></span><br><span class="line">    PKContact *contact = [[PKContact alloc] init];</span><br><span class="line"></span><br><span class="line">    NSPersonNameComponents *name = [[NSPersonNameComponents alloc] init];</span><br><span class="line">    name.givenName = @<span class="string">"天祥"</span>;</span><br><span class="line">    name.familyName = @<span class="string">"林"</span>;</span><br><span class="line">    contact.name = name;</span><br><span class="line"></span><br><span class="line">    CNMutablePostalAddress *address = [[CNMutablePostalAddress alloc] init];</span><br><span class="line">    address.street = @<span class="string">"天府广场"</span>;</span><br><span class="line">    address.city = @<span class="string">"成都"</span>;</span><br><span class="line">    address.state = @<span class="string">"四川"</span>;</span><br><span class="line">    address.postalCode = @<span class="string">"614100"</span>;</span><br><span class="line">    contact.postalAddress = address;</span><br><span class="line"></span><br><span class="line">    contact.emailAddress = @<span class="string">"chaosky.me@gmail.com"</span>;</span><br><span class="line">    contact.phoneNumber = [CNPhoneNumber <span class="string">phoneNumberWithStringValue:</span>@<span class="string">"1234567890"</span>];</span><br><span class="line">    paymentRequest.shippingContact = contact;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配送方式</span></span><br><span class="line">    paymentRequest.shippingMethods = [self <span class="string">shippingMethodsForContact:</span>contact];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认配送类型</span></span><br><span class="line">    paymentRequest.shippingType = PKShippingTypeShipping;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新邮费</span></span><br><span class="line">    self.selectedShippingMethod = paymentRequest.shippingMethods[<span class="number">0</span>];</span><br><span class="line">    [self <span class="string">updateShippingCost:</span>self.selectedShippingMethod];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支付汇总项</span></span><br><span class="line">    paymentRequest.paymentSummaryItems = self.summaryItems;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 附加数据</span></span><br><span class="line">    paymentRequest.applicationData = [@<span class="string">"buyid=123456"</span> <span class="string">dataUsingEncoding:</span>NSUTF8StringEncoding];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证用户支付授权</span></span><br><span class="line">    PKPaymentAuthorizationViewController * paymentAuthVC = [[PKPaymentAuthorizationViewController alloc] <span class="string">initWithPaymentRequest:</span>paymentRequest];</span><br><span class="line">    paymentAuthVC.delegate = self;</span><br><span class="line"></span><br><span class="line">    [self <span class="string">presentViewController:</span>paymentAuthVC <span class="string">animated:</span>YES <span class="string">completion:</span>nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新邮费</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">updateShippingCost:</span>(PKShippingMethod *) shippingMethod &#123;</span><br><span class="line">    <span class="comment">// 支付汇总项</span></span><br><span class="line">    <span class="comment">// 12.75 小计</span></span><br><span class="line">    NSDecimalNumber * subtotalAmount = [NSDecimalNumber <span class="string">decimalNumberWithMantissa:</span><span class="number">1275</span> <span class="string">exponent:</span><span class="number">-2</span> <span class="string">isNegative:</span>NO];</span><br><span class="line">    PKPaymentSummaryItem * subtotal = [PKPaymentSummaryItem <span class="string">summaryItemWithLabel:</span>@<span class="string">"小计"</span> <span class="string">amount:</span>subtotalAmount];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.00 折扣优惠</span></span><br><span class="line">    NSDecimalNumber * discountAmount = [NSDecimalNumber <span class="string">decimalNumberWithMantissa:</span><span class="number">200</span> <span class="string">exponent:</span><span class="number">-2</span> <span class="string">isNegative:</span>YES];</span><br><span class="line">    PKPaymentSummaryItem * discount = [PKPaymentSummaryItem <span class="string">summaryItemWithLabel:</span>@<span class="string">"折扣"</span> <span class="string">amount:</span>discountAmount];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 邮费</span></span><br><span class="line">    PKPaymentSummaryItem * shippingCost = [PKPaymentSummaryItem <span class="string">summaryItemWithLabel:</span>@<span class="string">"邮费"</span> <span class="string">amount:</span>shippingMethod.amount];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总计项</span></span><br><span class="line">    <span class="comment">// 总计</span></span><br><span class="line">    NSDecimalNumber *totalAmount = [NSDecimalNumber zero];</span><br><span class="line">    totalAmount = [totalAmount <span class="string">decimalNumberByAdding:</span>subtotal.amount];</span><br><span class="line">    totalAmount = [totalAmount <span class="string">decimalNumberByAdding:</span>discount.amount];</span><br><span class="line">    totalAmount = [totalAmount <span class="string">decimalNumberByAdding:</span>shippingCost.amount];</span><br><span class="line">    PKPaymentSummaryItem * total = [PKPaymentSummaryItem <span class="string">summaryItemWithLabel:</span>@<span class="string">"千锋互联"</span> <span class="string">amount:</span>totalAmount];</span><br><span class="line"></span><br><span class="line">    self.summaryItems = @[subtotal, discount, shippingCost, total];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据用户地址获取配送方式</span></span><br><span class="line">- (NSArray *)<span class="string">shippingMethodsForContact:</span>(PKContact *) contact &#123;</span><br><span class="line">    <span class="comment">//配置快递方式</span></span><br><span class="line">    NSDecimalNumber * sfAmount = [NSDecimalNumber <span class="string">decimalNumberWithString:</span>@<span class="string">"20.00"</span>];</span><br><span class="line">    PKShippingMethod * sfShipping = [PKShippingMethod <span class="string">summaryItemWithLabel:</span>@<span class="string">"顺丰"</span> <span class="string">amount:</span>sfAmount];</span><br><span class="line">    sfShipping.identifier = @<span class="string">"shunfeng"</span>;</span><br><span class="line">    sfShipping.detail = @<span class="string">"24小时内送达"</span>;</span><br><span class="line"></span><br><span class="line">    NSDecimalNumber * stAmount = [NSDecimalNumber <span class="string">decimalNumberWithString:</span>@<span class="string">"10.00"</span>];</span><br><span class="line">    PKShippingMethod * stShipping = [PKShippingMethod <span class="string">summaryItemWithLabel:</span>@<span class="string">"申通"</span> <span class="string">amount:</span>stAmount];</span><br><span class="line">    stShipping.identifier = @<span class="string">"shentong"</span>;</span><br><span class="line">    stShipping.detail = @<span class="string">"3天内送达"</span>;</span><br><span class="line"></span><br><span class="line">    NSDecimalNumber * tcAmount = [NSDecimalNumber <span class="string">decimalNumberWithString:</span>@<span class="string">"8.00"</span>];</span><br><span class="line">    PKShippingMethod * tcShipping = [PKShippingMethod <span class="string">summaryItemWithLabel:</span>@<span class="string">"同城快递"</span> <span class="string">amount:</span>tcAmount];</span><br><span class="line">    tcShipping.identifier = @<span class="string">"tongcheng"</span>;</span><br><span class="line">    tcShipping.detail = @<span class="string">"12小时送达"</span>;</span><br><span class="line"></span><br><span class="line">    NSArray * shippingMethods = nil;</span><br><span class="line">    <span class="keyword">if</span> ([contact.postalAddress.city <span class="string">isEqualToString:</span>@<span class="string">"成都"</span>]) &#123;</span><br><span class="line">        shippingMethods = [NSArray <span class="string">arrayWithObjects:</span>sfShipping, stShipping, tcShipping, nil];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        shippingMethods = @[sfShipping, stShipping];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shippingMethods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PKMerchantCapability枚举类型</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>    PKMerchantCapability3DS                                 = <span class="number">1</span>UL &lt;&lt; <span class="number">0</span>,   <span class="regexp">//</span> <span class="number">3</span>DS卡（磁条卡）</span><br><span class="line"><span class="regexp">//</span>    PKMerchantCapabilityEMV                                 = <span class="number">1</span>UL &lt;&lt; <span class="number">1</span>,   <span class="regexp">//</span> EMV卡（IC卡）</span><br><span class="line"><span class="regexp">//</span>    PKMerchantCapabilityCredit NS_ENUM_AVAILABLE_IOS(<span class="number">9</span>_0)   = <span class="number">1</span>UL &lt;&lt; <span class="number">2</span>,   <span class="regexp">//</span> 信用卡</span><br><span class="line"><span class="regexp">//</span>    PKMerchantCapabilityDebit  NS_ENUM_AVAILABLE_IOS(<span class="number">9</span>_0)   = <span class="number">1</span>UL &lt;&lt; <span class="number">3</span>    <span class="regexp">//</span> 借记卡</span><br></pre></td></tr></table></figure>

<p>PKAddressField枚举类型</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span>    PKAddressFieldNone                              = 0UL,      <span class="string">//</span> 不需要地址</span><br><span class="line"><span class="string">//</span>    PKAddressFieldPostalAddress                     = 1UL &lt;&lt; 0, <span class="string">//</span> 完整街道地址，包括名字、街道、城市、地区/省份、邮编、国家</span><br><span class="line"><span class="string">//</span>    PKAddressFieldPhone                             = 1UL &lt;&lt; 1, <span class="string">//</span> 电话号码</span><br><span class="line"><span class="string">//</span>    PKAddressFieldEmail                             = 1UL &lt;&lt; 2, <span class="string">//</span> 邮箱</span><br><span class="line"><span class="string">//</span>    PKAddressFieldName NS_ENUM_AVAILABLE_IOS<span class="params">(8_3)</span>   = 1UL &lt;&lt; 3, <span class="string">//</span> 名字</span><br><span class="line"><span class="string">//</span>    PKAddressFieldAll                               = <span class="params">(PKAddressFieldPostalAddress|PKAddressFieldPhone|PKAddressFieldEmail|PKAddressFieldName)</span> <span class="string">//</span> 以上所有都具备</span><br></pre></td></tr></table></figure>

<p>// PKShippingType配送类型</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>    PKShippingTypeShipping,   <span class="regexp">//</span> 第三方配送（默认），如顺丰、申通</span><br><span class="line"><span class="regexp">//</span>    PKShippingTypeDelivery,   <span class="regexp">//</span> 商家自己配送，如京东、披萨、花店、蛋糕店</span><br><span class="line"><span class="regexp">//</span>    PKShippingTypeStorePickup, <span class="regexp">//</span> 上门取货</span><br><span class="line"><span class="regexp">//</span>    PKShippingTypeServicePickup <span class="regexp">//</span> 服务收件，如京东设置的自提点</span><br></pre></td></tr></table></figure>

<h6 id="一系列的支付汇总项"><a href="#一系列的支付汇总项" class="headerlink" title="一系列的支付汇总项"></a>一系列的支付汇总项</h6><p>由 <code>PKPaymentSummaryItem</code> 类表示支付请求中的不同部分。一个支付请求包括多个支付汇总项，一般包括：小计、折扣、配送费用、税以及总计。如果你没有其它任何额外的费用 (例如，配送或税)，那么支付的总额直接是所有购买商品费用的总和。关于每一项商品的费用的详细信息你需要在应用程序的其它合适位置显示。</p>
<p>每一个汇总项都有标签和金额两个部分。标签是对该项的可读描述。金额对应于所需支付的金额。一个支付请求中的所有金额都使用该请求中指定的支付货币类型。对于折扣和优惠券，其金额被设置为负值。</p>
<p>某些场景下，如果在支付授权的时候还不能获取应当支付的费用(例如，出租车收费)，则使用 <code>PKPaymentSummaryItemTypePending</code> 类型做小计项，并将其金额值设置为 0.0。系统随后会设置该项的金额值。</p>
<p>汇总项列表中最后一项是总计项。总计项的金额是其它所有汇总项的金额的和。总计项的显示不同用于其它项。在该项中，你应该使用你的公司名称作为其标签，使用所有其它项的金额之和作为其金额值。最后，使用 paymentSummaryItems 属性将所有汇总项都添加到支付请求中。</p>
<blockquote>
<p>汇总项使用 NSDecimalNumber 类存储金额，并且金额使用 10 进制数表示。如示例代码演示的一样，可以通过显示地指定小数部分与指数部分创建该类的实例，也可以直接使用字符串的方式指定金额。在财务计算中绝大部分情况下都是使用的 10 进制数进行计算的，例如，计算 5% 的折扣。</p>
</blockquote>
<h6 id="配送方式的支付汇总项"><a href="#配送方式的支付汇总项" class="headerlink" title="配送方式的支付汇总项"></a>配送方式的支付汇总项</h6><p>为每一个可选的配送方式创建一个 <code>PKShippingMethod</code> 实例。与其它支付汇总项一样，配送方式也有一个用户可读的标签，例如标准配送或者可隔天配送，和一个配送金额值。与其它汇总项不同的是，配送方法有一个 detail 属性值，例如，7 月 29 日送达或者 24 小时之内送达等等。该属性值说明不同配送方式之间的区别。</p>
<p>为了在委托方法中区分不同的配送方式，你可以使用 identifier 属性。有些配送方式并不是在所有地区都是可以使用的，或者它们费用会根据配送地址的不同而发生变化。你需要在用户选择配送地址或方法时更新其信息。</p>
<h6 id="指定应用程序支持的支付处理机制"><a href="#指定应用程序支持的支付处理机制" class="headerlink" title="指定应用程序支持的支付处理机制"></a>指定应用程序支持的支付处理机制</h6><p>merchantCapabilities 属性值说明应用程序支持的支付处理协议。3DS 协议是须支持的支付处理协议， EMV 是可选的支付处理协议。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Supports 3DS only</span></span><br><span class="line">paymentRequest.merchantCapabilities = PKMerchantCapability3DS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Supports both 3DS and EMV</span></span><br><span class="line">paymentRequest.merchantCapabilities = PKMerchantCapability3DS <span class="string">| PKMerchantCapabilityEMV;</span></span><br></pre></td></tr></table></figure>

<h6 id="配送信息和账单信息"><a href="#配送信息和账单信息" class="headerlink" title="配送信息和账单信息"></a>配送信息和账单信息</h6><p>requiredBillingAddressFields 属性和 requiredShippingAddressFields 属性可以设置所需的账单信息和配送信息。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">paymentRequest.requiredBillingAddressFields</span> = PKAddressFieldEmail<span class="comment">;</span></span><br><span class="line"><span class="attr">paymentRequest.requiredBillingAddressFields</span> = PKAddressFieldEmail | PKAddressFieldPostalAddress<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>如果已有最新账单信息以及配送联系信息，你可以直接为支付请求设置这些值。 Apple Pay 会默认使用这些信息。但是，用户仍然可以选择在本次支付中使用其它联系信息。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">PKContact *<span class="attr">contact</span> = [[PKContact alloc] init];</span><br><span class="line"></span><br><span class="line">NSPersonNameComponents *<span class="attr">name</span> = [[NSPersonNameComponents alloc] init];</span><br><span class="line">name.<span class="attr">givenName</span> = @<span class="string">"天祥"</span>;</span><br><span class="line">name.<span class="attr">familyName</span> = @<span class="string">"林"</span>;</span><br><span class="line">contact.<span class="attr">name</span> = name;</span><br><span class="line"></span><br><span class="line">CNMutablePostalAddress *<span class="attr">address</span> = [[CNMutablePostalAddress alloc] init];</span><br><span class="line">address.<span class="attr">street</span> = @<span class="string">"天府广场"</span>;</span><br><span class="line">address.<span class="attr">city</span> = @<span class="string">"成都"</span>;</span><br><span class="line">address.<span class="attr">state</span> = @<span class="string">"四川"</span>;</span><br><span class="line">address.<span class="attr">postalCode</span> = @<span class="string">"614100"</span>;</span><br><span class="line">contact.<span class="attr">postalAddress</span> = address;</span><br><span class="line"></span><br><span class="line">contact.<span class="attr">emailAddress</span> = @<span class="string">"chaosky.me@gmail.com"</span>;</span><br><span class="line">contact.<span class="attr">phoneNumber</span> = [CNPhoneNumber phoneNumberWithStringValue:@<span class="string">"1234567890"</span>];</span><br><span class="line">paymentRequest.<span class="attr">shippingContact</span> = contact;</span><br></pre></td></tr></table></figure>

<h5 id="授权支付"><a href="#授权支付" class="headerlink" title="授权支付"></a>授权支付</h5><p>支付授权过程是由支付授权视图控制器与其委托合作完成的。支付授权视图控制器做了两件事：  </p>
<ul>
<li><p>让用户选择支付请求所需的账单信息与配送信息。</p>
</li>
<li><p>让用户授权支付操作。</p>
</li>
</ul>
<p>用户与视图控制器交互时，委托方法会被系统调用，所以在这些方法中你的应用可以更新所要显示的信息。例如在配送地址修改后更新配送价格。在用户授权支付请求后此方法还会被调用一次。</p>
<h6 id="使用委托方法更新配送方式与配送费用"><a href="#使用委托方法更新配送方式与配送费用" class="headerlink" title="使用委托方法更新配送方式与配送费用"></a>使用委托方法更新配送方式与配送费用</h6><p>当用户输入配送信息时，授权视图控制器会调用委托的 paymentAuthorizationViewController:didSelectShippingContact:completion: 方法和 paymentAuthorizationViewController:didSelectShippingMethod:completion: 方法。你可以实现这两个方法来更新你的支付请求。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户更改配送地址</span></span><br><span class="line">- (<span class="keyword">void</span>)paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)controller didSelectShippingContact:(PKContact *)contact completion:(<span class="keyword">void</span> (^)(PKPaymentAuthorizationStatus, <span class="built_in">NSArray</span>&lt;PKShippingMethod *&gt; * _Nonnull, <span class="built_in">NSArray</span>&lt;PKPaymentSummaryItem *&gt; * _Nonnull))completion &#123;</span><br><span class="line">    <span class="keyword">self</span>.selectedContact = contact;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSArray</span> *shippingMethods = [<span class="keyword">self</span> shippingMethodsForContact:contact];</span><br><span class="line">    <span class="comment">// 重新计算邮费</span></span><br><span class="line">    <span class="keyword">self</span>.selectedShippingMethod = shippingMethods[<span class="number">0</span>];</span><br><span class="line">    [<span class="keyword">self</span> updateShippingCost:<span class="keyword">self</span>.selectedShippingMethod];</span><br><span class="line"></span><br><span class="line">    completion(PKPaymentAuthorizationStatusSuccess, shippingMethods, <span class="keyword">self</span>.summaryItems);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户更改配送方式</span></span><br><span class="line">- (<span class="keyword">void</span>)paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)controller didSelectShippingMethod:(PKShippingMethod *)shippingMethod completion:(<span class="keyword">void</span> (^)(PKPaymentAuthorizationStatus, <span class="built_in">NSArray</span>&lt;PKPaymentSummaryItem *&gt; * _Nonnull))completion &#123;</span><br><span class="line">    <span class="keyword">self</span>.selectedShippingMethod = shippingMethod;</span><br><span class="line">    [<span class="keyword">self</span> updateShippingCost: shippingMethod];</span><br><span class="line">    completion(PKPaymentAuthorizationStatusSuccess, <span class="keyword">self</span>.summaryItems);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="支付被授权时创建支付令牌"><a href="#支付被授权时创建支付令牌" class="headerlink" title="支付被授权时创建支付令牌"></a>支付被授权时创建支付令牌</h6><p>当用户授权一个支付请求时，支付框架的 Apple 服务器与安全模块会协作创建一个支付令牌。你可以在委托方法 <code>paymentAuthorizationViewController:didAuthorizePayment:completion:</code> 中将支付信息以及其它你需要处理的信息，例如配送地址和购物车标识符，一起发送至你的服务器。这个过程如下所示：</p>
<ol>
<li>支付框架将支付请求发送至安全模块。只有安全模块会访问令牌化后的设备相关的支付卡号。</li>
<li>安全模块将特定卡的支付数据和商家信息一起加密(加密后的数据只有 Apple 可以访问)，然后将加密后的数据发送至支付框架。支付框架再将这些数据发送至 Apple 的服务器。</li>
<li>Apple 服务器使用商家标识证书将这些支付数据重新加密。这些令牌只能由你以及那些与你共享商户标识证书的人读取。随后服务器生成支付令牌再将其发送至设备。</li>
<li>支付框架调用 paymentAuthorizationViewController:didAuthorizePayment:completion: 方法将令牌发送至你的委托。你在委托方法中再将其发送至你的服务器。</li>
</ol>
<p>在服务器上的处理操作取决于你是自己处理支付还是使用其它支付平台。不过，在两种情况下服务器都得处理订单再将处理结果返回给设备。在设备上，委托再将处理结果传入完成处理方法中。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户已经授权支付</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">paymentAuthorizationViewController:</span>(PKPaymentAuthorizationViewController *)controller <span class="string">didAuthorizePayment:</span>(PKPayment *)payment <span class="string">completion:</span>(<span class="keyword">void</span> (^)(PKPaymentAuthorizationStatus))completion</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将付款信息与其它处理订单的必需信息一起发送至你的服务器。如支付令牌、配送地址、账单地址。</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从你的服务器获取支付授权状态，验证支付结果</span></span><br><span class="line">    PKPaymentAuthorizationStatus status = PKPaymentAuthorizationStatusSuccess;</span><br><span class="line">    completion(status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="授权支付完成"><a href="#授权支付完成" class="headerlink" title="授权支付完成"></a>授权支付完成</h6><p>支付框架显示完支付事务状态后，授权视图控制器会调用委托的 <code>aymentAuthorizationViewControllerDidFinish:</code> 方法。在此方法的实现中，你应该释放授权视图控制器然后再显示与应用相关的支付信息界面。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) <span class="string">paymentAuthorizationViewControllerDidFinish:</span>(PKPaymentAuthorizationViewController *)controller</span><br><span class="line">&#123;</span><br><span class="line">    [controller <span class="string">dismissViewControllerAnimated:</span>YES <span class="string">completion:</span>nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="处理支付"><a href="#处理支付" class="headerlink" title="处理支付"></a>处理支付</h5><p>处理一次付款事务一般包括以下几个步骤：</p>
<ol>
<li>将付款信息与其它处理订单的必需信息一起发送至你的服务器。</li>
<li>验证付款数据的散列值与签名。</li>
<li>解密出支付数据。</li>
<li>将支付数据提交给付款处理网络。</li>
<li>将订单信息提交至你的订单跟踪系统。</li>
</ol>
<p>你有两种可选的方式处理付款过程：</p>
<ol>
<li>利用已有的支付平台来处理付款。</li>
<li>自己实现付款过程。</li>
</ol>
<p>一次付款的处理过程通常情况下包括上述的大部分步骤。</p>
<p>访问、验证以及处理付款信息都需要你懂得一些加密领域的知识，比如 SHA-1 哈希、访问和验证 PKCS #7 签名以及如何实现椭圆曲线 Diiffie-Hellman 密钥交换等。如果你没有这些加密的背景知识，我们建议你使用已有支付平台，它们会替你完成这些繁琐的操作。关于 Apple Pay 已支持的第三方支付平台，请参考 <a href="https://developer.apple.com/apple-pay/" target="_blank" rel="noopener">https://developer.apple.com/apple-pay/</a>。</p>
<p>付款数据是嵌套结构。支付令牌是 PKPaymentToken 类的实例。其 paymentData 属性值是一个 JSON 字典。该 JSON 字典包括用于验证信息有效性头信息以及加密后的付款数据。加密后的支付数据包括付款金额、持卡人姓名以及其它特定支付处理协议的信息。</p>
<p><img src="https://developer.apple.com/library/ios/documentation/PassKit/Reference/PaymentTokenJSON/Art/payment_data_structure_2x.png" alt="付款数据的数据结构"></p>
<p>更多关于付款数据的数据结构，请参考<a href="https://developer.apple.com/library/ios/documentation/PassKit/Reference/PaymentTokenJSON/PaymentTokenJSON.html#//apple_ref/doc/uid/TP40014929" target="_blank" rel="noopener">支付令牌的格式</a>。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://developer.apple.com/apple-pay/" target="_blank" rel="noopener">官方Pay教程</a></li>
<li><a href="https://developer.apple.com/apple-pay/get-started/cn/" target="_blank" rel="noopener">Apple Pay 中文入门</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/ApplePay_Guide/index.html#//apple_ref/doc/uid/TP40014764-CH1-SW1" target="_blank" rel="noopener">Apple Pay 编程指南</a></li>
</ol>
<h2 id="-Pay-VS-In-App-Purchase"><a href="#-Pay-VS-In-App-Purchase" class="headerlink" title=" Pay VS In-App Purchase"></a> Pay VS In-App Purchase</h2><table>
<thead>
<tr>
<th></th>
<th align="center"> Pay</th>
<th align="center">In-App Purchase</th>
</tr>
</thead>
<tbody><tr>
<td>框架</td>
<td align="center">PassKit</td>
<td align="center">StoreKit</td>
</tr>
<tr>
<td>适用范围</td>
<td align="center"><strong>实体商品</strong>（如食品杂货、服装和电器）和<strong>服务</strong>（如俱乐部会员、酒店预订和活动门票）</td>
<td align="center"><strong>销售虚拟商品</strong>，如适用于您的 App 的优质内容及订阅数字内容；程序内的内容和功能性；程序内货币服务；数码订阅</td>
</tr>
<tr>
<td>支付处理</td>
<td align="center">自己的支付平台处理付款</td>
<td align="center">苹果公司处理付款</td>
</tr>
</tbody></table>
<h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h2><p><a href="https://github.com/chaoskyx/Demo/tree/master/Payment" target="_blank" rel="noopener">https://github.com/chaoskyx/Demo/tree/master/Payment</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>支付宝支付</tag>
        <tag>微信支付</tag>
        <tag>IAP</tag>
        <tag>应用内支付</tag>
        <tag>Apple Pay</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式 （Design Pattern）</title>
    <url>/2016/06/30/Design-Pattern/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="面向过程和面向对象"><a href="#面向过程和面向对象" class="headerlink" title="面向过程和面向对象"></a>面向过程和面向对象</h2><ol>
<li><p>面向过程是祈使句，面向对象是主谓（宾）结构。</p>
</li>
<li><p>面向过程注重数据的存储和操作，面向对象注重用程序模拟生活逻辑。</p>
</li>
<li><p>面向过程数据和操作数据的过程是分离的，没有逻辑上的必然联系；面向对象中数据和操作数据的方法是逻辑上的整体，称之为对象。</p>
</li>
</ol>
<h2 id="面向对象的基本概念"><a href="#面向对象的基本概念" class="headerlink" title="面向对象的基本概念"></a>面向对象的基本概念</h2><ul>
<li><p>对象：现实世界中的对象是我们认识世界的基本单元，世界就是由这些基本单元组成的。一切皆为对象；每个对象都是独一无二的；对象都有属性和行为；对象都属于某个类。</p>
</li>
<li><p>类：类是对一组具有共同属性和行为的对象的抽象，它是对象的蓝图和模板。</p>
</li>
<li><p>消息：对象与对象之间存在着一定的联系，这种联系通过消息的传递来实现。程序中的一切操作都通过向对象发送消息来实现，对象接收到消息后，调用有关对象的行为来完成相应的操作。</p>
</li>
</ul>
<h2 id="面向对象的3个基本要素"><a href="#面向对象的3个基本要素" class="headerlink" title="面向对象的3个基本要素"></a>面向对象的3个基本要素</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装是把一个事物包装起来，使外界不了解它的内部的具体情况。在面向对象的程序设计中，封装就是把相关的数据和代码结合成一个有机的整体，形成数据和操作代码的封装体，对外只提供一个可以控制的接口，内部大部分的实现细节对外隐蔽，达到对数据访问权的合理控制。封装使程序中个部分之间的相互联系达到最小，提高了程序的安全性，简化了程序代码的编写工作。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是从已有的类创建新类的过程，提供继承信息的称为父类，得到继承信息的称为子类，子类和父类之间是IS-A关系，继承使得类与类之间形成一个层次结构。</p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态是不同结构的对象可以以各自不同的方式响应同一个消息，或者说同一个消息可以根据发送消息的对象的不同而采用多种不同的操作行为，这是面向对象最精髓的部分。</p>
<a id="more"></a>

<h2 id="软件设计终极原则：高内聚-低耦合"><a href="#软件设计终极原则：高内聚-低耦合" class="headerlink" title="软件设计终极原则：高内聚 低耦合"></a>软件设计终极原则：高内聚 低耦合</h2><h3 id="内聚"><a href="#内聚" class="headerlink" title="内聚"></a>内聚</h3><p>一个模块内各个元素彼此结合的紧密程度。</p>
<p>在一个模块内，让每个元素之间都尽可能的紧密相连。</p>
<p>也就是充分利用每一个元素的功能，各施所能，以最终实现某个功能。</p>
<p>如果某个元素与该模块的关系比较疏松的话，可能该模块的结构还不够完善，或者是该元素是多余的。</p>
<h3 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h3><p>一个软件结构内不同模块之间互连程度的度量。</p>
<p>一个完整的系统，模块与模块之间，尽可能的使其独立存在。</p>
<p>也就是说，让每个模块，尽可能的独立完成某个特定的子功能。</p>
<p>模块与模块之间的接口，尽量的少而简单。</p>
<p>如果某两个模块间的关系比较复杂的话，最好首先考虑进一步的模块划分。</p>
<p>这样有利于修改和组合。</p>
<h3 id="内聚、耦合的区别与联系"><a href="#内聚、耦合的区别与联系" class="headerlink" title="内聚、耦合的区别与联系"></a>内聚、耦合的区别与联系</h3><p>内聚和耦合，包含了横向和纵向的关系。功能内聚和数据耦合，是我们需要达成的目标。横向的内聚和耦合，通常体现在系统的各个模块、类之间的关系，而纵向的耦合，体现在系统的各个层次之间的关系。</p>
<p>耦合性着重于不同模块之间的相依性，而内聚性着重于一模块中不同功能之间的关系性。</p>
<p>并不是内聚越高越好，耦合越低越好，真正好的设计是在高内聚和低耦合间进行平衡，也就是说高内聚和低耦合是冲突的。</p>
<p>最强的内聚莫过于一个类只写一个函数，这样内聚性绝对是最高的。但这会带来一个明显的问题：类的数量急剧增多，这样就导致了其它类的耦合特别多，于是整个设计就变成了“高内聚高耦合”了。由于高耦合，整个系统变动同样非常频繁。</p>
<p>对于耦合来说，最弱的耦合是一个类将所有的函数都包含了，这样类完全不依赖其它类，耦合性是最低的。但这样会带来一个明显的问题：内聚性很低，于是整个设计就变成了“低耦合低内聚”了。由于低内聚，整个类的变动同样非常频繁。</p>
<p>对于“低耦合低内聚”来说，还有另外一个明显的问题：几乎无法被其它类重用。原因很简单，类本身太庞大了，要么实现很复杂，要么数据很大，其它类无法明确该如何重用这个类。</p>
<h2 id="面向对象七原则（SOLID）"><a href="#面向对象七原则（SOLID）" class="headerlink" title="面向对象七原则（SOLID）"></a>面向对象七原则（SOLID）</h2><h3 id="S：单一职责原则（Single-Resposibility-Principle）"><a href="#S：单一职责原则（Single-Resposibility-Principle）" class="headerlink" title="S：单一职责原则（Single-Resposibility Principle）"></a>S：单一职责原则（Single-Resposibility Principle）</h3><p>其核心思想为：一个类，最好只做一件事，只有一个引起它的变化。单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多，这将导致职责依赖，相互之间就产生影响，从而大大损伤其内聚性和耦合度。通常意义下的单一职责，就是指只有一种单一功能，不要为类实现过多的功能点，以保证实体只有一个引起它变化的原因。</p>
<p>专注，是一个人优良的品质；同样的，单一也是一个类的优良设计。交杂不清的职责将使得代码看起来特别别扭牵一发而动全身，有失美感和必然导致丑陋的系统错误风险。</p>
<h3 id="O：开放封闭原则（Open-Closed-principle）"><a href="#O：开放封闭原则（Open-Closed-principle）" class="headerlink" title="O：开放封闭原则（Open-Closed principle）"></a>O：开放封闭原则（Open-Closed principle）</h3><p>其核心思想是：软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。开放封闭原则主要体现在两个方面1、对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。2、对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对其进行任何尝试的修改。</p>
<p>实现开开放封闭原则的核心思想就是对抽象编程，而不对具体编程，因为抽象相对稳定。让类依赖于固定的抽象，所以修改就是封闭的；而通过面向对象的继承和多态机制，又可以实现对抽象类的继承，通过覆写其方法来改变固有行为，实现新的拓展方法，所以就是开放的。<br>“需求总是变化”没有不变的软件，所以就需要用封闭开放原则来封闭变化满足需求，同时还能保持软件内部的封装体系稳定，不被需求的变化影响。</p>
<h3 id="L：里氏替换原则（Liskov-Substituion-Principle）"><a href="#L：里氏替换原则（Liskov-Substituion-Principle）" class="headerlink" title="L：里氏替换原则（Liskov-Substituion Principle）"></a>L：里氏替换原则（Liskov-Substituion Principle）</h3><p> 其核心思想是：子类必须能够替换其基类。这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。在父类和子类的具体行为中，必须严格把握继承层次中的关系和特征，将基类替换为子类，程序的行为不会发生任何变化。同时，这一约束反过来则是不成立的，子类可以替换基类，但是基类不一定能替换子类。</p>
<p>Liskov替换原则，主要着眼于对抽象和多态建立在继承的基础上，因此只有遵循了Liskov替换原则，才能保证继承复用是可靠地。实现的方法是面向接口编程：将公共部分抽象为基类接口或抽象类，通过Extract Abstract Class，在子类中通过覆写父类的方法实现新的方式支持同样的职责。<br>Liskov替换原则是关于继承机制的设计原则，违反了Liskov替换原则就必然导致违反开放封闭原则。<br>Liskov替换原则能够保证系统具有良好的拓展性，同时实现基于多态的抽象机制，能够减少代码冗余，避免运行期的类型判别。</p>
<h3 id="I：接口隔离原则（Interface-Segregation-Principle）"><a href="#I：接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="I：接口隔离原则（Interface-Segregation Principle）"></a>I：接口隔离原则（Interface-Segregation Principle）</h3><p>其核心思想是：使用多个小的专门的接口，而不要使用一个大的总接口。</p>
<p>具体而言，接口隔离原则体现在：接口应该是内聚的，应该避免“胖”接口。一个类对另外一个类的依赖应该建立在最小的接口上，不要强迫依赖不用的方法，这是一种接口污染。<br>接口有效地将细节和抽象隔离，体现了对抽象编程的一切好处，接口隔离强调接口的单一性。而胖接口存在明显的弊端，会导致实现的类型必须完全实现接口的所有方法、属性等；而某些时候，实现类型并非需要所有的接口定义，在设计上这是“浪费”，而且在实施上这会带来潜在的问题，对胖接口的修改将导致一连串的客户端程序需要修改，有时候这是一种灾难。在这种情况下，将胖接口分解为多个特点的定制化方法，使得客户端仅仅依赖于它们的实际调用的方法，从而解除了客户端不会依赖于它们不用的方法。<br>分离的手段主要有以下两种：1、委托分离，通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接依赖，但是会增加系统的开销。2、多重继承分离，通过接口多继承来实现客户的需求，这种方式是较好的。</p>
<h3 id="D：依赖倒置原则（Dependecy-Inversion-Principle）"><a href="#D：依赖倒置原则（Dependecy-Inversion-Principle）" class="headerlink" title="D：依赖倒置原则（Dependecy-Inversion Principle）"></a>D：依赖倒置原则（Dependecy-Inversion Principle）</h3><p>其核心思想是：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。</p>
<p>我们知道，依赖一定会存在于类与类、模块与模块之间。当两个模块之间存在紧密的耦合关系时，最好的方法就是分离接口和实现：在依赖之间定义一个抽象的接口使得高层模块调用接口，而底层模块实现接口的定义，以此来有效控制耦合关系，达到依赖于抽象的设计目标。<br>抽象的稳定性决定了系统的稳定性，因为抽象是不变的，依赖于抽象是面向对象设计的精髓，也是依赖倒置原则的核心。<br>依赖于抽象是一个通用的原则，而某些时候依赖于细节则是在所难免的，必须权衡在抽象和具体之间的取舍，方法不是一层不变的。依赖于抽象，就是对接口编程，不要对实现编程。</p>
<h3 id="迪米特法则，又称最少知道原则（Demeter-Principle）"><a href="#迪米特法则，又称最少知道原则（Demeter-Principle）" class="headerlink" title="迪米特法则，又称最少知道原则（Demeter Principle）"></a>迪米特法则，又称最少知道原则（Demeter Principle）</h3><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<h3 id="合成聚合复用原则（Composite-Reuse-Principle）"><a href="#合成聚合复用原则（Composite-Reuse-Principle）" class="headerlink" title="合成聚合复用原则（Composite Reuse Principle）"></a>合成聚合复用原则（Composite Reuse Principle）</h3><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h3><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。<br>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>
<h3 id="什么是-GOF（四人帮，全拼-Gang-of-Four）？"><a href="#什么是-GOF（四人帮，全拼-Gang-of-Four）？" class="headerlink" title="什么是 GOF（四人帮，全拼 Gang of Four）？"></a>什么是 GOF（四人帮，全拼 Gang of Four）？</h3><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念。<br>四位作者合称 GOF（四人帮，全拼 Gang of Four）。他们所提出的设计模式主要是基于以下的面向对象设计原则。</p>
<ul>
<li>对接口编程而不是对实现编程。</li>
<li>优先使用对象组合而不是继承。</li>
</ul>
<h3 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h3><p>根据设计模式的参考书 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。</p>
<h3 id="创建型模式（5种）"><a href="#创建型模式（5种）" class="headerlink" title="创建型模式（5种）"></a>创建型模式（5种）</h3><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用新的运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p>
<ul>
<li>工厂模式（Factory Pattern）</li>
<li>抽象工厂模式（Abstract Factory Pattern）</li>
<li>单例模式（Singleton Pattern）</li>
<li>建造者模式（Builder Pattern）</li>
<li>原型模式（Prototype Pattern）</li>
</ul>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。<br>主要解决：主要解决接口选择的问题。<br>何时使用：我们明确地计划不同条件下创建不同实例时。<br>如何解决：让其子类实现工厂接口，返回的也是一个抽象的产品。<br>关键代码：创建过程在其子类执行。<br>应用实例： 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate 换数据库只需换方言和驱动就可以。<br>优点： 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。<br>缺点：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。<br>使用场景： 1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 3、设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。<br>注意事项：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 Shape 接口和实现 Shape 接口的实体类。下一步是定义工厂类 ShapeFactory。<br>FactoryPatternDemo，我们的演示类使用 ShapeFactory 来获取 Shape 对象。它将向 ShapeFactory 传递信息（CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/factory_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p>
<h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>意图：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。<br>主要解决：主要解决接口选择的问题。<br>何时使用：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。<br>如何解决：在一个产品族里面，定义多个产品。<br>关键代码：在一个工厂里聚合多个同类产品。<br>应用实例：工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OO 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。<br>优点：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<br>缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。<br>使用场景： 1、QQ 换皮肤，一整套一起换。 2、生成不同操作系统的程序。<br>注意事项：产品族难扩展，产品等级易扩展。</p>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>我们将创建 Shape 和 Color 接口和实现这些接口的实体类。下一步是创建抽象工厂类 AbstractFactory。接着定义工厂类 ShapeFactory 和 ColorFactory，这两个工厂类都是扩展了 AbstractFactory。然后创建一个工厂创造器/生成器类 FactoryProducer。<br>AbstractFactoryPatternDemo，我们的演示类使用 FactoryProducer 来获取 AbstractFactory 对象。它将向 AbstractFactory 传递形状信息 Shape（CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。同时它还向 AbstractFactory 传递颜色信息 Color（RED / GREEN / BLUE），以便获取它所需对象的类型。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/abstractfactory_pattern_uml_diagram.jpg" alt="抽象工厂模式的 UML 图"></p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br>注意：<br>1、单例类只能有一个实例。<br>2、单例类必须自己创建自己的唯一实例。<br>3、单例类必须给所有其他对象提供这一实例。</p>
<h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>主要解决：一个全局使用的类频繁地创建与销毁。<br>何时使用：当您想控制实例数目，节省系统资源的时候。<br>如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。<br>关键代码：构造函数是私有的。<br>应用实例： 1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。<br>优点： 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。<br>缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。<br>使用场景： 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。<br>注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p>
<h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 SingleObject 类。SingleObject 类有它的私有构造函数和本身的一个静态实例。<br>SingleObject 类提供了一个静态方法，供外界获取它的静态实例。SingletonPatternDemo，我们的演示类使用 SingleObject 类来获取 SingleObject 对象。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/singleton_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p>
<h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>意图：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。<br>主要解决：主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。<br>何时使用：一些基本部件不会变，而其组合经常变化的时候。<br>如何解决：将变与不变分离开。<br>关键代码：建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。<br>应用实例： 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”。 2、JAVA 中的 StringBuilder。<br>优点： 1、建造者独立，易扩展。 2、便于控制细节风险。<br>缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。<br>使用场景： 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。<br>注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p>
<h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><p>我们假设一个快餐店的商业案例，其中，一个典型的套餐可以是一个汉堡（Burger）和一杯冷饮（Cold drink）。汉堡（Burger）可以是素食汉堡（Veg Burger）或鸡肉汉堡（Chicken Burger），它们是包在纸盒中。冷饮（Cold drink）可以是可口可乐（coke）或百事可乐（pepsi），它们是装在瓶子中。<br>我们将创建一个表示食物条目（比如汉堡和冷饮）的 Item 接口和实现 Item 接口的实体类，以及一个表示食物包装的 Packing 接口和实现 Packing 接口的实体类，汉堡是包在纸盒中，冷饮是装在瓶子中。<br>然后我们创建一个 Meal 类，带有 Item 的 ArrayList 和一个通过结合 Item 来创建不同类型的 Meal 对象的 MealBuilder。BuilderPatternDemo，我们的演示类使用 MealBuilder 来创建一个 Meal。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/builder_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p>
<h4 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h4><p>意图：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。<br>主要解决：在运行期建立和删除原型。<br>何时使用： 1、当一个系统应该独立于它的产品创建，构成和表示时。 2、当要实例化的类是在运行时刻指定时，例如，通过动态装载。 3、为了避免创建一个与产品类层次平行的工厂类层次时。 4、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。<br>如何解决：利用已有的一个原型对象，快速地生成和原型对象一样的实例。<br>关键代码： 1、实现克隆操作，在 JAVA 继承 Cloneable，重写 clone()，在 .NET 中可以使用 Object 类的 MemberwiseClone() 方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。 2、原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些”易变类”拥有稳定的接口。<br>应用实例： 1、细胞分裂。 2、JAVA 中的 Object clone() 方法。<br>优点： 1、性能提高。 2、逃避构造函数的约束。<br>缺点： 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。 3、逃避构造函数的约束。<br>使用场景： 1、资源优化场景。 2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。 3、性能和安全要求的场景。 4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。 5、一个对象多个修改者的场景。 6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。 7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。<br>注意事项：与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。</p>
<h4 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个抽象类 Shape 和扩展了 Shape 类的实体类。下一步是定义类 ShapeCache，该类把 shape 对象存储在一个 Hashtable 中，并在请求的时候返回它们的克隆。<br>PrototypPatternDemo，我们的演示类使用 ShapeCache 类来获取 Shape 对象。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/prototype_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="结构型模式（8种）"><a href="#结构型模式（8种）" class="headerlink" title="结构型模式（8种）"></a>结构型模式（8种）</h3><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p>
<ul>
<li>适配器模式（Adapter Pattern）</li>
<li>桥接模式（Bridge Pattern）</li>
<li>过滤器模式（Filter、Criteria Pattern）</li>
<li>组合模式（Composite Pattern）</li>
<li>装饰器模式（Decorator Pattern）</li>
<li>外观模式（Facade Pattern）</li>
<li>享元模式（Flyweight Pattern）</li>
<li>代理模式（Proxy Pattern）</li>
</ul>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。<br>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。<br>我们通过下面的实例来演示适配器模式的使用。其中，音频播放器设备只能播放 mp3 文件，通过使用一个更高级的音频播放器来播放 vlc 和 mp4 文件。</p>
<h4 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h4><p>意图：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。<br>主要解决：主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。<br>何时使用： 1、系统需要使用现有的类，而此类的接口不符合系统的需要。 2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）<br>如何解决：继承或依赖（推荐）。<br>关键代码：适配器继承或依赖已有的对象，实现想要的目标接口。<br>应用实例： 1、美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。 2、JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。 3、在 LINUX 上运行 WINDOWS 程序。 4、JAVA 中的 jdbc。<br>优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。<br>缺点： 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。<br>使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。<br>注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</p>
<h4 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h4><p>我们有一个 MediaPlayer 接口和一个实现了 MediaPlayer 接口的实体类 AudioPlayer。默认情况下，AudioPlayer 可以播放 mp3 格式的音频文件。<br>我们还有另一个接口 AdvancedMediaPlayer 和实现了 AdvancedMediaPlayer 接口的实体类。该类可以播放 vlc 和 mp4 格式的文件。<br>我们想要让 AudioPlayer 播放其他格式的音频文件。为了实现这个功能，我们需要创建一个实现了 MediaPlayer 接口的适配器类 MediaAdapter，并使用 AdvancedMediaPlayer 对象来播放所需的格式。<br>AudioPlayer 使用适配器类 MediaAdapter 传递所需的音频类型，不需要知道能播放所需格式音频的实际类。AdapterPatternDemo，我们的演示类使用 AudioPlayer 类来播放各种格式。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/adapter_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。<br>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。<br>我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。</p>
<h4 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h4><p>意图：将抽象部分与实现部分分离，使它们都可以独立的变化。<br>主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。<br>何时使用：实现系统可能有多个角度分类，每一种角度都可能变化。<br>如何解决：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。<br>关键代码：抽象类依赖实现类。<br>应用实例： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。<br>优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。<br>缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。<br>使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。<br>注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。</p>
<h4 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h4><p>我们有一个作为桥接实现的 DrawAPI 接口和实现了 DrawAPI 接口的实体类 RedCircle、GreenCircle。Shape 是一个抽象类，将使用 DrawAPI 的对象。BridgePatternDemo，我们的演示类使用 Shape 类来画出不同颜色的圆。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/bridge_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="过滤器模式"><a href="#过滤器模式" class="headerlink" title="过滤器模式"></a>过滤器模式</h3><p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p>
<h4 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 Person 对象、Criteria 接口和实现了该接口的实体类，来过滤 Person 对象的列表。CriteriaPatternDemo，我们的演示类使用 Criteria 对象，基于各种标准和它们的结合来过滤 Person 对象的列表。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/filter_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。<br>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。<br>我们通过下面的实例来演示组合模式的用法。实例演示了一个组织中员工的层次结构。</p>
<h4 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h4><p>意图：将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。<br>主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。<br>何时使用： 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。<br>如何解决：树枝和叶子实现统一接口，树枝内部组合该接口。<br>关键代码：树枝内部组合该接口，并且含有内部属性 List，里面放 Component。<br>应用实例： 1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作树、操作符和另一个操作数。 2、在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。<br>优点： 1、高层模块调用简单。 2、节点自由增加。<br>缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。<br>使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理。<br>注意事项：定义时为具体类。</p>
<h4 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h4><p>我们有一个类 Employee，该类被当作组合模型类。CompositePatternDemo，我们的演示类使用 Employee 类来添加部门层次结构，并打印所有员工。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/composite_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。<br>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。<br>我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。</p>
<h4 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h4><p>意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。<br>主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。<br>何时使用：在不想增加很多子类的情况下扩展类。<br>如何解决：将具体功能职责划分，同时继承装饰者模式。<br>关键代码： 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。<br>应用实例： 1、孙悟空有 72 变，当他变成”庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。 2、不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。<br>优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。<br>缺点：多层装饰比较复杂。<br>使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。<br>注意事项：可代替继承。</p>
<h4 id="实现-9"><a href="#实现-9" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 Shape 接口和实现了 Shape 接口的实体类。然后我们创建一个实现了 Shape 接口的抽象装饰类 ShapeDecorator，并把 Shape 对象作为它的实例变量。<br>RedShapeDecorator 是实现了 ShapeDecorator 的实体类。<br>DecoratorPatternDemo，我们的演示类使用 RedShapeDecorator 来装饰 Shape 对象。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。<br>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p>
<h4 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h4><p>意图：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。<br>主要解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。<br>何时使用： 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可。 2、定义系统的入口。<br>如何解决：客户端不与系统耦合，外观类与系统耦合。<br>关键代码：在客户端和复杂系统之间再加一层，这一次将调用顺序、依赖关系等处理好。<br>应用实例： 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 2、JAVA 的三层开发模式。<br>优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。<br>缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。<br>使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。<br>注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。</p>
<h4 id="实现-10"><a href="#实现-10" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 Shape 接口和实现了 Shape 接口的实体类。下一步是定义一个外观类 ShapeMaker。<br>ShapeMaker 类使用实体类来代表用户对这些类的调用。FacadePatternDemo，我们的演示类使用 ShapeMaker 类来显示结果。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/facade_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。<br>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 Circle 对象。</p>
<h4 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h4><p>意图：运用共享技术有效地支持大量细粒度的对象。<br>主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。<br>何时使用： 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。<br>如何解决：用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。<br>关键代码：用 HashMap 存储这些对象。<br>应用实例： 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。<br>优点：大大减少对象的创建，降低系统的内存，使效率提高。<br>缺点：提高了系统的负责度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。<br>使用场景： 1、系统有大量相似对象。 2、需要缓冲池的场景。<br>注意事项： 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。</p>
<h4 id="实现-11"><a href="#实现-11" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 Shape 接口和实现了 Shape 接口的实体类 Circle。下一步是定义工厂类 ShapeFactory。<br>ShapeFactory 有一个 Circle 的 HashMap，其中键名为 Circle 对象的颜色。无论何时接收到请求，都会创建一个特定颜色的圆。ShapeFactory 检查它的 HashMap 中的 circle 对象，如果找到 Circle 对象，则返回该对象，否则将创建一个存储在 hashmap 中以备后续使用的新对象，并把该对象返回到客户端。<br>FlyWeightPatternDemo，我们的演示类使用 ShapeFactory 来获取 Shape 对象。它将向 ShapeFactory 传递信息（red / green / blue/ black / white），以便获取它所需对象的颜色。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/flyweight_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。<br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p>
<h4 id="介绍-11"><a href="#介绍-11" class="headerlink" title="介绍"></a>介绍</h4><p>意图：为其他对象提供一种代理以控制对这个对象的访问。<br>主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。<br>何时使用：想在访问一个类时做一些控制。<br>如何解决：增加中间层。<br>关键代码：实现与被代理类组合。<br>应用实例： 1、Windows 里面的快捷方式。 2、猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。 3、买火车票不一定在火车站买，也可以去代售点。 4、一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。 5、spring aop。<br>优点： 1、职责清晰。 2、高扩展性。 3、智能化。<br>缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。<br>使用场景：按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。<br>注意事项： 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p>
<h4 id="实现-12"><a href="#实现-12" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。<br>ProxyPatternDemo，我们的演示类使用 ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/proxy_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="行为型模式（12种）"><a href="#行为型模式（12种）" class="headerlink" title="行为型模式（12种）"></a>行为型模式（12种）</h3><p>这些设计模式特别关注对象之间的通信。</p>
<ul>
<li>责任链模式（Chain of Responsibility Pattern）</li>
<li>命令模式（Command Pattern）</li>
<li>解释器模式（Interpreter Pattern）</li>
<li>迭代器模式（Iterator Pattern）</li>
<li>中介者模式（Mediator Pattern）</li>
<li>备忘录模式（Memento Pattern）</li>
<li>观察者模式（Observer Pattern）</li>
<li>状态模式（State Pattern）</li>
<li>空对象模式（Null Object Pattern）</li>
<li>策略模式（Strategy Pattern）</li>
<li>模板模式（Template Pattern）</li>
<li>访问者模式（Visitor Pattern）</li>
</ul>
<h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。<br>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p>
<h4 id="介绍-12"><a href="#介绍-12" class="headerlink" title="介绍"></a>介绍</h4><p>意图：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。<br>主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。<br>何时使用：在处理消息的时候以过滤很多道。<br>如何解决：拦截的类都实现统一接口。<br>关键代码：Handler 里面聚合它自己，在 HanleRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。<br>应用实例： 1、红楼梦中的”击鼓传花”。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。<br>优点： 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。<br>缺点： 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。<br>使用场景： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。<br>注意事项：在 JAVA WEB 中遇到很多应用。</p>
<h4 id="实现-13"><a href="#实现-13" class="headerlink" title="实现"></a>实现</h4><p>我们创建抽象类 AbstractLogger，带有详细的日志记录级别。然后我们创建三种类型的记录器，都扩展了 AbstractLogger。每个记录器消息的级别是否属于自己的级别，如果是则相应地打印出来，否则将不打印并把消息传给下一个记录器。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/chain_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p>
<h4 id="介绍-13"><a href="#介绍-13" class="headerlink" title="介绍"></a>介绍</h4><p>意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。<br>主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。<br>何时使用：在某些场合，比如要对行为进行”记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将”行为请求者”与”行为实现者”解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。<br>如何解决：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。<br>关键代码：定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口<br>应用实例：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。<br>优点： 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。<br>缺点：使用命令模式可能会导致某些系统有过多的具体命令类。<br>使用场景：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。<br>注意事项：系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。</p>
<h4 id="实现-14"><a href="#实现-14" class="headerlink" title="实现"></a>实现</h4><p>我们首先创建作为命令的接口 Order，然后创建作为请求的 Stock 类。实体命令类 BuyStock 和 SellStock，实现了 Order 接口，将执行实际的命令处理。创建作为调用对象的类 Broker，它接受订单并能下订单。<br>Broker 对象使用命令模式，基于命令的类型确定哪个对象执行哪个命令。CommandPatternDemo，我们的演示类使用 Broker 类来演示命令模式。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/command_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p>
<h4 id="介绍-14"><a href="#介绍-14" class="headerlink" title="介绍"></a>介绍</h4><p>意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。<br>主要解决：对于一些固定文法构建一个解释句子的解释器。<br>何时使用：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。<br>如何解决：构件语法树，定义终结符与非终结符。<br>关键代码：构件环境类，包含解释器之外的一些全局信息，一般是 HashMap。<br>应用实例：编译器、运算表达式计算。<br>优点： 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。<br>缺点： 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。<br>使用场景： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。<br>注意事项：可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。</p>
<h4 id="实现-15"><a href="#实现-15" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个接口 Expression 和实现了 Expression 接口的实体类。定义作为上下文中主要解释器的 TerminalExpression 类。其他的类 OrExpression、AndExpression 用于创建组合式表达式。<br>InterpreterPatternDemo，我们的演示类使用 Expression 类创建规则和演示表达式的解析。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/interpreter_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。<br>迭代器模式属于行为型模式。</p>
<h4 id="介绍-15"><a href="#介绍-15" class="headerlink" title="介绍"></a>介绍</h4><p>意图：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。<br>主要解决：不同的方式来遍历整个整合对象。<br>何时使用：遍历一个聚合对象。<br>如何解决：把在元素之间游走的责任交给迭代器，而不是聚合对象。<br>关键代码：定义接口：hasNext, next。<br>应用实例：JAVA 中的 iterator。<br>优点： 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。<br>缺点：由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。<br>使用场景： 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。<br>注意事项：迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</p>
<h4 id="实现-16"><a href="#实现-16" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个叙述导航方法的 Iterator 接口和一个返回迭代器的 Container 接口。实现了 Container 接口的实体类将负责实现 Iterator 接口。<br>IteratorPatternDemo，我们的演示类使用实体类 NamesRepository 来打印 NamesRepository 中存储为集合的 Names。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/iterator_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。</p>
<h4 id="介绍-16"><a href="#介绍-16" class="headerlink" title="介绍"></a>介绍</h4><p>意图：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。<br>主要解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。<br>何时使用：多个类相互耦合，形成了网状结构。<br>如何解决：将上述网状结构分离为星型结构。<br>关键代码：对象 Colleague 之间的通信封装到一个类中单独处理。<br>应用实例： 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。<br>优点： 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。<br>缺点：中介者会庞大，变得复杂难以维护。<br>使用场景： 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。<br>注意事项：不应当在职责混乱的时候使用。</p>
<h4 id="实现-17"><a href="#实现-17" class="headerlink" title="实现"></a>实现</h4><p>我们通过聊天室实例来演示中介者模式。实例中，多个用户可以向聊天室发送消息，聊天室向所有的用户显示消息。我们将创建两个类 ChatRoom 和 User。User 对象使用 ChatRoom 方法来分享他们的消息。<br>MediatorPatternDemo，我们的演示类使用 User 对象来显示他们之间的通信。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/mediator_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。</p>
<h4 id="介绍-17"><a href="#介绍-17" class="headerlink" title="介绍"></a>介绍</h4><p>意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。<br>主要解决：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。<br>何时使用：很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有”后悔药”可吃。<br>如何解决：通过一个备忘录类专门存储对象状态。<br>关键代码：客户不与备忘录类耦合，与备忘录管理类耦合。<br>应用实例： 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。<br>优点： 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。<br>缺点：消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。<br>使用场景： 1、需要保存/恢复数据的相关状态场景。 2、提供一个可回滚的操作。<br>注意事项： 1、为了符合迪米特原则，还要增加一个管理备忘录的类。 2、为了节约内存，可使用原型模式+备忘录模式。</p>
<h4 id="实现-18"><a href="#实现-18" class="headerlink" title="实现"></a>实现</h4><p>备忘录模式使用三个类 Memento、Originator 和 CareTaker。Memento 包含了要被恢复的对象的状态。Originator 创建并在 Memento 对象中存储状态。Caretaker 对象负责从 Memento 中恢复对象的状态。<br>MementoPatternDemo，我们的演示类使用 CareTaker 和 Originator 对象来显示对象的状态恢复。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/memento_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。</p>
<h4 id="介绍-18"><a href="#介绍-18" class="headerlink" title="介绍"></a>介绍</h4><p>意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。<br>主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。<br>何时使用：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。<br>如何解决：使用面向对象技术，可以将这种依赖关系弱化。<br>关键代码：在抽象类里有一个 ArrayList 存放观察者们。<br>应用实例： 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。<br>优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。<br>缺点： 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。<br>使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。<br>注意事项： 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</p>
<h4 id="实现-19"><a href="#实现-19" class="headerlink" title="实现"></a>实现</h4><p>观察者模式使用三个类 Subject、Observer 和 Client。Subject 对象带有绑定观察者到 Client 对象和从 Client 对象解绑观察者的方法。我们创建 Subject 类、Observer 抽象类和扩展了抽象类 Observer 的实体类。<br>ObserverPatternDemo，我们的演示类使用 Subject 和实体类对象来演示观察者模式。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。<br>在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。</p>
<h4 id="介绍-19"><a href="#介绍-19" class="headerlink" title="介绍"></a>介绍</h4><p>意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。<br>主要解决：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。<br>何时使用：代码中包含大量与对象状态有关的条件语句。<br>如何解决：将各种具体的状态类抽象出来。<br>关键代码：通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if…else 等条件选择语句。<br>应用实例： 1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态。 2、曾侯乙编钟中，’钟是抽象接口’,’钟A’等是具体状态，’曾侯乙编钟’是具体环境（Context）。<br>优点： 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。<br>缺点： 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。<br>使用场景： 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。<br>注意事项：在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。</p>
<h4 id="实现-20"><a href="#实现-20" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个 State 接口和实现了 State 接口的实体状态类。Context 是一个带有某个状态的类。<br>StatePatternDemo，我们的演示类使用 Context 和状态对象来演示 Context 在状态改变时的行为变化。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/state_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="空对象模式"><a href="#空对象模式" class="headerlink" title="空对象模式"></a>空对象模式</h3><p>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。<br>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。</p>
<h4 id="实现-21"><a href="#实现-21" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个定义操作（在这里，是客户的名称）的 AbstractCustomer 抽象类，和扩展了 AbstractCustomer 类的实体类。工厂类 CustomerFactory 基于客户传递的名字来返回 RealCustomer 或 NullCustomer 对象。<br>NullPatternDemo，我们的演示类使用 CustomerFactory 来演示空对象模式的用法。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/null_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。<br>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p>
<h4 id="介绍-20"><a href="#介绍-20" class="headerlink" title="介绍"></a>介绍</h4><p>意图：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。<br>主要解决：在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。<br>何时使用：一个系统有许多许多类，而区分它们的只是他们直接的行为。<br>如何解决：将这些算法封装成一个一个的类，任意地替换。<br>关键代码：实现同一个接口。<br>应用实例： 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。<br>优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。<br>缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。<br>使用场景： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。<br>注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p>
<h4 id="实现-22"><a href="#实现-22" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个定义活动的 Strategy 接口和实现了 Strategy 接口的实体策略类。Context 是一个使用了某种策略的类。<br>StrategyPatternDemo，我们的演示类使用 Context 和策略对象来演示 Context 在它所配置或使用的策略改变时的行为变化。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p>
<h4 id="介绍-21"><a href="#介绍-21" class="headerlink" title="介绍"></a>介绍</h4><p>意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<br>主要解决：一些方法通用，却在每一个子类都重新写了这一方法。<br>何时使用：有一些通用的方法。<br>如何解决：将这些通用算法抽象出来。<br>关键代码：在抽象类实现，其他步骤在子类实现。<br>应用实例： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、Spirng 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。<br>优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。<br>缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。<br>使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。<br>注意事项：为防止恶意操作，一般模板方法都加上 final 关键词。</p>
<h4 id="实现-23"><a href="#实现-23" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个定义操作的 Game 抽象类，其中，模板方法设置为 final，这样它就不会被重写。Cricket 和 Football 是扩展了 Game 的实体类，它们重写了抽象类的方法。<br>TemplatePatternDemo，我们的演示类使用 Game 来演示模板模式的用法。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p>
<h4 id="介绍-22"><a href="#介绍-22" class="headerlink" title="介绍"></a>介绍</h4><p>意图：主要将数据结构与数据操作分离。<br>主要解决：稳定的数据结构和易变的操作耦合问题。<br>何时使用：需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，使用访问者模式将这些封装到类中。<br>如何解决：在被访问的类里面加一个对外提供接待访问者的接口。<br>关键代码：在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。<br>应用实例：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。<br>优点： 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。<br>缺点： 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。<br>使用场景： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。<br>注意事项：访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。</p>
<h4 id="实现-24"><a href="#实现-24" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个定义接受操作的 ComputerPart 接口。Keyboard、Mouse、Monitor 和 Computer 是实现了 ComputerPart 接口的实体类。我们将定义另一个接口 ComputerPartVisitor，它定义了访问者类的操作。Computer 使用实体访问者来执行相应的动作。<br>VisitorPatternDemo，我们的演示类使用 Computer、ComputerPartVisitor 类来演示访问者模式的用法。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/visitor_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="MVC-架构模式"><a href="#MVC-架构模式" class="headerlink" title="MVC 架构模式"></a>MVC 架构模式</h3><p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。<br>Model（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。<br>View（视图） - 视图代表模型包含的数据的可视化。<br>Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</p>
<h4 id="实现-25"><a href="#实现-25" class="headerlink" title="实现"></a>实现</h4><p>我们将创建一个作为模型的 Student 对象。StudentView 是一个把学生详细信息输出到控制台的视图类，StudentController 是负责存储数据到 Student 对象中的控制器类，并相应地更新视图 StudentView。<br>MVCPatternDemo，我们的演示类使用 StudentController 来演示 MVC 模式的用法。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/mvc_pattern_uml_diagram.jpg" alt=""></p>
<h3 id="设计模式之间的关系"><a href="#设计模式之间的关系" class="headerlink" title="设计模式之间的关系"></a>设计模式之间的关系</h3><p><img src="http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg" alt=""></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://design-patterns.readthedocs.org/zh_CN/latest/index.html" target="_blank" rel="noopener">http://design-patterns.readthedocs.org/zh_CN/latest/index.html</a></li>
<li><a href="http://www.runoob.com/design-pattern/design-pattern-intro.html" target="_blank" rel="noopener">http://www.runoob.com/design-pattern/design-pattern-intro.html</a></li>
<li><a href="https://zh.wikipedia.org/wiki/设计模式_(计算机)" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/设计模式_(计算机)</a></li>
<li><a href="http://willtea.iteye.com/blog/1704806" target="_blank" rel="noopener">http://willtea.iteye.com/blog/1704806</a></li>
<li><a href="https://github.com/huang303513/Design-Pattern-For-iOS" target="_blank" rel="noopener">Design Pattern For iOS Objective-C代码</a></li>
<li><a href="https://github.com/ochococo/Design-Patterns-In-Swift" target="_blank" rel="noopener">Design Patterns In Swift 代码</a></li>
</ol>
]]></content>
      <categories>
        <category>软件设计</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>Design Pattern</tag>
        <tag>SOLID</tag>
      </tags>
  </entry>
  <entry>
    <title>WebKit的iOS 14 适配问题</title>
    <url>/2021/05/16/WebKit-iOS-14-adaptation-issues/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在做 iOS 14 的 WebKit API 适配遇到一些问题记录下。</p>
<h3 id="Fatal-error-Bug-in-WebKit-Received-neither-result-or-failure-file-WebKit-WebKitSwiftOverlay-swift-line-66"><a href="#Fatal-error-Bug-in-WebKit-Received-neither-result-or-failure-file-WebKit-WebKitSwiftOverlay-swift-line-66" class="headerlink" title="Fatal error: Bug in WebKit: Received neither result or failure.: file WebKit/WebKitSwiftOverlay.swift, line 66"></a>Fatal error: Bug in WebKit: Received neither result or failure.: file WebKit/WebKitSwiftOverlay.swift, line 66</h3><h4 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">webView.evaluateJavaScript(<span class="string">"console.log('Hello World')"</span>, <span class="keyword">in</span>: <span class="literal">nil</span>, <span class="keyword">in</span>: .page) &#123; result <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 iOS 14.0 的版本中执行以上的代码会产生crash  <code>Fatal error: Bug in WebKit: Received neither result or failure.: file WebKit/WebKitSwiftOverlay.swift, line 66</code> ，但是在最新版 14.5 不会崩溃。</p>
<h4 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h4><p>在 WebKit 官方代码<a href="https://github.com/WebKit/WebKit/blob/debe8769281c735813e0e731a926773642d921e0/Source/WebKit/UIProcess/API/Cocoa/WebKitSwiftOverlay.swift#L66" target="_blank" rel="noopener">WebKit/WebKit</a> 中找到了这段产生crash的代码。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeResultHandler</span>&lt;Success, Failure&gt;<span class="params">(<span class="number">_</span> handler: @escaping <span class="params">(Result&lt;Success, Failure&gt;)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; (<span class="type">Success?</span>, <span class="type">Failure?</span>) -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; success, failure <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> success = success &#123;</span><br><span class="line">            handler(.success(success))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> failure = failure &#123;</span><br><span class="line">            handler(.failure(failure))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"Bug in WebKit: Received neither result or failure."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看源码可知，当 JavaScript 执行没有返回值，也没有错误的时候就会产生fatalError，比如执行<code>console.log(&#39;Hello World&#39;)</code>。</p>
<p>但是在 WebKit 的 main 分支最新代码中已经没有这段代码了，取而代之的是使用 <code>ObjCBlockConversion.boxingNilAsAnyForCompatibility</code>。</p>
<p>为了找到是在哪次commit中修复了这个问题，通过查询<code>WebKitSwiftOverlay.swift</code>文件的git修改记录，找到有这么一次commit，里面记录了这个crash修复的过程，有兴趣的可以去看看。</p>
<p><a href="https://github.com/WebKit/WebKit/commit/534def4b8414c5ca1bf3712272ad24eaf271b134#diff-93ac6a04946f8372bfaec900fdcab57ef95932e9f30f45e7115a9ea807b82e6c" target="_blank" rel="noopener">https://github.com/WebKit/WebKit/commit/534def4b8414c5ca1bf3712272ad24eaf271b134#diff-93ac6a04946f8372bfaec900fdcab57ef95932e9f30f45e7115a9ea807b82e6c</a></p>
<p>问题已经找到，那就需要确定是在哪个版本的 iOS 中修复了这个问题。</p>
<p>首先需要找到 iOS 版本对应的 WebKit 版本。</p>
<p>在 Wikipedia 上有维护 <a href="https://en.wikipedia.org/wiki/Safari_version_history" target="_blank" rel="noopener">Safari version history</a> Safiri 版本和对应的 WebKit 版本，但是遗憾的是最新版本的 iOS 14 还没有该记录。</p>
<p>那接下来如何找到 WebKit 版本呢？</p>
<p>需要分为两部分，首先先确定Xcode里集成的 iOS 编译库，再确定老版本的 iOS，老版本的iOS可以从Xcode 的 Components 下载对应版本的Simulator。</p>
<p>以 Xcode 12.5 为例。在 <code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/</code> 路径下找到 <code>iOS.simruntime</code>，再找到 WebKit <code>Contents/Resources/RuntimeRoot/System/Library/Frameworks/WebKit.framework/WebKit</code>。</p>
<p>完整路径为：<code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/WebKit.framework</code>。</p>
<p>通过 <code>otool -L</code> 命令找到对应的WebKit 版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> otool -L WebKit | grep WebKit                                      [23:42:54]</span></span><br><span class="line">WebKit:</span><br><span class="line">	/System/Library/Frameworks/WebKit.framework/WebKit (compatibility version 1.0.0, current version 611.1.21)</span><br><span class="line">	/System/Library/PrivateFrameworks/WebKitLegacy.framework/WebKitLegacy (compatibility version 1.0.0, current version 611.1.21, reexport)</span><br></pre></td></tr></table></figure>
<p>其中 611.1.21 就是对应的 WebKit 的版本。</p>
<p>Xcode 通过 Components 下载的 Simulator 版本路径在 <code>/Library/Developer/CoreSimulator/Profiles/Runtimes</code> 下，用同样的方式确定 iOS 版本的 WebKit 版本。</p>
<table>
<thead>
<tr>
<th>iOS 版本</th>
<th>WebKit 版本</th>
</tr>
</thead>
<tbody><tr>
<td>iOS 14.5</td>
<td>611.1.21</td>
</tr>
<tr>
<td>iOS 14.4</td>
<td>610.4.3</td>
</tr>
<tr>
<td>iOS 14.3</td>
<td>610.3.7</td>
</tr>
<tr>
<td>iOS 14.2</td>
<td>610.2.11</td>
</tr>
</tbody></table>
<p>最后在 <a href="https://github.com/WebKit/WebKit/blob/safari-610.2.11.0-branch/Source/WebKit/UIProcess/API/Cocoa/WebKitSwiftOverlay.swift" target="_blank" rel="noopener">WebKit/Webkit</a> 上确认对应的修复版本，最终确认修复的版本为 iOS 14.3。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>对 <code>evaluateJavaScript</code> 方法做兼容，不能直接使用 <code>#available(iOS 14.0, *)</code> 适配。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">14.3</span>, *) &#123;</span><br><span class="line">    webView.evaluateJavaScript(<span class="string">"console.log('Hello World')"</span>, <span class="keyword">in</span>: <span class="literal">nil</span>, <span class="keyword">in</span>: .page) &#123; result <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    webView.evaluateJavaScript(<span class="string">"console.log('Hello World')"</span>) &#123; value, error <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>WebKit</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>missing compatible arch in ffi_c.bundle on M1 with system Ruby</title>
    <url>/2021/06/17/missing-arch-in-ffi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>解决 Apple Silicon (M1) 上 <code>LoadError - dlsym(0x7fbb17932d30, Init_ffi_c): symbol not found - /Library/Ruby/Gems/2.6.0/gems/ffi-1.15.3/lib/ffi_c.bundle</code> 问题。</p>
<p>首先通过 <code>file /Library/Ruby/Gems/2.6.0/gems/ffi-1.15.3/lib/ffi_c.bundle</code> 查看这个文件的架构：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">/Library/Ruby/Gems/<span class="number">2.6</span>.<span class="number">0</span>/gems/ffi-<span class="number">1.15</span>.<span class="number">3</span>/<span class="class"><span class="keyword">lib</span>/<span class="title">ffi_c</span>.<span class="title">bundle</span>: <span class="title">Mach</span>-<span class="title">O</span> <span class="title">universal</span> <span class="title">binary</span> <span class="title">with</span> 2 <span class="title">architectures</span>: [<span class="title">x86_64</span>:<span class="title">Mach</span>-<span class="title">O</span> 64-<span class="title">bit</span> <span class="title">bundle</span> <span class="title">x86_64</span>] [<span class="title">arm64e</span>:<span class="title">Mach</span>-<span class="title">O</span> 64-<span class="title">bit</span> <span class="title">bundle</span> <span class="title">arm64e</span>]</span></span><br><span class="line">/Library/Ruby/Gems/<span class="number">2.6</span>.<span class="number">0</span>/gems/ffi-<span class="number">1.15</span>.<span class="number">3</span>/<span class="class"><span class="keyword">lib</span>/<span class="title">ffi_c</span>.<span class="title">bundle</span> (<span class="title">for</span> <span class="title">architecture</span> <span class="title">x86_64</span>):	<span class="title">Mach</span>-<span class="title">O</span> 64-<span class="title">bit</span> <span class="title">bundle</span> <span class="title">x86_64</span></span></span><br><span class="line">/Library/Ruby/Gems/<span class="number">2.6</span>.<span class="number">0</span>/gems/ffi-<span class="number">1.15</span>.<span class="number">3</span>/<span class="class"><span class="keyword">lib</span>/<span class="title">ffi_c</span>.<span class="title">bundle</span> (<span class="title">for</span> <span class="title">architecture</span> <span class="title">arm64e</span>):	<span class="title">Mach</span>-<span class="title">O</span> 64-<span class="title">bit</span> <span class="title">bundle</span> <span class="title">arm64e</span></span></span><br></pre></td></tr></table></figure>

<p>上面的信息有x86_64和arm64e，虽然包含了arm64e，但是此arm64e不是M1 对应的arm64。也就是说架构是不对的。</p>
<p>那我们接着往下看，先查询下系统ruby的版本 <code>ruby --version</code>。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ruby <span class="number">2.6</span><span class="number">.3</span>p62 (<span class="number">2019</span><span class="number">-04</span><span class="number">-16</span> revision <span class="number">67580</span>) [universal.arm64e-darwin20]</span><br></pre></td></tr></table></figure>

<p>版本和时间都有，2019-04-16 的版本，但是 M1 是 2020 年出来的，不一定适配了新的架构。</p>
<p>那我们就必须得确认当前ruby的真实架构。我们可以通过一段代码获取 <code>arch.rb</code>：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'rbconfig'</span></span><br><span class="line"></span><br><span class="line">OSVERSION = RbConfig::CONFIG[<span class="string">'host_os'</span>]</span><br><span class="line">CPU = RbConfig::CONFIG[<span class="string">'host_cpu'</span>]</span><br><span class="line">ARCH = RbConfig::CONFIG[<span class="string">'arch'</span>]</span><br><span class="line"></span><br><span class="line">puts <span class="string">"OS: <span class="subst">#&#123;OSVERSION&#125;</span>"</span></span><br><span class="line">puts <span class="string">"CPU: <span class="subst">#&#123;CPU&#125;</span>"</span></span><br><span class="line">puts <span class="string">"Arch: <span class="subst">#&#123;ARCH&#125;</span>"</span></span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出结果：</span></span><br></pre></td></tr></table></figure>
<p>OS: darwin20<br>CPU: x86_64<br>Arch: universal-darwin20</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">诡异的一幕出现了，CPU架构却是x86_64而不是arm64，也就是说造成ffi无法运行的原因是ruby版本不支持 arm64。</span><br><span class="line"></span><br><span class="line">问题找到了那接下来这个问题就好解决了，安装最新的ruby版本。</span><br><span class="line"></span><br><span class="line">可以通过 `brew install ruby`，也可以通过 rbenv 或者 rvm 来安装。</span><br><span class="line"></span><br><span class="line">我使用 `brew install ruby` 来安装最新的版本。</span><br><span class="line"></span><br><span class="line">通过 brew 安装的 ruby 并不会生效，需要添加到环境变量中 `echo 'export PATH=<span class="string">"/opt/homebrew/opt/ruby/bin:$PATH"</span>' &gt;&gt; ~/.zshrc`。</span><br><span class="line"></span><br><span class="line">为了验证是否有效我们先测试下新版本的架构，先设置当前shell的环境变量 `export PATH=<span class="string">"/opt/homebrew/opt/ruby/bin:$PATH"</span>`。</span><br><span class="line"></span><br><span class="line">执行 `ruby --version`：</span><br></pre></td></tr></table></figure>
<p>ruby 3.0.1p64 (2021-04-05 revision 0fb782ee38) [arm64-darwin20]</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">执行 `ruby arch.rb`：</span><br></pre></td></tr></table></figure>
<p>OS: darwin20<br>CPU: arm64<br>Arch: arm64-darwin20</p>
<p>```</p>
<p>CPU 架构正确，继续安装 CocoaPods <code>gem install cocoapods</code>。</p>
<p>成功！！！</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>CocoaPods</tag>
        <tag>ruby</tag>
      </tags>
  </entry>
</search>
